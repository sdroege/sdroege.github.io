var searchIndex = {};
searchIndex["array_init"] = {"doc":"The `array-vec` crate allows you to initialize arrays with an initializer closure that will be called once for each element until the array is filled.","items":[[5,"array_init","array_init","Initialize an array given an initializer expression",null,{"inputs":[{"name":"f"}],"output":{"name":"array"}}],[5,"from_iter","","Initialize an array given an iterator",null,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[5,"array_init_copy","","Initialize an array of `Copy` elements given an initializer expression",null,{"inputs":[{"name":"f"}],"output":{"name":"array"}}],[5,"from_iter_copy","","Initialize an array given an iterator",null,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[8,"IsArray","","Trait for things which are actually arrays",null,null],[16,"Item","","",0,null],[10,"set","","Must assume self is uninitialized.",0,null],[10,"len","","",0,{"inputs":[],"output":{"name":"usize"}}]],"paths":[[8,"IsArray"]]};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator useful for sets of C-style bitmask flags. It can be used for creating typesafe wrappers around C APIs.","items":[[0,"example_generated","bitflags","This module shows an example of code generated by the macro. IT MUST NOT BE USED OUTSIDE THIS CRATE.",null,null],[3,"Flags","bitflags::example_generated","This is the same `Flags` struct defined in the crate level example. Note that this struct is just for documentation purposes only, it must not be used outside this crate.",null,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"ordering"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"FLAG_A","","",0,null],[18,"FLAG_B","","",0,null],[18,"FLAG_C","","",0,null],[18,"FLAG_ABC","","",0,null],[11,"empty","","Returns an empty set of flags.",0,{"inputs":[],"output":{"name":"flags"}}],[11,"all","","Returns the set containing all flags.",0,{"inputs":[],"output":{"name":"flags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",0,{"inputs":[{"name":"u32"}],"output":{"generics":["flags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",0,{"inputs":[{"name":"u32"}],"output":{"name":"flags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",0,{"inputs":[{"name":"self"},{"name":"flags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitor_assign","","Adds the set of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitxor_assign","","Toggles the set of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",0,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"extend","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",0,{"inputs":[{"name":"t"}],"output":{"name":"flags"}}],[14,"bitflags","bitflags","The macro used to generate the flag structure.",null,null]],"paths":[[3,"Flags"]]};
searchIndex["futures"] = {"doc":"Zero-cost Futures in Rust","items":[[4,"Async","futures","Return type of future, indicating whether a value is ready or not.",null,null],[13,"Ready","","Represents that a value is immediately ready.",0,null],[13,"NotReady","","Represents that a value is not ready yet, but may be so later.",0,null],[4,"AsyncSink","","The result of an asynchronous attempt to send a value to a sink.",null,null],[13,"Ready","","The `start_send` attempt succeeded, so the sending process has started; you must use `Sink::poll_complete` to drive the send to completion.",1,null],[13,"NotReady","","The `start_send` attempt failed due to the sink being full. The value being sent is returned, and the current `Task` will be automatically notified again once the sink has room.",1,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"async"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"async"}],"output":{"name":"bool"}}],[11,"map","","Change the success value of this `Async` with the closure provided",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"async"}}],[11,"is_ready","","Returns whether this is `Async::Ready`",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_not_ready","","Returns whether this is `Async::NotReady`",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"async"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"asyncsink"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"asyncsink"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"asyncsink"}],"output":{"name":"bool"}}],[11,"map","","Change the NotReady value of this `AsyncSink` with the closure provided",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"asyncsink"}}],[11,"is_ready","","Returns whether this is `AsyncSink::Ready`",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_not_ready","","Returns whether this is `AsyncSink::NotReady`",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"future","","Futures",null,null],[3,"Empty","futures::future","A future which is never resolved.",null,null],[3,"Lazy","","A future which defers creation of the actual future until a callback is scheduled.",null,null],[3,"PollFn","","A future which adapts a function returning `Poll`.",null,null],[3,"FutureResult","","A future representing a value that is immediately ready.",null,null],[3,"LoopFn","","A future implementing a tail-recursive loop.",null,null],[3,"AndThen","","Future for the `and_then` combinator, chaining a computation onto the end of another future which completes successfully.",null,null],[3,"Flatten","","Future for the `flatten` combinator, flattening a future-of-a-future to get just the result of the final future.",null,null],[3,"FlattenStream","","Future for the `flatten_stream` combinator, flattening a future-of-a-stream to get just the result of the final stream as a stream.",null,null],[3,"Fuse","","A future which \"fuses\" a future once it's been resolved.",null,null],[3,"IntoStream","","Future that forwards one element from the underlying future (whether it is success of error) and emits EOF after that.",null,null],[3,"Join","","Future for the `join` combinator, waiting for two futures to complete.",null,null],[3,"Join3","","Future for the `join3` combinator, waiting for three futures to complete.",null,null],[3,"Join4","","Future for the `join4` combinator, waiting for four futures to complete.",null,null],[3,"Join5","","Future for the `join5` combinator, waiting for five futures to complete.",null,null],[3,"Map","","Future for the `map` combinator, changing the type of a future.",null,null],[3,"MapErr","","Future for the `map_err` combinator, changing the error type of a future.",null,null],[3,"FromErr","","Future for the `from_err` combinator, changing the error type of a future.",null,null],[3,"OrElse","","Future for the `or_else` combinator, chaining a computation onto the end of a future which fails with an error.",null,null],[3,"Select","","Future for the `select` combinator, waiting for one of two futures to complete.",null,null],[3,"SelectNext","","Future yielded as the second result in a `Select` future.",null,null],[3,"Select2","","Future for the `merge` combinator, waiting for one of two differently-typed futures to complete.",null,null],[3,"Then","","Future for the `then` combinator, chaining computations on the end of another future regardless of its outcome.",null,null],[3,"Inspect","","Do something with the item of a future, passing it on.",null,null],[3,"CatchUnwind","","Future for the `catch_unwind` combinator.",null,null],[3,"JoinAll","","A future which takes a list of futures and resolves with a vector of the completed values.",null,null],[3,"SelectAll","","Future for the `select_all` combinator, waiting for one of any of a list of futures to complete.",null,null],[3,"SelectOk","","Future for the `select_ok` combinator, waiting for one of any of a list of futures to successfully complete. Unlike `select_all`, this future ignores all but the last error, if there are any.",null,null],[3,"Shared","","A future that is cloneable and can be polled in multiple threads. Use `Future::shared()` method to convert any future into a `Shared` future.",null,null],[3,"SharedItem","","A wrapped item of the original future that is cloneable and implements Deref for ease of use.",null,null],[3,"SharedError","","A wrapped error of the original future that is cloneable and implements Deref for ease of use.",null,null],[3,"ExecuteError","","Errors returned from the `Spawn::spawn` function.",null,null],[4,"Loop","","The status of a `loop_fn` loop.",null,null],[13,"Break","","Indicates that the loop has completed with output `T`.",2,null],[13,"Continue","","Indicates that the loop function should be called again with input state `S`.",2,null],[4,"Either","","Combines two different futures yielding the same item and error types into a single type.",null,null],[13,"A","","First branch of the type",3,null],[13,"B","","Second branch of the type",3,null],[4,"ExecuteErrorKind","","Kinds of errors that can be returned from the `Execute::spawn` function.",null,null],[13,"Shutdown","","This executor has shut down and will no longer accept new futures to spawn.",4,null],[13,"NoCapacity","","This executor has no more capacity to run more futures. Other futures need to finish before this executor can accept another.",4,null],[5,"empty","","Creates a future which never resolves, representing a computation that never finishes.",null,{"inputs":[],"output":{"name":"empty"}}],[5,"lazy","","Creates a new future which will eventually be the same as the one created by the closure provided.",null,{"inputs":[{"name":"f"}],"output":{"name":"lazy"}}],[5,"poll_fn","","Creates a new future wrapping around a function returning `Poll`.",null,{"inputs":[{"name":"f"}],"output":{"name":"pollfn"}}],[5,"result","","Creates a new \"leaf future\" which will resolve with the given result.",null,{"inputs":[{"name":"result"}],"output":{"name":"futureresult"}}],[5,"ok","","Creates a \"leaf future\" from an immediate value of a finished and successful computation.",null,{"inputs":[{"name":"t"}],"output":{"name":"futureresult"}}],[5,"err","","Creates a \"leaf future\" from an immediate value of a failed computation.",null,{"inputs":[{"name":"e"}],"output":{"name":"futureresult"}}],[5,"loop_fn","","Creates a new future implementing a tail-recursive loop.",null,{"inputs":[{"name":"s"},{"name":"f"}],"output":{"name":"loopfn"}}],[5,"join_all","","Creates a future which represents a collection of the results of the futures given.",null,{"inputs":[{"name":"i"}],"output":{"name":"joinall"}}],[5,"select_all","","Creates a new future which will select over a list of futures.",null,{"inputs":[{"name":"i"}],"output":{"name":"selectall"}}],[5,"select_ok","","Creates a new future which will select the first successful future over a list of futures.",null,{"inputs":[{"name":"i"}],"output":{"name":"selectok"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",5,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",6,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",7,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"futureresult"}}],[11,"poll","","",8,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",9,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",10,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",11,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",13,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",14,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",15,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",16,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",17,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",18,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",19,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",20,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",21,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",22,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",23,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",24,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",25,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",26,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"split","","Splits out the homogeneous type from an either of tuples.",3,null],[11,"poll","","",3,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",27,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",28,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",29,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",30,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",31,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"peek","","If any clone of this `Shared` has completed execution, returns its result immediately without blocking. Otherwise, returns None without triggering the work represented by this `Shared`.",32,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"poll","","",32,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drop","","",32,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"shareditem"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",33,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"sharederror"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",34,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[8,"Future","","Trait for types which are a placeholder of a value that may become available at some later point in time.",null,null],[16,"Item","","The type of value that this future will resolved with if it is successful.",35,null],[16,"Error","","The type of error that this future will resolve with if it fails in a normal fashion.",35,null],[10,"poll","","Query this future to see if its value has become available, registering interest if it is not.",35,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"wait","","Block the current thread until this future is resolved.",35,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"map","","Map this future's result to a different type, returning a new future of the resulting type.",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"map_err","","Map this future's error to a different error, returning a new future.",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"maperr"}}],[11,"from_err","","Map this future's error to any error implementing `From` for this future's `Error`, returning a new future.",35,{"inputs":[{"name":"self"}],"output":{"name":"fromerr"}}],[11,"then","","Chain on a computation for when a future finished, passing the result of the future to the provided closure `f`.",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"then"}}],[11,"and_then","","Execute another future after this one has resolved successfully.",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"andthen"}}],[11,"or_else","","Execute another future if this one resolves with an error.",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"orelse"}}],[11,"select","","Waits for either one of two futures to complete.",35,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"select"}}],[11,"select2","","Waits for either one of two differently-typed futures to complete.",35,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"select2"}}],[11,"join","","Joins the result of two futures, waiting for them both to complete.",35,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"join"}}],[11,"join3","","Same as `join`, but with more futures.",35,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"}],"output":{"name":"join3"}}],[11,"join4","","Same as `join`, but with more futures.",35,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"},{"name":"d"}],"output":{"name":"join4"}}],[11,"join5","","Same as `join`, but with more futures.",35,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"},{"name":"d"},{"name":"e"}],"output":{"name":"join5"}}],[11,"into_stream","","Convert this future into a single element stream.",35,{"inputs":[{"name":"self"}],"output":{"name":"intostream"}}],[11,"flatten","","Flatten the execution of this future when the successful result of this future is itself another future.",35,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"flatten_stream","","Flatten the execution of this future when the successful result of this future is a stream.",35,{"inputs":[{"name":"self"}],"output":{"name":"flattenstream"}}],[11,"fuse","","Fuse a future such that `poll` will never again be called once it has completed.",35,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"inspect","","Do something with the item of a future, passing it on.",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"catch_unwind","","Catches unwinding panics while polling the future.",35,{"inputs":[{"name":"self"}],"output":{"name":"catchunwind"}}],[11,"shared","","Create a cloneable handle to this future where all handles will resolve to the same result.",35,{"inputs":[{"name":"self"}],"output":{"name":"shared"}}],[8,"IntoFuture","","Class of types which can be converted into a future.",null,null],[16,"Future","","The future that this type can be converted into.",36,null],[16,"Item","","The item that the future may resolve with.",36,null],[16,"Error","","The error that the future may resolve with.",36,null],[10,"into_future","","Consumes this object and produces a future.",36,null],[8,"FutureFrom","","Asynchronous conversion from a type `T`.",null,null],[16,"Future","","The future for the conversion.",37,null],[16,"Error","","Possible errors during conversion.",37,null],[10,"future_from","","Consume the given value, beginning the conversion.",37,null],[8,"Executor","","A trait for types which can spawn fresh futures.",null,null],[10,"execute","","Spawns a future to run on this `Executor`, typically in the \"background\".",38,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["executeerror"],"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"executeerrorkind"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"executeerrorkind"}],"output":{"name":"bool"}}],[11,"new","","Create a new `ExecuteError`",39,{"inputs":[{"name":"executeerrorkind"},{"name":"f"}],"output":{"name":"executeerror"}}],[11,"kind","","Returns the associated reason for the error",39,{"inputs":[{"name":"self"}],"output":{"name":"executeerrorkind"}}],[11,"into_future","","Consumes self and returns the original future that was spawned.",39,{"inputs":[{"name":"self"}],"output":{"name":"f"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"stream","futures","Asynchronous streams",null,null],[3,"Iter","futures::stream","A stream which is just a shim over an underlying instance of `Iterator`.",null,null],[3,"IterStream","","A stream which is just a shim over an underlying instance of `Iterator`.",null,null],[3,"IterOk","","A stream which is just a shim over an underlying instance of `Iterator`.",null,null],[3,"IterResult","","A stream which is just a shim over an underlying instance of `Iterator`.",null,null],[3,"Repeat","","Stream that produces the same element repeatedly.",null,null],[3,"AndThen","","A stream combinator which chains a computation onto values produced by a stream.",null,null],[3,"Chain","","An adapter for chaining the output of two streams.",null,null],[3,"Concat","","A stream combinator to concatenate the results of a stream into the first yielded item.",null,null],[3,"Concat2","","A stream combinator to concatenate the results of a stream into the first yielded item.",null,null],[3,"Empty","","A stream which contains no elements.",null,null],[3,"Filter","","A stream combinator used to filter the results of a stream and only yield some values.",null,null],[3,"FilterMap","","A combinator used to filter the results of a stream and simultaneously map them to a different type.",null,null],[3,"Flatten","","A combinator used to flatten a stream-of-streams into one long stream of elements.",null,null],[3,"Fold","","A future used to collect all the results of a stream into one generic type.",null,null],[3,"ForEach","","A stream combinator which executes a unit closure over each item on a stream.",null,null],[3,"FromErr","","A stream combinator to change the error type of a stream.",null,null],[3,"Fuse","","A stream which \"fuse\"s a stream once it's terminated.",null,null],[3,"StreamFuture","","A combinator used to temporarily convert a stream into a future.",null,null],[3,"Inspect","","Do something with the items of a stream, passing it on.",null,null],[3,"Map","","A stream combinator which will change the type of a stream from one type to another.",null,null],[3,"MapErr","","A stream combinator which will change the error type of a stream from one type to another.",null,null],[3,"Merge","","An adapter for merging the output of two streams.",null,null],[3,"Once","","A stream which emits single element and then EOF.",null,null],[3,"OrElse","","A stream combinator which chains a computation onto errors produced by a stream.",null,null],[3,"Peekable","","A `Stream` that implements a `peek` method.",null,null],[3,"PollFn","","A stream which adapts a function returning `Poll`.",null,null],[3,"Select","","An adapter for merging the output of two streams.",null,null],[3,"Skip","","A stream combinator which skips a number of elements before continuing.",null,null],[3,"SkipWhile","","A stream combinator which skips elements of a stream while a predicate holds.",null,null],[3,"Take","","A stream combinator which returns a maximum number of elements.",null,null],[3,"TakeWhile","","A stream combinator which takes elements from a stream while a predicate holds.",null,null],[3,"Then","","A stream combinator which chains a computation onto each item produced by a stream.",null,null],[3,"Unfold","","A stream which creates futures, polls them and return their result",null,null],[3,"Zip","","An adapter for merging the output of two streams.",null,null],[3,"Forward","","Future for the `Stream::forward` combinator, which sends a stream of values to a sink and then waits until the sink has fully flushed those values.",null,null],[3,"Buffered","","An adaptor for a stream of futures to execute the futures concurrently, if possible.",null,null],[3,"BufferUnordered","","An adaptor for a stream of futures to execute the futures concurrently, if possible, delivering results as they become available.",null,null],[3,"CatchUnwind","","Stream for the `catch_unwind` combinator.",null,null],[3,"Chunks","","An adaptor that chunks up elements in a vector.",null,null],[3,"Collect","","A future which collects all of the values of a stream into a vector.",null,null],[3,"Wait","","A stream combinator which converts an asynchronous stream to a blocking iterator.",null,null],[3,"SplitStream","","A `Stream` part of the split pair",null,null],[3,"SplitSink","","A `Sink` part of the split pair",null,null],[3,"FuturesUnordered","","An unbounded set of futures.",null,null],[3,"FuturesOrdered","","An unbounded queue of futures.",null,null],[4,"MergedItem","","An item returned from a merge stream, which represents an item from one or both of the underlying streams.",null,null],[13,"First","","An item from the first stream",40,null],[13,"Second","","An item from the second stream",40,null],[13,"Both","","Items from both streams",40,null],[5,"iter","","Converts an `Iterator` over `Result`s into a `Stream` which is always ready to yield the next value.",null,{"inputs":[{"name":"j"}],"output":{"name":"iter"}}],[5,"iter_ok","","Converts an `Iterator` into a `Stream` which is always ready to yield the next value.",null,{"inputs":[{"name":"i"}],"output":{"name":"iterok"}}],[5,"iter_result","","Converts an `Iterator` over `Result`s into a `Stream` which is always ready to yield the next value.",null,{"inputs":[{"name":"j"}],"output":{"name":"iterresult"}}],[5,"repeat","","Create a stream which produces the same item repeatedly.",null,{"inputs":[{"name":"t"}],"output":{"name":"repeat"}}],[5,"empty","","Creates a stream which contains no elements.",null,{"inputs":[],"output":{"name":"empty"}}],[5,"once","","Creates a stream of single element",null,{"inputs":[{"name":"result"}],"output":{"name":"once"}}],[5,"poll_fn","","Creates a new stream wrapping around a function returning `Poll`.",null,{"inputs":[{"name":"f"}],"output":{"name":"pollfn"}}],[5,"unfold","","Creates a `Stream` from a seed and a closure returning a `Future`.",null,{"inputs":[{"name":"t"},{"name":"f"}],"output":{"name":"unfold"}}],[5,"futures_unordered","","Converts a list of futures into a `Stream` of results from the futures.",null,{"inputs":[{"name":"i"}],"output":{"name":"futuresunordered"}}],[5,"futures_ordered","","Converts a list of futures into a `Stream` of results from the futures.",null,{"inputs":[{"name":"i"}],"output":{"name":"futuresordered"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",41,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",42,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",43,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",44,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",45,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",45,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",45,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",45,null],[11,"poll_complete","","",45,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",45,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",45,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",46,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"fmtresult"}}],[11,"poll","","",47,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"fmtresult"}}],[11,"poll","","",48,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",49,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",50,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",50,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",50,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",50,null],[11,"poll_complete","","",50,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",50,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",50,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",51,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",51,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",51,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",51,null],[11,"poll_complete","","",51,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",51,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",51,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",52,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",52,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",52,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",52,null],[11,"poll_complete","","",52,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",52,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",52,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",53,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",54,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",55,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",55,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",55,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll","","",55,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"start_send","","",55,null],[11,"poll_complete","","",55,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",55,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"start_send","","",56,null],[11,"poll_complete","","",56,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",56,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",56,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"is_done","","Returns whether the underlying stream has finished or not.",56,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",56,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",56,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",56,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",57,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",58,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",58,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",58,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll","","",58,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",59,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",59,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",59,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",59,null],[11,"poll_complete","","",59,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",59,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",59,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",60,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",60,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",60,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",60,null],[11,"poll_complete","","",60,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",60,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",60,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",61,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",62,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"start_send","","",63,null],[11,"poll_complete","","",63,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",63,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",63,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"start_send","","",64,null],[11,"poll_complete","","",64,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",64,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",64,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"peek","","Peek retrieves a reference to the next item in the stream.",64,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",65,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",66,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",67,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",67,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",67,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",67,null],[11,"poll_complete","","",67,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",67,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",67,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",68,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",68,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",68,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",68,null],[11,"poll_complete","","",68,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",68,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",68,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",69,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",69,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",69,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",69,null],[11,"poll_complete","","",69,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",69,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",69,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",70,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",70,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",70,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",70,null],[11,"poll_complete","","",70,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",70,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",70,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"start_send","","",71,null],[11,"poll_complete","","",71,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",71,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",71,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",72,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",73,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",74,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",75,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",75,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",75,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",75,null],[11,"poll_complete","","",75,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",75,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",75,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",76,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",76,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",76,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll","","",76,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"start_send","","",76,null],[11,"poll_complete","","",76,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",76,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",77,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"start_send","","",78,null],[11,"poll_complete","","",78,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",78,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",78,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",78,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",78,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll","","",78,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",79,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"poll"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",80,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",80,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",80,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"next","","",80,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",81,{"inputs":[{"name":"self"},{"name":"splitsink"}],"output":{"generics":["reuniteerror"],"name":"result"}}],[11,"poll","","",81,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",82,{"inputs":[{"name":"self"},{"name":"splitstream"}],"output":{"generics":["reuniteerror"],"name":"result"}}],[11,"start_send","","",82,null],[11,"poll_complete","","",82,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",82,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"new","","Constructs a new, empty `FuturesUnordered`",83,{"inputs":[],"output":{"name":"futuresunordered"}}],[11,"len","","Returns the number of futures contained in the set.",83,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the set contains no futures",83,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","Push a future into the set.",83,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"poll","","",83,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",83,{"inputs":[{"name":"self"}],"output":null}],[11,"from_iter","","",83,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"new","","Constructs a new, empty `FuturesOrdered`",84,{"inputs":[],"output":{"name":"futuresordered"}}],[11,"len","","Returns the number of futures contained in the queue.",84,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the queue contains no futures",84,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","Push a future into the queue.",84,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"poll","","",84,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",84,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"Stream","","A stream of values, not all of which may have been produced yet.",null,null],[16,"Item","","The type of item this stream will yield on success.",85,null],[16,"Error","","The type of error this stream may generate.",85,null],[10,"poll","","Attempt to pull out the next value of this stream, returning `None` if the stream is finished.",85,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"wait","","Creates an iterator which blocks the current thread until each item of this stream is resolved.",85,{"inputs":[{"name":"self"}],"output":{"name":"wait"}}],[11,"into_future","","Converts this stream into a `Future`.",85,{"inputs":[{"name":"self"}],"output":{"name":"streamfuture"}}],[11,"map","","Converts a stream of type `T` to a stream of type `U`.",85,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"map_err","","Converts a stream of error type `T` to a stream of error type `U`.",85,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"maperr"}}],[11,"filter","","Filters the values produced by this stream according to the provided predicate.",85,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"filter"}}],[11,"filter_map","","Filters the values produced by this stream while simultaneously mapping them to a different type.",85,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"filtermap"}}],[11,"then","","Chain on a computation for when a value is ready, passing the resulting item to the provided closure `f`.",85,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"then"}}],[11,"and_then","","Chain on a computation for when a value is ready, passing the successful results to the provided closure `f`.",85,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"andthen"}}],[11,"or_else","","Chain on a computation for when an error happens, passing the erroneous result to the provided closure `f`.",85,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"orelse"}}],[11,"collect","","Collect all of the values of this stream into a vector, returning a future representing the result of that computation.",85,{"inputs":[{"name":"self"}],"output":{"name":"collect"}}],[11,"concat2","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",85,{"inputs":[{"name":"self"}],"output":{"name":"concat2"}}],[11,"concat","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",85,{"inputs":[{"name":"self"}],"output":{"name":"concat"}}],[11,"fold","","Execute an accumulating computation over a stream, collecting all the values into one final result.",85,{"inputs":[{"name":"self"},{"name":"t"},{"name":"f"}],"output":{"name":"fold"}}],[11,"flatten","","Flattens a stream of streams into just one continuous stream.",85,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"skip_while","","Skip elements on this stream while the predicate provided resolves to `true`.",85,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"skipwhile"}}],[11,"take_while","","Take elements from this stream while the predicate provided resolves to `true`.",85,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"takewhile"}}],[11,"for_each","","Runs this stream to completion, executing the provided closure for each element on the stream.",85,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"foreach"}}],[11,"from_err","","Map this stream's error to any error implementing `From` for this stream's `Error`, returning a new stream.",85,{"inputs":[{"name":"self"}],"output":{"name":"fromerr"}}],[11,"take","","Creates a new stream of at most `amt` items of the underlying stream.",85,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"take"}}],[11,"skip","","Creates a new stream which skips `amt` items of the underlying stream.",85,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"skip"}}],[11,"fuse","","Fuse a stream such that `poll` will never again be called once it has finished.",85,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"by_ref","","Borrows a stream, rather than consuming it.",85,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"catch_unwind","","Catches unwinding panics while polling the stream.",85,{"inputs":[{"name":"self"}],"output":{"name":"catchunwind"}}],[11,"buffered","","An adaptor for creating a buffered list of pending futures.",85,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"buffered"}}],[11,"buffer_unordered","","An adaptor for creating a buffered list of pending futures (unordered).",85,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bufferunordered"}}],[11,"merge","","An adapter for merging the output of two streams.",85,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"merge"}}],[11,"zip","","An adapter for zipping two streams together.",85,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"zip"}}],[11,"chain","","Adapter for chaining two stream.",85,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"chain"}}],[11,"peekable","","Creates a new stream which exposes a `peek` method.",85,{"inputs":[{"name":"self"}],"output":{"name":"peekable"}}],[11,"chunks","","An adaptor for chunking up items of the stream inside a vector.",85,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"chunks"}}],[11,"select","","Creates a stream that selects the next element from either this stream or the provided one, whichever is ready first.",85,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"select"}}],[11,"forward","","A future that completes after the given stream has been fully processed into the sink, including flushing.",85,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"forward"}}],[11,"split","","Splits this `Stream + Sink` object into separate `Stream` and `Sink` objects.",85,null],[11,"inspect","","Do something with each item of this stream, afterwards passing it on.",85,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspect"}}],[0,"sink","futures","Asynchronous sinks",null,null],[3,"Buffer","futures::sink","Sink for the `Sink::buffer` combinator, which buffers up to some fixed number of values when the underlying sink is unable to accept them.",null,null],[3,"Wait","","A sink combinator which converts an asynchronous sink to a blocking sink.",null,null],[3,"With","","Sink for the `Sink::with` combinator, chaining a computation to run prior to pushing a value into the underlying sink.",null,null],[3,"WithFlatMap","","Sink for the `Sink::with_flat_map` combinator, chaining a computation that returns an iterator to run prior to pushing a value into the underlying sink",null,null],[3,"Flush","","Future for the `Sink::flush` combinator, which polls the sink until all data has been flushed.",null,null],[3,"Send","","Future for the `Sink::send` combinator, which sends a value to a sink and then waits until the sink has fully flushed.",null,null],[3,"SendAll","","Future for the `Sink::send_all` combinator, which sends a stream of values to a sink and then waits until the sink has fully flushed those values.",null,null],[3,"SinkMapErr","","Sink for the `Sink::sink_map_err` combinator.",null,null],[3,"SinkFromErr","","A sink combinator to change the error type of a sink.",null,null],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",86,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"get_ref","","Get a shared reference to the inner sink.",86,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",86,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",86,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",86,null],[11,"poll_complete","","",86,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",86,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Get a shared reference to the inner sink.",87,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",87,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",87,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll","","",87,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"start_send","","",87,null],[11,"poll_complete","","",87,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",87,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Get a shared reference to the inner sink.",88,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",88,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll","","",88,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Get a shared reference to the inner sink.",89,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",89,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",89,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",89,null],[11,"poll_complete","","",89,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",89,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",89,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Get a shared reference to the inner sink.",90,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",90,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll","","",90,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",91,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Get a shared reference to the inner sink.",92,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",92,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",92,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",92,null],[11,"poll_complete","","",92,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",92,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",92,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Get a shared reference to the inner sink.",93,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",93,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",93,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll","","",93,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"start_send","","",93,null],[11,"poll_complete","","",93,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",93,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"send","","Sends a value to this sink, blocking the current thread until it's able to do so.",94,null],[11,"flush","","Flushes any buffered data in this sink, blocking the current thread until it's entirely flushed.",94,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"close","","Close this sink, blocking the current thread until it's entirely closed.",94,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[6,"BoxSink","","A type alias for `Box<Sink + Send>`",null,null],[8,"Sink","","A `Sink` is a value into which other values can be sent, asynchronously.",null,null],[16,"SinkItem","","The type of value that the sink accepts.",95,null],[16,"SinkError","","The type of value produced by the sink when an error occurs.",95,null],[10,"start_send","","Begin the process of sending a value to the sink.",95,null],[10,"poll_complete","","Flush all output from this sink, if necessary.",95,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","A method to indicate that no more values will ever be pushed into this sink.",95,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"wait","","Creates a new object which will produce a synchronous sink.",95,{"inputs":[{"name":"self"}],"output":{"name":"wait"}}],[11,"with","","Composes a function in front of the sink.",95,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"with"}}],[11,"with_flat_map","","Composes a function in front of the sink.",95,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"withflatmap"}}],[11,"sink_map_err","","Transforms the error returned by the sink.",95,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"sinkmaperr"}}],[11,"sink_from_err","","Map this sink's error to any error implementing `From` for this sink's `Error`, returning a new sink.",95,{"inputs":[{"name":"self"}],"output":{"name":"sinkfromerr"}}],[11,"buffer","","Adds a fixed-size buffer to the current sink.",95,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"buffer"}}],[11,"flush","","A future that completes when the sink has finished processing all pending requests.",95,{"inputs":[{"name":"self"}],"output":{"name":"flush"}}],[11,"send","","A future that completes after the given item has been fully processed into the sink, including flushing.",95,null],[11,"send_all","","A future that completes after the given stream has been fully processed into the sink, including flushing.",95,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"sendall"}}],[0,"task","futures","Tasks used to drive a future computation",null,null],[3,"Task","futures::task","A handle to a \"task\", which represents a single lightweight \"thread\" of execution driving a future to completion.",null,null],[3,"AtomicTask","","A synchronization primitive for task notification.",null,null],[3,"LocalKey","","A key for task-local data stored in a future's task.",null,null],[3,"UnparkEvent","","A set insertion to trigger upon `unpark`.",null,null],[5,"current","","Returns a handle to the current task to call `notify` at a later date.",null,{"inputs":[],"output":{"name":"task"}}],[5,"init","","Initialize the `futures` task system.",null,null],[5,"with_unpark_event","","For the duration of the given callback, add an \"unpark event\" to be triggered when the task handle is used to unpark the task.",null,{"inputs":[{"name":"unparkevent"},{"name":"f"}],"output":{"name":"r"}}],[8,"EventSet","","A concurrent set which allows for the insertion of `usize` values.",null,null],[10,"insert","","Insert the given ID into the set",96,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[0,"executor","futures","Executors",null,null],[3,"Run","futures::executor","Units of work submitted to an `Executor`, currently only created internally.",null,null],[3,"Spawn","","Representation of a spawned future/stream.",null,null],[3,"NotifyHandle","","A `NotifyHandle` is the core value through which notifications are routed in the `futures` crate.",null,null],[5,"spawn","","Spawns a new future, returning the fused future and task.",null,{"inputs":[{"name":"t"}],"output":{"name":"spawn"}}],[5,"with_notify","","Sets the `NotifyHandle` of the current task for the duration of the provided closure.",null,{"inputs":[{"name":"t"},{"name":"usize"},{"name":"f"}],"output":{"name":"r"}}],[8,"Unpark","","A trait which represents a sink of notifications that a future is ready to make progress.",null,null],[10,"unpark","","Indicates that an associated future and/or task are ready to make progress.",97,{"inputs":[{"name":"self"}],"output":null}],[8,"Executor","","A trait representing requests to poll futures.",null,null],[10,"execute","","Requests that `Run` is executed soon on the given executor.",98,{"inputs":[{"name":"self"},{"name":"run"}],"output":null}],[8,"Notify","","A trait which represents a sink of notifications that a future is ready to make progress.",null,null],[10,"notify","","Indicates that an associated future and/or task are ready to make progress.",99,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"clone_id","","This function is called whenever a new copy of `id` is needed.",99,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"drop_id","","All instances of `Task` store an `id` that they're going to internally notify with, and this function is called when the `Task` is dropped.",99,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[8,"UnsafeNotify","","An unsafe trait for implementing custom forms of memory management behind a `Task`.",null,null],[10,"clone_raw","","Creates a new `NotifyHandle` from this instance of `UnsafeNotify`.",100,{"inputs":[{"name":"self"}],"output":{"name":"notifyhandle"}}],[10,"drop_raw","","Drops this instance of `UnsafeNotify`, deallocating resources associated with it.",100,{"inputs":[{"name":"self"}],"output":null}],[0,"sync","futures","Future-aware synchronization",null,null],[3,"BiLock","futures::sync","A type of futures-powered synchronization primitive which is a mutex between two possible owners.",null,null],[3,"BiLockGuard","","Returned RAII guard from the `poll_lock` method.",null,null],[3,"BiLockAcquire","","Future returned by `BiLock::lock` which will resolve when the lock is acquired.",null,null],[3,"BiLockAcquired","","Resolved value of the `BiLockAcquire<T>` future.",null,null],[0,"oneshot","","A one-shot, futures-aware channel",null,null],[3,"Receiver","futures::sync::oneshot","A future representing the completion of a computation happening elsewhere in memory.",null,null],[3,"Sender","","Represents the completion half of a oneshot through which the result of a computation is signaled.",null,null],[3,"Canceled","","Error returned from a `Receiver<T>` whenever the corresponding `Sender<T>` is dropped.",null,null],[3,"SpawnHandle","","Handle returned from the `spawn` function.",null,null],[3,"Execute","","Type of future which `Execute` instances below must be able to spawn.",null,null],[5,"channel","","Creates a new futures-aware, one-shot channel.",null,null],[5,"spawn","","Spawns a `future` onto the instance of `Executor` provided, `executor`, returning a handle representing the completion of the future.",null,{"inputs":[{"name":"f"},{"name":"e"}],"output":{"name":"spawnhandle"}}],[5,"spawn_fn","","Spawns a function `f` onto the `Spawn` instance provided `s`.",null,{"inputs":[{"name":"f"},{"name":"e"}],"output":{"name":"spawnhandle"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"send","","Completes this oneshot with a successful result.",102,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"poll_cancel","","Polls this `Sender` half to detect whether the `Receiver` this has paired with has gone away.",102,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"is_canceled","","Tests to see whether this `Sender`'s corresponding `Receiver` has gone away.",102,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drop","","",102,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"canceled"}}],[11,"eq","","",103,{"inputs":[{"name":"self"},{"name":"canceled"}],"output":{"name":"bool"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",103,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"close","","Gracefully close this receiver, preventing sending any future messages.",101,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",101,{"inputs":[{"name":"self"}],"output":{"generics":["canceled"],"name":"poll"}}],[11,"drop","","",101,{"inputs":[{"name":"self"}],"output":null}],[11,"forget","","Drop this future without canceling the underlying future.",104,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",104,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",104,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",105,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",105,{"inputs":[{"name":"self"}],"output":null}],[0,"mpsc","futures::sync","A multi-producer, single-consumer, futures-aware, FIFO queue with back pressure.",null,null],[3,"Sender","futures::sync::mpsc","The transmission end of a channel which is used to send values.",null,null],[3,"UnboundedSender","","The transmission end of a channel which is used to send values.",null,null],[3,"Receiver","","The receiving end of a channel which implements the `Stream` trait.",null,null],[3,"UnboundedReceiver","","The receiving end of a channel which implements the `Stream` trait.",null,null],[3,"SendError","","Error type for sending, used when the receiving end of a channel is dropped",null,null],[3,"TrySendError","","Error type returned from `try_send`",null,null],[3,"SpawnHandle","","Handle returned from the `spawn` function.",null,null],[3,"Execute","","Type of future which `Executor` instances must be able to execute for `spawn`.",null,null],[5,"channel","","Creates an in-memory channel implementation of the `Stream` trait with bounded capacity.",null,null],[5,"unbounded","","Creates an in-memory channel implementation of the `Stream` trait with unbounded capacity.",null,null],[5,"spawn","","Spawns a `stream` onto the instance of `Executor` provided, `executor`, returning a handle representing the remote stream.",null,{"inputs":[{"name":"s"},{"name":"e"},{"name":"usize"}],"output":{"name":"spawnhandle"}}],[5,"spawn_unbounded","","Spawns a `stream` onto the instance of `Executor` provided, `executor`, returning a handle representing the remote stream, with unbounded buffering.",null,{"inputs":[{"name":"s"},{"name":"e"}],"output":{"name":"spawnhandle"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"senderror"}}],[11,"eq","","",110,{"inputs":[{"name":"self"},{"name":"senderror"}],"output":{"name":"bool"}}],[11,"ne","","",110,{"inputs":[{"name":"self"},{"name":"senderror"}],"output":{"name":"bool"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"trysenderror"}}],[11,"eq","","",111,{"inputs":[{"name":"self"},{"name":"trysenderror"}],"output":{"name":"bool"}}],[11,"ne","","",111,{"inputs":[{"name":"self"},{"name":"trysenderror"}],"output":{"name":"bool"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",110,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into_inner","","Returns the message that was attempted to be sent but failed.",110,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",111,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_full","","Returns true if this error is a result of the channel being full",111,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_disconnected","","Returns true if this error is a result of the receiver being dropped",111,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_inner","","Returns the message that was attempted to be sent but failed.",111,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"try_send","","Attempts to send a message on this `Sender<T>` without blocking.",106,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["trysenderror"],"name":"result"}}],[11,"poll_ready","","Polls the channel to determine if there is guaranteed to be capacity to send at least one item without waiting.",106,{"inputs":[{"name":"self"}],"output":{"generics":["senderror"],"name":"poll"}}],[11,"start_send","","",106,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["senderror"],"name":"startsend"}}],[11,"poll_complete","","",106,{"inputs":[{"name":"self"}],"output":{"generics":["senderror"],"name":"poll"}}],[11,"close","","",106,{"inputs":[{"name":"self"}],"output":{"generics":["senderror"],"name":"poll"}}],[11,"unbounded_send","","Sends the provided message along this channel.",107,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["senderror"],"name":"result"}}],[11,"start_send","","",107,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["senderror"],"name":"startsend"}}],[11,"poll_complete","","",107,{"inputs":[{"name":"self"}],"output":{"generics":["senderror"],"name":"poll"}}],[11,"close","","",107,{"inputs":[{"name":"self"}],"output":{"generics":["senderror"],"name":"poll"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"unboundedsender"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"sender"}}],[11,"drop","","",106,{"inputs":[{"name":"self"}],"output":null}],[11,"close","","Closes the receiving half",108,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",108,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"drop","","",108,{"inputs":[{"name":"self"}],"output":null}],[11,"close","","Closes the receiving half",109,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",109,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"poll","","",112,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",113,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","futures::sync","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `BiLock` protecting the provided data.",114,null],[11,"poll_lock","","Attempt to acquire this lock, returning `NotReady` if it can't be acquired.",114,{"inputs":[{"name":"self"}],"output":{"generics":["bilockguard"],"name":"async"}}],[11,"lock","","Perform a \"blocking lock\" of this lock, consuming this lock handle and returning a future to the acquired lock.",114,{"inputs":[{"name":"self"}],"output":{"name":"bilockacquire"}}],[11,"reunite","","Attempts to put the two \"halves\" of a `BiLock<T>` back together and recover the original value. Succeeds only if the two `BiLock<T>`s originated from the same call to `BiLock::new`.",114,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["reuniteerror"],"name":"result"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",115,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",115,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",115,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",116,{"inputs":[{"name":"self"}],"output":{"generics":["bilockacquired"],"name":"poll"}}],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"unlock","","Recovers the original `BiLock<T>`, unlocking this lock.",117,{"inputs":[{"name":"self"}],"output":{"name":"bilock"}}],[11,"deref","","",117,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",117,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",117,{"inputs":[{"name":"self"}],"output":null}],[0,"unsync","futures","Future-aware single-threaded synchronization",null,null],[0,"mpsc","futures::unsync","A multi-producer, single-consumer, futures-aware, FIFO queue with back pressure, for use communicating between tasks on the same thread.",null,null],[3,"Sender","futures::unsync::mpsc","The transmission end of a channel.",null,null],[3,"Receiver","","The receiving end of a channel which implements the `Stream` trait.",null,null],[3,"UnboundedSender","","The transmission end of an unbounded channel.",null,null],[3,"UnboundedReceiver","","The receiving end of an unbounded channel.",null,null],[3,"SendError","","Error type for sending, used when the receiving end of a channel is dropped",null,null],[3,"SpawnHandle","","Handle returned from the `spawn` function.",null,null],[3,"Execute","","Type of future which `Executor` instances must be able to execute for `spawn`.",null,null],[5,"channel","","Creates a bounded in-memory channel with buffered storage.",null,null],[5,"unbounded","","Creates an unbounded in-memory channel with buffered storage.",null,null],[5,"spawn","","Spawns a `stream` onto the instance of `Executor` provided, `executor`, returning a handle representing the remote stream.",null,{"inputs":[{"name":"s"},{"name":"e"},{"name":"usize"}],"output":{"name":"spawnhandle"}}],[5,"spawn_unbounded","","Spawns a `stream` onto the instance of `Executor` provided, `executor`, returning a handle representing the remote stream, with unbounded buffering.",null,{"inputs":[{"name":"s"},{"name":"e"}],"output":{"name":"spawnhandle"}}],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",118,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"start_send","","",118,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["senderror"],"name":"startsend"}}],[11,"poll_complete","","",118,{"inputs":[{"name":"self"}],"output":{"generics":["senderror"],"name":"poll"}}],[11,"close","","",118,{"inputs":[{"name":"self"}],"output":{"generics":["senderror"],"name":"poll"}}],[11,"drop","","",118,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"close","","Closes the receiving half",119,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",119,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"drop","","",119,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",120,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"start_send","","",120,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["senderror"],"name":"startsend"}}],[11,"poll_complete","","",120,{"inputs":[{"name":"self"}],"output":{"generics":["senderror"],"name":"poll"}}],[11,"close","","",120,{"inputs":[{"name":"self"}],"output":{"generics":["senderror"],"name":"poll"}}],[11,"unbounded_send","","Sends the provided message along this channel.",120,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["senderror"],"name":"result"}}],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"close","","Closes the receiving half",121,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",121,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",122,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into_inner","","Returns the message that was attempted to be sent but failed.",122,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"poll","","",123,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",123,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",124,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"oneshot","futures::unsync","A one-shot, futures-aware channel",null,null],[3,"Sender","futures::unsync::oneshot","Represents the completion half of a oneshot through which the result of a computation is signaled.",null,null],[3,"Receiver","","A future representing the completion of a computation happening elsewhere in memory.",null,null],[3,"SpawnHandle","","Handle returned from the `spawn` function.",null,null],[3,"Execute","","Type of future which `Spawn` instances below must be able to spawn.",null,null],[5,"channel","","Creates a new futures-aware, one-shot channel.",null,null],[5,"spawn","","Spawns a `future` onto the instance of `Executor` provided, `executor`, returning a handle representing the completion of the future.",null,{"inputs":[{"name":"f"},{"name":"e"}],"output":{"name":"spawnhandle"}}],[5,"spawn_fn","","Spawns a function `f` onto the `Spawn` instance provided `s`.",null,{"inputs":[{"name":"f"},{"name":"e"}],"output":{"name":"spawnhandle"}}],[11,"fmt","","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"send","","Completes this oneshot with a successful result.",125,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"poll_cancel","","Polls this `Sender` half to detect whether the `Receiver` this has paired with has gone away.",125,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"is_canceled","","Tests to see whether this `Sender`'s corresponding `Receiver` has gone away.",125,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drop","","",125,{"inputs":[{"name":"self"}],"output":null}],[11,"close","","Gracefully close this receiver, preventing sending any future messages.",126,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",126,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"drop","","",126,{"inputs":[{"name":"self"}],"output":null}],[11,"forget","","Drop this future without canceling the underlying future.",127,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",127,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",128,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"prelude","futures","A \"prelude\" for crates using the `futures` crate.",null,null],[6,"Poll","","Return type of the `Future::poll` method, indicates whether a future's value is ready or not.",null,null],[6,"StartSend","","Return type of the `Sink::start_send` method, indicating the outcome of a send attempt. See `AsyncSink` for more details.",null,null],[14,"try_ready","","A macro for extracting the successful type of a `Poll<T, E>`.",null,null],[14,"task_local","","A macro to create a `static` of type `LocalKey`",null,null],[11,"new","futures::task","Create an `AtomicTask` initialized with the given `Task`",129,{"inputs":[],"output":{"name":"atomictask"}}],[11,"register","","Registers the current task to be notified on calls to `notify`.",129,{"inputs":[{"name":"self"}],"output":null}],[11,"notify","","Notifies the task that last called `register`.",129,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",130,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with","","Access this task-local key, running the provided closure with a reference to the value.",130,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"poll_future","futures::executor","Polls the internal future, scheduling notifications to be sent to the `unpark` argument.",131,{"inputs":[{"name":"self"},{"generics":["unpark"],"name":"arc"}],"output":{"name":"poll"}}],[11,"wait_future","","Waits for the internal future to complete, blocking this thread's execution until it does.",131,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"execute","","A specialized function to request running a future to completion on the specified executor.",131,{"inputs":[{"name":"self"},{"generics":["executor"],"name":"arc"}],"output":null}],[11,"poll_stream","","Like `poll_future`, except polls the underlying stream.",131,{"inputs":[{"name":"self"},{"generics":["unpark"],"name":"arc"}],"output":{"generics":["option"],"name":"poll"}}],[11,"wait_stream","","Like `wait_future`, except only waits for the next element to arrive on the underlying stream.",131,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"start_send","","Invokes the underlying `start_send` method with this task in place.",131,null],[11,"poll_flush","","Invokes the underlying `poll_complete` method with this task in place.",131,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"poll"}}],[11,"wait_send","","Blocks the current thread until it's able to send `value` on this sink.",131,null],[11,"wait_flush","","Blocks the current thread until it's able to flush this sink.",131,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"wait_close","","Blocks the current thread until it's able to close this sink.",131,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"run","","Actually run the task (invoking `poll` on its future) on the current thread.",132,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","futures::task","",133,{"inputs":[{"name":"self"}],"output":{"name":"unparkevent"}}],[11,"new","","Construct an unpark event that will insert `id` into `set` when triggered.",133,{"inputs":[{"generics":["eventset"],"name":"arc"},{"name":"usize"}],"output":{"name":"unparkevent"}}],[11,"fmt","","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","futures::executor","",134,{"inputs":[{"name":"arc"}],"output":{"name":"notifyhandle"}}],[11,"clone_id","","This function is called whenever a new copy of `id` is needed.",99,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"drop_id","","All instances of `Task` store an `id` that they're going to internally notify with, and this function is called when the `Task` is dropped.",99,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"clone","futures::task","",135,{"inputs":[{"name":"self"}],"output":{"name":"task"}}],[11,"notify","","Indicate that the task should attempt to poll its future in a timely fashion.",135,{"inputs":[{"name":"self"}],"output":null}],[11,"is_current","","Returns `true` when called from within the context of the task.",135,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"will_notify_current","","This function is intended as a performance optimization for structures which store a `Task` internally.",135,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","futures::executor","Get a shared reference to the object the Spawn is wrapping.",131,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Get a mutable reference to the object the Spawn is wrapping.",131,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consume the Spawn, returning its inner object",131,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"poll_future_notify","","Polls the internal future, scheduling notifications to be sent to the `notify` argument.",131,{"inputs":[{"name":"self"},{"name":"n"},{"name":"usize"}],"output":{"name":"poll"}}],[11,"poll_stream_notify","","Like `poll_future_notify`, except polls the underlying stream.",131,{"inputs":[{"name":"self"},{"name":"n"},{"name":"usize"}],"output":{"generics":["option"],"name":"poll"}}],[11,"start_send_notify","","Invokes the underlying `start_send` method with this task in place.",131,null],[11,"poll_flush_notify","","Invokes the underlying `poll_complete` method with this task in place.",131,{"inputs":[{"name":"self"},{"name":"n"},{"name":"usize"}],"output":{"name":"poll"}}],[11,"close_notify","","Invokes the underlying `close` method with this task in place.",131,{"inputs":[{"name":"self"},{"name":"n"},{"name":"usize"}],"output":{"name":"poll"}}],[11,"fmt","","",131,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructs a new `NotifyHandle` directly.",134,null],[11,"notify","","Invokes the underlying instance of `Notify` with the provided `id`.",134,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"clone","","",134,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",134,{"inputs":[{"name":"self"}],"output":null}],[11,"from","","",134,{"inputs":[{"name":"t"}],"output":{"name":"notifyhandle"}}]],"paths":[[4,"Async"],[4,"AsyncSink"],[4,"Loop"],[4,"Either"],[4,"ExecuteErrorKind"],[3,"Empty"],[3,"Lazy"],[3,"PollFn"],[3,"FutureResult"],[3,"LoopFn"],[3,"AndThen"],[3,"Flatten"],[3,"FlattenStream"],[3,"Fuse"],[3,"IntoStream"],[3,"Join"],[3,"Join3"],[3,"Join4"],[3,"Join5"],[3,"Map"],[3,"MapErr"],[3,"FromErr"],[3,"OrElse"],[3,"Select"],[3,"SelectNext"],[3,"Select2"],[3,"Then"],[3,"Inspect"],[3,"CatchUnwind"],[3,"JoinAll"],[3,"SelectAll"],[3,"SelectOk"],[3,"Shared"],[3,"SharedItem"],[3,"SharedError"],[8,"Future"],[8,"IntoFuture"],[8,"FutureFrom"],[8,"Executor"],[3,"ExecuteError"],[4,"MergedItem"],[3,"Iter"],[3,"IterOk"],[3,"IterResult"],[3,"Repeat"],[3,"AndThen"],[3,"Chain"],[3,"Concat2"],[3,"Concat"],[3,"Empty"],[3,"Filter"],[3,"FilterMap"],[3,"Flatten"],[3,"Fold"],[3,"ForEach"],[3,"FromErr"],[3,"Fuse"],[3,"StreamFuture"],[3,"Inspect"],[3,"Map"],[3,"MapErr"],[3,"Merge"],[3,"Once"],[3,"OrElse"],[3,"Peekable"],[3,"PollFn"],[3,"Select"],[3,"Skip"],[3,"SkipWhile"],[3,"Take"],[3,"TakeWhile"],[3,"Then"],[3,"Unfold"],[3,"Zip"],[3,"Forward"],[3,"Buffered"],[3,"BufferUnordered"],[3,"CatchUnwind"],[3,"Chunks"],[3,"Collect"],[3,"Wait"],[3,"SplitStream"],[3,"SplitSink"],[3,"FuturesUnordered"],[3,"FuturesOrdered"],[8,"Stream"],[3,"With"],[3,"WithFlatMap"],[3,"Flush"],[3,"SinkFromErr"],[3,"Send"],[3,"SendAll"],[3,"SinkMapErr"],[3,"Buffer"],[3,"Wait"],[8,"Sink"],[8,"EventSet"],[8,"Unpark"],[8,"Executor"],[8,"Notify"],[8,"UnsafeNotify"],[3,"Receiver"],[3,"Sender"],[3,"Canceled"],[3,"SpawnHandle"],[3,"Execute"],[3,"Sender"],[3,"UnboundedSender"],[3,"Receiver"],[3,"UnboundedReceiver"],[3,"SendError"],[3,"TrySendError"],[3,"SpawnHandle"],[3,"Execute"],[3,"BiLock"],[3,"BiLockGuard"],[3,"BiLockAcquire"],[3,"BiLockAcquired"],[3,"Sender"],[3,"Receiver"],[3,"UnboundedSender"],[3,"UnboundedReceiver"],[3,"SendError"],[3,"SpawnHandle"],[3,"Execute"],[3,"Sender"],[3,"Receiver"],[3,"SpawnHandle"],[3,"Execute"],[3,"AtomicTask"],[3,"LocalKey"],[3,"Spawn"],[3,"Run"],[3,"UnparkEvent"],[3,"NotifyHandle"],[3,"Task"]]};
searchIndex["gio_sys"] = {"doc":"","items":[[3,"GAppInfoCreateFlags","gio_sys","",null,null],[3,"GApplicationFlags","","",null,null],[3,"GAskPasswordFlags","","",null,null],[3,"GBusNameOwnerFlags","","",null,null],[3,"GBusNameWatcherFlags","","",null,null],[3,"GConverterFlags","","",null,null],[3,"GDBusCallFlags","","",null,null],[3,"GDBusCapabilityFlags","","",null,null],[3,"GDBusConnectionFlags","","",null,null],[3,"GDBusInterfaceSkeletonFlags","","",null,null],[3,"GDBusMessageFlags","","",null,null],[3,"GDBusObjectManagerClientFlags","","",null,null],[3,"GDBusPropertyInfoFlags","","",null,null],[3,"GDBusProxyFlags","","",null,null],[3,"GDBusSendMessageFlags","","",null,null],[3,"GDBusServerFlags","","",null,null],[3,"GDBusSignalFlags","","",null,null],[3,"GDBusSubtreeFlags","","",null,null],[3,"GDriveStartFlags","","",null,null],[3,"GFileAttributeInfoFlags","","",null,null],[3,"GFileCopyFlags","","",null,null],[3,"GFileCreateFlags","","",null,null],[3,"GFileMeasureFlags","","",null,null],[3,"GFileMonitorFlags","","",null,null],[3,"GFileQueryInfoFlags","","",null,null],[3,"GIOStreamSpliceFlags","","",null,null],[3,"GMountMountFlags","","",null,null],[3,"GMountUnmountFlags","","",null,null],[3,"GOutputStreamSpliceFlags","","",null,null],[3,"GResourceFlags","","",null,null],[3,"GResourceLookupFlags","","",null,null],[3,"GSettingsBindFlags","","",null,null],[3,"GSocketMsgFlags","","",null,null],[3,"GSubprocessFlags","","",null,null],[3,"GTestDBusFlags","","",null,null],[3,"GTlsCertificateFlags","","",null,null],[3,"GTlsDatabaseVerifyFlags","","",null,null],[3,"GTlsPasswordFlags","","",null,null],[3,"GActionEntry","","",null,null],[12,"name","","",0,null],[12,"activate","","",0,null],[12,"parameter_type","","",0,null],[12,"state","","",0,null],[12,"change_state","","",0,null],[12,"padding","","",0,null],[3,"GActionGroupInterface","","",null,null],[12,"g_iface","","",1,null],[12,"has_action","","",1,null],[12,"list_actions","","",1,null],[12,"get_action_enabled","","",1,null],[12,"get_action_parameter_type","","",1,null],[12,"get_action_state_type","","",1,null],[12,"get_action_state_hint","","",1,null],[12,"get_action_state","","",1,null],[12,"change_action_state","","",1,null],[12,"activate_action","","",1,null],[12,"action_added","","",1,null],[12,"action_removed","","",1,null],[12,"action_enabled_changed","","",1,null],[12,"action_state_changed","","",1,null],[12,"query_action","","",1,null],[3,"GActionInterface","","",null,null],[12,"g_iface","","",2,null],[12,"get_name","","",2,null],[12,"get_parameter_type","","",2,null],[12,"get_state_type","","",2,null],[12,"get_state_hint","","",2,null],[12,"get_enabled","","",2,null],[12,"get_state","","",2,null],[12,"change_state","","",2,null],[12,"activate","","",2,null],[3,"GActionMapInterface","","",null,null],[12,"g_iface","","",3,null],[12,"lookup_action","","",3,null],[12,"add_action","","",3,null],[12,"remove_action","","",3,null],[3,"GAppInfoIface","","",null,null],[12,"g_iface","","",4,null],[12,"dup","","",4,null],[12,"equal","","",4,null],[12,"get_id","","",4,null],[12,"get_name","","",4,null],[12,"get_description","","",4,null],[12,"get_executable","","",4,null],[12,"get_icon","","",4,null],[12,"launch","","",4,null],[12,"supports_uris","","",4,null],[12,"supports_files","","",4,null],[12,"launch_uris","","",4,null],[12,"should_show","","",4,null],[12,"set_as_default_for_type","","",4,null],[12,"set_as_default_for_extension","","",4,null],[12,"add_supports_type","","",4,null],[12,"can_remove_supports_type","","",4,null],[12,"remove_supports_type","","",4,null],[12,"can_delete","","",4,null],[12,"do_delete","","",4,null],[12,"get_commandline","","",4,null],[12,"get_display_name","","",4,null],[12,"set_as_last_used_for_type","","",4,null],[12,"get_supported_types","","",4,null],[3,"GAppLaunchContextClass","","",null,null],[12,"parent_class","","",5,null],[12,"get_display","","",5,null],[12,"get_startup_notify_id","","",5,null],[12,"launch_failed","","",5,null],[12,"launched","","",5,null],[12,"_g_reserved1","","",5,null],[12,"_g_reserved2","","",5,null],[12,"_g_reserved3","","",5,null],[12,"_g_reserved4","","",5,null],[3,"GAppLaunchContextPrivate","","",null,null],[3,"GApplicationClass","","",null,null],[12,"parent_class","","",6,null],[12,"startup","","",6,null],[12,"activate","","",6,null],[12,"open","","",6,null],[12,"command_line","","",6,null],[12,"local_command_line","","",6,null],[12,"before_emit","","",6,null],[12,"after_emit","","",6,null],[12,"add_platform_data","","",6,null],[12,"quit_mainloop","","",6,null],[12,"run_mainloop","","",6,null],[12,"shutdown","","",6,null],[12,"dbus_register","","",6,null],[12,"dbus_unregister","","",6,null],[12,"handle_local_options","","",6,null],[12,"padding","","",6,null],[3,"GApplicationCommandLineClass","","",null,null],[12,"parent_class","","",7,null],[12,"print_literal","","",7,null],[12,"printerr_literal","","",7,null],[12,"get_stdin","","",7,null],[12,"padding","","",7,null],[3,"GApplicationCommandLinePrivate","","",null,null],[3,"GApplicationPrivate","","",null,null],[3,"GAsyncInitableIface","","",null,null],[12,"g_iface","","",8,null],[12,"init_async","","",8,null],[12,"init_finish","","",8,null],[3,"GAsyncResultIface","","",null,null],[12,"g_iface","","",9,null],[12,"get_user_data","","",9,null],[12,"get_source_object","","",9,null],[12,"is_tagged","","",9,null],[3,"GBufferedInputStreamClass","","",null,null],[12,"parent_class","","",10,null],[12,"fill","","",10,null],[12,"fill_async","","",10,null],[12,"fill_finish","","",10,null],[12,"_g_reserved1","","",10,null],[12,"_g_reserved2","","",10,null],[12,"_g_reserved3","","",10,null],[12,"_g_reserved4","","",10,null],[12,"_g_reserved5","","",10,null],[3,"GBufferedInputStreamPrivate","","",null,null],[3,"GBufferedOutputStreamClass","","",null,null],[12,"parent_class","","",11,null],[12,"_g_reserved1","","",11,null],[12,"_g_reserved2","","",11,null],[3,"GBufferedOutputStreamPrivate","","",null,null],[3,"GCancellableClass","","",null,null],[12,"parent_class","","",12,null],[12,"cancelled","","",12,null],[12,"_g_reserved1","","",12,null],[12,"_g_reserved2","","",12,null],[12,"_g_reserved3","","",12,null],[12,"_g_reserved4","","",12,null],[12,"_g_reserved5","","",12,null],[3,"GCancellablePrivate","","",null,null],[3,"GCharsetConverterClass","","",null,null],[12,"parent_class","","",13,null],[3,"GConverterIface","","",null,null],[12,"g_iface","","",14,null],[12,"convert","","",14,null],[12,"reset","","",14,null],[3,"GConverterInputStreamClass","","",null,null],[12,"parent_class","","",15,null],[12,"_g_reserved1","","",15,null],[12,"_g_reserved2","","",15,null],[12,"_g_reserved3","","",15,null],[12,"_g_reserved4","","",15,null],[12,"_g_reserved5","","",15,null],[3,"GConverterInputStreamPrivate","","",null,null],[3,"GConverterOutputStreamClass","","",null,null],[12,"parent_class","","",16,null],[12,"_g_reserved1","","",16,null],[12,"_g_reserved2","","",16,null],[12,"_g_reserved3","","",16,null],[12,"_g_reserved4","","",16,null],[12,"_g_reserved5","","",16,null],[3,"GConverterOutputStreamPrivate","","",null,null],[3,"GCredentialsClass","","",null,null],[3,"GDBusAnnotationInfo","","",null,null],[12,"ref_count","","",17,null],[12,"key","","",17,null],[12,"value","","",17,null],[12,"annotations","","",17,null],[3,"GDBusArgInfo","","",null,null],[12,"ref_count","","",18,null],[12,"name","","",18,null],[12,"signature","","",18,null],[12,"annotations","","",18,null],[3,"GDBusErrorEntry","","",null,null],[12,"error_code","","",19,null],[12,"dbus_error_name","","",19,null],[3,"GDBusInterfaceIface","","",null,null],[12,"parent_iface","","",20,null],[12,"get_info","","",20,null],[12,"get_object","","",20,null],[12,"set_object","","",20,null],[12,"dup_object","","",20,null],[3,"GDBusInterfaceInfo","","",null,null],[12,"ref_count","","",21,null],[12,"name","","",21,null],[12,"methods","","",21,null],[12,"signals","","",21,null],[12,"properties","","",21,null],[12,"annotations","","",21,null],[3,"GDBusInterfaceSkeletonClass","","",null,null],[12,"parent_class","","",22,null],[12,"get_info","","",22,null],[12,"get_vtable","","",22,null],[12,"get_properties","","",22,null],[12,"flush","","",22,null],[12,"vfunc_padding","","",22,null],[12,"g_authorize_method","","",22,null],[12,"signal_padding","","",22,null],[3,"GDBusInterfaceSkeletonPrivate","","",null,null],[3,"GDBusInterfaceVTable","","",null,null],[12,"method_call","","",23,null],[12,"get_property","","",23,null],[12,"set_property","","",23,null],[12,"padding","","",23,null],[3,"GDBusMethodInfo","","",null,null],[12,"ref_count","","",24,null],[12,"name","","",24,null],[12,"in_args","","",24,null],[12,"out_args","","",24,null],[12,"annotations","","",24,null],[3,"GDBusNodeInfo","","",null,null],[12,"ref_count","","",25,null],[12,"path","","",25,null],[12,"interfaces","","",25,null],[12,"nodes","","",25,null],[12,"annotations","","",25,null],[3,"GDBusObjectIface","","",null,null],[12,"parent_iface","","",26,null],[12,"get_object_path","","",26,null],[12,"get_interfaces","","",26,null],[12,"get_interface","","",26,null],[12,"interface_added","","",26,null],[12,"interface_removed","","",26,null],[3,"GDBusObjectManagerClientClass","","",null,null],[12,"parent_class","","",27,null],[12,"interface_proxy_signal","","",27,null],[12,"interface_proxy_properties_changed","","",27,null],[12,"padding","","",27,null],[3,"GDBusObjectManagerClientPrivate","","",null,null],[3,"GDBusObjectManagerIface","","",null,null],[12,"parent_iface","","",28,null],[12,"get_object_path","","",28,null],[12,"get_objects","","",28,null],[12,"get_object","","",28,null],[12,"get_interface","","",28,null],[12,"object_added","","",28,null],[12,"object_removed","","",28,null],[12,"interface_added","","",28,null],[12,"interface_removed","","",28,null],[3,"GDBusObjectManagerServerClass","","",null,null],[12,"parent_class","","",29,null],[12,"padding","","",29,null],[3,"GDBusObjectManagerServerPrivate","","",null,null],[3,"GDBusObjectProxyClass","","",null,null],[12,"parent_class","","",30,null],[12,"padding","","",30,null],[3,"GDBusObjectProxyPrivate","","",null,null],[3,"GDBusObjectSkeletonClass","","",null,null],[12,"parent_class","","",31,null],[12,"authorize_method","","",31,null],[12,"padding","","",31,null],[3,"GDBusObjectSkeletonPrivate","","",null,null],[3,"GDBusPropertyInfo","","",null,null],[12,"ref_count","","",32,null],[12,"name","","",32,null],[12,"signature","","",32,null],[12,"flags","","",32,null],[12,"annotations","","",32,null],[3,"GDBusProxyClass","","",null,null],[12,"parent_class","","",33,null],[12,"g_properties_changed","","",33,null],[12,"g_signal","","",33,null],[12,"padding","","",33,null],[3,"GDBusProxyPrivate","","",null,null],[3,"GDBusSignalInfo","","",null,null],[12,"ref_count","","",34,null],[12,"name","","",34,null],[12,"args","","",34,null],[12,"annotations","","",34,null],[3,"GDBusSubtreeVTable","","",null,null],[12,"enumerate","","",35,null],[12,"introspect","","",35,null],[12,"dispatch","","",35,null],[12,"padding","","",35,null],[3,"GDataInputStreamClass","","",null,null],[12,"parent_class","","",36,null],[12,"_g_reserved1","","",36,null],[12,"_g_reserved2","","",36,null],[12,"_g_reserved3","","",36,null],[12,"_g_reserved4","","",36,null],[12,"_g_reserved5","","",36,null],[3,"GDataInputStreamPrivate","","",null,null],[3,"GDataOutputStreamClass","","",null,null],[12,"parent_class","","",37,null],[12,"_g_reserved1","","",37,null],[12,"_g_reserved2","","",37,null],[12,"_g_reserved3","","",37,null],[12,"_g_reserved4","","",37,null],[12,"_g_reserved5","","",37,null],[3,"GDataOutputStreamPrivate","","",null,null],[3,"GDatagramBasedInterface","","",null,null],[12,"g_iface","","",38,null],[12,"receive_messages","","",38,null],[12,"send_messages","","",38,null],[12,"create_source","","",38,null],[12,"condition_check","","",38,null],[12,"condition_wait","","",38,null],[3,"GDesktopAppInfoClass","","",null,null],[12,"parent_class","","",39,null],[3,"GDesktopAppInfoLookupIface","","",null,null],[12,"g_iface","","",40,null],[12,"get_default_for_uri_scheme","","",40,null],[3,"GDriveIface","","",null,null],[12,"g_iface","","",41,null],[12,"changed","","",41,null],[12,"disconnected","","",41,null],[12,"eject_button","","",41,null],[12,"get_name","","",41,null],[12,"get_icon","","",41,null],[12,"has_volumes","","",41,null],[12,"get_volumes","","",41,null],[12,"is_media_removable","","",41,null],[12,"has_media","","",41,null],[12,"is_media_check_automatic","","",41,null],[12,"can_eject","","",41,null],[12,"can_poll_for_media","","",41,null],[12,"eject","","",41,null],[12,"eject_finish","","",41,null],[12,"poll_for_media","","",41,null],[12,"poll_for_media_finish","","",41,null],[12,"get_identifier","","",41,null],[12,"enumerate_identifiers","","",41,null],[12,"get_start_stop_type","","",41,null],[12,"can_start","","",41,null],[12,"can_start_degraded","","",41,null],[12,"start","","",41,null],[12,"start_finish","","",41,null],[12,"can_stop","","",41,null],[12,"stop","","",41,null],[12,"stop_finish","","",41,null],[12,"stop_button","","",41,null],[12,"eject_with_operation","","",41,null],[12,"eject_with_operation_finish","","",41,null],[12,"get_sort_key","","",41,null],[12,"get_symbolic_icon","","",41,null],[12,"is_removable","","",41,null],[3,"GDtlsClientConnectionInterface","","",null,null],[12,"g_iface","","",42,null],[3,"GDtlsConnectionInterface","","",null,null],[12,"g_iface","","",43,null],[12,"accept_certificate","","",43,null],[12,"handshake","","",43,null],[12,"handshake_async","","",43,null],[12,"handshake_finish","","",43,null],[12,"shutdown","","",43,null],[12,"shutdown_async","","",43,null],[12,"shutdown_finish","","",43,null],[3,"GDtlsServerConnectionInterface","","",null,null],[12,"g_iface","","",44,null],[3,"GEmblemClass","","",null,null],[3,"GEmblemedIconClass","","",null,null],[12,"parent_class","","",45,null],[3,"GEmblemedIconPrivate","","",null,null],[3,"GFileAttributeInfo","","",null,null],[12,"name","","",46,null],[12,"type_","","",46,null],[12,"flags","","",46,null],[3,"GFileAttributeInfoList","","",null,null],[12,"infos","","",47,null],[12,"n_infos","","",47,null],[3,"GFileAttributeMatcher","","",null,null],[3,"GFileDescriptorBasedIface","","",null,null],[12,"g_iface","","",48,null],[12,"get_fd","","",48,null],[3,"GFileEnumeratorClass","","",null,null],[12,"parent_class","","",49,null],[12,"next_file","","",49,null],[12,"close_fn","","",49,null],[12,"next_files_async","","",49,null],[12,"next_files_finish","","",49,null],[12,"close_async","","",49,null],[12,"close_finish","","",49,null],[12,"_g_reserved1","","",49,null],[12,"_g_reserved2","","",49,null],[12,"_g_reserved3","","",49,null],[12,"_g_reserved4","","",49,null],[12,"_g_reserved5","","",49,null],[12,"_g_reserved6","","",49,null],[12,"_g_reserved7","","",49,null],[3,"GFileEnumeratorPrivate","","",null,null],[3,"GFileIOStreamClass","","",null,null],[12,"parent_class","","",50,null],[12,"tell","","",50,null],[12,"can_seek","","",50,null],[12,"seek","","",50,null],[12,"can_truncate","","",50,null],[12,"truncate_fn","","",50,null],[12,"query_info","","",50,null],[12,"query_info_async","","",50,null],[12,"query_info_finish","","",50,null],[12,"get_etag","","",50,null],[12,"_g_reserved1","","",50,null],[12,"_g_reserved2","","",50,null],[12,"_g_reserved3","","",50,null],[12,"_g_reserved4","","",50,null],[12,"_g_reserved5","","",50,null],[3,"GFileIOStreamPrivate","","",null,null],[3,"GFileIconClass","","",null,null],[3,"GFileIface","","",null,null],[12,"g_iface","","",51,null],[12,"dup","","",51,null],[12,"hash","","",51,null],[12,"equal","","",51,null],[12,"is_native","","",51,null],[12,"has_uri_scheme","","",51,null],[12,"get_uri_scheme","","",51,null],[12,"get_basename","","",51,null],[12,"get_path","","",51,null],[12,"get_uri","","",51,null],[12,"get_parse_name","","",51,null],[12,"get_parent","","",51,null],[12,"prefix_matches","","",51,null],[12,"get_relative_path","","",51,null],[12,"resolve_relative_path","","",51,null],[12,"get_child_for_display_name","","",51,null],[12,"enumerate_children","","",51,null],[12,"enumerate_children_async","","",51,null],[12,"enumerate_children_finish","","",51,null],[12,"query_info","","",51,null],[12,"query_info_async","","",51,null],[12,"query_info_finish","","",51,null],[12,"query_filesystem_info","","",51,null],[12,"query_filesystem_info_async","","",51,null],[12,"query_filesystem_info_finish","","",51,null],[12,"find_enclosing_mount","","",51,null],[12,"find_enclosing_mount_async","","",51,null],[12,"find_enclosing_mount_finish","","",51,null],[12,"set_display_name","","",51,null],[12,"set_display_name_async","","",51,null],[12,"set_display_name_finish","","",51,null],[12,"query_settable_attributes","","",51,null],[12,"_query_settable_attributes_async","","",51,null],[12,"_query_settable_attributes_finish","","",51,null],[12,"query_writable_namespaces","","",51,null],[12,"_query_writable_namespaces_async","","",51,null],[12,"_query_writable_namespaces_finish","","",51,null],[12,"set_attribute","","",51,null],[12,"set_attributes_from_info","","",51,null],[12,"set_attributes_async","","",51,null],[12,"set_attributes_finish","","",51,null],[12,"read_fn","","",51,null],[12,"read_async","","",51,null],[12,"read_finish","","",51,null],[12,"append_to","","",51,null],[12,"append_to_async","","",51,null],[12,"append_to_finish","","",51,null],[12,"create","","",51,null],[12,"create_async","","",51,null],[12,"create_finish","","",51,null],[12,"replace","","",51,null],[12,"replace_async","","",51,null],[12,"replace_finish","","",51,null],[12,"delete_file","","",51,null],[12,"delete_file_async","","",51,null],[12,"delete_file_finish","","",51,null],[12,"trash","","",51,null],[12,"trash_async","","",51,null],[12,"trash_finish","","",51,null],[12,"make_directory","","",51,null],[12,"make_directory_async","","",51,null],[12,"make_directory_finish","","",51,null],[12,"make_symbolic_link","","",51,null],[12,"_make_symbolic_link_async","","",51,null],[12,"_make_symbolic_link_finish","","",51,null],[12,"copy","","",51,null],[12,"copy_async","","",51,null],[12,"copy_finish","","",51,null],[12,"move_","","",51,null],[12,"_move_async","","",51,null],[12,"_move_finish","","",51,null],[12,"mount_mountable","","",51,null],[12,"mount_mountable_finish","","",51,null],[12,"unmount_mountable","","",51,null],[12,"unmount_mountable_finish","","",51,null],[12,"eject_mountable","","",51,null],[12,"eject_mountable_finish","","",51,null],[12,"mount_enclosing_volume","","",51,null],[12,"mount_enclosing_volume_finish","","",51,null],[12,"monitor_dir","","",51,null],[12,"monitor_file","","",51,null],[12,"open_readwrite","","",51,null],[12,"open_readwrite_async","","",51,null],[12,"open_readwrite_finish","","",51,null],[12,"create_readwrite","","",51,null],[12,"create_readwrite_async","","",51,null],[12,"create_readwrite_finish","","",51,null],[12,"replace_readwrite","","",51,null],[12,"replace_readwrite_async","","",51,null],[12,"replace_readwrite_finish","","",51,null],[12,"start_mountable","","",51,null],[12,"start_mountable_finish","","",51,null],[12,"stop_mountable","","",51,null],[12,"stop_mountable_finish","","",51,null],[12,"supports_thread_contexts","","",51,null],[12,"unmount_mountable_with_operation","","",51,null],[12,"unmount_mountable_with_operation_finish","","",51,null],[12,"eject_mountable_with_operation","","",51,null],[12,"eject_mountable_with_operation_finish","","",51,null],[12,"poll_mountable","","",51,null],[12,"poll_mountable_finish","","",51,null],[12,"measure_disk_usage","","",51,null],[12,"measure_disk_usage_async","","",51,null],[12,"measure_disk_usage_finish","","",51,null],[3,"GFileInfoClass","","",null,null],[3,"GFileInputStreamClass","","",null,null],[12,"parent_class","","",52,null],[12,"tell","","",52,null],[12,"can_seek","","",52,null],[12,"seek","","",52,null],[12,"query_info","","",52,null],[12,"query_info_async","","",52,null],[12,"query_info_finish","","",52,null],[12,"_g_reserved1","","",52,null],[12,"_g_reserved2","","",52,null],[12,"_g_reserved3","","",52,null],[12,"_g_reserved4","","",52,null],[12,"_g_reserved5","","",52,null],[3,"GFileInputStreamPrivate","","",null,null],[3,"GFileMonitorClass","","",null,null],[12,"parent_class","","",53,null],[12,"changed","","",53,null],[12,"cancel","","",53,null],[12,"_g_reserved1","","",53,null],[12,"_g_reserved2","","",53,null],[12,"_g_reserved3","","",53,null],[12,"_g_reserved4","","",53,null],[12,"_g_reserved5","","",53,null],[3,"GFileMonitorPrivate","","",null,null],[3,"GFileOutputStreamClass","","",null,null],[12,"parent_class","","",54,null],[12,"tell","","",54,null],[12,"can_seek","","",54,null],[12,"seek","","",54,null],[12,"can_truncate","","",54,null],[12,"truncate_fn","","",54,null],[12,"query_info","","",54,null],[12,"query_info_async","","",54,null],[12,"query_info_finish","","",54,null],[12,"get_etag","","",54,null],[12,"_g_reserved1","","",54,null],[12,"_g_reserved2","","",54,null],[12,"_g_reserved3","","",54,null],[12,"_g_reserved4","","",54,null],[12,"_g_reserved5","","",54,null],[3,"GFileOutputStreamPrivate","","",null,null],[3,"GFilenameCompleterClass","","",null,null],[12,"parent_class","","",55,null],[12,"got_completion_data","","",55,null],[12,"_g_reserved1","","",55,null],[12,"_g_reserved2","","",55,null],[12,"_g_reserved3","","",55,null],[3,"GFilterInputStreamClass","","",null,null],[12,"parent_class","","",56,null],[12,"_g_reserved1","","",56,null],[12,"_g_reserved2","","",56,null],[12,"_g_reserved3","","",56,null],[3,"GFilterOutputStreamClass","","",null,null],[12,"parent_class","","",57,null],[12,"_g_reserved1","","",57,null],[12,"_g_reserved2","","",57,null],[12,"_g_reserved3","","",57,null],[3,"GIOExtension","","",null,null],[3,"GIOExtensionPoint","","",null,null],[3,"GIOModuleClass","","",null,null],[3,"GIOModuleScope","","",null,null],[3,"GIOSchedulerJob","","",null,null],[3,"GIOStreamAdapter","","",null,null],[3,"GIOStreamClass","","",null,null],[12,"parent_class","","",58,null],[12,"get_input_stream","","",58,null],[12,"get_output_stream","","",58,null],[12,"close_fn","","",58,null],[12,"close_async","","",58,null],[12,"close_finish","","",58,null],[12,"_g_reserved1","","",58,null],[12,"_g_reserved2","","",58,null],[12,"_g_reserved3","","",58,null],[12,"_g_reserved4","","",58,null],[12,"_g_reserved5","","",58,null],[12,"_g_reserved6","","",58,null],[12,"_g_reserved7","","",58,null],[12,"_g_reserved8","","",58,null],[12,"_g_reserved9","","",58,null],[12,"_g_reserved10","","",58,null],[3,"GIOStreamPrivate","","",null,null],[3,"GIconIface","","",null,null],[12,"g_iface","","",59,null],[12,"hash","","",59,null],[12,"equal","","",59,null],[12,"to_tokens","","",59,null],[12,"from_tokens","","",59,null],[12,"serialize","","",59,null],[3,"GInetAddressClass","","",null,null],[12,"parent_class","","",60,null],[12,"to_string","","",60,null],[12,"to_bytes","","",60,null],[3,"GInetAddressMaskClass","","",null,null],[12,"parent_class","","",61,null],[3,"GInetAddressMaskPrivate","","",null,null],[3,"GInetAddressPrivate","","",null,null],[3,"GInetSocketAddressClass","","",null,null],[12,"parent_class","","",62,null],[3,"GInetSocketAddressPrivate","","",null,null],[3,"GInitableIface","","",null,null],[12,"g_iface","","",63,null],[12,"init","","",63,null],[3,"GInputMessage","","",null,null],[12,"address","","",64,null],[12,"vectors","","",64,null],[12,"num_vectors","","",64,null],[12,"bytes_received","","",64,null],[12,"flags","","",64,null],[12,"control_messages","","",64,null],[12,"num_control_messages","","",64,null],[3,"GInputStreamClass","","",null,null],[12,"parent_class","","",65,null],[12,"read_fn","","",65,null],[12,"skip","","",65,null],[12,"close_fn","","",65,null],[12,"read_async","","",65,null],[12,"read_finish","","",65,null],[12,"skip_async","","",65,null],[12,"skip_finish","","",65,null],[12,"close_async","","",65,null],[12,"close_finish","","",65,null],[12,"_g_reserved1","","",65,null],[12,"_g_reserved2","","",65,null],[12,"_g_reserved3","","",65,null],[12,"_g_reserved4","","",65,null],[12,"_g_reserved5","","",65,null],[3,"GInputStreamPrivate","","",null,null],[3,"GInputVector","","",null,null],[12,"buffer","","",66,null],[12,"size","","",66,null],[3,"GListModelInterface","","",null,null],[12,"g_iface","","",67,null],[12,"get_item_type","","",67,null],[12,"get_n_items","","",67,null],[12,"get_item","","",67,null],[3,"GListStoreClass","","",null,null],[12,"parent_class","","",68,null],[3,"GLoadableIconIface","","",null,null],[12,"g_iface","","",69,null],[12,"load","","",69,null],[12,"load_async","","",69,null],[12,"load_finish","","",69,null],[3,"GMemoryInputStreamClass","","",null,null],[12,"parent_class","","",70,null],[12,"_g_reserved1","","",70,null],[12,"_g_reserved2","","",70,null],[12,"_g_reserved3","","",70,null],[12,"_g_reserved4","","",70,null],[12,"_g_reserved5","","",70,null],[3,"GMemoryInputStreamPrivate","","",null,null],[3,"GMemoryOutputStreamClass","","",null,null],[12,"parent_class","","",71,null],[12,"_g_reserved1","","",71,null],[12,"_g_reserved2","","",71,null],[12,"_g_reserved3","","",71,null],[12,"_g_reserved4","","",71,null],[12,"_g_reserved5","","",71,null],[3,"GMemoryOutputStreamPrivate","","",null,null],[3,"GMenuAttributeIterClass","","",null,null],[12,"parent_class","","",72,null],[12,"get_next","","",72,null],[3,"GMenuAttributeIterPrivate","","",null,null],[3,"GMenuLinkIterClass","","",null,null],[12,"parent_class","","",73,null],[12,"get_next","","",73,null],[3,"GMenuLinkIterPrivate","","",null,null],[3,"GMenuModelClass","","",null,null],[12,"parent_class","","",74,null],[12,"is_mutable","","",74,null],[12,"get_n_items","","",74,null],[12,"get_item_attributes","","",74,null],[12,"iterate_item_attributes","","",74,null],[12,"get_item_attribute_value","","",74,null],[12,"get_item_links","","",74,null],[12,"iterate_item_links","","",74,null],[12,"get_item_link","","",74,null],[3,"GMenuModelPrivate","","",null,null],[3,"GMountIface","","",null,null],[12,"g_iface","","",75,null],[12,"changed","","",75,null],[12,"unmounted","","",75,null],[12,"get_root","","",75,null],[12,"get_name","","",75,null],[12,"get_icon","","",75,null],[12,"get_uuid","","",75,null],[12,"get_volume","","",75,null],[12,"get_drive","","",75,null],[12,"can_unmount","","",75,null],[12,"can_eject","","",75,null],[12,"unmount","","",75,null],[12,"unmount_finish","","",75,null],[12,"eject","","",75,null],[12,"eject_finish","","",75,null],[12,"remount","","",75,null],[12,"remount_finish","","",75,null],[12,"guess_content_type","","",75,null],[12,"guess_content_type_finish","","",75,null],[12,"guess_content_type_sync","","",75,null],[12,"pre_unmount","","",75,null],[12,"unmount_with_operation","","",75,null],[12,"unmount_with_operation_finish","","",75,null],[12,"eject_with_operation","","",75,null],[12,"eject_with_operation_finish","","",75,null],[12,"get_default_location","","",75,null],[12,"get_sort_key","","",75,null],[12,"get_symbolic_icon","","",75,null],[3,"GMountOperationClass","","",null,null],[12,"parent_class","","",76,null],[12,"ask_password","","",76,null],[12,"ask_question","","",76,null],[12,"reply","","",76,null],[12,"aborted","","",76,null],[12,"show_processes","","",76,null],[12,"show_unmount_progress","","",76,null],[12,"_g_reserved1","","",76,null],[12,"_g_reserved2","","",76,null],[12,"_g_reserved3","","",76,null],[12,"_g_reserved4","","",76,null],[12,"_g_reserved5","","",76,null],[12,"_g_reserved6","","",76,null],[12,"_g_reserved7","","",76,null],[12,"_g_reserved8","","",76,null],[12,"_g_reserved9","","",76,null],[3,"GMountOperationPrivate","","",null,null],[3,"GNativeSocketAddress","","",null,null],[3,"GNativeVolumeMonitorClass","","",null,null],[12,"parent_class","","",77,null],[12,"get_mount_for_mount_path","","",77,null],[3,"GNetworkAddressClass","","",null,null],[12,"parent_class","","",78,null],[3,"GNetworkAddressPrivate","","",null,null],[3,"GNetworkMonitorInterface","","",null,null],[12,"g_iface","","",79,null],[12,"network_changed","","",79,null],[12,"can_reach","","",79,null],[12,"can_reach_async","","",79,null],[12,"can_reach_finish","","",79,null],[3,"GNetworkServiceClass","","",null,null],[12,"parent_class","","",80,null],[3,"GNetworkServicePrivate","","",null,null],[3,"GOutputMessage","","",null,null],[12,"address","","",81,null],[12,"vectors","","",81,null],[12,"num_vectors","","",81,null],[12,"bytes_sent","","",81,null],[12,"control_messages","","",81,null],[12,"num_control_messages","","",81,null],[3,"GOutputStreamClass","","",null,null],[12,"parent_class","","",82,null],[12,"write_fn","","",82,null],[12,"splice","","",82,null],[12,"flush","","",82,null],[12,"close_fn","","",82,null],[12,"write_async","","",82,null],[12,"write_finish","","",82,null],[12,"splice_async","","",82,null],[12,"splice_finish","","",82,null],[12,"flush_async","","",82,null],[12,"flush_finish","","",82,null],[12,"close_async","","",82,null],[12,"close_finish","","",82,null],[12,"_g_reserved1","","",82,null],[12,"_g_reserved2","","",82,null],[12,"_g_reserved3","","",82,null],[12,"_g_reserved4","","",82,null],[12,"_g_reserved5","","",82,null],[12,"_g_reserved6","","",82,null],[12,"_g_reserved7","","",82,null],[12,"_g_reserved8","","",82,null],[3,"GOutputStreamPrivate","","",null,null],[3,"GOutputVector","","",null,null],[12,"buffer","","",83,null],[12,"size","","",83,null],[3,"GPermissionClass","","",null,null],[12,"parent_class","","",84,null],[12,"acquire","","",84,null],[12,"acquire_async","","",84,null],[12,"acquire_finish","","",84,null],[12,"release","","",84,null],[12,"release_async","","",84,null],[12,"release_finish","","",84,null],[12,"reserved","","",84,null],[3,"GPermissionPrivate","","",null,null],[3,"GPollableInputStreamInterface","","",null,null],[12,"g_iface","","",85,null],[12,"can_poll","","",85,null],[12,"is_readable","","",85,null],[12,"create_source","","",85,null],[12,"read_nonblocking","","",85,null],[3,"GPollableOutputStreamInterface","","",null,null],[12,"g_iface","","",86,null],[12,"can_poll","","",86,null],[12,"is_writable","","",86,null],[12,"create_source","","",86,null],[12,"write_nonblocking","","",86,null],[3,"GProxyAddressClass","","",null,null],[12,"parent_class","","",87,null],[3,"GProxyAddressEnumeratorClass","","",null,null],[12,"parent_class","","",88,null],[12,"_g_reserved1","","",88,null],[12,"_g_reserved2","","",88,null],[12,"_g_reserved3","","",88,null],[12,"_g_reserved4","","",88,null],[12,"_g_reserved5","","",88,null],[12,"_g_reserved6","","",88,null],[12,"_g_reserved7","","",88,null],[3,"GProxyAddressEnumeratorPrivate","","",null,null],[3,"GProxyAddressPrivate","","",null,null],[3,"GProxyInterface","","",null,null],[12,"g_iface","","",89,null],[12,"connect","","",89,null],[12,"connect_async","","",89,null],[12,"connect_finish","","",89,null],[12,"supports_hostname","","",89,null],[3,"GProxyResolverInterface","","",null,null],[12,"g_iface","","",90,null],[12,"is_supported","","",90,null],[12,"lookup","","",90,null],[12,"lookup_async","","",90,null],[12,"lookup_finish","","",90,null],[3,"GRemoteActionGroupInterface","","",null,null],[12,"g_iface","","",91,null],[12,"activate_action_full","","",91,null],[12,"change_action_state_full","","",91,null],[3,"GResolverClass","","",null,null],[12,"parent_class","","",92,null],[12,"reload","","",92,null],[12,"lookup_by_name","","",92,null],[12,"lookup_by_name_async","","",92,null],[12,"lookup_by_name_finish","","",92,null],[12,"lookup_by_address","","",92,null],[12,"lookup_by_address_async","","",92,null],[12,"lookup_by_address_finish","","",92,null],[12,"lookup_service","","",92,null],[12,"lookup_service_async","","",92,null],[12,"lookup_service_finish","","",92,null],[12,"lookup_records","","",92,null],[12,"lookup_records_async","","",92,null],[12,"lookup_records_finish","","",92,null],[12,"_g_reserved4","","",92,null],[12,"_g_reserved5","","",92,null],[12,"_g_reserved6","","",92,null],[3,"GResolverPrivate","","",null,null],[3,"GResource","","",null,null],[3,"GSeekableIface","","",null,null],[12,"g_iface","","",93,null],[12,"tell","","",93,null],[12,"can_seek","","",93,null],[12,"seek","","",93,null],[12,"can_truncate","","",93,null],[12,"truncate_fn","","",93,null],[3,"GSettingsBackendClass","","",null,null],[12,"parent_class","","",94,null],[12,"read","","",94,null],[12,"get_writable","","",94,null],[12,"write","","",94,null],[12,"write_tree","","",94,null],[12,"reset","","",94,null],[12,"subscribe","","",94,null],[12,"unsubscribe","","",94,null],[12,"sync","","",94,null],[12,"get_permission","","",94,null],[12,"read_user_value","","",94,null],[12,"padding","","",94,null],[3,"GSettingsBackendPrivate","","",null,null],[3,"GSettingsClass","","",null,null],[12,"parent_class","","",95,null],[12,"writable_changed","","",95,null],[12,"changed","","",95,null],[12,"writable_change_event","","",95,null],[12,"change_event","","",95,null],[12,"padding","","",95,null],[3,"GSettingsPrivate","","",null,null],[3,"GSettingsSchema","","",null,null],[3,"GSettingsSchemaKey","","",null,null],[3,"GSettingsSchemaSource","","",null,null],[3,"GSimpleActionGroupClass","","",null,null],[12,"parent_class","","",96,null],[12,"padding","","",96,null],[3,"GSimpleActionGroupPrivate","","",null,null],[3,"GSimpleAsyncResultClass","","",null,null],[3,"GSimpleProxyResolverClass","","",null,null],[12,"parent_class","","",97,null],[12,"_g_reserved1","","",97,null],[12,"_g_reserved2","","",97,null],[12,"_g_reserved3","","",97,null],[12,"_g_reserved4","","",97,null],[12,"_g_reserved5","","",97,null],[3,"GSimpleProxyResolverPrivate","","",null,null],[3,"GSocketAddressClass","","",null,null],[12,"parent_class","","",98,null],[12,"get_family","","",98,null],[12,"get_native_size","","",98,null],[12,"to_native","","",98,null],[3,"GSocketAddressEnumeratorClass","","",null,null],[12,"parent_class","","",99,null],[12,"next","","",99,null],[12,"next_async","","",99,null],[12,"next_finish","","",99,null],[3,"GSocketClass","","",null,null],[12,"parent_class","","",100,null],[12,"_g_reserved1","","",100,null],[12,"_g_reserved2","","",100,null],[12,"_g_reserved3","","",100,null],[12,"_g_reserved4","","",100,null],[12,"_g_reserved5","","",100,null],[12,"_g_reserved6","","",100,null],[12,"_g_reserved7","","",100,null],[12,"_g_reserved8","","",100,null],[12,"_g_reserved9","","",100,null],[12,"_g_reserved10","","",100,null],[3,"GSocketClientClass","","",null,null],[12,"parent_class","","",101,null],[12,"event","","",101,null],[12,"_g_reserved1","","",101,null],[12,"_g_reserved2","","",101,null],[12,"_g_reserved3","","",101,null],[12,"_g_reserved4","","",101,null],[3,"GSocketClientPrivate","","",null,null],[3,"GSocketConnectableIface","","",null,null],[12,"g_iface","","",102,null],[12,"enumerate","","",102,null],[12,"proxy_enumerate","","",102,null],[12,"to_string","","",102,null],[3,"GSocketConnectionClass","","",null,null],[12,"parent_class","","",103,null],[12,"_g_reserved1","","",103,null],[12,"_g_reserved2","","",103,null],[12,"_g_reserved3","","",103,null],[12,"_g_reserved4","","",103,null],[12,"_g_reserved5","","",103,null],[12,"_g_reserved6","","",103,null],[3,"GSocketConnectionPrivate","","",null,null],[3,"GSocketControlMessageClass","","",null,null],[12,"parent_class","","",104,null],[12,"get_size","","",104,null],[12,"get_level","","",104,null],[12,"get_type","","",104,null],[12,"serialize","","",104,null],[12,"deserialize","","",104,null],[12,"_g_reserved1","","",104,null],[12,"_g_reserved2","","",104,null],[12,"_g_reserved3","","",104,null],[12,"_g_reserved4","","",104,null],[12,"_g_reserved5","","",104,null],[3,"GSocketControlMessagePrivate","","",null,null],[3,"GSocketListenerClass","","",null,null],[12,"parent_class","","",105,null],[12,"changed","","",105,null],[12,"event","","",105,null],[12,"_g_reserved2","","",105,null],[12,"_g_reserved3","","",105,null],[12,"_g_reserved4","","",105,null],[12,"_g_reserved5","","",105,null],[12,"_g_reserved6","","",105,null],[3,"GSocketListenerPrivate","","",null,null],[3,"GSocketPrivate","","",null,null],[3,"GSocketServiceClass","","",null,null],[12,"parent_class","","",106,null],[12,"incoming","","",106,null],[12,"_g_reserved1","","",106,null],[12,"_g_reserved2","","",106,null],[12,"_g_reserved3","","",106,null],[12,"_g_reserved4","","",106,null],[12,"_g_reserved5","","",106,null],[12,"_g_reserved6","","",106,null],[3,"GSocketServicePrivate","","",null,null],[3,"GSrvTarget","","",null,null],[3,"GStaticResource","","",null,null],[12,"data","","",107,null],[12,"data_len","","",107,null],[12,"resource","","",107,null],[12,"next","","",107,null],[12,"padding","","",107,null],[3,"GTaskClass","","",null,null],[3,"GTcpConnectionClass","","",null,null],[12,"parent_class","","",108,null],[3,"GTcpConnectionPrivate","","",null,null],[3,"GTcpWrapperConnectionClass","","",null,null],[12,"parent_class","","",109,null],[3,"GTcpWrapperConnectionPrivate","","",null,null],[3,"GThemedIconClass","","",null,null],[3,"GThreadedSocketServiceClass","","",null,null],[12,"parent_class","","",110,null],[12,"run","","",110,null],[12,"_g_reserved1","","",110,null],[12,"_g_reserved2","","",110,null],[12,"_g_reserved3","","",110,null],[12,"_g_reserved4","","",110,null],[12,"_g_reserved5","","",110,null],[3,"GThreadedSocketServicePrivate","","",null,null],[3,"GTlsBackendInterface","","",null,null],[12,"g_iface","","",111,null],[12,"supports_tls","","",111,null],[12,"get_certificate_type","","",111,null],[12,"get_client_connection_type","","",111,null],[12,"get_server_connection_type","","",111,null],[12,"get_file_database_type","","",111,null],[12,"get_default_database","","",111,null],[12,"supports_dtls","","",111,null],[12,"get_dtls_client_connection_type","","",111,null],[12,"get_dtls_server_connection_type","","",111,null],[3,"GTlsCertificateClass","","",null,null],[12,"parent_class","","",112,null],[12,"verify","","",112,null],[12,"padding","","",112,null],[3,"GTlsCertificatePrivate","","",null,null],[3,"GTlsClientConnectionInterface","","",null,null],[12,"g_iface","","",113,null],[12,"copy_session_state","","",113,null],[3,"GTlsConnectionClass","","",null,null],[12,"parent_class","","",114,null],[12,"accept_certificate","","",114,null],[12,"handshake","","",114,null],[12,"handshake_async","","",114,null],[12,"handshake_finish","","",114,null],[12,"padding","","",114,null],[3,"GTlsConnectionPrivate","","",null,null],[3,"GTlsDatabaseClass","","",null,null],[12,"parent_class","","",115,null],[12,"verify_chain","","",115,null],[12,"verify_chain_async","","",115,null],[12,"verify_chain_finish","","",115,null],[12,"create_certificate_handle","","",115,null],[12,"lookup_certificate_for_handle","","",115,null],[12,"lookup_certificate_for_handle_async","","",115,null],[12,"lookup_certificate_for_handle_finish","","",115,null],[12,"lookup_certificate_issuer","","",115,null],[12,"lookup_certificate_issuer_async","","",115,null],[12,"lookup_certificate_issuer_finish","","",115,null],[12,"lookup_certificates_issued_by","","",115,null],[12,"lookup_certificates_issued_by_async","","",115,null],[12,"lookup_certificates_issued_by_finish","","",115,null],[12,"padding","","",115,null],[3,"GTlsDatabasePrivate","","",null,null],[3,"GTlsFileDatabaseInterface","","",null,null],[12,"g_iface","","",116,null],[12,"padding","","",116,null],[3,"GTlsInteractionClass","","",null,null],[12,"parent_class","","",117,null],[12,"ask_password","","",117,null],[12,"ask_password_async","","",117,null],[12,"ask_password_finish","","",117,null],[12,"request_certificate","","",117,null],[12,"request_certificate_async","","",117,null],[12,"request_certificate_finish","","",117,null],[12,"padding","","",117,null],[3,"GTlsInteractionPrivate","","",null,null],[3,"GTlsPasswordClass","","",null,null],[12,"parent_class","","",118,null],[12,"get_value","","",118,null],[12,"set_value","","",118,null],[12,"get_default_warning","","",118,null],[12,"padding","","",118,null],[3,"GTlsPasswordPrivate","","",null,null],[3,"GTlsServerConnectionInterface","","",null,null],[12,"g_iface","","",119,null],[3,"GUnixConnectionClass","","",null,null],[12,"parent_class","","",120,null],[3,"GUnixConnectionPrivate","","",null,null],[3,"GUnixCredentialsMessageClass","","",null,null],[12,"parent_class","","",121,null],[12,"_g_reserved1","","",121,null],[12,"_g_reserved2","","",121,null],[3,"GUnixCredentialsMessagePrivate","","",null,null],[3,"GUnixFDListClass","","",null,null],[12,"parent_class","","",122,null],[12,"_g_reserved1","","",122,null],[12,"_g_reserved2","","",122,null],[12,"_g_reserved3","","",122,null],[12,"_g_reserved4","","",122,null],[12,"_g_reserved5","","",122,null],[3,"GUnixFDListPrivate","","",null,null],[3,"GUnixFDMessageClass","","",null,null],[12,"parent_class","","",123,null],[12,"_g_reserved1","","",123,null],[12,"_g_reserved2","","",123,null],[3,"GUnixFDMessagePrivate","","",null,null],[3,"GUnixInputStreamClass","","",null,null],[12,"parent_class","","",124,null],[12,"_g_reserved1","","",124,null],[12,"_g_reserved2","","",124,null],[12,"_g_reserved3","","",124,null],[12,"_g_reserved4","","",124,null],[12,"_g_reserved5","","",124,null],[3,"GUnixInputStreamPrivate","","",null,null],[3,"GUnixMountEntry","","",null,null],[3,"GUnixMountMonitorClass","","",null,null],[3,"GUnixMountPoint","","",null,null],[3,"GUnixOutputStreamClass","","",null,null],[12,"parent_class","","",125,null],[12,"_g_reserved1","","",125,null],[12,"_g_reserved2","","",125,null],[12,"_g_reserved3","","",125,null],[12,"_g_reserved4","","",125,null],[12,"_g_reserved5","","",125,null],[3,"GUnixOutputStreamPrivate","","",null,null],[3,"GUnixSocketAddressClass","","",null,null],[12,"parent_class","","",126,null],[3,"GUnixSocketAddressPrivate","","",null,null],[3,"GVfsClass","","",null,null],[12,"parent_class","","",127,null],[12,"is_active","","",127,null],[12,"get_file_for_path","","",127,null],[12,"get_file_for_uri","","",127,null],[12,"get_supported_uri_schemes","","",127,null],[12,"parse_name","","",127,null],[12,"local_file_add_info","","",127,null],[12,"add_writable_namespaces","","",127,null],[12,"local_file_set_attributes","","",127,null],[12,"local_file_removed","","",127,null],[12,"local_file_moved","","",127,null],[12,"deserialize_icon","","",127,null],[12,"_g_reserved1","","",127,null],[12,"_g_reserved2","","",127,null],[12,"_g_reserved3","","",127,null],[12,"_g_reserved4","","",127,null],[12,"_g_reserved5","","",127,null],[12,"_g_reserved6","","",127,null],[3,"GVolumeIface","","",null,null],[12,"g_iface","","",128,null],[12,"changed","","",128,null],[12,"removed","","",128,null],[12,"get_name","","",128,null],[12,"get_icon","","",128,null],[12,"get_uuid","","",128,null],[12,"get_drive","","",128,null],[12,"get_mount","","",128,null],[12,"can_mount","","",128,null],[12,"can_eject","","",128,null],[12,"mount_fn","","",128,null],[12,"mount_finish","","",128,null],[12,"eject","","",128,null],[12,"eject_finish","","",128,null],[12,"get_identifier","","",128,null],[12,"enumerate_identifiers","","",128,null],[12,"should_automount","","",128,null],[12,"get_activation_root","","",128,null],[12,"eject_with_operation","","",128,null],[12,"eject_with_operation_finish","","",128,null],[12,"get_sort_key","","",128,null],[12,"get_symbolic_icon","","",128,null],[3,"GVolumeMonitorClass","","",null,null],[12,"parent_class","","",129,null],[12,"volume_added","","",129,null],[12,"volume_removed","","",129,null],[12,"volume_changed","","",129,null],[12,"mount_added","","",129,null],[12,"mount_removed","","",129,null],[12,"mount_pre_unmount","","",129,null],[12,"mount_changed","","",129,null],[12,"drive_connected","","",129,null],[12,"drive_disconnected","","",129,null],[12,"drive_changed","","",129,null],[12,"is_supported","","",129,null],[12,"get_connected_drives","","",129,null],[12,"get_volumes","","",129,null],[12,"get_mounts","","",129,null],[12,"get_volume_for_uuid","","",129,null],[12,"get_mount_for_uuid","","",129,null],[12,"adopt_orphan_mount","","",129,null],[12,"drive_eject_button","","",129,null],[12,"drive_stop_button","","",129,null],[12,"_g_reserved1","","",129,null],[12,"_g_reserved2","","",129,null],[12,"_g_reserved3","","",129,null],[12,"_g_reserved4","","",129,null],[12,"_g_reserved5","","",129,null],[12,"_g_reserved6","","",129,null],[3,"GZlibCompressorClass","","",null,null],[12,"parent_class","","",130,null],[3,"GZlibDecompressorClass","","",null,null],[12,"parent_class","","",131,null],[3,"GAppInfoMonitor","","",null,null],[3,"GAppLaunchContext","","",null,null],[12,"parent_instance","","",132,null],[12,"priv_","","",132,null],[3,"GApplication","","",null,null],[12,"parent_instance","","",133,null],[12,"priv_","","",133,null],[3,"GApplicationCommandLine","","",null,null],[12,"parent_instance","","",134,null],[12,"priv_","","",134,null],[3,"GBufferedInputStream","","",null,null],[12,"parent_instance","","",135,null],[12,"priv_","","",135,null],[3,"GBufferedOutputStream","","",null,null],[12,"parent_instance","","",136,null],[12,"priv_","","",136,null],[3,"GBytesIcon","","",null,null],[3,"GCancellable","","",null,null],[12,"parent_instance","","",137,null],[12,"priv_","","",137,null],[3,"GCharsetConverter","","",null,null],[3,"GConverterInputStream","","",null,null],[12,"parent_instance","","",138,null],[12,"priv_","","",138,null],[3,"GConverterOutputStream","","",null,null],[12,"parent_instance","","",139,null],[12,"priv_","","",139,null],[3,"GCredentials","","",null,null],[3,"GDBusActionGroup","","",null,null],[3,"GDBusAuthObserver","","",null,null],[3,"GDBusConnection","","",null,null],[3,"GDBusInterfaceSkeleton","","",null,null],[12,"parent_instance","","",140,null],[12,"priv_","","",140,null],[3,"GDBusMenuModel","","",null,null],[3,"GDBusMessage","","",null,null],[3,"GDBusMethodInvocation","","",null,null],[3,"GDBusObjectManagerClient","","",null,null],[12,"parent_instance","","",141,null],[12,"priv_","","",141,null],[3,"GDBusObjectManagerServer","","",null,null],[12,"parent_instance","","",142,null],[12,"priv_","","",142,null],[3,"GDBusObjectProxy","","",null,null],[12,"parent_instance","","",143,null],[12,"priv_","","",143,null],[3,"GDBusObjectSkeleton","","",null,null],[12,"parent_instance","","",144,null],[12,"priv_","","",144,null],[3,"GDBusProxy","","",null,null],[12,"parent_instance","","",145,null],[12,"priv_","","",145,null],[3,"GDBusServer","","",null,null],[3,"GDataInputStream","","",null,null],[12,"parent_instance","","",146,null],[12,"priv_","","",146,null],[3,"GDataOutputStream","","",null,null],[12,"parent_instance","","",147,null],[12,"priv_","","",147,null],[3,"GDesktopAppInfo","","",null,null],[3,"GEmblem","","",null,null],[3,"GEmblemedIcon","","",null,null],[12,"parent_instance","","",148,null],[12,"priv_","","",148,null],[3,"GFileEnumerator","","",null,null],[12,"parent_instance","","",149,null],[12,"priv_","","",149,null],[3,"GFileIOStream","","",null,null],[12,"parent_instance","","",150,null],[12,"priv_","","",150,null],[3,"GFileIcon","","",null,null],[3,"GFileInfo","","",null,null],[3,"GFileInputStream","","",null,null],[12,"parent_instance","","",151,null],[12,"priv_","","",151,null],[3,"GFileMonitor","","",null,null],[12,"parent_instance","","",152,null],[12,"priv_","","",152,null],[3,"GFileOutputStream","","",null,null],[12,"parent_instance","","",153,null],[12,"priv_","","",153,null],[3,"GFilenameCompleter","","",null,null],[3,"GFilterInputStream","","",null,null],[12,"parent_instance","","",154,null],[12,"base_stream","","",154,null],[3,"GFilterOutputStream","","",null,null],[12,"parent_instance","","",155,null],[12,"base_stream","","",155,null],[3,"GIOModule","","",null,null],[3,"GIOStream","","",null,null],[12,"parent_instance","","",156,null],[12,"priv_","","",156,null],[3,"GInetAddress","","",null,null],[12,"parent_instance","","",157,null],[12,"priv_","","",157,null],[3,"GInetAddressMask","","",null,null],[12,"parent_instance","","",158,null],[12,"priv_","","",158,null],[3,"GInetSocketAddress","","",null,null],[12,"parent_instance","","",159,null],[12,"priv_","","",159,null],[3,"GInputStream","","",null,null],[12,"parent_instance","","",160,null],[12,"priv_","","",160,null],[3,"GListStore","","",null,null],[3,"GMemoryInputStream","","",null,null],[12,"parent_instance","","",161,null],[12,"priv_","","",161,null],[3,"GMemoryOutputStream","","",null,null],[12,"parent_instance","","",162,null],[12,"priv_","","",162,null],[3,"GMenu","","",null,null],[3,"GMenuAttributeIter","","",null,null],[12,"parent_instance","","",163,null],[12,"priv_","","",163,null],[3,"GMenuItem","","",null,null],[3,"GMenuLinkIter","","",null,null],[12,"parent_instance","","",164,null],[12,"priv_","","",164,null],[3,"GMenuModel","","",null,null],[12,"parent_instance","","",165,null],[12,"priv_","","",165,null],[3,"GMountOperation","","",null,null],[12,"parent_instance","","",166,null],[12,"priv_","","",166,null],[3,"GNativeVolumeMonitor","","",null,null],[12,"parent_instance","","",167,null],[3,"GNetworkAddress","","",null,null],[12,"parent_instance","","",168,null],[12,"priv_","","",168,null],[3,"GNetworkService","","",null,null],[12,"parent_instance","","",169,null],[12,"priv_","","",169,null],[3,"GNotification","","",null,null],[3,"GOutputStream","","",null,null],[12,"parent_instance","","",170,null],[12,"priv_","","",170,null],[3,"GPermission","","",null,null],[12,"parent_instance","","",171,null],[12,"priv_","","",171,null],[3,"GPropertyAction","","",null,null],[3,"GProxyAddress","","",null,null],[12,"parent_instance","","",172,null],[12,"priv_","","",172,null],[3,"GProxyAddressEnumerator","","",null,null],[12,"parent_instance","","",173,null],[12,"priv_","","",173,null],[3,"GResolver","","",null,null],[12,"parent_instance","","",174,null],[12,"priv_","","",174,null],[3,"GSettings","","",null,null],[12,"parent_instance","","",175,null],[12,"priv_","","",175,null],[3,"GSettingsBackend","","",null,null],[12,"parent_instance","","",176,null],[12,"priv_","","",176,null],[3,"GSimpleAction","","",null,null],[3,"GSimpleActionGroup","","",null,null],[12,"parent_instance","","",177,null],[12,"priv_","","",177,null],[3,"GSimpleAsyncResult","","",null,null],[3,"GSimpleIOStream","","",null,null],[3,"GSimplePermission","","",null,null],[3,"GSimpleProxyResolver","","",null,null],[12,"parent_instance","","",178,null],[12,"priv_","","",178,null],[3,"GSocket","","",null,null],[12,"parent_instance","","",179,null],[12,"priv_","","",179,null],[3,"GSocketAddress","","",null,null],[12,"parent_instance","","",180,null],[3,"GSocketAddressEnumerator","","",null,null],[12,"parent_instance","","",181,null],[3,"GSocketClient","","",null,null],[12,"parent_instance","","",182,null],[12,"priv_","","",182,null],[3,"GSocketConnection","","",null,null],[12,"parent_instance","","",183,null],[12,"priv_","","",183,null],[3,"GSocketControlMessage","","",null,null],[12,"parent_instance","","",184,null],[12,"priv_","","",184,null],[3,"GSocketListener","","",null,null],[12,"parent_instance","","",185,null],[12,"priv_","","",185,null],[3,"GSocketService","","",null,null],[12,"parent_instance","","",186,null],[12,"priv_","","",186,null],[3,"GSubprocess","","",null,null],[3,"GSubprocessLauncher","","",null,null],[3,"GTask","","",null,null],[3,"GTcpConnection","","",null,null],[12,"parent_instance","","",187,null],[12,"priv_","","",187,null],[3,"GTcpWrapperConnection","","",null,null],[12,"parent_instance","","",188,null],[12,"priv_","","",188,null],[3,"GTestDBus","","",null,null],[3,"GThemedIcon","","",null,null],[3,"GThreadedSocketService","","",null,null],[12,"parent_instance","","",189,null],[12,"priv_","","",189,null],[3,"GTlsCertificate","","",null,null],[12,"parent_instance","","",190,null],[12,"priv_","","",190,null],[3,"GTlsConnection","","",null,null],[12,"parent_instance","","",191,null],[12,"priv_","","",191,null],[3,"GTlsDatabase","","",null,null],[12,"parent_instance","","",192,null],[12,"priv_","","",192,null],[3,"GTlsInteraction","","",null,null],[12,"parent_instance","","",193,null],[12,"priv_","","",193,null],[3,"GTlsPassword","","",null,null],[12,"parent_instance","","",194,null],[12,"priv_","","",194,null],[3,"GUnixConnection","","",null,null],[12,"parent_instance","","",195,null],[12,"priv_","","",195,null],[3,"GUnixCredentialsMessage","","",null,null],[12,"parent_instance","","",196,null],[12,"priv_","","",196,null],[3,"GUnixFDList","","",null,null],[12,"parent_instance","","",197,null],[12,"priv_","","",197,null],[3,"GUnixFDMessage","","",null,null],[12,"parent_instance","","",198,null],[12,"priv_","","",198,null],[3,"GUnixInputStream","","",null,null],[12,"parent_instance","","",199,null],[12,"priv_","","",199,null],[3,"GUnixMountMonitor","","",null,null],[3,"GUnixOutputStream","","",null,null],[12,"parent_instance","","",200,null],[12,"priv_","","",200,null],[3,"GUnixSocketAddress","","",null,null],[12,"parent_instance","","",201,null],[12,"priv_","","",201,null],[3,"GVfs","","",null,null],[12,"parent_instance","","",202,null],[3,"GVolumeMonitor","","",null,null],[12,"parent_instance","","",203,null],[12,"priv_","","",203,null],[3,"GZlibCompressor","","",null,null],[3,"GZlibDecompressor","","",null,null],[3,"GAction","","",null,null],[3,"GActionGroup","","",null,null],[3,"GActionMap","","",null,null],[3,"GAppInfo","","",null,null],[3,"GAsyncInitable","","",null,null],[3,"GAsyncResult","","",null,null],[3,"GConverter","","",null,null],[3,"GDBusInterface","","",null,null],[3,"GDBusObject","","",null,null],[3,"GDBusObjectManager","","",null,null],[3,"GDatagramBased","","",null,null],[3,"GDesktopAppInfoLookup","","",null,null],[3,"GDrive","","",null,null],[3,"GDtlsClientConnection","","",null,null],[3,"GDtlsConnection","","",null,null],[3,"GDtlsServerConnection","","",null,null],[3,"GFile","","",null,null],[3,"GFileDescriptorBased","","",null,null],[3,"GIcon","","",null,null],[3,"GInitable","","",null,null],[3,"GListModel","","",null,null],[3,"GLoadableIcon","","",null,null],[3,"GMount","","",null,null],[3,"GNetworkMonitor","","",null,null],[3,"GPollableInputStream","","",null,null],[3,"GPollableOutputStream","","",null,null],[3,"GProxy","","",null,null],[3,"GProxyResolver","","",null,null],[3,"GRemoteActionGroup","","",null,null],[3,"GSeekable","","",null,null],[3,"GSocketConnectable","","",null,null],[3,"GTlsBackend","","",null,null],[3,"GTlsClientConnection","","",null,null],[3,"GTlsFileDatabase","","",null,null],[3,"GTlsServerConnection","","",null,null],[3,"GVolume","","",null,null],[5,"g_bus_type_get_type","","",null,null],[5,"g_converter_result_get_type","","",null,null],[5,"g_credentials_type_get_type","","",null,null],[5,"g_dbus_error_get_type","","",null,null],[5,"g_dbus_error_encode_gerror","","",null,null],[5,"g_dbus_error_get_remote_error","","",null,null],[5,"g_dbus_error_is_remote_error","","",null,null],[5,"g_dbus_error_new_for_dbus_error","","",null,null],[5,"g_dbus_error_quark","","",null,null],[5,"g_dbus_error_register_error","","",null,null],[5,"g_dbus_error_register_error_domain","","",null,null],[5,"g_dbus_error_set_dbus_error","","",null,null],[5,"g_dbus_error_strip_remote_error","","",null,null],[5,"g_dbus_error_unregister_error","","",null,null],[5,"g_dbus_message_byte_order_get_type","","",null,null],[5,"g_dbus_message_header_field_get_type","","",null,null],[5,"g_dbus_message_type_get_type","","",null,null],[5,"g_data_stream_byte_order_get_type","","",null,null],[5,"g_data_stream_newline_type_get_type","","",null,null],[5,"g_drive_start_stop_type_get_type","","",null,null],[5,"g_emblem_origin_get_type","","",null,null],[5,"g_file_attribute_status_get_type","","",null,null],[5,"g_file_attribute_type_get_type","","",null,null],[5,"g_file_monitor_event_get_type","","",null,null],[5,"g_file_type_get_type","","",null,null],[5,"g_filesystem_preview_type_get_type","","",null,null],[5,"g_io_error_enum_get_type","","",null,null],[5,"g_io_module_scope_flags_get_type","","",null,null],[5,"g_mount_operation_result_get_type","","",null,null],[5,"g_network_connectivity_get_type","","",null,null],[5,"g_notification_priority_get_type","","",null,null],[5,"g_password_save_get_type","","",null,null],[5,"g_resolver_error_get_type","","",null,null],[5,"g_resolver_error_quark","","",null,null],[5,"g_resolver_record_type_get_type","","",null,null],[5,"g_resource_error_get_type","","",null,null],[5,"g_resource_error_quark","","",null,null],[5,"g_socket_client_event_get_type","","",null,null],[5,"g_socket_family_get_type","","",null,null],[5,"g_socket_listener_event_get_type","","",null,null],[5,"g_socket_protocol_get_type","","",null,null],[5,"g_socket_type_get_type","","",null,null],[5,"g_tls_authentication_mode_get_type","","",null,null],[5,"g_tls_certificate_request_flags_get_type","","",null,null],[5,"g_tls_database_lookup_flags_get_type","","",null,null],[5,"g_tls_error_get_type","","",null,null],[5,"g_tls_error_quark","","",null,null],[5,"g_tls_interaction_result_get_type","","",null,null],[5,"g_tls_rehandshake_mode_get_type","","",null,null],[5,"g_unix_socket_address_type_get_type","","",null,null],[5,"g_zlib_compressor_format_get_type","","",null,null],[5,"g_app_info_create_flags_get_type","","",null,null],[5,"g_application_flags_get_type","","",null,null],[5,"g_ask_password_flags_get_type","","",null,null],[5,"g_bus_name_owner_flags_get_type","","",null,null],[5,"g_bus_name_watcher_flags_get_type","","",null,null],[5,"g_converter_flags_get_type","","",null,null],[5,"g_dbus_call_flags_get_type","","",null,null],[5,"g_dbus_capability_flags_get_type","","",null,null],[5,"g_dbus_connection_flags_get_type","","",null,null],[5,"g_dbus_interface_skeleton_flags_get_type","","",null,null],[5,"g_dbus_message_flags_get_type","","",null,null],[5,"g_dbus_object_manager_client_flags_get_type","","",null,null],[5,"g_dbus_property_info_flags_get_type","","",null,null],[5,"g_dbus_proxy_flags_get_type","","",null,null],[5,"g_dbus_send_message_flags_get_type","","",null,null],[5,"g_dbus_server_flags_get_type","","",null,null],[5,"g_dbus_signal_flags_get_type","","",null,null],[5,"g_dbus_subtree_flags_get_type","","",null,null],[5,"g_drive_start_flags_get_type","","",null,null],[5,"g_file_attribute_info_flags_get_type","","",null,null],[5,"g_file_copy_flags_get_type","","",null,null],[5,"g_file_create_flags_get_type","","",null,null],[5,"g_file_measure_flags_get_type","","",null,null],[5,"g_file_monitor_flags_get_type","","",null,null],[5,"g_file_query_info_flags_get_type","","",null,null],[5,"g_io_stream_splice_flags_get_type","","",null,null],[5,"g_mount_mount_flags_get_type","","",null,null],[5,"g_mount_unmount_flags_get_type","","",null,null],[5,"g_output_stream_splice_flags_get_type","","",null,null],[5,"g_resource_flags_get_type","","",null,null],[5,"g_resource_lookup_flags_get_type","","",null,null],[5,"g_settings_bind_flags_get_type","","",null,null],[5,"g_socket_msg_flags_get_type","","",null,null],[5,"g_subprocess_flags_get_type","","",null,null],[5,"g_test_dbus_flags_get_type","","",null,null],[5,"g_tls_certificate_flags_get_type","","",null,null],[5,"g_tls_database_verify_flags_get_type","","",null,null],[5,"g_tls_password_flags_get_type","","",null,null],[5,"g_dbus_annotation_info_get_type","","",null,null],[5,"g_dbus_annotation_info_ref","","",null,null],[5,"g_dbus_annotation_info_unref","","",null,null],[5,"g_dbus_annotation_info_lookup","","",null,null],[5,"g_dbus_arg_info_get_type","","",null,null],[5,"g_dbus_arg_info_ref","","",null,null],[5,"g_dbus_arg_info_unref","","",null,null],[5,"g_dbus_interface_info_get_type","","",null,null],[5,"g_dbus_interface_info_cache_build","","",null,null],[5,"g_dbus_interface_info_cache_release","","",null,null],[5,"g_dbus_interface_info_generate_xml","","",null,null],[5,"g_dbus_interface_info_lookup_method","","",null,null],[5,"g_dbus_interface_info_lookup_property","","",null,null],[5,"g_dbus_interface_info_lookup_signal","","",null,null],[5,"g_dbus_interface_info_ref","","",null,null],[5,"g_dbus_interface_info_unref","","",null,null],[5,"g_dbus_method_info_get_type","","",null,null],[5,"g_dbus_method_info_ref","","",null,null],[5,"g_dbus_method_info_unref","","",null,null],[5,"g_dbus_node_info_get_type","","",null,null],[5,"g_dbus_node_info_new_for_xml","","",null,null],[5,"g_dbus_node_info_generate_xml","","",null,null],[5,"g_dbus_node_info_lookup_interface","","",null,null],[5,"g_dbus_node_info_ref","","",null,null],[5,"g_dbus_node_info_unref","","",null,null],[5,"g_dbus_property_info_get_type","","",null,null],[5,"g_dbus_property_info_ref","","",null,null],[5,"g_dbus_property_info_unref","","",null,null],[5,"g_dbus_signal_info_get_type","","",null,null],[5,"g_dbus_signal_info_ref","","",null,null],[5,"g_dbus_signal_info_unref","","",null,null],[5,"g_file_attribute_info_list_get_type","","",null,null],[5,"g_file_attribute_info_list_new","","",null,null],[5,"g_file_attribute_info_list_add","","",null,null],[5,"g_file_attribute_info_list_dup","","",null,null],[5,"g_file_attribute_info_list_lookup","","",null,null],[5,"g_file_attribute_info_list_ref","","",null,null],[5,"g_file_attribute_info_list_unref","","",null,null],[5,"g_file_attribute_matcher_get_type","","",null,null],[5,"g_file_attribute_matcher_new","","",null,null],[5,"g_file_attribute_matcher_enumerate_namespace","","",null,null],[5,"g_file_attribute_matcher_enumerate_next","","",null,null],[5,"g_file_attribute_matcher_matches","","",null,null],[5,"g_file_attribute_matcher_matches_only","","",null,null],[5,"g_file_attribute_matcher_ref","","",null,null],[5,"g_file_attribute_matcher_subtract","","",null,null],[5,"g_file_attribute_matcher_to_string","","",null,null],[5,"g_file_attribute_matcher_unref","","",null,null],[5,"g_io_extension_get_name","","",null,null],[5,"g_io_extension_get_priority","","",null,null],[5,"g_io_extension_get_type","","",null,null],[5,"g_io_extension_ref_class","","",null,null],[5,"g_io_extension_point_get_extension_by_name","","",null,null],[5,"g_io_extension_point_get_extensions","","",null,null],[5,"g_io_extension_point_get_required_type","","",null,null],[5,"g_io_extension_point_set_required_type","","",null,null],[5,"g_io_extension_point_implement","","",null,null],[5,"g_io_extension_point_lookup","","",null,null],[5,"g_io_extension_point_register","","",null,null],[5,"g_io_module_scope_block","","",null,null],[5,"g_io_module_scope_free","","",null,null],[5,"g_io_module_scope_new","","",null,null],[5,"g_io_scheduler_job_send_to_mainloop","","",null,null],[5,"g_io_scheduler_job_send_to_mainloop_async","","",null,null],[5,"g_resource_get_type","","",null,null],[5,"g_resource_new_from_data","","",null,null],[5,"g_resource_enumerate_children","","",null,null],[5,"g_resource_get_info","","",null,null],[5,"g_resource_lookup_data","","",null,null],[5,"g_resource_open_stream","","",null,null],[5,"g_resource_ref","","",null,null],[5,"g_resource_unref","","",null,null],[5,"g_resource_load","","",null,null],[5,"g_settings_schema_get_type","","",null,null],[5,"g_settings_schema_get_id","","",null,null],[5,"g_settings_schema_get_path","","",null,null],[5,"g_settings_schema_ref","","",null,null],[5,"g_settings_schema_unref","","",null,null],[5,"g_settings_schema_key_get_type","","",null,null],[5,"g_settings_schema_source_get_type","","",null,null],[5,"g_settings_schema_source_new_from_directory","","",null,null],[5,"g_settings_schema_source_lookup","","",null,null],[5,"g_settings_schema_source_ref","","",null,null],[5,"g_settings_schema_source_unref","","",null,null],[5,"g_settings_schema_source_get_default","","",null,null],[5,"g_srv_target_get_type","","",null,null],[5,"g_srv_target_new","","",null,null],[5,"g_srv_target_copy","","",null,null],[5,"g_srv_target_free","","",null,null],[5,"g_srv_target_get_hostname","","",null,null],[5,"g_srv_target_get_port","","",null,null],[5,"g_srv_target_get_priority","","",null,null],[5,"g_srv_target_get_weight","","",null,null],[5,"g_srv_target_list_sort","","",null,null],[5,"g_static_resource_fini","","",null,null],[5,"g_static_resource_get_resource","","",null,null],[5,"g_static_resource_init","","",null,null],[5,"g_unix_mount_entry_get_type","","",null,null],[5,"g_unix_mount_point_get_type","","",null,null],[5,"g_unix_mount_point_compare","","",null,null],[5,"g_unix_mount_point_free","","",null,null],[5,"g_unix_mount_point_get_device_path","","",null,null],[5,"g_unix_mount_point_get_fs_type","","",null,null],[5,"g_unix_mount_point_get_mount_path","","",null,null],[5,"g_unix_mount_point_get_options","","",null,null],[5,"g_unix_mount_point_guess_can_eject","","",null,null],[5,"g_unix_mount_point_guess_icon","","",null,null],[5,"g_unix_mount_point_guess_name","","",null,null],[5,"g_unix_mount_point_is_loopback","","",null,null],[5,"g_unix_mount_point_is_readonly","","",null,null],[5,"g_unix_mount_point_is_user_mountable","","",null,null],[5,"g_app_info_monitor_get_type","","",null,null],[5,"g_app_launch_context_get_type","","",null,null],[5,"g_app_launch_context_new","","",null,null],[5,"g_app_launch_context_get_display","","",null,null],[5,"g_app_launch_context_get_environment","","",null,null],[5,"g_app_launch_context_get_startup_notify_id","","",null,null],[5,"g_app_launch_context_launch_failed","","",null,null],[5,"g_app_launch_context_setenv","","",null,null],[5,"g_app_launch_context_unsetenv","","",null,null],[5,"g_application_get_type","","",null,null],[5,"g_application_new","","",null,null],[5,"g_application_get_default","","",null,null],[5,"g_application_id_is_valid","","",null,null],[5,"g_application_activate","","",null,null],[5,"g_application_get_application_id","","",null,null],[5,"g_application_get_flags","","",null,null],[5,"g_application_get_inactivity_timeout","","",null,null],[5,"g_application_get_is_registered","","",null,null],[5,"g_application_get_is_remote","","",null,null],[5,"g_application_hold","","",null,null],[5,"g_application_open","","",null,null],[5,"g_application_quit","","",null,null],[5,"g_application_register","","",null,null],[5,"g_application_release","","",null,null],[5,"g_application_run","","",null,null],[5,"g_application_set_action_group","","",null,null],[5,"g_application_set_application_id","","",null,null],[5,"g_application_set_default","","",null,null],[5,"g_application_set_flags","","",null,null],[5,"g_application_set_inactivity_timeout","","",null,null],[5,"g_application_command_line_get_type","","",null,null],[5,"g_application_command_line_get_arguments","","",null,null],[5,"g_application_command_line_get_cwd","","",null,null],[5,"g_application_command_line_get_environ","","",null,null],[5,"g_application_command_line_get_exit_status","","",null,null],[5,"g_application_command_line_get_is_remote","","",null,null],[5,"g_application_command_line_get_platform_data","","",null,null],[5,"g_application_command_line_getenv","","",null,null],[5,"g_application_command_line_print","","",null,null],[5,"g_application_command_line_printerr","","",null,null],[5,"g_application_command_line_set_exit_status","","",null,null],[5,"g_buffered_input_stream_get_type","","",null,null],[5,"g_buffered_input_stream_new","","",null,null],[5,"g_buffered_input_stream_new_sized","","",null,null],[5,"g_buffered_input_stream_fill","","",null,null],[5,"g_buffered_input_stream_fill_async","","",null,null],[5,"g_buffered_input_stream_fill_finish","","",null,null],[5,"g_buffered_input_stream_get_available","","",null,null],[5,"g_buffered_input_stream_get_buffer_size","","",null,null],[5,"g_buffered_input_stream_peek","","",null,null],[5,"g_buffered_input_stream_peek_buffer","","",null,null],[5,"g_buffered_input_stream_read_byte","","",null,null],[5,"g_buffered_input_stream_set_buffer_size","","",null,null],[5,"g_buffered_output_stream_get_type","","",null,null],[5,"g_buffered_output_stream_new","","",null,null],[5,"g_buffered_output_stream_new_sized","","",null,null],[5,"g_buffered_output_stream_get_auto_grow","","",null,null],[5,"g_buffered_output_stream_get_buffer_size","","",null,null],[5,"g_buffered_output_stream_set_auto_grow","","",null,null],[5,"g_buffered_output_stream_set_buffer_size","","",null,null],[5,"g_bytes_icon_get_type","","",null,null],[5,"g_cancellable_get_type","","",null,null],[5,"g_cancellable_new","","",null,null],[5,"g_cancellable_get_current","","",null,null],[5,"g_cancellable_cancel","","",null,null],[5,"g_cancellable_connect","","",null,null],[5,"g_cancellable_disconnect","","",null,null],[5,"g_cancellable_get_fd","","",null,null],[5,"g_cancellable_is_cancelled","","",null,null],[5,"g_cancellable_make_pollfd","","",null,null],[5,"g_cancellable_pop_current","","",null,null],[5,"g_cancellable_push_current","","",null,null],[5,"g_cancellable_release_fd","","",null,null],[5,"g_cancellable_reset","","",null,null],[5,"g_cancellable_set_error_if_cancelled","","",null,null],[5,"g_cancellable_source_new","","",null,null],[5,"g_charset_converter_get_type","","",null,null],[5,"g_charset_converter_new","","",null,null],[5,"g_charset_converter_get_num_fallbacks","","",null,null],[5,"g_charset_converter_get_use_fallback","","",null,null],[5,"g_charset_converter_set_use_fallback","","",null,null],[5,"g_converter_input_stream_get_type","","",null,null],[5,"g_converter_input_stream_new","","",null,null],[5,"g_converter_input_stream_get_converter","","",null,null],[5,"g_converter_output_stream_get_type","","",null,null],[5,"g_converter_output_stream_new","","",null,null],[5,"g_converter_output_stream_get_converter","","",null,null],[5,"g_credentials_get_type","","",null,null],[5,"g_credentials_new","","",null,null],[5,"g_credentials_get_native","","",null,null],[5,"g_credentials_get_unix_user","","",null,null],[5,"g_credentials_is_same_user","","",null,null],[5,"g_credentials_set_native","","",null,null],[5,"g_credentials_set_unix_user","","",null,null],[5,"g_credentials_to_string","","",null,null],[5,"g_dbus_action_group_get_type","","",null,null],[5,"g_dbus_action_group_get","","",null,null],[5,"g_dbus_auth_observer_get_type","","",null,null],[5,"g_dbus_auth_observer_new","","",null,null],[5,"g_dbus_auth_observer_authorize_authenticated_peer","","",null,null],[5,"g_dbus_connection_get_type","","",null,null],[5,"g_dbus_connection_new_finish","","",null,null],[5,"g_dbus_connection_new_for_address_finish","","",null,null],[5,"g_dbus_connection_new_for_address_sync","","",null,null],[5,"g_dbus_connection_new_sync","","",null,null],[5,"g_dbus_connection_new","","",null,null],[5,"g_dbus_connection_new_for_address","","",null,null],[5,"g_dbus_connection_add_filter","","",null,null],[5,"g_dbus_connection_call","","",null,null],[5,"g_dbus_connection_call_finish","","",null,null],[5,"g_dbus_connection_call_sync","","",null,null],[5,"g_dbus_connection_call_with_unix_fd_list","","",null,null],[5,"g_dbus_connection_call_with_unix_fd_list_finish","","",null,null],[5,"g_dbus_connection_call_with_unix_fd_list_sync","","",null,null],[5,"g_dbus_connection_close","","",null,null],[5,"g_dbus_connection_close_finish","","",null,null],[5,"g_dbus_connection_close_sync","","",null,null],[5,"g_dbus_connection_emit_signal","","",null,null],[5,"g_dbus_connection_export_action_group","","",null,null],[5,"g_dbus_connection_export_menu_model","","",null,null],[5,"g_dbus_connection_flush","","",null,null],[5,"g_dbus_connection_flush_finish","","",null,null],[5,"g_dbus_connection_flush_sync","","",null,null],[5,"g_dbus_connection_get_capabilities","","",null,null],[5,"g_dbus_connection_get_exit_on_close","","",null,null],[5,"g_dbus_connection_get_guid","","",null,null],[5,"g_dbus_connection_get_peer_credentials","","",null,null],[5,"g_dbus_connection_get_stream","","",null,null],[5,"g_dbus_connection_get_unique_name","","",null,null],[5,"g_dbus_connection_is_closed","","",null,null],[5,"g_dbus_connection_register_object","","",null,null],[5,"g_dbus_connection_register_subtree","","",null,null],[5,"g_dbus_connection_remove_filter","","",null,null],[5,"g_dbus_connection_send_message","","",null,null],[5,"g_dbus_connection_send_message_with_reply","","",null,null],[5,"g_dbus_connection_send_message_with_reply_finish","","",null,null],[5,"g_dbus_connection_send_message_with_reply_sync","","",null,null],[5,"g_dbus_connection_set_exit_on_close","","",null,null],[5,"g_dbus_connection_signal_subscribe","","",null,null],[5,"g_dbus_connection_signal_unsubscribe","","",null,null],[5,"g_dbus_connection_start_message_processing","","",null,null],[5,"g_dbus_connection_unexport_action_group","","",null,null],[5,"g_dbus_connection_unexport_menu_model","","",null,null],[5,"g_dbus_connection_unregister_object","","",null,null],[5,"g_dbus_connection_unregister_subtree","","",null,null],[5,"g_dbus_interface_skeleton_get_type","","",null,null],[5,"g_dbus_interface_skeleton_export","","",null,null],[5,"g_dbus_interface_skeleton_flush","","",null,null],[5,"g_dbus_interface_skeleton_get_connection","","",null,null],[5,"g_dbus_interface_skeleton_get_connections","","",null,null],[5,"g_dbus_interface_skeleton_get_flags","","",null,null],[5,"g_dbus_interface_skeleton_get_info","","",null,null],[5,"g_dbus_interface_skeleton_get_object_path","","",null,null],[5,"g_dbus_interface_skeleton_get_properties","","",null,null],[5,"g_dbus_interface_skeleton_get_vtable","","",null,null],[5,"g_dbus_interface_skeleton_has_connection","","",null,null],[5,"g_dbus_interface_skeleton_set_flags","","",null,null],[5,"g_dbus_interface_skeleton_unexport","","",null,null],[5,"g_dbus_interface_skeleton_unexport_from_connection","","",null,null],[5,"g_dbus_menu_model_get_type","","",null,null],[5,"g_dbus_menu_model_get","","",null,null],[5,"g_dbus_message_get_type","","",null,null],[5,"g_dbus_message_new","","",null,null],[5,"g_dbus_message_new_from_blob","","",null,null],[5,"g_dbus_message_new_method_call","","",null,null],[5,"g_dbus_message_new_signal","","",null,null],[5,"g_dbus_message_bytes_needed","","",null,null],[5,"g_dbus_message_copy","","",null,null],[5,"g_dbus_message_get_arg0","","",null,null],[5,"g_dbus_message_get_body","","",null,null],[5,"g_dbus_message_get_byte_order","","",null,null],[5,"g_dbus_message_get_destination","","",null,null],[5,"g_dbus_message_get_error_name","","",null,null],[5,"g_dbus_message_get_flags","","",null,null],[5,"g_dbus_message_get_header","","",null,null],[5,"g_dbus_message_get_header_fields","","",null,null],[5,"g_dbus_message_get_interface","","",null,null],[5,"g_dbus_message_get_locked","","",null,null],[5,"g_dbus_message_get_member","","",null,null],[5,"g_dbus_message_get_message_type","","",null,null],[5,"g_dbus_message_get_num_unix_fds","","",null,null],[5,"g_dbus_message_get_path","","",null,null],[5,"g_dbus_message_get_reply_serial","","",null,null],[5,"g_dbus_message_get_sender","","",null,null],[5,"g_dbus_message_get_serial","","",null,null],[5,"g_dbus_message_get_signature","","",null,null],[5,"g_dbus_message_get_unix_fd_list","","",null,null],[5,"g_dbus_message_lock","","",null,null],[5,"g_dbus_message_new_method_error","","",null,null],[5,"g_dbus_message_new_method_error_literal","","",null,null],[5,"g_dbus_message_new_method_reply","","",null,null],[5,"g_dbus_message_print","","",null,null],[5,"g_dbus_message_set_body","","",null,null],[5,"g_dbus_message_set_byte_order","","",null,null],[5,"g_dbus_message_set_destination","","",null,null],[5,"g_dbus_message_set_error_name","","",null,null],[5,"g_dbus_message_set_flags","","",null,null],[5,"g_dbus_message_set_header","","",null,null],[5,"g_dbus_message_set_interface","","",null,null],[5,"g_dbus_message_set_member","","",null,null],[5,"g_dbus_message_set_message_type","","",null,null],[5,"g_dbus_message_set_num_unix_fds","","",null,null],[5,"g_dbus_message_set_path","","",null,null],[5,"g_dbus_message_set_reply_serial","","",null,null],[5,"g_dbus_message_set_sender","","",null,null],[5,"g_dbus_message_set_serial","","",null,null],[5,"g_dbus_message_set_signature","","",null,null],[5,"g_dbus_message_set_unix_fd_list","","",null,null],[5,"g_dbus_message_to_blob","","",null,null],[5,"g_dbus_message_to_gerror","","",null,null],[5,"g_dbus_method_invocation_get_type","","",null,null],[5,"g_dbus_method_invocation_get_connection","","",null,null],[5,"g_dbus_method_invocation_get_interface_name","","",null,null],[5,"g_dbus_method_invocation_get_message","","",null,null],[5,"g_dbus_method_invocation_get_method_info","","",null,null],[5,"g_dbus_method_invocation_get_method_name","","",null,null],[5,"g_dbus_method_invocation_get_object_path","","",null,null],[5,"g_dbus_method_invocation_get_parameters","","",null,null],[5,"g_dbus_method_invocation_get_sender","","",null,null],[5,"g_dbus_method_invocation_get_user_data","","",null,null],[5,"g_dbus_method_invocation_return_dbus_error","","",null,null],[5,"g_dbus_method_invocation_return_error","","",null,null],[5,"g_dbus_method_invocation_return_error_literal","","",null,null],[5,"g_dbus_method_invocation_return_gerror","","",null,null],[5,"g_dbus_method_invocation_return_value","","",null,null],[5,"g_dbus_method_invocation_return_value_with_unix_fd_list","","",null,null],[5,"g_dbus_method_invocation_take_error","","",null,null],[5,"g_dbus_object_manager_client_get_type","","",null,null],[5,"g_dbus_object_manager_client_new_finish","","",null,null],[5,"g_dbus_object_manager_client_new_for_bus_finish","","",null,null],[5,"g_dbus_object_manager_client_new_for_bus_sync","","",null,null],[5,"g_dbus_object_manager_client_new_sync","","",null,null],[5,"g_dbus_object_manager_client_new","","",null,null],[5,"g_dbus_object_manager_client_new_for_bus","","",null,null],[5,"g_dbus_object_manager_client_get_connection","","",null,null],[5,"g_dbus_object_manager_client_get_flags","","",null,null],[5,"g_dbus_object_manager_client_get_name","","",null,null],[5,"g_dbus_object_manager_client_get_name_owner","","",null,null],[5,"g_dbus_object_manager_server_get_type","","",null,null],[5,"g_dbus_object_manager_server_new","","",null,null],[5,"g_dbus_object_manager_server_export","","",null,null],[5,"g_dbus_object_manager_server_export_uniquely","","",null,null],[5,"g_dbus_object_manager_server_get_connection","","",null,null],[5,"g_dbus_object_manager_server_set_connection","","",null,null],[5,"g_dbus_object_manager_server_unexport","","",null,null],[5,"g_dbus_object_proxy_get_type","","",null,null],[5,"g_dbus_object_proxy_new","","",null,null],[5,"g_dbus_object_proxy_get_connection","","",null,null],[5,"g_dbus_object_skeleton_get_type","","",null,null],[5,"g_dbus_object_skeleton_new","","",null,null],[5,"g_dbus_object_skeleton_add_interface","","",null,null],[5,"g_dbus_object_skeleton_flush","","",null,null],[5,"g_dbus_object_skeleton_remove_interface","","",null,null],[5,"g_dbus_object_skeleton_remove_interface_by_name","","",null,null],[5,"g_dbus_object_skeleton_set_object_path","","",null,null],[5,"g_dbus_proxy_get_type","","",null,null],[5,"g_dbus_proxy_new_finish","","",null,null],[5,"g_dbus_proxy_new_for_bus_finish","","",null,null],[5,"g_dbus_proxy_new_for_bus_sync","","",null,null],[5,"g_dbus_proxy_new_sync","","",null,null],[5,"g_dbus_proxy_new","","",null,null],[5,"g_dbus_proxy_new_for_bus","","",null,null],[5,"g_dbus_proxy_call","","",null,null],[5,"g_dbus_proxy_call_finish","","",null,null],[5,"g_dbus_proxy_call_sync","","",null,null],[5,"g_dbus_proxy_call_with_unix_fd_list","","",null,null],[5,"g_dbus_proxy_call_with_unix_fd_list_finish","","",null,null],[5,"g_dbus_proxy_call_with_unix_fd_list_sync","","",null,null],[5,"g_dbus_proxy_get_cached_property","","",null,null],[5,"g_dbus_proxy_get_cached_property_names","","",null,null],[5,"g_dbus_proxy_get_connection","","",null,null],[5,"g_dbus_proxy_get_default_timeout","","",null,null],[5,"g_dbus_proxy_get_flags","","",null,null],[5,"g_dbus_proxy_get_interface_info","","",null,null],[5,"g_dbus_proxy_get_interface_name","","",null,null],[5,"g_dbus_proxy_get_name","","",null,null],[5,"g_dbus_proxy_get_name_owner","","",null,null],[5,"g_dbus_proxy_get_object_path","","",null,null],[5,"g_dbus_proxy_set_cached_property","","",null,null],[5,"g_dbus_proxy_set_default_timeout","","",null,null],[5,"g_dbus_proxy_set_interface_info","","",null,null],[5,"g_dbus_server_get_type","","",null,null],[5,"g_dbus_server_new_sync","","",null,null],[5,"g_dbus_server_get_client_address","","",null,null],[5,"g_dbus_server_get_flags","","",null,null],[5,"g_dbus_server_get_guid","","",null,null],[5,"g_dbus_server_is_active","","",null,null],[5,"g_dbus_server_start","","",null,null],[5,"g_dbus_server_stop","","",null,null],[5,"g_data_input_stream_get_type","","",null,null],[5,"g_data_input_stream_new","","",null,null],[5,"g_data_input_stream_get_byte_order","","",null,null],[5,"g_data_input_stream_get_newline_type","","",null,null],[5,"g_data_input_stream_read_byte","","",null,null],[5,"g_data_input_stream_read_int16","","",null,null],[5,"g_data_input_stream_read_int32","","",null,null],[5,"g_data_input_stream_read_int64","","",null,null],[5,"g_data_input_stream_read_line","","",null,null],[5,"g_data_input_stream_read_line_async","","",null,null],[5,"g_data_input_stream_read_line_finish","","",null,null],[5,"g_data_input_stream_read_line_finish_utf8","","",null,null],[5,"g_data_input_stream_read_line_utf8","","",null,null],[5,"g_data_input_stream_read_uint16","","",null,null],[5,"g_data_input_stream_read_uint32","","",null,null],[5,"g_data_input_stream_read_uint64","","",null,null],[5,"g_data_input_stream_read_until","","",null,null],[5,"g_data_input_stream_read_until_async","","",null,null],[5,"g_data_input_stream_read_until_finish","","",null,null],[5,"g_data_input_stream_read_upto","","",null,null],[5,"g_data_input_stream_read_upto_async","","",null,null],[5,"g_data_input_stream_read_upto_finish","","",null,null],[5,"g_data_input_stream_set_byte_order","","",null,null],[5,"g_data_input_stream_set_newline_type","","",null,null],[5,"g_data_output_stream_get_type","","",null,null],[5,"g_data_output_stream_new","","",null,null],[5,"g_data_output_stream_get_byte_order","","",null,null],[5,"g_data_output_stream_put_byte","","",null,null],[5,"g_data_output_stream_put_int16","","",null,null],[5,"g_data_output_stream_put_int32","","",null,null],[5,"g_data_output_stream_put_int64","","",null,null],[5,"g_data_output_stream_put_string","","",null,null],[5,"g_data_output_stream_put_uint16","","",null,null],[5,"g_data_output_stream_put_uint32","","",null,null],[5,"g_data_output_stream_put_uint64","","",null,null],[5,"g_data_output_stream_set_byte_order","","",null,null],[5,"g_desktop_app_info_get_type","","",null,null],[5,"g_desktop_app_info_new","","",null,null],[5,"g_desktop_app_info_new_from_filename","","",null,null],[5,"g_desktop_app_info_new_from_keyfile","","",null,null],[5,"g_desktop_app_info_search","","",null,null],[5,"g_desktop_app_info_set_desktop_env","","",null,null],[5,"g_desktop_app_info_get_categories","","",null,null],[5,"g_desktop_app_info_get_filename","","",null,null],[5,"g_desktop_app_info_get_generic_name","","",null,null],[5,"g_desktop_app_info_get_is_hidden","","",null,null],[5,"g_desktop_app_info_get_keywords","","",null,null],[5,"g_desktop_app_info_get_nodisplay","","",null,null],[5,"g_desktop_app_info_get_show_in","","",null,null],[5,"g_desktop_app_info_launch_uris_as_manager","","",null,null],[5,"g_emblem_get_type","","",null,null],[5,"g_emblem_new","","",null,null],[5,"g_emblem_new_with_origin","","",null,null],[5,"g_emblem_get_icon","","",null,null],[5,"g_emblem_get_origin","","",null,null],[5,"g_emblemed_icon_get_type","","",null,null],[5,"g_emblemed_icon_new","","",null,null],[5,"g_emblemed_icon_add_emblem","","",null,null],[5,"g_emblemed_icon_clear_emblems","","",null,null],[5,"g_emblemed_icon_get_emblems","","",null,null],[5,"g_emblemed_icon_get_icon","","",null,null],[5,"g_file_enumerator_get_type","","",null,null],[5,"g_file_enumerator_close","","",null,null],[5,"g_file_enumerator_close_async","","",null,null],[5,"g_file_enumerator_close_finish","","",null,null],[5,"g_file_enumerator_get_container","","",null,null],[5,"g_file_enumerator_has_pending","","",null,null],[5,"g_file_enumerator_is_closed","","",null,null],[5,"g_file_enumerator_next_file","","",null,null],[5,"g_file_enumerator_next_files_async","","",null,null],[5,"g_file_enumerator_next_files_finish","","",null,null],[5,"g_file_enumerator_set_pending","","",null,null],[5,"g_file_io_stream_get_type","","",null,null],[5,"g_file_io_stream_get_etag","","",null,null],[5,"g_file_io_stream_query_info","","",null,null],[5,"g_file_io_stream_query_info_async","","",null,null],[5,"g_file_io_stream_query_info_finish","","",null,null],[5,"g_file_icon_get_type","","",null,null],[5,"g_file_icon_new","","",null,null],[5,"g_file_icon_get_file","","",null,null],[5,"g_file_info_get_type","","",null,null],[5,"g_file_info_new","","",null,null],[5,"g_file_info_clear_status","","",null,null],[5,"g_file_info_copy_into","","",null,null],[5,"g_file_info_dup","","",null,null],[5,"g_file_info_get_attribute_as_string","","",null,null],[5,"g_file_info_get_attribute_boolean","","",null,null],[5,"g_file_info_get_attribute_byte_string","","",null,null],[5,"g_file_info_get_attribute_data","","",null,null],[5,"g_file_info_get_attribute_int32","","",null,null],[5,"g_file_info_get_attribute_int64","","",null,null],[5,"g_file_info_get_attribute_object","","",null,null],[5,"g_file_info_get_attribute_status","","",null,null],[5,"g_file_info_get_attribute_string","","",null,null],[5,"g_file_info_get_attribute_stringv","","",null,null],[5,"g_file_info_get_attribute_type","","",null,null],[5,"g_file_info_get_attribute_uint32","","",null,null],[5,"g_file_info_get_attribute_uint64","","",null,null],[5,"g_file_info_get_content_type","","",null,null],[5,"g_file_info_get_display_name","","",null,null],[5,"g_file_info_get_edit_name","","",null,null],[5,"g_file_info_get_etag","","",null,null],[5,"g_file_info_get_file_type","","",null,null],[5,"g_file_info_get_icon","","",null,null],[5,"g_file_info_get_is_backup","","",null,null],[5,"g_file_info_get_is_hidden","","",null,null],[5,"g_file_info_get_is_symlink","","",null,null],[5,"g_file_info_get_modification_time","","",null,null],[5,"g_file_info_get_name","","",null,null],[5,"g_file_info_get_size","","",null,null],[5,"g_file_info_get_sort_order","","",null,null],[5,"g_file_info_get_symlink_target","","",null,null],[5,"g_file_info_has_attribute","","",null,null],[5,"g_file_info_has_namespace","","",null,null],[5,"g_file_info_list_attributes","","",null,null],[5,"g_file_info_remove_attribute","","",null,null],[5,"g_file_info_set_attribute","","",null,null],[5,"g_file_info_set_attribute_boolean","","",null,null],[5,"g_file_info_set_attribute_byte_string","","",null,null],[5,"g_file_info_set_attribute_int32","","",null,null],[5,"g_file_info_set_attribute_int64","","",null,null],[5,"g_file_info_set_attribute_mask","","",null,null],[5,"g_file_info_set_attribute_object","","",null,null],[5,"g_file_info_set_attribute_status","","",null,null],[5,"g_file_info_set_attribute_string","","",null,null],[5,"g_file_info_set_attribute_stringv","","",null,null],[5,"g_file_info_set_attribute_uint32","","",null,null],[5,"g_file_info_set_attribute_uint64","","",null,null],[5,"g_file_info_set_content_type","","",null,null],[5,"g_file_info_set_display_name","","",null,null],[5,"g_file_info_set_edit_name","","",null,null],[5,"g_file_info_set_file_type","","",null,null],[5,"g_file_info_set_icon","","",null,null],[5,"g_file_info_set_is_hidden","","",null,null],[5,"g_file_info_set_is_symlink","","",null,null],[5,"g_file_info_set_modification_time","","",null,null],[5,"g_file_info_set_name","","",null,null],[5,"g_file_info_set_size","","",null,null],[5,"g_file_info_set_sort_order","","",null,null],[5,"g_file_info_set_symlink_target","","",null,null],[5,"g_file_info_unset_attribute_mask","","",null,null],[5,"g_file_input_stream_get_type","","",null,null],[5,"g_file_input_stream_query_info","","",null,null],[5,"g_file_input_stream_query_info_async","","",null,null],[5,"g_file_input_stream_query_info_finish","","",null,null],[5,"g_file_monitor_get_type","","",null,null],[5,"g_file_monitor_cancel","","",null,null],[5,"g_file_monitor_emit_event","","",null,null],[5,"g_file_monitor_is_cancelled","","",null,null],[5,"g_file_monitor_set_rate_limit","","",null,null],[5,"g_file_output_stream_get_type","","",null,null],[5,"g_file_output_stream_get_etag","","",null,null],[5,"g_file_output_stream_query_info","","",null,null],[5,"g_file_output_stream_query_info_async","","",null,null],[5,"g_file_output_stream_query_info_finish","","",null,null],[5,"g_filename_completer_get_type","","",null,null],[5,"g_filename_completer_new","","",null,null],[5,"g_filename_completer_get_completion_suffix","","",null,null],[5,"g_filename_completer_get_completions","","",null,null],[5,"g_filename_completer_set_dirs_only","","",null,null],[5,"g_filter_input_stream_get_type","","",null,null],[5,"g_filter_input_stream_get_base_stream","","",null,null],[5,"g_filter_input_stream_get_close_base_stream","","",null,null],[5,"g_filter_input_stream_set_close_base_stream","","",null,null],[5,"g_filter_output_stream_get_type","","",null,null],[5,"g_filter_output_stream_get_base_stream","","",null,null],[5,"g_filter_output_stream_get_close_base_stream","","",null,null],[5,"g_filter_output_stream_set_close_base_stream","","",null,null],[5,"g_io_module_get_type","","",null,null],[5,"g_io_module_new","","",null,null],[5,"g_io_module_query","","",null,null],[5,"g_io_module_load","","",null,null],[5,"g_io_module_unload","","",null,null],[5,"g_io_stream_get_type","","",null,null],[5,"g_io_stream_splice_finish","","",null,null],[5,"g_io_stream_clear_pending","","",null,null],[5,"g_io_stream_close","","",null,null],[5,"g_io_stream_close_async","","",null,null],[5,"g_io_stream_close_finish","","",null,null],[5,"g_io_stream_get_input_stream","","",null,null],[5,"g_io_stream_get_output_stream","","",null,null],[5,"g_io_stream_has_pending","","",null,null],[5,"g_io_stream_is_closed","","",null,null],[5,"g_io_stream_set_pending","","",null,null],[5,"g_io_stream_splice_async","","",null,null],[5,"g_inet_address_get_type","","",null,null],[5,"g_inet_address_new_any","","",null,null],[5,"g_inet_address_new_from_bytes","","",null,null],[5,"g_inet_address_new_from_string","","",null,null],[5,"g_inet_address_new_loopback","","",null,null],[5,"g_inet_address_equal","","",null,null],[5,"g_inet_address_get_family","","",null,null],[5,"g_inet_address_get_is_any","","",null,null],[5,"g_inet_address_get_is_link_local","","",null,null],[5,"g_inet_address_get_is_loopback","","",null,null],[5,"g_inet_address_get_is_mc_global","","",null,null],[5,"g_inet_address_get_is_mc_link_local","","",null,null],[5,"g_inet_address_get_is_mc_node_local","","",null,null],[5,"g_inet_address_get_is_mc_org_local","","",null,null],[5,"g_inet_address_get_is_mc_site_local","","",null,null],[5,"g_inet_address_get_is_multicast","","",null,null],[5,"g_inet_address_get_is_site_local","","",null,null],[5,"g_inet_address_get_native_size","","",null,null],[5,"g_inet_address_to_bytes","","",null,null],[5,"g_inet_address_to_string","","",null,null],[5,"g_inet_address_mask_get_type","","",null,null],[5,"g_inet_address_mask_new","","",null,null],[5,"g_inet_address_mask_new_from_string","","",null,null],[5,"g_inet_address_mask_equal","","",null,null],[5,"g_inet_address_mask_get_address","","",null,null],[5,"g_inet_address_mask_get_family","","",null,null],[5,"g_inet_address_mask_get_length","","",null,null],[5,"g_inet_address_mask_matches","","",null,null],[5,"g_inet_address_mask_to_string","","",null,null],[5,"g_inet_socket_address_get_type","","",null,null],[5,"g_inet_socket_address_new","","",null,null],[5,"g_inet_socket_address_get_address","","",null,null],[5,"g_inet_socket_address_get_flowinfo","","",null,null],[5,"g_inet_socket_address_get_port","","",null,null],[5,"g_inet_socket_address_get_scope_id","","",null,null],[5,"g_input_stream_get_type","","",null,null],[5,"g_input_stream_clear_pending","","",null,null],[5,"g_input_stream_close","","",null,null],[5,"g_input_stream_close_async","","",null,null],[5,"g_input_stream_close_finish","","",null,null],[5,"g_input_stream_has_pending","","",null,null],[5,"g_input_stream_is_closed","","",null,null],[5,"g_input_stream_read","","",null,null],[5,"g_input_stream_read_all","","",null,null],[5,"g_input_stream_read_async","","",null,null],[5,"g_input_stream_read_finish","","",null,null],[5,"g_input_stream_set_pending","","",null,null],[5,"g_input_stream_skip","","",null,null],[5,"g_input_stream_skip_async","","",null,null],[5,"g_input_stream_skip_finish","","",null,null],[5,"g_list_store_get_type","","",null,null],[5,"g_memory_input_stream_get_type","","",null,null],[5,"g_memory_input_stream_new","","",null,null],[5,"g_memory_input_stream_new_from_data","","",null,null],[5,"g_memory_input_stream_add_data","","",null,null],[5,"g_memory_output_stream_get_type","","",null,null],[5,"g_memory_output_stream_new","","",null,null],[5,"g_memory_output_stream_get_data","","",null,null],[5,"g_memory_output_stream_get_data_size","","",null,null],[5,"g_memory_output_stream_get_size","","",null,null],[5,"g_memory_output_stream_steal_data","","",null,null],[5,"g_menu_get_type","","",null,null],[5,"g_menu_new","","",null,null],[5,"g_menu_append","","",null,null],[5,"g_menu_append_item","","",null,null],[5,"g_menu_append_section","","",null,null],[5,"g_menu_append_submenu","","",null,null],[5,"g_menu_freeze","","",null,null],[5,"g_menu_insert","","",null,null],[5,"g_menu_insert_item","","",null,null],[5,"g_menu_insert_section","","",null,null],[5,"g_menu_insert_submenu","","",null,null],[5,"g_menu_prepend","","",null,null],[5,"g_menu_prepend_item","","",null,null],[5,"g_menu_prepend_section","","",null,null],[5,"g_menu_prepend_submenu","","",null,null],[5,"g_menu_remove","","",null,null],[5,"g_menu_attribute_iter_get_type","","",null,null],[5,"g_menu_attribute_iter_get_name","","",null,null],[5,"g_menu_attribute_iter_get_next","","",null,null],[5,"g_menu_attribute_iter_get_value","","",null,null],[5,"g_menu_attribute_iter_next","","",null,null],[5,"g_menu_item_get_type","","",null,null],[5,"g_menu_item_new","","",null,null],[5,"g_menu_item_new_section","","",null,null],[5,"g_menu_item_new_submenu","","",null,null],[5,"g_menu_item_set_action_and_target","","",null,null],[5,"g_menu_item_set_action_and_target_value","","",null,null],[5,"g_menu_item_set_attribute","","",null,null],[5,"g_menu_item_set_attribute_value","","",null,null],[5,"g_menu_item_set_detailed_action","","",null,null],[5,"g_menu_item_set_label","","",null,null],[5,"g_menu_item_set_link","","",null,null],[5,"g_menu_item_set_section","","",null,null],[5,"g_menu_item_set_submenu","","",null,null],[5,"g_menu_link_iter_get_type","","",null,null],[5,"g_menu_link_iter_get_name","","",null,null],[5,"g_menu_link_iter_get_next","","",null,null],[5,"g_menu_link_iter_get_value","","",null,null],[5,"g_menu_link_iter_next","","",null,null],[5,"g_menu_model_get_type","","",null,null],[5,"g_menu_model_get_item_attribute","","",null,null],[5,"g_menu_model_get_item_attribute_value","","",null,null],[5,"g_menu_model_get_item_link","","",null,null],[5,"g_menu_model_get_n_items","","",null,null],[5,"g_menu_model_is_mutable","","",null,null],[5,"g_menu_model_items_changed","","",null,null],[5,"g_menu_model_iterate_item_attributes","","",null,null],[5,"g_menu_model_iterate_item_links","","",null,null],[5,"g_mount_operation_get_type","","",null,null],[5,"g_mount_operation_new","","",null,null],[5,"g_mount_operation_get_anonymous","","",null,null],[5,"g_mount_operation_get_choice","","",null,null],[5,"g_mount_operation_get_domain","","",null,null],[5,"g_mount_operation_get_password","","",null,null],[5,"g_mount_operation_get_password_save","","",null,null],[5,"g_mount_operation_get_username","","",null,null],[5,"g_mount_operation_reply","","",null,null],[5,"g_mount_operation_set_anonymous","","",null,null],[5,"g_mount_operation_set_choice","","",null,null],[5,"g_mount_operation_set_domain","","",null,null],[5,"g_mount_operation_set_password","","",null,null],[5,"g_mount_operation_set_password_save","","",null,null],[5,"g_mount_operation_set_username","","",null,null],[5,"g_native_volume_monitor_get_type","","",null,null],[5,"g_network_address_get_type","","",null,null],[5,"g_network_address_new","","",null,null],[5,"g_network_address_parse","","",null,null],[5,"g_network_address_parse_uri","","",null,null],[5,"g_network_address_get_hostname","","",null,null],[5,"g_network_address_get_port","","",null,null],[5,"g_network_address_get_scheme","","",null,null],[5,"g_network_service_get_type","","",null,null],[5,"g_network_service_new","","",null,null],[5,"g_network_service_get_domain","","",null,null],[5,"g_network_service_get_protocol","","",null,null],[5,"g_network_service_get_scheme","","",null,null],[5,"g_network_service_get_service","","",null,null],[5,"g_network_service_set_scheme","","",null,null],[5,"g_notification_get_type","","",null,null],[5,"g_output_stream_get_type","","",null,null],[5,"g_output_stream_clear_pending","","",null,null],[5,"g_output_stream_close","","",null,null],[5,"g_output_stream_close_async","","",null,null],[5,"g_output_stream_close_finish","","",null,null],[5,"g_output_stream_flush","","",null,null],[5,"g_output_stream_flush_async","","",null,null],[5,"g_output_stream_flush_finish","","",null,null],[5,"g_output_stream_has_pending","","",null,null],[5,"g_output_stream_is_closed","","",null,null],[5,"g_output_stream_is_closing","","",null,null],[5,"g_output_stream_set_pending","","",null,null],[5,"g_output_stream_splice","","",null,null],[5,"g_output_stream_splice_async","","",null,null],[5,"g_output_stream_splice_finish","","",null,null],[5,"g_output_stream_write","","",null,null],[5,"g_output_stream_write_all","","",null,null],[5,"g_output_stream_write_async","","",null,null],[5,"g_output_stream_write_bytes","","",null,null],[5,"g_output_stream_write_bytes_async","","",null,null],[5,"g_output_stream_write_bytes_finish","","",null,null],[5,"g_output_stream_write_finish","","",null,null],[5,"g_permission_get_type","","",null,null],[5,"g_permission_acquire","","",null,null],[5,"g_permission_acquire_async","","",null,null],[5,"g_permission_acquire_finish","","",null,null],[5,"g_permission_get_allowed","","",null,null],[5,"g_permission_get_can_acquire","","",null,null],[5,"g_permission_get_can_release","","",null,null],[5,"g_permission_impl_update","","",null,null],[5,"g_permission_release","","",null,null],[5,"g_permission_release_async","","",null,null],[5,"g_permission_release_finish","","",null,null],[5,"g_property_action_get_type","","",null,null],[5,"g_proxy_address_get_type","","",null,null],[5,"g_proxy_address_new","","",null,null],[5,"g_proxy_address_get_destination_hostname","","",null,null],[5,"g_proxy_address_get_destination_port","","",null,null],[5,"g_proxy_address_get_password","","",null,null],[5,"g_proxy_address_get_protocol","","",null,null],[5,"g_proxy_address_get_username","","",null,null],[5,"g_proxy_address_enumerator_get_type","","",null,null],[5,"g_resolver_get_type","","",null,null],[5,"g_resolver_free_addresses","","",null,null],[5,"g_resolver_free_targets","","",null,null],[5,"g_resolver_get_default","","",null,null],[5,"g_resolver_lookup_by_address","","",null,null],[5,"g_resolver_lookup_by_address_async","","",null,null],[5,"g_resolver_lookup_by_address_finish","","",null,null],[5,"g_resolver_lookup_by_name","","",null,null],[5,"g_resolver_lookup_by_name_async","","",null,null],[5,"g_resolver_lookup_by_name_finish","","",null,null],[5,"g_resolver_lookup_service","","",null,null],[5,"g_resolver_lookup_service_async","","",null,null],[5,"g_resolver_lookup_service_finish","","",null,null],[5,"g_resolver_set_default","","",null,null],[5,"g_settings_get_type","","",null,null],[5,"g_settings_new","","",null,null],[5,"g_settings_new_full","","",null,null],[5,"g_settings_new_with_backend","","",null,null],[5,"g_settings_new_with_backend_and_path","","",null,null],[5,"g_settings_new_with_path","","",null,null],[5,"g_settings_list_relocatable_schemas","","",null,null],[5,"g_settings_list_schemas","","",null,null],[5,"g_settings_sync","","",null,null],[5,"g_settings_unbind","","",null,null],[5,"g_settings_apply","","",null,null],[5,"g_settings_bind","","",null,null],[5,"g_settings_bind_with_mapping","","",null,null],[5,"g_settings_bind_writable","","",null,null],[5,"g_settings_create_action","","",null,null],[5,"g_settings_delay","","",null,null],[5,"g_settings_get","","",null,null],[5,"g_settings_get_boolean","","",null,null],[5,"g_settings_get_child","","",null,null],[5,"g_settings_get_double","","",null,null],[5,"g_settings_get_enum","","",null,null],[5,"g_settings_get_flags","","",null,null],[5,"g_settings_get_has_unapplied","","",null,null],[5,"g_settings_get_int","","",null,null],[5,"g_settings_get_mapped","","",null,null],[5,"g_settings_get_range","","",null,null],[5,"g_settings_get_string","","",null,null],[5,"g_settings_get_strv","","",null,null],[5,"g_settings_get_uint","","",null,null],[5,"g_settings_get_value","","",null,null],[5,"g_settings_is_writable","","",null,null],[5,"g_settings_list_children","","",null,null],[5,"g_settings_list_keys","","",null,null],[5,"g_settings_range_check","","",null,null],[5,"g_settings_reset","","",null,null],[5,"g_settings_revert","","",null,null],[5,"g_settings_set","","",null,null],[5,"g_settings_set_boolean","","",null,null],[5,"g_settings_set_double","","",null,null],[5,"g_settings_set_enum","","",null,null],[5,"g_settings_set_flags","","",null,null],[5,"g_settings_set_int","","",null,null],[5,"g_settings_set_string","","",null,null],[5,"g_settings_set_strv","","",null,null],[5,"g_settings_set_uint","","",null,null],[5,"g_settings_set_value","","",null,null],[5,"g_settings_backend_get_type","","",null,null],[5,"g_settings_backend_flatten_tree","","",null,null],[5,"g_settings_backend_get_default","","",null,null],[5,"g_settings_backend_changed","","",null,null],[5,"g_settings_backend_changed_tree","","",null,null],[5,"g_settings_backend_keys_changed","","",null,null],[5,"g_settings_backend_path_changed","","",null,null],[5,"g_settings_backend_path_writable_changed","","",null,null],[5,"g_settings_backend_writable_changed","","",null,null],[5,"g_simple_action_get_type","","",null,null],[5,"g_simple_action_new","","",null,null],[5,"g_simple_action_new_stateful","","",null,null],[5,"g_simple_action_set_enabled","","",null,null],[5,"g_simple_action_set_state","","",null,null],[5,"g_simple_action_group_get_type","","",null,null],[5,"g_simple_action_group_new","","",null,null],[5,"g_simple_action_group_add_entries","","",null,null],[5,"g_simple_action_group_insert","","",null,null],[5,"g_simple_action_group_lookup","","",null,null],[5,"g_simple_action_group_remove","","",null,null],[5,"g_simple_async_result_get_type","","",null,null],[5,"g_simple_async_result_new","","",null,null],[5,"g_simple_async_result_new_error","","",null,null],[5,"g_simple_async_result_new_from_error","","",null,null],[5,"g_simple_async_result_new_take_error","","",null,null],[5,"g_simple_async_result_is_valid","","",null,null],[5,"g_simple_async_result_complete","","",null,null],[5,"g_simple_async_result_complete_in_idle","","",null,null],[5,"g_simple_async_result_get_op_res_gboolean","","",null,null],[5,"g_simple_async_result_get_op_res_gpointer","","",null,null],[5,"g_simple_async_result_get_op_res_gssize","","",null,null],[5,"g_simple_async_result_get_source_tag","","",null,null],[5,"g_simple_async_result_propagate_error","","",null,null],[5,"g_simple_async_result_run_in_thread","","",null,null],[5,"g_simple_async_result_set_check_cancellable","","",null,null],[5,"g_simple_async_result_set_error","","",null,null],[5,"g_simple_async_result_set_from_error","","",null,null],[5,"g_simple_async_result_set_handle_cancellation","","",null,null],[5,"g_simple_async_result_set_op_res_gboolean","","",null,null],[5,"g_simple_async_result_set_op_res_gpointer","","",null,null],[5,"g_simple_async_result_set_op_res_gssize","","",null,null],[5,"g_simple_async_result_take_error","","",null,null],[5,"g_simple_io_stream_get_type","","",null,null],[5,"g_simple_permission_get_type","","",null,null],[5,"g_simple_permission_new","","",null,null],[5,"g_simple_proxy_resolver_get_type","","",null,null],[5,"g_socket_get_type","","",null,null],[5,"g_socket_new","","",null,null],[5,"g_socket_new_from_fd","","",null,null],[5,"g_socket_accept","","",null,null],[5,"g_socket_bind","","",null,null],[5,"g_socket_check_connect_result","","",null,null],[5,"g_socket_close","","",null,null],[5,"g_socket_condition_check","","",null,null],[5,"g_socket_condition_timed_wait","","",null,null],[5,"g_socket_condition_wait","","",null,null],[5,"g_socket_connect","","",null,null],[5,"g_socket_connection_factory_create_connection","","",null,null],[5,"g_socket_create_source","","",null,null],[5,"g_socket_get_available_bytes","","",null,null],[5,"g_socket_get_blocking","","",null,null],[5,"g_socket_get_broadcast","","",null,null],[5,"g_socket_get_credentials","","",null,null],[5,"g_socket_get_family","","",null,null],[5,"g_socket_get_fd","","",null,null],[5,"g_socket_get_keepalive","","",null,null],[5,"g_socket_get_listen_backlog","","",null,null],[5,"g_socket_get_local_address","","",null,null],[5,"g_socket_get_multicast_loopback","","",null,null],[5,"g_socket_get_multicast_ttl","","",null,null],[5,"g_socket_get_protocol","","",null,null],[5,"g_socket_get_remote_address","","",null,null],[5,"g_socket_get_socket_type","","",null,null],[5,"g_socket_get_timeout","","",null,null],[5,"g_socket_get_ttl","","",null,null],[5,"g_socket_is_closed","","",null,null],[5,"g_socket_is_connected","","",null,null],[5,"g_socket_join_multicast_group","","",null,null],[5,"g_socket_leave_multicast_group","","",null,null],[5,"g_socket_listen","","",null,null],[5,"g_socket_receive","","",null,null],[5,"g_socket_receive_from","","",null,null],[5,"g_socket_receive_message","","",null,null],[5,"g_socket_receive_with_blocking","","",null,null],[5,"g_socket_send","","",null,null],[5,"g_socket_send_message","","",null,null],[5,"g_socket_send_to","","",null,null],[5,"g_socket_send_with_blocking","","",null,null],[5,"g_socket_set_blocking","","",null,null],[5,"g_socket_set_broadcast","","",null,null],[5,"g_socket_set_keepalive","","",null,null],[5,"g_socket_set_listen_backlog","","",null,null],[5,"g_socket_set_multicast_loopback","","",null,null],[5,"g_socket_set_multicast_ttl","","",null,null],[5,"g_socket_set_timeout","","",null,null],[5,"g_socket_set_ttl","","",null,null],[5,"g_socket_shutdown","","",null,null],[5,"g_socket_speaks_ipv4","","",null,null],[5,"g_socket_address_get_type","","",null,null],[5,"g_socket_address_new_from_native","","",null,null],[5,"g_socket_address_get_family","","",null,null],[5,"g_socket_address_get_native_size","","",null,null],[5,"g_socket_address_to_native","","",null,null],[5,"g_socket_address_enumerator_get_type","","",null,null],[5,"g_socket_address_enumerator_next","","",null,null],[5,"g_socket_address_enumerator_next_async","","",null,null],[5,"g_socket_address_enumerator_next_finish","","",null,null],[5,"g_socket_client_get_type","","",null,null],[5,"g_socket_client_new","","",null,null],[5,"g_socket_client_add_application_proxy","","",null,null],[5,"g_socket_client_connect","","",null,null],[5,"g_socket_client_connect_async","","",null,null],[5,"g_socket_client_connect_finish","","",null,null],[5,"g_socket_client_connect_to_host","","",null,null],[5,"g_socket_client_connect_to_host_async","","",null,null],[5,"g_socket_client_connect_to_host_finish","","",null,null],[5,"g_socket_client_connect_to_service","","",null,null],[5,"g_socket_client_connect_to_service_async","","",null,null],[5,"g_socket_client_connect_to_service_finish","","",null,null],[5,"g_socket_client_connect_to_uri","","",null,null],[5,"g_socket_client_connect_to_uri_async","","",null,null],[5,"g_socket_client_connect_to_uri_finish","","",null,null],[5,"g_socket_client_get_enable_proxy","","",null,null],[5,"g_socket_client_get_family","","",null,null],[5,"g_socket_client_get_local_address","","",null,null],[5,"g_socket_client_get_protocol","","",null,null],[5,"g_socket_client_get_socket_type","","",null,null],[5,"g_socket_client_get_timeout","","",null,null],[5,"g_socket_client_get_tls","","",null,null],[5,"g_socket_client_get_tls_validation_flags","","",null,null],[5,"g_socket_client_set_enable_proxy","","",null,null],[5,"g_socket_client_set_family","","",null,null],[5,"g_socket_client_set_local_address","","",null,null],[5,"g_socket_client_set_protocol","","",null,null],[5,"g_socket_client_set_socket_type","","",null,null],[5,"g_socket_client_set_timeout","","",null,null],[5,"g_socket_client_set_tls","","",null,null],[5,"g_socket_client_set_tls_validation_flags","","",null,null],[5,"g_socket_connection_get_type","","",null,null],[5,"g_socket_connection_factory_lookup_type","","",null,null],[5,"g_socket_connection_factory_register_type","","",null,null],[5,"g_socket_connection_connect","","",null,null],[5,"g_socket_connection_connect_async","","",null,null],[5,"g_socket_connection_connect_finish","","",null,null],[5,"g_socket_connection_get_local_address","","",null,null],[5,"g_socket_connection_get_remote_address","","",null,null],[5,"g_socket_connection_get_socket","","",null,null],[5,"g_socket_connection_is_connected","","",null,null],[5,"g_socket_control_message_get_type","","",null,null],[5,"g_socket_control_message_deserialize","","",null,null],[5,"g_socket_control_message_get_level","","",null,null],[5,"g_socket_control_message_get_msg_type","","",null,null],[5,"g_socket_control_message_get_size","","",null,null],[5,"g_socket_control_message_serialize","","",null,null],[5,"g_socket_listener_get_type","","",null,null],[5,"g_socket_listener_new","","",null,null],[5,"g_socket_listener_accept","","",null,null],[5,"g_socket_listener_accept_async","","",null,null],[5,"g_socket_listener_accept_finish","","",null,null],[5,"g_socket_listener_accept_socket","","",null,null],[5,"g_socket_listener_accept_socket_async","","",null,null],[5,"g_socket_listener_accept_socket_finish","","",null,null],[5,"g_socket_listener_add_address","","",null,null],[5,"g_socket_listener_add_any_inet_port","","",null,null],[5,"g_socket_listener_add_inet_port","","",null,null],[5,"g_socket_listener_add_socket","","",null,null],[5,"g_socket_listener_close","","",null,null],[5,"g_socket_listener_set_backlog","","",null,null],[5,"g_socket_service_get_type","","",null,null],[5,"g_socket_service_new","","",null,null],[5,"g_socket_service_is_active","","",null,null],[5,"g_socket_service_start","","",null,null],[5,"g_socket_service_stop","","",null,null],[5,"g_subprocess_get_type","","",null,null],[5,"g_subprocess_launcher_get_type","","",null,null],[5,"g_task_get_type","","",null,null],[5,"g_tcp_connection_get_type","","",null,null],[5,"g_tcp_connection_get_graceful_disconnect","","",null,null],[5,"g_tcp_connection_set_graceful_disconnect","","",null,null],[5,"g_tcp_wrapper_connection_get_type","","",null,null],[5,"g_tcp_wrapper_connection_new","","",null,null],[5,"g_tcp_wrapper_connection_get_base_io_stream","","",null,null],[5,"g_test_dbus_get_type","","",null,null],[5,"g_test_dbus_unset","","",null,null],[5,"g_themed_icon_get_type","","",null,null],[5,"g_themed_icon_new","","",null,null],[5,"g_themed_icon_new_from_names","","",null,null],[5,"g_themed_icon_new_with_default_fallbacks","","",null,null],[5,"g_themed_icon_append_name","","",null,null],[5,"g_themed_icon_get_names","","",null,null],[5,"g_themed_icon_prepend_name","","",null,null],[5,"g_threaded_socket_service_get_type","","",null,null],[5,"g_threaded_socket_service_new","","",null,null],[5,"g_tls_certificate_get_type","","",null,null],[5,"g_tls_certificate_new_from_file","","",null,null],[5,"g_tls_certificate_new_from_files","","",null,null],[5,"g_tls_certificate_new_from_pem","","",null,null],[5,"g_tls_certificate_list_new_from_file","","",null,null],[5,"g_tls_certificate_get_issuer","","",null,null],[5,"g_tls_certificate_verify","","",null,null],[5,"g_tls_connection_get_type","","",null,null],[5,"g_tls_connection_emit_accept_certificate","","",null,null],[5,"g_tls_connection_get_certificate","","",null,null],[5,"g_tls_connection_get_database","","",null,null],[5,"g_tls_connection_get_interaction","","",null,null],[5,"g_tls_connection_get_peer_certificate","","",null,null],[5,"g_tls_connection_get_peer_certificate_errors","","",null,null],[5,"g_tls_connection_get_rehandshake_mode","","",null,null],[5,"g_tls_connection_get_require_close_notify","","",null,null],[5,"g_tls_connection_get_use_system_certdb","","",null,null],[5,"g_tls_connection_handshake","","",null,null],[5,"g_tls_connection_handshake_async","","",null,null],[5,"g_tls_connection_handshake_finish","","",null,null],[5,"g_tls_connection_set_certificate","","",null,null],[5,"g_tls_connection_set_database","","",null,null],[5,"g_tls_connection_set_interaction","","",null,null],[5,"g_tls_connection_set_rehandshake_mode","","",null,null],[5,"g_tls_connection_set_require_close_notify","","",null,null],[5,"g_tls_connection_set_use_system_certdb","","",null,null],[5,"g_tls_database_get_type","","",null,null],[5,"g_tls_database_create_certificate_handle","","",null,null],[5,"g_tls_database_lookup_certificate_for_handle","","",null,null],[5,"g_tls_database_lookup_certificate_for_handle_async","","",null,null],[5,"g_tls_database_lookup_certificate_for_handle_finish","","",null,null],[5,"g_tls_database_lookup_certificate_issuer","","",null,null],[5,"g_tls_database_lookup_certificate_issuer_async","","",null,null],[5,"g_tls_database_lookup_certificate_issuer_finish","","",null,null],[5,"g_tls_database_lookup_certificates_issued_by","","",null,null],[5,"g_tls_database_lookup_certificates_issued_by_async","","",null,null],[5,"g_tls_database_lookup_certificates_issued_by_finish","","",null,null],[5,"g_tls_database_verify_chain","","",null,null],[5,"g_tls_database_verify_chain_async","","",null,null],[5,"g_tls_database_verify_chain_finish","","",null,null],[5,"g_tls_interaction_get_type","","",null,null],[5,"g_tls_interaction_ask_password","","",null,null],[5,"g_tls_interaction_ask_password_async","","",null,null],[5,"g_tls_interaction_ask_password_finish","","",null,null],[5,"g_tls_interaction_invoke_ask_password","","",null,null],[5,"g_tls_password_get_type","","",null,null],[5,"g_tls_password_new","","",null,null],[5,"g_tls_password_get_description","","",null,null],[5,"g_tls_password_get_flags","","",null,null],[5,"g_tls_password_get_value","","",null,null],[5,"g_tls_password_get_warning","","",null,null],[5,"g_tls_password_set_description","","",null,null],[5,"g_tls_password_set_flags","","",null,null],[5,"g_tls_password_set_value","","",null,null],[5,"g_tls_password_set_value_full","","",null,null],[5,"g_tls_password_set_warning","","",null,null],[5,"g_unix_connection_get_type","","",null,null],[5,"g_unix_connection_receive_credentials","","",null,null],[5,"g_unix_connection_receive_credentials_async","","",null,null],[5,"g_unix_connection_receive_credentials_finish","","",null,null],[5,"g_unix_connection_receive_fd","","",null,null],[5,"g_unix_connection_send_credentials","","",null,null],[5,"g_unix_connection_send_credentials_async","","",null,null],[5,"g_unix_connection_send_credentials_finish","","",null,null],[5,"g_unix_connection_send_fd","","",null,null],[5,"g_unix_credentials_message_get_type","","",null,null],[5,"g_unix_credentials_message_new","","",null,null],[5,"g_unix_credentials_message_new_with_credentials","","",null,null],[5,"g_unix_credentials_message_is_supported","","",null,null],[5,"g_unix_credentials_message_get_credentials","","",null,null],[5,"g_unix_fd_list_get_type","","",null,null],[5,"g_unix_fd_list_new","","",null,null],[5,"g_unix_fd_list_new_from_array","","",null,null],[5,"g_unix_fd_list_append","","",null,null],[5,"g_unix_fd_list_get","","",null,null],[5,"g_unix_fd_list_get_length","","",null,null],[5,"g_unix_fd_list_peek_fds","","",null,null],[5,"g_unix_fd_list_steal_fds","","",null,null],[5,"g_unix_fd_message_get_type","","",null,null],[5,"g_unix_fd_message_new","","",null,null],[5,"g_unix_fd_message_new_with_fd_list","","",null,null],[5,"g_unix_fd_message_append_fd","","",null,null],[5,"g_unix_fd_message_get_fd_list","","",null,null],[5,"g_unix_fd_message_steal_fds","","",null,null],[5,"g_unix_input_stream_get_type","","",null,null],[5,"g_unix_input_stream_new","","",null,null],[5,"g_unix_input_stream_get_close_fd","","",null,null],[5,"g_unix_input_stream_get_fd","","",null,null],[5,"g_unix_input_stream_set_close_fd","","",null,null],[5,"g_unix_mount_monitor_get_type","","",null,null],[5,"g_unix_mount_monitor_new","","",null,null],[5,"g_unix_mount_monitor_set_rate_limit","","",null,null],[5,"g_unix_output_stream_get_type","","",null,null],[5,"g_unix_output_stream_new","","",null,null],[5,"g_unix_output_stream_get_close_fd","","",null,null],[5,"g_unix_output_stream_get_fd","","",null,null],[5,"g_unix_output_stream_set_close_fd","","",null,null],[5,"g_unix_socket_address_get_type","","",null,null],[5,"g_unix_socket_address_new","","",null,null],[5,"g_unix_socket_address_new_abstract","","",null,null],[5,"g_unix_socket_address_new_with_type","","",null,null],[5,"g_unix_socket_address_abstract_names_supported","","",null,null],[5,"g_unix_socket_address_get_address_type","","",null,null],[5,"g_unix_socket_address_get_is_abstract","","",null,null],[5,"g_unix_socket_address_get_path","","",null,null],[5,"g_unix_socket_address_get_path_len","","",null,null],[5,"g_vfs_get_type","","",null,null],[5,"g_vfs_get_default","","",null,null],[5,"g_vfs_get_local","","",null,null],[5,"g_vfs_get_file_for_path","","",null,null],[5,"g_vfs_get_file_for_uri","","",null,null],[5,"g_vfs_get_supported_uri_schemes","","",null,null],[5,"g_vfs_is_active","","",null,null],[5,"g_vfs_parse_name","","",null,null],[5,"g_volume_monitor_get_type","","",null,null],[5,"g_volume_monitor_adopt_orphan_mount","","",null,null],[5,"g_volume_monitor_get","","",null,null],[5,"g_volume_monitor_get_connected_drives","","",null,null],[5,"g_volume_monitor_get_mount_for_uuid","","",null,null],[5,"g_volume_monitor_get_mounts","","",null,null],[5,"g_volume_monitor_get_volume_for_uuid","","",null,null],[5,"g_volume_monitor_get_volumes","","",null,null],[5,"g_zlib_compressor_get_type","","",null,null],[5,"g_zlib_compressor_new","","",null,null],[5,"g_zlib_compressor_get_file_info","","",null,null],[5,"g_zlib_compressor_set_file_info","","",null,null],[5,"g_zlib_decompressor_get_type","","",null,null],[5,"g_zlib_decompressor_new","","",null,null],[5,"g_zlib_decompressor_get_file_info","","",null,null],[5,"g_action_get_type","","",null,null],[5,"g_action_activate","","",null,null],[5,"g_action_change_state","","",null,null],[5,"g_action_get_enabled","","",null,null],[5,"g_action_get_name","","",null,null],[5,"g_action_get_parameter_type","","",null,null],[5,"g_action_get_state","","",null,null],[5,"g_action_get_state_hint","","",null,null],[5,"g_action_get_state_type","","",null,null],[5,"g_action_group_get_type","","",null,null],[5,"g_action_group_action_added","","",null,null],[5,"g_action_group_action_enabled_changed","","",null,null],[5,"g_action_group_action_removed","","",null,null],[5,"g_action_group_action_state_changed","","",null,null],[5,"g_action_group_activate_action","","",null,null],[5,"g_action_group_change_action_state","","",null,null],[5,"g_action_group_get_action_enabled","","",null,null],[5,"g_action_group_get_action_parameter_type","","",null,null],[5,"g_action_group_get_action_state","","",null,null],[5,"g_action_group_get_action_state_hint","","",null,null],[5,"g_action_group_get_action_state_type","","",null,null],[5,"g_action_group_has_action","","",null,null],[5,"g_action_group_list_actions","","",null,null],[5,"g_action_group_query_action","","",null,null],[5,"g_action_map_get_type","","",null,null],[5,"g_action_map_add_action","","",null,null],[5,"g_action_map_add_action_entries","","",null,null],[5,"g_action_map_lookup_action","","",null,null],[5,"g_action_map_remove_action","","",null,null],[5,"g_app_info_get_type","","",null,null],[5,"g_app_info_create_from_commandline","","",null,null],[5,"g_app_info_get_all","","",null,null],[5,"g_app_info_get_all_for_type","","",null,null],[5,"g_app_info_get_default_for_type","","",null,null],[5,"g_app_info_get_default_for_uri_scheme","","",null,null],[5,"g_app_info_get_fallback_for_type","","",null,null],[5,"g_app_info_get_recommended_for_type","","",null,null],[5,"g_app_info_launch_default_for_uri","","",null,null],[5,"g_app_info_reset_type_associations","","",null,null],[5,"g_app_info_add_supports_type","","",null,null],[5,"g_app_info_can_delete","","",null,null],[5,"g_app_info_can_remove_supports_type","","",null,null],[5,"g_app_info_delete","","",null,null],[5,"g_app_info_dup","","",null,null],[5,"g_app_info_equal","","",null,null],[5,"g_app_info_get_commandline","","",null,null],[5,"g_app_info_get_description","","",null,null],[5,"g_app_info_get_display_name","","",null,null],[5,"g_app_info_get_executable","","",null,null],[5,"g_app_info_get_icon","","",null,null],[5,"g_app_info_get_id","","",null,null],[5,"g_app_info_get_name","","",null,null],[5,"g_app_info_launch","","",null,null],[5,"g_app_info_launch_uris","","",null,null],[5,"g_app_info_remove_supports_type","","",null,null],[5,"g_app_info_set_as_default_for_extension","","",null,null],[5,"g_app_info_set_as_default_for_type","","",null,null],[5,"g_app_info_set_as_last_used_for_type","","",null,null],[5,"g_app_info_should_show","","",null,null],[5,"g_app_info_supports_files","","",null,null],[5,"g_app_info_supports_uris","","",null,null],[5,"g_async_initable_get_type","","",null,null],[5,"g_async_initable_new_async","","",null,null],[5,"g_async_initable_newv_async","","",null,null],[5,"g_async_initable_init_async","","",null,null],[5,"g_async_initable_init_finish","","",null,null],[5,"g_async_initable_new_finish","","",null,null],[5,"g_async_result_get_type","","",null,null],[5,"g_async_result_get_source_object","","",null,null],[5,"g_async_result_get_user_data","","",null,null],[5,"g_converter_get_type","","",null,null],[5,"g_converter_convert","","",null,null],[5,"g_converter_reset","","",null,null],[5,"g_dbus_interface_get_type","","",null,null],[5,"g_dbus_interface_dup_object","","",null,null],[5,"g_dbus_interface_get_info","","",null,null],[5,"g_dbus_interface_get_object","","",null,null],[5,"g_dbus_interface_set_object","","",null,null],[5,"g_dbus_object_get_type","","",null,null],[5,"g_dbus_object_get_interface","","",null,null],[5,"g_dbus_object_get_interfaces","","",null,null],[5,"g_dbus_object_get_object_path","","",null,null],[5,"g_dbus_object_manager_get_type","","",null,null],[5,"g_dbus_object_manager_get_interface","","",null,null],[5,"g_dbus_object_manager_get_object","","",null,null],[5,"g_dbus_object_manager_get_object_path","","",null,null],[5,"g_dbus_object_manager_get_objects","","",null,null],[5,"g_datagram_based_get_type","","",null,null],[5,"g_desktop_app_info_lookup_get_type","","",null,null],[5,"g_desktop_app_info_lookup_get_default_for_uri_scheme","","",null,null],[5,"g_drive_get_type","","",null,null],[5,"g_drive_can_eject","","",null,null],[5,"g_drive_can_poll_for_media","","",null,null],[5,"g_drive_can_start","","",null,null],[5,"g_drive_can_start_degraded","","",null,null],[5,"g_drive_can_stop","","",null,null],[5,"g_drive_eject","","",null,null],[5,"g_drive_eject_finish","","",null,null],[5,"g_drive_eject_with_operation","","",null,null],[5,"g_drive_eject_with_operation_finish","","",null,null],[5,"g_drive_enumerate_identifiers","","",null,null],[5,"g_drive_get_icon","","",null,null],[5,"g_drive_get_identifier","","",null,null],[5,"g_drive_get_name","","",null,null],[5,"g_drive_get_sort_key","","",null,null],[5,"g_drive_get_start_stop_type","","",null,null],[5,"g_drive_get_volumes","","",null,null],[5,"g_drive_has_media","","",null,null],[5,"g_drive_has_volumes","","",null,null],[5,"g_drive_is_media_check_automatic","","",null,null],[5,"g_drive_is_media_removable","","",null,null],[5,"g_drive_poll_for_media","","",null,null],[5,"g_drive_poll_for_media_finish","","",null,null],[5,"g_drive_start","","",null,null],[5,"g_drive_start_finish","","",null,null],[5,"g_drive_stop","","",null,null],[5,"g_drive_stop_finish","","",null,null],[5,"g_dtls_client_connection_get_type","","",null,null],[5,"g_dtls_connection_get_type","","",null,null],[5,"g_dtls_server_connection_get_type","","",null,null],[5,"g_file_get_type","","",null,null],[5,"g_file_new_for_commandline_arg","","",null,null],[5,"g_file_new_for_path","","",null,null],[5,"g_file_new_for_uri","","",null,null],[5,"g_file_new_tmp","","",null,null],[5,"g_file_parse_name","","",null,null],[5,"g_file_append_to","","",null,null],[5,"g_file_append_to_async","","",null,null],[5,"g_file_append_to_finish","","",null,null],[5,"g_file_copy","","",null,null],[5,"g_file_copy_async","","",null,null],[5,"g_file_copy_attributes","","",null,null],[5,"g_file_copy_finish","","",null,null],[5,"g_file_create","","",null,null],[5,"g_file_create_async","","",null,null],[5,"g_file_create_finish","","",null,null],[5,"g_file_create_readwrite","","",null,null],[5,"g_file_create_readwrite_async","","",null,null],[5,"g_file_create_readwrite_finish","","",null,null],[5,"g_file_delete","","",null,null],[5,"g_file_dup","","",null,null],[5,"g_file_eject_mountable","","",null,null],[5,"g_file_eject_mountable_finish","","",null,null],[5,"g_file_eject_mountable_with_operation","","",null,null],[5,"g_file_eject_mountable_with_operation_finish","","",null,null],[5,"g_file_enumerate_children","","",null,null],[5,"g_file_enumerate_children_async","","",null,null],[5,"g_file_enumerate_children_finish","","",null,null],[5,"g_file_equal","","",null,null],[5,"g_file_find_enclosing_mount","","",null,null],[5,"g_file_find_enclosing_mount_async","","",null,null],[5,"g_file_find_enclosing_mount_finish","","",null,null],[5,"g_file_get_basename","","",null,null],[5,"g_file_get_child","","",null,null],[5,"g_file_get_child_for_display_name","","",null,null],[5,"g_file_get_parent","","",null,null],[5,"g_file_get_parse_name","","",null,null],[5,"g_file_get_path","","",null,null],[5,"g_file_get_relative_path","","",null,null],[5,"g_file_get_uri","","",null,null],[5,"g_file_get_uri_scheme","","",null,null],[5,"g_file_has_parent","","",null,null],[5,"g_file_has_prefix","","",null,null],[5,"g_file_has_uri_scheme","","",null,null],[5,"g_file_hash","","",null,null],[5,"g_file_is_native","","",null,null],[5,"g_file_load_contents","","",null,null],[5,"g_file_load_contents_async","","",null,null],[5,"g_file_load_contents_finish","","",null,null],[5,"g_file_load_partial_contents_async","","",null,null],[5,"g_file_load_partial_contents_finish","","",null,null],[5,"g_file_make_directory","","",null,null],[5,"g_file_make_directory_with_parents","","",null,null],[5,"g_file_make_symbolic_link","","",null,null],[5,"g_file_monitor","","",null,null],[5,"g_file_monitor_directory","","",null,null],[5,"g_file_monitor_file","","",null,null],[5,"g_file_mount_enclosing_volume","","",null,null],[5,"g_file_mount_enclosing_volume_finish","","",null,null],[5,"g_file_mount_mountable","","",null,null],[5,"g_file_mount_mountable_finish","","",null,null],[5,"g_file_move","","",null,null],[5,"g_file_open_readwrite","","",null,null],[5,"g_file_open_readwrite_async","","",null,null],[5,"g_file_open_readwrite_finish","","",null,null],[5,"g_file_poll_mountable","","",null,null],[5,"g_file_poll_mountable_finish","","",null,null],[5,"g_file_query_default_handler","","",null,null],[5,"g_file_query_exists","","",null,null],[5,"g_file_query_file_type","","",null,null],[5,"g_file_query_filesystem_info","","",null,null],[5,"g_file_query_filesystem_info_async","","",null,null],[5,"g_file_query_filesystem_info_finish","","",null,null],[5,"g_file_query_info","","",null,null],[5,"g_file_query_info_async","","",null,null],[5,"g_file_query_info_finish","","",null,null],[5,"g_file_query_settable_attributes","","",null,null],[5,"g_file_query_writable_namespaces","","",null,null],[5,"g_file_read","","",null,null],[5,"g_file_read_async","","",null,null],[5,"g_file_read_finish","","",null,null],[5,"g_file_replace","","",null,null],[5,"g_file_replace_async","","",null,null],[5,"g_file_replace_contents","","",null,null],[5,"g_file_replace_contents_async","","",null,null],[5,"g_file_replace_contents_finish","","",null,null],[5,"g_file_replace_finish","","",null,null],[5,"g_file_replace_readwrite","","",null,null],[5,"g_file_replace_readwrite_async","","",null,null],[5,"g_file_replace_readwrite_finish","","",null,null],[5,"g_file_resolve_relative_path","","",null,null],[5,"g_file_set_attribute","","",null,null],[5,"g_file_set_attribute_byte_string","","",null,null],[5,"g_file_set_attribute_int32","","",null,null],[5,"g_file_set_attribute_int64","","",null,null],[5,"g_file_set_attribute_string","","",null,null],[5,"g_file_set_attribute_uint32","","",null,null],[5,"g_file_set_attribute_uint64","","",null,null],[5,"g_file_set_attributes_async","","",null,null],[5,"g_file_set_attributes_finish","","",null,null],[5,"g_file_set_attributes_from_info","","",null,null],[5,"g_file_set_display_name","","",null,null],[5,"g_file_set_display_name_async","","",null,null],[5,"g_file_set_display_name_finish","","",null,null],[5,"g_file_start_mountable","","",null,null],[5,"g_file_start_mountable_finish","","",null,null],[5,"g_file_stop_mountable","","",null,null],[5,"g_file_stop_mountable_finish","","",null,null],[5,"g_file_supports_thread_contexts","","",null,null],[5,"g_file_trash","","",null,null],[5,"g_file_unmount_mountable","","",null,null],[5,"g_file_unmount_mountable_finish","","",null,null],[5,"g_file_unmount_mountable_with_operation","","",null,null],[5,"g_file_unmount_mountable_with_operation_finish","","",null,null],[5,"g_file_descriptor_based_get_type","","",null,null],[5,"g_file_descriptor_based_get_fd","","",null,null],[5,"g_icon_get_type","","",null,null],[5,"g_icon_hash","","",null,null],[5,"g_icon_new_for_string","","",null,null],[5,"g_icon_equal","","",null,null],[5,"g_icon_to_string","","",null,null],[5,"g_initable_get_type","","",null,null],[5,"g_initable_new","","",null,null],[5,"g_initable_newv","","",null,null],[5,"g_initable_init","","",null,null],[5,"g_list_model_get_type","","",null,null],[5,"g_loadable_icon_get_type","","",null,null],[5,"g_loadable_icon_load","","",null,null],[5,"g_loadable_icon_load_async","","",null,null],[5,"g_loadable_icon_load_finish","","",null,null],[5,"g_mount_get_type","","",null,null],[5,"g_mount_can_eject","","",null,null],[5,"g_mount_can_unmount","","",null,null],[5,"g_mount_eject","","",null,null],[5,"g_mount_eject_finish","","",null,null],[5,"g_mount_eject_with_operation","","",null,null],[5,"g_mount_eject_with_operation_finish","","",null,null],[5,"g_mount_get_default_location","","",null,null],[5,"g_mount_get_drive","","",null,null],[5,"g_mount_get_icon","","",null,null],[5,"g_mount_get_name","","",null,null],[5,"g_mount_get_root","","",null,null],[5,"g_mount_get_sort_key","","",null,null],[5,"g_mount_get_uuid","","",null,null],[5,"g_mount_get_volume","","",null,null],[5,"g_mount_guess_content_type","","",null,null],[5,"g_mount_guess_content_type_finish","","",null,null],[5,"g_mount_guess_content_type_sync","","",null,null],[5,"g_mount_is_shadowed","","",null,null],[5,"g_mount_remount","","",null,null],[5,"g_mount_remount_finish","","",null,null],[5,"g_mount_shadow","","",null,null],[5,"g_mount_unmount","","",null,null],[5,"g_mount_unmount_finish","","",null,null],[5,"g_mount_unmount_with_operation","","",null,null],[5,"g_mount_unmount_with_operation_finish","","",null,null],[5,"g_mount_unshadow","","",null,null],[5,"g_network_monitor_get_type","","",null,null],[5,"g_network_monitor_get_default","","",null,null],[5,"g_network_monitor_can_reach","","",null,null],[5,"g_network_monitor_can_reach_async","","",null,null],[5,"g_network_monitor_can_reach_finish","","",null,null],[5,"g_network_monitor_get_network_available","","",null,null],[5,"g_pollable_input_stream_get_type","","",null,null],[5,"g_pollable_input_stream_can_poll","","",null,null],[5,"g_pollable_input_stream_create_source","","",null,null],[5,"g_pollable_input_stream_is_readable","","",null,null],[5,"g_pollable_input_stream_read_nonblocking","","",null,null],[5,"g_pollable_output_stream_get_type","","",null,null],[5,"g_pollable_output_stream_can_poll","","",null,null],[5,"g_pollable_output_stream_create_source","","",null,null],[5,"g_pollable_output_stream_is_writable","","",null,null],[5,"g_pollable_output_stream_write_nonblocking","","",null,null],[5,"g_proxy_get_type","","",null,null],[5,"g_proxy_get_default_for_protocol","","",null,null],[5,"g_proxy_connect","","",null,null],[5,"g_proxy_connect_async","","",null,null],[5,"g_proxy_connect_finish","","",null,null],[5,"g_proxy_supports_hostname","","",null,null],[5,"g_proxy_resolver_get_type","","",null,null],[5,"g_proxy_resolver_get_default","","",null,null],[5,"g_proxy_resolver_is_supported","","",null,null],[5,"g_proxy_resolver_lookup","","",null,null],[5,"g_proxy_resolver_lookup_async","","",null,null],[5,"g_proxy_resolver_lookup_finish","","",null,null],[5,"g_remote_action_group_get_type","","",null,null],[5,"g_remote_action_group_activate_action_full","","",null,null],[5,"g_remote_action_group_change_action_state_full","","",null,null],[5,"g_seekable_get_type","","",null,null],[5,"g_seekable_can_seek","","",null,null],[5,"g_seekable_can_truncate","","",null,null],[5,"g_seekable_seek","","",null,null],[5,"g_seekable_tell","","",null,null],[5,"g_seekable_truncate","","",null,null],[5,"g_socket_connectable_get_type","","",null,null],[5,"g_socket_connectable_enumerate","","",null,null],[5,"g_socket_connectable_proxy_enumerate","","",null,null],[5,"g_tls_backend_get_type","","",null,null],[5,"g_tls_backend_get_default","","",null,null],[5,"g_tls_backend_get_certificate_type","","",null,null],[5,"g_tls_backend_get_client_connection_type","","",null,null],[5,"g_tls_backend_get_default_database","","",null,null],[5,"g_tls_backend_get_file_database_type","","",null,null],[5,"g_tls_backend_get_server_connection_type","","",null,null],[5,"g_tls_backend_supports_tls","","",null,null],[5,"g_tls_client_connection_get_type","","",null,null],[5,"g_tls_client_connection_new","","",null,null],[5,"g_tls_client_connection_get_accepted_cas","","",null,null],[5,"g_tls_client_connection_get_server_identity","","",null,null],[5,"g_tls_client_connection_get_use_ssl3","","",null,null],[5,"g_tls_client_connection_get_validation_flags","","",null,null],[5,"g_tls_client_connection_set_server_identity","","",null,null],[5,"g_tls_client_connection_set_use_ssl3","","",null,null],[5,"g_tls_client_connection_set_validation_flags","","",null,null],[5,"g_tls_file_database_get_type","","",null,null],[5,"g_tls_file_database_new","","",null,null],[5,"g_tls_server_connection_get_type","","",null,null],[5,"g_tls_server_connection_new","","",null,null],[5,"g_volume_get_type","","",null,null],[5,"g_volume_can_eject","","",null,null],[5,"g_volume_can_mount","","",null,null],[5,"g_volume_eject","","",null,null],[5,"g_volume_eject_finish","","",null,null],[5,"g_volume_eject_with_operation","","",null,null],[5,"g_volume_eject_with_operation_finish","","",null,null],[5,"g_volume_enumerate_identifiers","","",null,null],[5,"g_volume_get_activation_root","","",null,null],[5,"g_volume_get_drive","","",null,null],[5,"g_volume_get_icon","","",null,null],[5,"g_volume_get_identifier","","",null,null],[5,"g_volume_get_mount","","",null,null],[5,"g_volume_get_name","","",null,null],[5,"g_volume_get_sort_key","","",null,null],[5,"g_volume_get_uuid","","",null,null],[5,"g_volume_mount","","",null,null],[5,"g_volume_mount_finish","","",null,null],[5,"g_volume_should_automount","","",null,null],[5,"g_bus_get","","",null,null],[5,"g_bus_get_finish","","",null,null],[5,"g_bus_get_sync","","",null,null],[5,"g_bus_own_name","","",null,null],[5,"g_bus_own_name_on_connection","","",null,null],[5,"g_bus_own_name_on_connection_with_closures","","",null,null],[5,"g_bus_own_name_with_closures","","",null,null],[5,"g_bus_unown_name","","",null,null],[5,"g_bus_unwatch_name","","",null,null],[5,"g_bus_watch_name","","",null,null],[5,"g_bus_watch_name_on_connection","","",null,null],[5,"g_bus_watch_name_on_connection_with_closures","","",null,null],[5,"g_bus_watch_name_with_closures","","",null,null],[5,"g_content_type_can_be_executable","","",null,null],[5,"g_content_type_equals","","",null,null],[5,"g_content_type_from_mime_type","","",null,null],[5,"g_content_type_get_description","","",null,null],[5,"g_content_type_get_icon","","",null,null],[5,"g_content_type_get_mime_type","","",null,null],[5,"g_content_type_guess","","",null,null],[5,"g_content_type_guess_for_tree","","",null,null],[5,"g_content_type_is_a","","",null,null],[5,"g_content_type_is_unknown","","",null,null],[5,"g_content_types_get_registered","","",null,null],[5,"g_dbus_address_get_for_bus_sync","","",null,null],[5,"g_dbus_address_get_stream","","",null,null],[5,"g_dbus_address_get_stream_finish","","",null,null],[5,"g_dbus_address_get_stream_sync","","",null,null],[5,"g_dbus_generate_guid","","",null,null],[5,"g_dbus_gvalue_to_gvariant","","",null,null],[5,"g_dbus_gvariant_to_gvalue","","",null,null],[5,"g_dbus_is_address","","",null,null],[5,"g_dbus_is_guid","","",null,null],[5,"g_dbus_is_interface_name","","",null,null],[5,"g_dbus_is_member_name","","",null,null],[5,"g_dbus_is_name","","",null,null],[5,"g_dbus_is_supported_address","","",null,null],[5,"g_dbus_is_unique_name","","",null,null],[5,"g_io_error_from_errno","","",null,null],[5,"g_io_error_quark","","",null,null],[5,"g_io_modules_load_all_in_directory","","",null,null],[5,"g_io_modules_load_all_in_directory_with_scope","","",null,null],[5,"g_io_modules_scan_all_in_directory","","",null,null],[5,"g_io_modules_scan_all_in_directory_with_scope","","",null,null],[5,"g_io_scheduler_cancel_all_jobs","","",null,null],[5,"g_io_scheduler_push_job","","",null,null],[5,"g_keyfile_settings_backend_new","","",null,null],[5,"g_memory_settings_backend_new","","",null,null],[5,"g_null_settings_backend_new","","",null,null],[5,"g_pollable_source_new","","",null,null],[5,"g_resources_enumerate_children","","",null,null],[5,"g_resources_get_info","","",null,null],[5,"g_resources_lookup_data","","",null,null],[5,"g_resources_open_stream","","",null,null],[5,"g_resources_register","","",null,null],[5,"g_resources_unregister","","",null,null],[5,"g_simple_async_report_error_in_idle","","",null,null],[5,"g_simple_async_report_gerror_in_idle","","",null,null],[5,"g_simple_async_report_take_gerror_in_idle","","",null,null],[5,"g_unix_is_mount_path_system_internal","","",null,null],[5,"g_unix_mount_at","","",null,null],[5,"g_unix_mount_compare","","",null,null],[5,"g_unix_mount_free","","",null,null],[5,"g_unix_mount_get_device_path","","",null,null],[5,"g_unix_mount_get_fs_type","","",null,null],[5,"g_unix_mount_get_mount_path","","",null,null],[5,"g_unix_mount_guess_can_eject","","",null,null],[5,"g_unix_mount_guess_icon","","",null,null],[5,"g_unix_mount_guess_name","","",null,null],[5,"g_unix_mount_guess_should_display","","",null,null],[5,"g_unix_mount_is_readonly","","",null,null],[5,"g_unix_mount_is_system_internal","","",null,null],[5,"g_unix_mount_points_changed_since","","",null,null],[5,"g_unix_mount_points_get","","",null,null],[5,"g_unix_mounts_changed_since","","",null,null],[5,"g_unix_mounts_get","","",null,null],[6,"GBusType","","",null,null],[6,"GConverterResult","","",null,null],[6,"GCredentialsType","","",null,null],[6,"GDBusError","","",null,null],[6,"GDBusMessageByteOrder","","",null,null],[6,"GDBusMessageHeaderField","","",null,null],[6,"GDBusMessageType","","",null,null],[6,"GDataStreamByteOrder","","",null,null],[6,"GDataStreamNewlineType","","",null,null],[6,"GDriveStartStopType","","",null,null],[6,"GEmblemOrigin","","",null,null],[6,"GFileAttributeStatus","","",null,null],[6,"GFileAttributeType","","",null,null],[6,"GFileMonitorEvent","","",null,null],[6,"GFileType","","",null,null],[6,"GFilesystemPreviewType","","",null,null],[6,"GIOErrorEnum","","",null,null],[6,"GIOModuleScopeFlags","","",null,null],[6,"GMountOperationResult","","",null,null],[6,"GNetworkConnectivity","","",null,null],[6,"GNotificationPriority","","",null,null],[6,"GPasswordSave","","",null,null],[6,"GResolverError","","",null,null],[6,"GResolverRecordType","","",null,null],[6,"GResourceError","","",null,null],[6,"GSocketClientEvent","","",null,null],[6,"GSocketFamily","","",null,null],[6,"GSocketListenerEvent","","",null,null],[6,"GSocketProtocol","","",null,null],[6,"GSocketType","","",null,null],[6,"GTlsAuthenticationMode","","",null,null],[6,"TlsCertificateRequestFlags","","",null,null],[6,"GTlsCertificateRequestFlags","","",null,null],[6,"GTlsDatabaseLookupFlags","","",null,null],[6,"GTlsError","","",null,null],[6,"GTlsInteractionResult","","",null,null],[6,"GTlsRehandshakeMode","","",null,null],[6,"GUnixSocketAddressType","","",null,null],[6,"GZlibCompressorFormat","","",null,null],[6,"GAsyncReadyCallback","","",null,null],[6,"GBusAcquiredCallback","","",null,null],[6,"GBusNameAcquiredCallback","","",null,null],[6,"GBusNameAppearedCallback","","",null,null],[6,"GBusNameLostCallback","","",null,null],[6,"GBusNameVanishedCallback","","",null,null],[6,"GCancellableSourceFunc","","",null,null],[6,"GDBusInterfaceGetPropertyFunc","","",null,null],[6,"GDBusInterfaceMethodCallFunc","","",null,null],[6,"GDBusInterfaceSetPropertyFunc","","",null,null],[6,"GDBusMessageFilterFunction","","",null,null],[6,"GDBusProxyTypeFunc","","",null,null],[6,"GDBusSignalCallback","","",null,null],[6,"GDBusSubtreeDispatchFunc","","",null,null],[6,"GDBusSubtreeEnumerateFunc","","",null,null],[6,"GDBusSubtreeIntrospectFunc","","",null,null],[6,"GDatagramBasedSourceFunc","","",null,null],[6,"GDesktopAppLaunchCallback","","",null,null],[6,"GFileMeasureProgressCallback","","",null,null],[6,"GFileProgressCallback","","",null,null],[6,"GFileReadMoreCallback","","",null,null],[6,"GIOSchedulerJobFunc","","",null,null],[6,"GPollableSourceFunc","","",null,null],[6,"GReallocFunc","","",null,null],[6,"GSettingsBindGetMapping","","",null,null],[6,"GSettingsBindSetMapping","","",null,null],[6,"GSettingsGetMapping","","",null,null],[6,"GSimpleAsyncThreadFunc","","",null,null],[6,"GSocketSourceFunc","","",null,null],[6,"GTaskThreadFunc","","",null,null],[6,"GVfsFileLookupFunc","","",null,null],[17,"G_BUS_TYPE_STARTER","","",null,null],[17,"G_BUS_TYPE_NONE","","",null,null],[17,"G_BUS_TYPE_SYSTEM","","",null,null],[17,"G_BUS_TYPE_SESSION","","",null,null],[17,"G_CONVERTER_ERROR","","",null,null],[17,"G_CONVERTER_CONVERTED","","",null,null],[17,"G_CONVERTER_FINISHED","","",null,null],[17,"G_CONVERTER_FLUSHED","","",null,null],[17,"G_CREDENTIALS_TYPE_INVALID","","",null,null],[17,"G_CREDENTIALS_TYPE_LINUX_UCRED","","",null,null],[17,"G_CREDENTIALS_TYPE_FREEBSD_CMSGCRED","","",null,null],[17,"G_CREDENTIALS_TYPE_OPENBSD_SOCKPEERCRED","","",null,null],[17,"G_CREDENTIALS_TYPE_SOLARIS_UCRED","","",null,null],[17,"G_CREDENTIALS_TYPE_NETBSD_UNPCBID","","",null,null],[17,"G_DBUS_ERROR_FAILED","","",null,null],[17,"G_DBUS_ERROR_NO_MEMORY","","",null,null],[17,"G_DBUS_ERROR_SERVICE_UNKNOWN","","",null,null],[17,"G_DBUS_ERROR_NAME_HAS_NO_OWNER","","",null,null],[17,"G_DBUS_ERROR_NO_REPLY","","",null,null],[17,"G_DBUS_ERROR_IO_ERROR","","",null,null],[17,"G_DBUS_ERROR_BAD_ADDRESS","","",null,null],[17,"G_DBUS_ERROR_NOT_SUPPORTED","","",null,null],[17,"G_DBUS_ERROR_LIMITS_EXCEEDED","","",null,null],[17,"G_DBUS_ERROR_ACCESS_DENIED","","",null,null],[17,"G_DBUS_ERROR_AUTH_FAILED","","",null,null],[17,"G_DBUS_ERROR_NO_SERVER","","",null,null],[17,"G_DBUS_ERROR_TIMEOUT","","",null,null],[17,"G_DBUS_ERROR_NO_NETWORK","","",null,null],[17,"G_DBUS_ERROR_ADDRESS_IN_USE","","",null,null],[17,"G_DBUS_ERROR_DISCONNECTED","","",null,null],[17,"G_DBUS_ERROR_INVALID_ARGS","","",null,null],[17,"G_DBUS_ERROR_FILE_NOT_FOUND","","",null,null],[17,"G_DBUS_ERROR_FILE_EXISTS","","",null,null],[17,"G_DBUS_ERROR_UNKNOWN_METHOD","","",null,null],[17,"G_DBUS_ERROR_TIMED_OUT","","",null,null],[17,"G_DBUS_ERROR_MATCH_RULE_NOT_FOUND","","",null,null],[17,"G_DBUS_ERROR_MATCH_RULE_INVALID","","",null,null],[17,"G_DBUS_ERROR_SPAWN_EXEC_FAILED","","",null,null],[17,"G_DBUS_ERROR_SPAWN_FORK_FAILED","","",null,null],[17,"G_DBUS_ERROR_SPAWN_CHILD_EXITED","","",null,null],[17,"G_DBUS_ERROR_SPAWN_CHILD_SIGNALED","","",null,null],[17,"G_DBUS_ERROR_SPAWN_FAILED","","",null,null],[17,"G_DBUS_ERROR_SPAWN_SETUP_FAILED","","",null,null],[17,"G_DBUS_ERROR_SPAWN_CONFIG_INVALID","","",null,null],[17,"G_DBUS_ERROR_SPAWN_SERVICE_INVALID","","",null,null],[17,"G_DBUS_ERROR_SPAWN_SERVICE_NOT_FOUND","","",null,null],[17,"G_DBUS_ERROR_SPAWN_PERMISSIONS_INVALID","","",null,null],[17,"G_DBUS_ERROR_SPAWN_FILE_INVALID","","",null,null],[17,"G_DBUS_ERROR_SPAWN_NO_MEMORY","","",null,null],[17,"G_DBUS_ERROR_UNIX_PROCESS_ID_UNKNOWN","","",null,null],[17,"G_DBUS_ERROR_INVALID_SIGNATURE","","",null,null],[17,"G_DBUS_ERROR_INVALID_FILE_CONTENT","","",null,null],[17,"G_DBUS_ERROR_SELINUX_SECURITY_CONTEXT_UNKNOWN","","",null,null],[17,"G_DBUS_ERROR_ADT_AUDIT_DATA_UNKNOWN","","",null,null],[17,"G_DBUS_ERROR_OBJECT_PATH_IN_USE","","",null,null],[17,"G_DBUS_ERROR_UNKNOWN_OBJECT","","",null,null],[17,"G_DBUS_ERROR_UNKNOWN_INTERFACE","","",null,null],[17,"G_DBUS_ERROR_UNKNOWN_PROPERTY","","",null,null],[17,"G_DBUS_ERROR_PROPERTY_READ_ONLY","","",null,null],[17,"G_DBUS_MESSAGE_BYTE_ORDER_BIG_ENDIAN","","",null,null],[17,"G_DBUS_MESSAGE_BYTE_ORDER_LITTLE_ENDIAN","","",null,null],[17,"G_DBUS_MESSAGE_HEADER_FIELD_INVALID","","",null,null],[17,"G_DBUS_MESSAGE_HEADER_FIELD_PATH","","",null,null],[17,"G_DBUS_MESSAGE_HEADER_FIELD_INTERFACE","","",null,null],[17,"G_DBUS_MESSAGE_HEADER_FIELD_MEMBER","","",null,null],[17,"G_DBUS_MESSAGE_HEADER_FIELD_ERROR_NAME","","",null,null],[17,"G_DBUS_MESSAGE_HEADER_FIELD_REPLY_SERIAL","","",null,null],[17,"G_DBUS_MESSAGE_HEADER_FIELD_DESTINATION","","",null,null],[17,"G_DBUS_MESSAGE_HEADER_FIELD_SENDER","","",null,null],[17,"G_DBUS_MESSAGE_HEADER_FIELD_SIGNATURE","","",null,null],[17,"G_DBUS_MESSAGE_HEADER_FIELD_NUM_UNIX_FDS","","",null,null],[17,"G_DBUS_MESSAGE_TYPE_INVALID","","",null,null],[17,"G_DBUS_MESSAGE_TYPE_METHOD_CALL","","",null,null],[17,"G_DBUS_MESSAGE_TYPE_METHOD_RETURN","","",null,null],[17,"G_DBUS_MESSAGE_TYPE_ERROR","","",null,null],[17,"G_DBUS_MESSAGE_TYPE_SIGNAL","","",null,null],[17,"G_DATA_STREAM_BYTE_ORDER_BIG_ENDIAN","","",null,null],[17,"G_DATA_STREAM_BYTE_ORDER_LITTLE_ENDIAN","","",null,null],[17,"G_DATA_STREAM_BYTE_ORDER_HOST_ENDIAN","","",null,null],[17,"G_DATA_STREAM_NEWLINE_TYPE_LF","","",null,null],[17,"G_DATA_STREAM_NEWLINE_TYPE_CR","","",null,null],[17,"G_DATA_STREAM_NEWLINE_TYPE_CR_LF","","",null,null],[17,"G_DATA_STREAM_NEWLINE_TYPE_ANY","","",null,null],[17,"G_DRIVE_START_STOP_TYPE_UNKNOWN","","",null,null],[17,"G_DRIVE_START_STOP_TYPE_SHUTDOWN","","",null,null],[17,"G_DRIVE_START_STOP_TYPE_NETWORK","","",null,null],[17,"G_DRIVE_START_STOP_TYPE_MULTIDISK","","",null,null],[17,"G_DRIVE_START_STOP_TYPE_PASSWORD","","",null,null],[17,"G_EMBLEM_ORIGIN_UNKNOWN","","",null,null],[17,"G_EMBLEM_ORIGIN_DEVICE","","",null,null],[17,"G_EMBLEM_ORIGIN_LIVEMETADATA","","",null,null],[17,"G_EMBLEM_ORIGIN_TAG","","",null,null],[17,"G_FILE_ATTRIBUTE_STATUS_UNSET","","",null,null],[17,"G_FILE_ATTRIBUTE_STATUS_SET","","",null,null],[17,"G_FILE_ATTRIBUTE_STATUS_ERROR_SETTING","","",null,null],[17,"G_FILE_ATTRIBUTE_TYPE_INVALID","","",null,null],[17,"G_FILE_ATTRIBUTE_TYPE_STRING","","",null,null],[17,"G_FILE_ATTRIBUTE_TYPE_BYTE_STRING","","",null,null],[17,"G_FILE_ATTRIBUTE_TYPE_BOOLEAN","","",null,null],[17,"G_FILE_ATTRIBUTE_TYPE_UINT32","","",null,null],[17,"G_FILE_ATTRIBUTE_TYPE_INT32","","",null,null],[17,"G_FILE_ATTRIBUTE_TYPE_UINT64","","",null,null],[17,"G_FILE_ATTRIBUTE_TYPE_INT64","","",null,null],[17,"G_FILE_ATTRIBUTE_TYPE_OBJECT","","",null,null],[17,"G_FILE_ATTRIBUTE_TYPE_STRINGV","","",null,null],[17,"G_FILE_MONITOR_EVENT_CHANGED","","",null,null],[17,"G_FILE_MONITOR_EVENT_CHANGES_DONE_HINT","","",null,null],[17,"G_FILE_MONITOR_EVENT_DELETED","","",null,null],[17,"G_FILE_MONITOR_EVENT_CREATED","","",null,null],[17,"G_FILE_MONITOR_EVENT_ATTRIBUTE_CHANGED","","",null,null],[17,"G_FILE_MONITOR_EVENT_PRE_UNMOUNT","","",null,null],[17,"G_FILE_MONITOR_EVENT_UNMOUNTED","","",null,null],[17,"G_FILE_MONITOR_EVENT_MOVED","","",null,null],[17,"G_FILE_MONITOR_EVENT_RENAMED","","",null,null],[17,"G_FILE_MONITOR_EVENT_MOVED_IN","","",null,null],[17,"G_FILE_MONITOR_EVENT_MOVED_OUT","","",null,null],[17,"G_FILE_TYPE_UNKNOWN","","",null,null],[17,"G_FILE_TYPE_REGULAR","","",null,null],[17,"G_FILE_TYPE_DIRECTORY","","",null,null],[17,"G_FILE_TYPE_SYMBOLIC_LINK","","",null,null],[17,"G_FILE_TYPE_SPECIAL","","",null,null],[17,"G_FILE_TYPE_SHORTCUT","","",null,null],[17,"G_FILE_TYPE_MOUNTABLE","","",null,null],[17,"G_FILESYSTEM_PREVIEW_TYPE_IF_ALWAYS","","",null,null],[17,"G_FILESYSTEM_PREVIEW_TYPE_IF_LOCAL","","",null,null],[17,"G_FILESYSTEM_PREVIEW_TYPE_NEVER","","",null,null],[17,"G_IO_ERROR_FAILED","","",null,null],[17,"G_IO_ERROR_NOT_FOUND","","",null,null],[17,"G_IO_ERROR_EXISTS","","",null,null],[17,"G_IO_ERROR_IS_DIRECTORY","","",null,null],[17,"G_IO_ERROR_NOT_DIRECTORY","","",null,null],[17,"G_IO_ERROR_NOT_EMPTY","","",null,null],[17,"G_IO_ERROR_NOT_REGULAR_FILE","","",null,null],[17,"G_IO_ERROR_NOT_SYMBOLIC_LINK","","",null,null],[17,"G_IO_ERROR_NOT_MOUNTABLE_FILE","","",null,null],[17,"G_IO_ERROR_FILENAME_TOO_LONG","","",null,null],[17,"G_IO_ERROR_INVALID_FILENAME","","",null,null],[17,"G_IO_ERROR_TOO_MANY_LINKS","","",null,null],[17,"G_IO_ERROR_NO_SPACE","","",null,null],[17,"G_IO_ERROR_INVALID_ARGUMENT","","",null,null],[17,"G_IO_ERROR_PERMISSION_DENIED","","",null,null],[17,"G_IO_ERROR_NOT_SUPPORTED","","",null,null],[17,"G_IO_ERROR_NOT_MOUNTED","","",null,null],[17,"G_IO_ERROR_ALREADY_MOUNTED","","",null,null],[17,"G_IO_ERROR_CLOSED","","",null,null],[17,"G_IO_ERROR_CANCELLED","","",null,null],[17,"G_IO_ERROR_PENDING","","",null,null],[17,"G_IO_ERROR_READ_ONLY","","",null,null],[17,"G_IO_ERROR_CANT_CREATE_BACKUP","","",null,null],[17,"G_IO_ERROR_WRONG_ETAG","","",null,null],[17,"G_IO_ERROR_TIMED_OUT","","",null,null],[17,"G_IO_ERROR_WOULD_RECURSE","","",null,null],[17,"G_IO_ERROR_BUSY","","",null,null],[17,"G_IO_ERROR_WOULD_BLOCK","","",null,null],[17,"G_IO_ERROR_HOST_NOT_FOUND","","",null,null],[17,"G_IO_ERROR_WOULD_MERGE","","",null,null],[17,"G_IO_ERROR_FAILED_HANDLED","","",null,null],[17,"G_IO_ERROR_TOO_MANY_OPEN_FILES","","",null,null],[17,"G_IO_ERROR_NOT_INITIALIZED","","",null,null],[17,"G_IO_ERROR_ADDRESS_IN_USE","","",null,null],[17,"G_IO_ERROR_PARTIAL_INPUT","","",null,null],[17,"G_IO_ERROR_INVALID_DATA","","",null,null],[17,"G_IO_ERROR_DBUS_ERROR","","",null,null],[17,"G_IO_ERROR_HOST_UNREACHABLE","","",null,null],[17,"G_IO_ERROR_NETWORK_UNREACHABLE","","",null,null],[17,"G_IO_ERROR_CONNECTION_REFUSED","","",null,null],[17,"G_IO_ERROR_PROXY_FAILED","","",null,null],[17,"G_IO_ERROR_PROXY_AUTH_FAILED","","",null,null],[17,"G_IO_ERROR_PROXY_NEED_AUTH","","",null,null],[17,"G_IO_ERROR_PROXY_NOT_ALLOWED","","",null,null],[17,"G_IO_ERROR_BROKEN_PIPE","","",null,null],[17,"G_IO_ERROR_NOT_CONNECTED","","",null,null],[17,"G_IO_ERROR_MESSAGE_TOO_LARGE","","",null,null],[17,"G_IO_MODULE_SCOPE_NONE","","",null,null],[17,"G_IO_MODULE_SCOPE_BLOCK_DUPLICATES","","",null,null],[17,"G_MOUNT_OPERATION_HANDLED","","",null,null],[17,"G_MOUNT_OPERATION_ABORTED","","",null,null],[17,"G_MOUNT_OPERATION_UNHANDLED","","",null,null],[17,"G_NETWORK_CONNECTIVITY_LOCAL","","",null,null],[17,"G_NETWORK_CONNECTIVITY_LIMITED","","",null,null],[17,"G_NETWORK_CONNECTIVITY_PORTAL","","",null,null],[17,"G_NETWORK_CONNECTIVITY_FULL","","",null,null],[17,"G_NOTIFICATION_PRIORITY_NORMAL","","",null,null],[17,"G_NOTIFICATION_PRIORITY_LOW","","",null,null],[17,"G_NOTIFICATION_PRIORITY_HIGH","","",null,null],[17,"G_NOTIFICATION_PRIORITY_URGENT","","",null,null],[17,"G_PASSWORD_SAVE_NEVER","","",null,null],[17,"G_PASSWORD_SAVE_FOR_SESSION","","",null,null],[17,"G_PASSWORD_SAVE_PERMANENTLY","","",null,null],[17,"G_RESOLVER_ERROR_NOT_FOUND","","",null,null],[17,"G_RESOLVER_ERROR_TEMPORARY_FAILURE","","",null,null],[17,"G_RESOLVER_ERROR_INTERNAL","","",null,null],[17,"G_RESOLVER_RECORD_SRV","","",null,null],[17,"G_RESOLVER_RECORD_MX","","",null,null],[17,"G_RESOLVER_RECORD_TXT","","",null,null],[17,"G_RESOLVER_RECORD_SOA","","",null,null],[17,"G_RESOLVER_RECORD_NS","","",null,null],[17,"G_RESOURCE_ERROR_NOT_FOUND","","",null,null],[17,"G_RESOURCE_ERROR_INTERNAL","","",null,null],[17,"G_SOCKET_CLIENT_RESOLVING","","",null,null],[17,"G_SOCKET_CLIENT_RESOLVED","","",null,null],[17,"G_SOCKET_CLIENT_CONNECTING","","",null,null],[17,"G_SOCKET_CLIENT_CONNECTED","","",null,null],[17,"G_SOCKET_CLIENT_PROXY_NEGOTIATING","","",null,null],[17,"G_SOCKET_CLIENT_PROXY_NEGOTIATED","","",null,null],[17,"G_SOCKET_CLIENT_TLS_HANDSHAKING","","",null,null],[17,"G_SOCKET_CLIENT_TLS_HANDSHAKED","","",null,null],[17,"G_SOCKET_CLIENT_COMPLETE","","",null,null],[17,"G_SOCKET_FAMILY_INVALID","","",null,null],[17,"G_SOCKET_FAMILY_UNIX","","",null,null],[17,"G_SOCKET_FAMILY_IPV4","","",null,null],[17,"G_SOCKET_FAMILY_IPV6","","",null,null],[17,"G_SOCKET_LISTENER_BINDING","","",null,null],[17,"G_SOCKET_LISTENER_BOUND","","",null,null],[17,"G_SOCKET_LISTENER_LISTENING","","",null,null],[17,"G_SOCKET_LISTENER_LISTENED","","",null,null],[17,"G_SOCKET_PROTOCOL_UNKNOWN","","",null,null],[17,"G_SOCKET_PROTOCOL_DEFAULT","","",null,null],[17,"G_SOCKET_PROTOCOL_TCP","","",null,null],[17,"G_SOCKET_PROTOCOL_UDP","","",null,null],[17,"G_SOCKET_PROTOCOL_SCTP","","",null,null],[17,"G_SOCKET_TYPE_INVALID","","",null,null],[17,"G_SOCKET_TYPE_STREAM","","",null,null],[17,"G_SOCKET_TYPE_DATAGRAM","","",null,null],[17,"G_SOCKET_TYPE_SEQPACKET","","",null,null],[17,"G_TLS_AUTHENTICATION_NONE","","",null,null],[17,"G_TLS_AUTHENTICATION_REQUESTED","","",null,null],[17,"G_TLS_AUTHENTICATION_REQUIRED","","",null,null],[17,"G_TLS_CERTIFICATE_REQUEST_NONE","","",null,null],[17,"G_TLS_DATABASE_LOOKUP_NONE","","",null,null],[17,"G_TLS_DATABASE_LOOKUP_KEYPAIR","","",null,null],[17,"G_TLS_ERROR_UNAVAILABLE","","",null,null],[17,"G_TLS_ERROR_MISC","","",null,null],[17,"G_TLS_ERROR_BAD_CERTIFICATE","","",null,null],[17,"G_TLS_ERROR_NOT_TLS","","",null,null],[17,"G_TLS_ERROR_HANDSHAKE","","",null,null],[17,"G_TLS_ERROR_CERTIFICATE_REQUIRED","","",null,null],[17,"G_TLS_ERROR_EOF","","",null,null],[17,"G_TLS_INTERACTION_UNHANDLED","","",null,null],[17,"G_TLS_INTERACTION_HANDLED","","",null,null],[17,"G_TLS_INTERACTION_FAILED","","",null,null],[17,"G_TLS_REHANDSHAKE_NEVER","","",null,null],[17,"G_TLS_REHANDSHAKE_SAFELY","","",null,null],[17,"G_TLS_REHANDSHAKE_UNSAFELY","","",null,null],[17,"G_UNIX_SOCKET_ADDRESS_INVALID","","",null,null],[17,"G_UNIX_SOCKET_ADDRESS_ANONYMOUS","","",null,null],[17,"G_UNIX_SOCKET_ADDRESS_PATH","","",null,null],[17,"G_UNIX_SOCKET_ADDRESS_ABSTRACT","","",null,null],[17,"G_UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED","","",null,null],[17,"G_ZLIB_COMPRESSOR_FORMAT_ZLIB","","",null,null],[17,"G_ZLIB_COMPRESSOR_FORMAT_GZIP","","",null,null],[17,"G_ZLIB_COMPRESSOR_FORMAT_RAW","","",null,null],[17,"G_DESKTOP_APP_INFO_LOOKUP_EXTENSION_POINT_NAME","","",null,null],[17,"G_FILE_ATTRIBUTE_ACCESS_CAN_DELETE","","",null,null],[17,"G_FILE_ATTRIBUTE_ACCESS_CAN_EXECUTE","","",null,null],[17,"G_FILE_ATTRIBUTE_ACCESS_CAN_READ","","",null,null],[17,"G_FILE_ATTRIBUTE_ACCESS_CAN_RENAME","","",null,null],[17,"G_FILE_ATTRIBUTE_ACCESS_CAN_TRASH","","",null,null],[17,"G_FILE_ATTRIBUTE_ACCESS_CAN_WRITE","","",null,null],[17,"G_FILE_ATTRIBUTE_DOS_IS_ARCHIVE","","",null,null],[17,"G_FILE_ATTRIBUTE_DOS_IS_SYSTEM","","",null,null],[17,"G_FILE_ATTRIBUTE_ETAG_VALUE","","",null,null],[17,"G_FILE_ATTRIBUTE_FILESYSTEM_FREE","","",null,null],[17,"G_FILE_ATTRIBUTE_FILESYSTEM_READONLY","","",null,null],[17,"G_FILE_ATTRIBUTE_FILESYSTEM_REMOTE","","",null,null],[17,"G_FILE_ATTRIBUTE_FILESYSTEM_SIZE","","",null,null],[17,"G_FILE_ATTRIBUTE_FILESYSTEM_TYPE","","",null,null],[17,"G_FILE_ATTRIBUTE_FILESYSTEM_USED","","",null,null],[17,"G_FILE_ATTRIBUTE_FILESYSTEM_USE_PREVIEW","","",null,null],[17,"G_FILE_ATTRIBUTE_GVFS_BACKEND","","",null,null],[17,"G_FILE_ATTRIBUTE_ID_FILE","","",null,null],[17,"G_FILE_ATTRIBUTE_ID_FILESYSTEM","","",null,null],[17,"G_FILE_ATTRIBUTE_MOUNTABLE_CAN_EJECT","","",null,null],[17,"G_FILE_ATTRIBUTE_MOUNTABLE_CAN_MOUNT","","",null,null],[17,"G_FILE_ATTRIBUTE_MOUNTABLE_CAN_POLL","","",null,null],[17,"G_FILE_ATTRIBUTE_MOUNTABLE_CAN_START","","",null,null],[17,"G_FILE_ATTRIBUTE_MOUNTABLE_CAN_START_DEGRADED","","",null,null],[17,"G_FILE_ATTRIBUTE_MOUNTABLE_CAN_STOP","","",null,null],[17,"G_FILE_ATTRIBUTE_MOUNTABLE_CAN_UNMOUNT","","",null,null],[17,"G_FILE_ATTRIBUTE_MOUNTABLE_HAL_UDI","","",null,null],[17,"G_FILE_ATTRIBUTE_MOUNTABLE_IS_MEDIA_CHECK_AUTOMATIC","","",null,null],[17,"G_FILE_ATTRIBUTE_MOUNTABLE_START_STOP_TYPE","","",null,null],[17,"G_FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE","","",null,null],[17,"G_FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE_FILE","","",null,null],[17,"G_FILE_ATTRIBUTE_OWNER_GROUP","","",null,null],[17,"G_FILE_ATTRIBUTE_OWNER_USER","","",null,null],[17,"G_FILE_ATTRIBUTE_OWNER_USER_REAL","","",null,null],[17,"G_FILE_ATTRIBUTE_PREVIEW_ICON","","",null,null],[17,"G_FILE_ATTRIBUTE_RECENT_MODIFIED","","",null,null],[17,"G_FILE_ATTRIBUTE_SELINUX_CONTEXT","","",null,null],[17,"G_FILE_ATTRIBUTE_STANDARD_ALLOCATED_SIZE","","",null,null],[17,"G_FILE_ATTRIBUTE_STANDARD_CONTENT_TYPE","","",null,null],[17,"G_FILE_ATTRIBUTE_STANDARD_COPY_NAME","","",null,null],[17,"G_FILE_ATTRIBUTE_STANDARD_DESCRIPTION","","",null,null],[17,"G_FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME","","",null,null],[17,"G_FILE_ATTRIBUTE_STANDARD_EDIT_NAME","","",null,null],[17,"G_FILE_ATTRIBUTE_STANDARD_FAST_CONTENT_TYPE","","",null,null],[17,"G_FILE_ATTRIBUTE_STANDARD_ICON","","",null,null],[17,"G_FILE_ATTRIBUTE_STANDARD_IS_BACKUP","","",null,null],[17,"G_FILE_ATTRIBUTE_STANDARD_IS_HIDDEN","","",null,null],[17,"G_FILE_ATTRIBUTE_STANDARD_IS_SYMLINK","","",null,null],[17,"G_FILE_ATTRIBUTE_STANDARD_IS_VIRTUAL","","",null,null],[17,"G_FILE_ATTRIBUTE_STANDARD_IS_VOLATILE","","",null,null],[17,"G_FILE_ATTRIBUTE_STANDARD_NAME","","",null,null],[17,"G_FILE_ATTRIBUTE_STANDARD_SIZE","","",null,null],[17,"G_FILE_ATTRIBUTE_STANDARD_SORT_ORDER","","",null,null],[17,"G_FILE_ATTRIBUTE_STANDARD_SYMBOLIC_ICON","","",null,null],[17,"G_FILE_ATTRIBUTE_STANDARD_SYMLINK_TARGET","","",null,null],[17,"G_FILE_ATTRIBUTE_STANDARD_TARGET_URI","","",null,null],[17,"G_FILE_ATTRIBUTE_STANDARD_TYPE","","",null,null],[17,"G_FILE_ATTRIBUTE_THUMBNAILING_FAILED","","",null,null],[17,"G_FILE_ATTRIBUTE_THUMBNAIL_IS_VALID","","",null,null],[17,"G_FILE_ATTRIBUTE_THUMBNAIL_PATH","","",null,null],[17,"G_FILE_ATTRIBUTE_TIME_ACCESS","","",null,null],[17,"G_FILE_ATTRIBUTE_TIME_ACCESS_USEC","","",null,null],[17,"G_FILE_ATTRIBUTE_TIME_CHANGED","","",null,null],[17,"G_FILE_ATTRIBUTE_TIME_CHANGED_USEC","","",null,null],[17,"G_FILE_ATTRIBUTE_TIME_CREATED","","",null,null],[17,"G_FILE_ATTRIBUTE_TIME_CREATED_USEC","","",null,null],[17,"G_FILE_ATTRIBUTE_TIME_MODIFIED","","",null,null],[17,"G_FILE_ATTRIBUTE_TIME_MODIFIED_USEC","","",null,null],[17,"G_FILE_ATTRIBUTE_TRASH_DELETION_DATE","","",null,null],[17,"G_FILE_ATTRIBUTE_TRASH_ITEM_COUNT","","",null,null],[17,"G_FILE_ATTRIBUTE_TRASH_ORIG_PATH","","",null,null],[17,"G_FILE_ATTRIBUTE_UNIX_BLOCKS","","",null,null],[17,"G_FILE_ATTRIBUTE_UNIX_BLOCK_SIZE","","",null,null],[17,"G_FILE_ATTRIBUTE_UNIX_DEVICE","","",null,null],[17,"G_FILE_ATTRIBUTE_UNIX_GID","","",null,null],[17,"G_FILE_ATTRIBUTE_UNIX_INODE","","",null,null],[17,"G_FILE_ATTRIBUTE_UNIX_IS_MOUNTPOINT","","",null,null],[17,"G_FILE_ATTRIBUTE_UNIX_MODE","","",null,null],[17,"G_FILE_ATTRIBUTE_UNIX_NLINK","","",null,null],[17,"G_FILE_ATTRIBUTE_UNIX_RDEV","","",null,null],[17,"G_FILE_ATTRIBUTE_UNIX_UID","","",null,null],[17,"G_MENU_ATTRIBUTE_ACTION","","",null,null],[17,"G_MENU_ATTRIBUTE_ACTION_NAMESPACE","","",null,null],[17,"G_MENU_ATTRIBUTE_ICON","","",null,null],[17,"G_MENU_ATTRIBUTE_LABEL","","",null,null],[17,"G_MENU_ATTRIBUTE_TARGET","","",null,null],[17,"G_MENU_LINK_SECTION","","",null,null],[17,"G_MENU_LINK_SUBMENU","","",null,null],[17,"G_NATIVE_VOLUME_MONITOR_EXTENSION_POINT_NAME","","",null,null],[17,"G_NETWORK_MONITOR_EXTENSION_POINT_NAME","","",null,null],[17,"G_PROXY_EXTENSION_POINT_NAME","","",null,null],[17,"G_PROXY_RESOLVER_EXTENSION_POINT_NAME","","",null,null],[17,"G_SETTINGS_BACKEND_EXTENSION_POINT_NAME","","",null,null],[17,"G_TLS_BACKEND_EXTENSION_POINT_NAME","","",null,null],[17,"G_TLS_DATABASE_PURPOSE_AUTHENTICATE_CLIENT","","",null,null],[17,"G_TLS_DATABASE_PURPOSE_AUTHENTICATE_SERVER","","",null,null],[17,"G_VFS_EXTENSION_POINT_NAME","","",null,null],[17,"G_VOLUME_IDENTIFIER_KIND_CLASS","","",null,null],[17,"G_VOLUME_IDENTIFIER_KIND_HAL_UDI","","",null,null],[17,"G_VOLUME_IDENTIFIER_KIND_LABEL","","",null,null],[17,"G_VOLUME_IDENTIFIER_KIND_NFS_MOUNT","","",null,null],[17,"G_VOLUME_IDENTIFIER_KIND_UNIX_DEVICE","","",null,null],[17,"G_VOLUME_IDENTIFIER_KIND_UUID","","",null,null],[17,"G_VOLUME_MONITOR_EXTENSION_POINT_NAME","","",null,null],[17,"G_APP_INFO_CREATE_NONE","","",null,null],[17,"G_APP_INFO_CREATE_NEEDS_TERMINAL","","",null,null],[17,"G_APP_INFO_CREATE_SUPPORTS_URIS","","",null,null],[17,"G_APP_INFO_CREATE_SUPPORTS_STARTUP_NOTIFICATION","","",null,null],[17,"G_APPLICATION_FLAGS_NONE","","",null,null],[17,"G_APPLICATION_IS_SERVICE","","",null,null],[17,"G_APPLICATION_IS_LAUNCHER","","",null,null],[17,"G_APPLICATION_HANDLES_OPEN","","",null,null],[17,"G_APPLICATION_HANDLES_COMMAND_LINE","","",null,null],[17,"G_APPLICATION_SEND_ENVIRONMENT","","",null,null],[17,"G_APPLICATION_NON_UNIQUE","","",null,null],[17,"G_APPLICATION_CAN_OVERRIDE_APP_ID","","",null,null],[17,"G_ASK_PASSWORD_NEED_PASSWORD","","",null,null],[17,"G_ASK_PASSWORD_NEED_USERNAME","","",null,null],[17,"G_ASK_PASSWORD_NEED_DOMAIN","","",null,null],[17,"G_ASK_PASSWORD_SAVING_SUPPORTED","","",null,null],[17,"G_ASK_PASSWORD_ANONYMOUS_SUPPORTED","","",null,null],[17,"G_BUS_NAME_OWNER_FLAGS_NONE","","",null,null],[17,"G_BUS_NAME_OWNER_FLAGS_ALLOW_REPLACEMENT","","",null,null],[17,"G_BUS_NAME_OWNER_FLAGS_REPLACE","","",null,null],[17,"G_BUS_NAME_WATCHER_FLAGS_NONE","","",null,null],[17,"G_BUS_NAME_WATCHER_FLAGS_AUTO_START","","",null,null],[17,"G_CONVERTER_NO_FLAGS","","",null,null],[17,"G_CONVERTER_INPUT_AT_END","","",null,null],[17,"G_CONVERTER_FLUSH","","",null,null],[17,"G_DBUS_CALL_FLAGS_NONE","","",null,null],[17,"G_DBUS_CALL_FLAGS_NO_AUTO_START","","",null,null],[17,"G_DBUS_CALL_FLAGS_ALLOW_INTERACTIVE_AUTHORIZATION","","",null,null],[17,"G_DBUS_CAPABILITY_FLAGS_NONE","","",null,null],[17,"G_DBUS_CAPABILITY_FLAGS_UNIX_FD_PASSING","","",null,null],[17,"G_DBUS_CONNECTION_FLAGS_NONE","","",null,null],[17,"G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_CLIENT","","",null,null],[17,"G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_SERVER","","",null,null],[17,"G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS","","",null,null],[17,"G_DBUS_CONNECTION_FLAGS_MESSAGE_BUS_CONNECTION","","",null,null],[17,"G_DBUS_CONNECTION_FLAGS_DELAY_MESSAGE_PROCESSING","","",null,null],[17,"G_DBUS_INTERFACE_SKELETON_FLAGS_NONE","","",null,null],[17,"G_DBUS_INTERFACE_SKELETON_FLAGS_HANDLE_METHOD_INVOCATIONS_IN_THREAD","","",null,null],[17,"G_DBUS_MESSAGE_FLAGS_NONE","","",null,null],[17,"G_DBUS_MESSAGE_FLAGS_NO_REPLY_EXPECTED","","",null,null],[17,"G_DBUS_MESSAGE_FLAGS_NO_AUTO_START","","",null,null],[17,"G_DBUS_MESSAGE_FLAGS_ALLOW_INTERACTIVE_AUTHORIZATION","","",null,null],[17,"G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_NONE","","",null,null],[17,"G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_DO_NOT_AUTO_START","","",null,null],[17,"G_DBUS_PROPERTY_INFO_FLAGS_NONE","","",null,null],[17,"G_DBUS_PROPERTY_INFO_FLAGS_READABLE","","",null,null],[17,"G_DBUS_PROPERTY_INFO_FLAGS_WRITABLE","","",null,null],[17,"G_DBUS_PROXY_FLAGS_NONE","","",null,null],[17,"G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES","","",null,null],[17,"G_DBUS_PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS","","",null,null],[17,"G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START","","",null,null],[17,"G_DBUS_PROXY_FLAGS_GET_INVALIDATED_PROPERTIES","","",null,null],[17,"G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START_AT_CONSTRUCTION","","",null,null],[17,"G_DBUS_SEND_MESSAGE_FLAGS_NONE","","",null,null],[17,"G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL","","",null,null],[17,"G_DBUS_SERVER_FLAGS_NONE","","",null,null],[17,"G_DBUS_SERVER_FLAGS_RUN_IN_THREAD","","",null,null],[17,"G_DBUS_SERVER_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS","","",null,null],[17,"G_DBUS_SIGNAL_FLAGS_NONE","","",null,null],[17,"G_DBUS_SIGNAL_FLAGS_NO_MATCH_RULE","","",null,null],[17,"G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_NAMESPACE","","",null,null],[17,"G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_PATH","","",null,null],[17,"G_DBUS_SUBTREE_FLAGS_NONE","","",null,null],[17,"G_DBUS_SUBTREE_FLAGS_DISPATCH_TO_UNENUMERATED_NODES","","",null,null],[17,"G_DRIVE_START_NONE","","",null,null],[17,"G_FILE_ATTRIBUTE_INFO_NONE","","",null,null],[17,"G_FILE_ATTRIBUTE_INFO_COPY_WITH_FILE","","",null,null],[17,"G_FILE_ATTRIBUTE_INFO_COPY_WHEN_MOVED","","",null,null],[17,"G_FILE_COPY_NONE","","",null,null],[17,"G_FILE_COPY_OVERWRITE","","",null,null],[17,"G_FILE_COPY_BACKUP","","",null,null],[17,"G_FILE_COPY_NOFOLLOW_SYMLINKS","","",null,null],[17,"G_FILE_COPY_ALL_METADATA","","",null,null],[17,"G_FILE_COPY_NO_FALLBACK_FOR_MOVE","","",null,null],[17,"G_FILE_COPY_TARGET_DEFAULT_PERMS","","",null,null],[17,"G_FILE_CREATE_NONE","","",null,null],[17,"G_FILE_CREATE_PRIVATE","","",null,null],[17,"G_FILE_CREATE_REPLACE_DESTINATION","","",null,null],[17,"G_FILE_MEASURE_NONE","","",null,null],[17,"G_FILE_MEASURE_REPORT_ANY_ERROR","","",null,null],[17,"G_FILE_MEASURE_APPARENT_SIZE","","",null,null],[17,"G_FILE_MEASURE_NO_XDEV","","",null,null],[17,"G_FILE_MONITOR_NONE","","",null,null],[17,"G_FILE_MONITOR_WATCH_MOUNTS","","",null,null],[17,"G_FILE_MONITOR_SEND_MOVED","","",null,null],[17,"G_FILE_MONITOR_WATCH_HARD_LINKS","","",null,null],[17,"G_FILE_MONITOR_WATCH_MOVES","","",null,null],[17,"G_FILE_QUERY_INFO_NONE","","",null,null],[17,"G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS","","",null,null],[17,"G_IO_STREAM_SPLICE_NONE","","",null,null],[17,"G_IO_STREAM_SPLICE_CLOSE_STREAM1","","",null,null],[17,"G_IO_STREAM_SPLICE_CLOSE_STREAM2","","",null,null],[17,"G_IO_STREAM_SPLICE_WAIT_FOR_BOTH","","",null,null],[17,"G_MOUNT_MOUNT_NONE","","",null,null],[17,"G_MOUNT_UNMOUNT_NONE","","",null,null],[17,"G_MOUNT_UNMOUNT_FORCE","","",null,null],[17,"G_OUTPUT_STREAM_SPLICE_NONE","","",null,null],[17,"G_OUTPUT_STREAM_SPLICE_CLOSE_SOURCE","","",null,null],[17,"G_OUTPUT_STREAM_SPLICE_CLOSE_TARGET","","",null,null],[17,"G_RESOURCE_FLAGS_NONE","","",null,null],[17,"G_RESOURCE_FLAGS_COMPRESSED","","",null,null],[17,"G_RESOURCE_LOOKUP_FLAGS_NONE","","",null,null],[17,"G_SETTINGS_BIND_DEFAULT","","",null,null],[17,"G_SETTINGS_BIND_GET","","",null,null],[17,"G_SETTINGS_BIND_SET","","",null,null],[17,"G_SETTINGS_BIND_NO_SENSITIVITY","","",null,null],[17,"G_SETTINGS_BIND_GET_NO_CHANGES","","",null,null],[17,"G_SETTINGS_BIND_INVERT_BOOLEAN","","",null,null],[17,"G_SOCKET_MSG_NONE","","",null,null],[17,"G_SOCKET_MSG_OOB","","",null,null],[17,"G_SOCKET_MSG_PEEK","","",null,null],[17,"G_SOCKET_MSG_DONTROUTE","","",null,null],[17,"G_SUBPROCESS_FLAGS_NONE","","",null,null],[17,"G_SUBPROCESS_FLAGS_STDIN_PIPE","","",null,null],[17,"G_SUBPROCESS_FLAGS_STDIN_INHERIT","","",null,null],[17,"G_SUBPROCESS_FLAGS_STDOUT_PIPE","","",null,null],[17,"G_SUBPROCESS_FLAGS_STDOUT_SILENCE","","",null,null],[17,"G_SUBPROCESS_FLAGS_STDERR_PIPE","","",null,null],[17,"G_SUBPROCESS_FLAGS_STDERR_SILENCE","","",null,null],[17,"G_SUBPROCESS_FLAGS_STDERR_MERGE","","",null,null],[17,"G_SUBPROCESS_FLAGS_INHERIT_FDS","","",null,null],[17,"G_TEST_DBUS_NONE","","",null,null],[17,"G_TLS_CERTIFICATE_UNKNOWN_CA","","",null,null],[17,"G_TLS_CERTIFICATE_BAD_IDENTITY","","",null,null],[17,"G_TLS_CERTIFICATE_NOT_ACTIVATED","","",null,null],[17,"G_TLS_CERTIFICATE_EXPIRED","","",null,null],[17,"G_TLS_CERTIFICATE_REVOKED","","",null,null],[17,"G_TLS_CERTIFICATE_INSECURE","","",null,null],[17,"G_TLS_CERTIFICATE_GENERIC_ERROR","","",null,null],[17,"G_TLS_CERTIFICATE_VALIDATE_ALL","","",null,null],[17,"G_TLS_DATABASE_VERIFY_NONE","","",null,null],[17,"G_TLS_PASSWORD_NONE","","",null,null],[17,"G_TLS_PASSWORD_RETRY","","",null,null],[17,"G_TLS_PASSWORD_MANY_TRIES","","",null,null],[17,"G_TLS_PASSWORD_FINAL_TRY","","",null,null],[11,"eq","","",204,{"inputs":[{"name":"self"},{"name":"gappinfocreateflags"}],"output":{"name":"bool"}}],[11,"ne","","",204,{"inputs":[{"name":"self"},{"name":"gappinfocreateflags"}],"output":{"name":"bool"}}],[11,"clone","","",204,{"inputs":[{"name":"self"}],"output":{"name":"gappinfocreateflags"}}],[11,"partial_cmp","","",204,{"inputs":[{"name":"self"},{"name":"gappinfocreateflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",204,{"inputs":[{"name":"self"},{"name":"gappinfocreateflags"}],"output":{"name":"bool"}}],[11,"le","","",204,{"inputs":[{"name":"self"},{"name":"gappinfocreateflags"}],"output":{"name":"bool"}}],[11,"gt","","",204,{"inputs":[{"name":"self"},{"name":"gappinfocreateflags"}],"output":{"name":"bool"}}],[11,"ge","","",204,{"inputs":[{"name":"self"},{"name":"gappinfocreateflags"}],"output":{"name":"bool"}}],[11,"cmp","","",204,{"inputs":[{"name":"self"},{"name":"gappinfocreateflags"}],"output":{"name":"ordering"}}],[11,"hash","","",204,null],[11,"fmt","","",204,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",204,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",204,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",204,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",204,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",204,null],[18,"NEEDS_TERMINAL","","",204,null],[18,"SUPPORTS_URIS","","",204,null],[18,"SUPPORTS_STARTUP_NOTIFICATION","","",204,null],[11,"empty","","Returns an empty set of flags.",204,{"inputs":[],"output":{"name":"gappinfocreateflags"}}],[11,"all","","Returns the set containing all flags.",204,{"inputs":[],"output":{"name":"gappinfocreateflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",204,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",204,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gappinfocreateflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",204,{"inputs":[{"name":"c_uint"}],"output":{"name":"gappinfocreateflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",204,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",204,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",204,{"inputs":[{"name":"self"},{"name":"gappinfocreateflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",204,{"inputs":[{"name":"self"},{"name":"gappinfocreateflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",204,{"inputs":[{"name":"self"},{"name":"gappinfocreateflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",204,{"inputs":[{"name":"self"},{"name":"gappinfocreateflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",204,{"inputs":[{"name":"self"},{"name":"gappinfocreateflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",204,{"inputs":[{"name":"self"},{"name":"gappinfocreateflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",204,{"inputs":[{"name":"self"},{"name":"gappinfocreateflags"}],"output":{"name":"gappinfocreateflags"}}],[11,"bitor_assign","","Adds the set of flags.",204,{"inputs":[{"name":"self"},{"name":"gappinfocreateflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",204,{"inputs":[{"name":"self"},{"name":"gappinfocreateflags"}],"output":{"name":"gappinfocreateflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",204,{"inputs":[{"name":"self"},{"name":"gappinfocreateflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",204,{"inputs":[{"name":"self"},{"name":"gappinfocreateflags"}],"output":{"name":"gappinfocreateflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",204,{"inputs":[{"name":"self"},{"name":"gappinfocreateflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",204,{"inputs":[{"name":"self"},{"name":"gappinfocreateflags"}],"output":{"name":"gappinfocreateflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",204,{"inputs":[{"name":"self"},{"name":"gappinfocreateflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",204,{"inputs":[{"name":"self"}],"output":{"name":"gappinfocreateflags"}}],[11,"extend","","",204,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",204,{"inputs":[{"name":"t"}],"output":{"name":"gappinfocreateflags"}}],[11,"eq","","",205,{"inputs":[{"name":"self"},{"name":"gapplicationflags"}],"output":{"name":"bool"}}],[11,"ne","","",205,{"inputs":[{"name":"self"},{"name":"gapplicationflags"}],"output":{"name":"bool"}}],[11,"clone","","",205,{"inputs":[{"name":"self"}],"output":{"name":"gapplicationflags"}}],[11,"partial_cmp","","",205,{"inputs":[{"name":"self"},{"name":"gapplicationflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",205,{"inputs":[{"name":"self"},{"name":"gapplicationflags"}],"output":{"name":"bool"}}],[11,"le","","",205,{"inputs":[{"name":"self"},{"name":"gapplicationflags"}],"output":{"name":"bool"}}],[11,"gt","","",205,{"inputs":[{"name":"self"},{"name":"gapplicationflags"}],"output":{"name":"bool"}}],[11,"ge","","",205,{"inputs":[{"name":"self"},{"name":"gapplicationflags"}],"output":{"name":"bool"}}],[11,"cmp","","",205,{"inputs":[{"name":"self"},{"name":"gapplicationflags"}],"output":{"name":"ordering"}}],[11,"hash","","",205,null],[11,"fmt","","",205,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",205,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",205,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",205,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",205,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"FLAGS_NONE","","",205,null],[18,"IS_SERVICE","","",205,null],[18,"IS_LAUNCHER","","",205,null],[18,"HANDLES_OPEN","","",205,null],[18,"HANDLES_COMMAND_LINE","","",205,null],[18,"SEND_ENVIRONMENT","","",205,null],[18,"NON_UNIQUE","","",205,null],[18,"CAN_OVERRIDE_APP_ID","","",205,null],[11,"empty","","Returns an empty set of flags.",205,{"inputs":[],"output":{"name":"gapplicationflags"}}],[11,"all","","Returns the set containing all flags.",205,{"inputs":[],"output":{"name":"gapplicationflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",205,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",205,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gapplicationflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",205,{"inputs":[{"name":"c_uint"}],"output":{"name":"gapplicationflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",205,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",205,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",205,{"inputs":[{"name":"self"},{"name":"gapplicationflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",205,{"inputs":[{"name":"self"},{"name":"gapplicationflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",205,{"inputs":[{"name":"self"},{"name":"gapplicationflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",205,{"inputs":[{"name":"self"},{"name":"gapplicationflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",205,{"inputs":[{"name":"self"},{"name":"gapplicationflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",205,{"inputs":[{"name":"self"},{"name":"gapplicationflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",205,{"inputs":[{"name":"self"},{"name":"gapplicationflags"}],"output":{"name":"gapplicationflags"}}],[11,"bitor_assign","","Adds the set of flags.",205,{"inputs":[{"name":"self"},{"name":"gapplicationflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",205,{"inputs":[{"name":"self"},{"name":"gapplicationflags"}],"output":{"name":"gapplicationflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",205,{"inputs":[{"name":"self"},{"name":"gapplicationflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",205,{"inputs":[{"name":"self"},{"name":"gapplicationflags"}],"output":{"name":"gapplicationflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",205,{"inputs":[{"name":"self"},{"name":"gapplicationflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",205,{"inputs":[{"name":"self"},{"name":"gapplicationflags"}],"output":{"name":"gapplicationflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",205,{"inputs":[{"name":"self"},{"name":"gapplicationflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",205,{"inputs":[{"name":"self"}],"output":{"name":"gapplicationflags"}}],[11,"extend","","",205,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",205,{"inputs":[{"name":"t"}],"output":{"name":"gapplicationflags"}}],[11,"eq","","",206,{"inputs":[{"name":"self"},{"name":"gaskpasswordflags"}],"output":{"name":"bool"}}],[11,"ne","","",206,{"inputs":[{"name":"self"},{"name":"gaskpasswordflags"}],"output":{"name":"bool"}}],[11,"clone","","",206,{"inputs":[{"name":"self"}],"output":{"name":"gaskpasswordflags"}}],[11,"partial_cmp","","",206,{"inputs":[{"name":"self"},{"name":"gaskpasswordflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",206,{"inputs":[{"name":"self"},{"name":"gaskpasswordflags"}],"output":{"name":"bool"}}],[11,"le","","",206,{"inputs":[{"name":"self"},{"name":"gaskpasswordflags"}],"output":{"name":"bool"}}],[11,"gt","","",206,{"inputs":[{"name":"self"},{"name":"gaskpasswordflags"}],"output":{"name":"bool"}}],[11,"ge","","",206,{"inputs":[{"name":"self"},{"name":"gaskpasswordflags"}],"output":{"name":"bool"}}],[11,"cmp","","",206,{"inputs":[{"name":"self"},{"name":"gaskpasswordflags"}],"output":{"name":"ordering"}}],[11,"hash","","",206,null],[11,"fmt","","",206,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",206,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",206,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",206,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",206,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NEED_PASSWORD","","",206,null],[18,"NEED_USERNAME","","",206,null],[18,"NEED_DOMAIN","","",206,null],[18,"SAVING_SUPPORTED","","",206,null],[18,"ANONYMOUS_SUPPORTED","","",206,null],[11,"empty","","Returns an empty set of flags.",206,{"inputs":[],"output":{"name":"gaskpasswordflags"}}],[11,"all","","Returns the set containing all flags.",206,{"inputs":[],"output":{"name":"gaskpasswordflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",206,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",206,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gaskpasswordflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",206,{"inputs":[{"name":"c_uint"}],"output":{"name":"gaskpasswordflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",206,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",206,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",206,{"inputs":[{"name":"self"},{"name":"gaskpasswordflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",206,{"inputs":[{"name":"self"},{"name":"gaskpasswordflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",206,{"inputs":[{"name":"self"},{"name":"gaskpasswordflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",206,{"inputs":[{"name":"self"},{"name":"gaskpasswordflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",206,{"inputs":[{"name":"self"},{"name":"gaskpasswordflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",206,{"inputs":[{"name":"self"},{"name":"gaskpasswordflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",206,{"inputs":[{"name":"self"},{"name":"gaskpasswordflags"}],"output":{"name":"gaskpasswordflags"}}],[11,"bitor_assign","","Adds the set of flags.",206,{"inputs":[{"name":"self"},{"name":"gaskpasswordflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",206,{"inputs":[{"name":"self"},{"name":"gaskpasswordflags"}],"output":{"name":"gaskpasswordflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",206,{"inputs":[{"name":"self"},{"name":"gaskpasswordflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",206,{"inputs":[{"name":"self"},{"name":"gaskpasswordflags"}],"output":{"name":"gaskpasswordflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",206,{"inputs":[{"name":"self"},{"name":"gaskpasswordflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",206,{"inputs":[{"name":"self"},{"name":"gaskpasswordflags"}],"output":{"name":"gaskpasswordflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",206,{"inputs":[{"name":"self"},{"name":"gaskpasswordflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",206,{"inputs":[{"name":"self"}],"output":{"name":"gaskpasswordflags"}}],[11,"extend","","",206,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",206,{"inputs":[{"name":"t"}],"output":{"name":"gaskpasswordflags"}}],[11,"eq","","",207,{"inputs":[{"name":"self"},{"name":"gbusnameownerflags"}],"output":{"name":"bool"}}],[11,"ne","","",207,{"inputs":[{"name":"self"},{"name":"gbusnameownerflags"}],"output":{"name":"bool"}}],[11,"clone","","",207,{"inputs":[{"name":"self"}],"output":{"name":"gbusnameownerflags"}}],[11,"partial_cmp","","",207,{"inputs":[{"name":"self"},{"name":"gbusnameownerflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",207,{"inputs":[{"name":"self"},{"name":"gbusnameownerflags"}],"output":{"name":"bool"}}],[11,"le","","",207,{"inputs":[{"name":"self"},{"name":"gbusnameownerflags"}],"output":{"name":"bool"}}],[11,"gt","","",207,{"inputs":[{"name":"self"},{"name":"gbusnameownerflags"}],"output":{"name":"bool"}}],[11,"ge","","",207,{"inputs":[{"name":"self"},{"name":"gbusnameownerflags"}],"output":{"name":"bool"}}],[11,"cmp","","",207,{"inputs":[{"name":"self"},{"name":"gbusnameownerflags"}],"output":{"name":"ordering"}}],[11,"hash","","",207,null],[11,"fmt","","",207,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",207,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",207,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",207,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",207,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",207,null],[18,"ALLOW_REPLACEMENT","","",207,null],[18,"REPLACE","","",207,null],[11,"empty","","Returns an empty set of flags.",207,{"inputs":[],"output":{"name":"gbusnameownerflags"}}],[11,"all","","Returns the set containing all flags.",207,{"inputs":[],"output":{"name":"gbusnameownerflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",207,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",207,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gbusnameownerflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",207,{"inputs":[{"name":"c_uint"}],"output":{"name":"gbusnameownerflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",207,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",207,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",207,{"inputs":[{"name":"self"},{"name":"gbusnameownerflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",207,{"inputs":[{"name":"self"},{"name":"gbusnameownerflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",207,{"inputs":[{"name":"self"},{"name":"gbusnameownerflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",207,{"inputs":[{"name":"self"},{"name":"gbusnameownerflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",207,{"inputs":[{"name":"self"},{"name":"gbusnameownerflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",207,{"inputs":[{"name":"self"},{"name":"gbusnameownerflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",207,{"inputs":[{"name":"self"},{"name":"gbusnameownerflags"}],"output":{"name":"gbusnameownerflags"}}],[11,"bitor_assign","","Adds the set of flags.",207,{"inputs":[{"name":"self"},{"name":"gbusnameownerflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",207,{"inputs":[{"name":"self"},{"name":"gbusnameownerflags"}],"output":{"name":"gbusnameownerflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",207,{"inputs":[{"name":"self"},{"name":"gbusnameownerflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",207,{"inputs":[{"name":"self"},{"name":"gbusnameownerflags"}],"output":{"name":"gbusnameownerflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",207,{"inputs":[{"name":"self"},{"name":"gbusnameownerflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",207,{"inputs":[{"name":"self"},{"name":"gbusnameownerflags"}],"output":{"name":"gbusnameownerflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",207,{"inputs":[{"name":"self"},{"name":"gbusnameownerflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",207,{"inputs":[{"name":"self"}],"output":{"name":"gbusnameownerflags"}}],[11,"extend","","",207,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",207,{"inputs":[{"name":"t"}],"output":{"name":"gbusnameownerflags"}}],[11,"eq","","",208,{"inputs":[{"name":"self"},{"name":"gbusnamewatcherflags"}],"output":{"name":"bool"}}],[11,"ne","","",208,{"inputs":[{"name":"self"},{"name":"gbusnamewatcherflags"}],"output":{"name":"bool"}}],[11,"clone","","",208,{"inputs":[{"name":"self"}],"output":{"name":"gbusnamewatcherflags"}}],[11,"partial_cmp","","",208,{"inputs":[{"name":"self"},{"name":"gbusnamewatcherflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",208,{"inputs":[{"name":"self"},{"name":"gbusnamewatcherflags"}],"output":{"name":"bool"}}],[11,"le","","",208,{"inputs":[{"name":"self"},{"name":"gbusnamewatcherflags"}],"output":{"name":"bool"}}],[11,"gt","","",208,{"inputs":[{"name":"self"},{"name":"gbusnamewatcherflags"}],"output":{"name":"bool"}}],[11,"ge","","",208,{"inputs":[{"name":"self"},{"name":"gbusnamewatcherflags"}],"output":{"name":"bool"}}],[11,"cmp","","",208,{"inputs":[{"name":"self"},{"name":"gbusnamewatcherflags"}],"output":{"name":"ordering"}}],[11,"hash","","",208,null],[11,"fmt","","",208,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",208,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",208,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",208,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",208,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",208,null],[18,"AUTO_START","","",208,null],[11,"empty","","Returns an empty set of flags.",208,{"inputs":[],"output":{"name":"gbusnamewatcherflags"}}],[11,"all","","Returns the set containing all flags.",208,{"inputs":[],"output":{"name":"gbusnamewatcherflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",208,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",208,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gbusnamewatcherflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",208,{"inputs":[{"name":"c_uint"}],"output":{"name":"gbusnamewatcherflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",208,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",208,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",208,{"inputs":[{"name":"self"},{"name":"gbusnamewatcherflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",208,{"inputs":[{"name":"self"},{"name":"gbusnamewatcherflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",208,{"inputs":[{"name":"self"},{"name":"gbusnamewatcherflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",208,{"inputs":[{"name":"self"},{"name":"gbusnamewatcherflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",208,{"inputs":[{"name":"self"},{"name":"gbusnamewatcherflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",208,{"inputs":[{"name":"self"},{"name":"gbusnamewatcherflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",208,{"inputs":[{"name":"self"},{"name":"gbusnamewatcherflags"}],"output":{"name":"gbusnamewatcherflags"}}],[11,"bitor_assign","","Adds the set of flags.",208,{"inputs":[{"name":"self"},{"name":"gbusnamewatcherflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",208,{"inputs":[{"name":"self"},{"name":"gbusnamewatcherflags"}],"output":{"name":"gbusnamewatcherflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",208,{"inputs":[{"name":"self"},{"name":"gbusnamewatcherflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",208,{"inputs":[{"name":"self"},{"name":"gbusnamewatcherflags"}],"output":{"name":"gbusnamewatcherflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",208,{"inputs":[{"name":"self"},{"name":"gbusnamewatcherflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",208,{"inputs":[{"name":"self"},{"name":"gbusnamewatcherflags"}],"output":{"name":"gbusnamewatcherflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",208,{"inputs":[{"name":"self"},{"name":"gbusnamewatcherflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",208,{"inputs":[{"name":"self"}],"output":{"name":"gbusnamewatcherflags"}}],[11,"extend","","",208,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",208,{"inputs":[{"name":"t"}],"output":{"name":"gbusnamewatcherflags"}}],[11,"eq","","",209,{"inputs":[{"name":"self"},{"name":"gconverterflags"}],"output":{"name":"bool"}}],[11,"ne","","",209,{"inputs":[{"name":"self"},{"name":"gconverterflags"}],"output":{"name":"bool"}}],[11,"clone","","",209,{"inputs":[{"name":"self"}],"output":{"name":"gconverterflags"}}],[11,"partial_cmp","","",209,{"inputs":[{"name":"self"},{"name":"gconverterflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",209,{"inputs":[{"name":"self"},{"name":"gconverterflags"}],"output":{"name":"bool"}}],[11,"le","","",209,{"inputs":[{"name":"self"},{"name":"gconverterflags"}],"output":{"name":"bool"}}],[11,"gt","","",209,{"inputs":[{"name":"self"},{"name":"gconverterflags"}],"output":{"name":"bool"}}],[11,"ge","","",209,{"inputs":[{"name":"self"},{"name":"gconverterflags"}],"output":{"name":"bool"}}],[11,"cmp","","",209,{"inputs":[{"name":"self"},{"name":"gconverterflags"}],"output":{"name":"ordering"}}],[11,"hash","","",209,null],[11,"fmt","","",209,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",209,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",209,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",209,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",209,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",209,null],[18,"INPUT_AT_END","","",209,null],[18,"FLUSH","","",209,null],[11,"empty","","Returns an empty set of flags.",209,{"inputs":[],"output":{"name":"gconverterflags"}}],[11,"all","","Returns the set containing all flags.",209,{"inputs":[],"output":{"name":"gconverterflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",209,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",209,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gconverterflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",209,{"inputs":[{"name":"c_uint"}],"output":{"name":"gconverterflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",209,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",209,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",209,{"inputs":[{"name":"self"},{"name":"gconverterflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",209,{"inputs":[{"name":"self"},{"name":"gconverterflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",209,{"inputs":[{"name":"self"},{"name":"gconverterflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",209,{"inputs":[{"name":"self"},{"name":"gconverterflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",209,{"inputs":[{"name":"self"},{"name":"gconverterflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",209,{"inputs":[{"name":"self"},{"name":"gconverterflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",209,{"inputs":[{"name":"self"},{"name":"gconverterflags"}],"output":{"name":"gconverterflags"}}],[11,"bitor_assign","","Adds the set of flags.",209,{"inputs":[{"name":"self"},{"name":"gconverterflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",209,{"inputs":[{"name":"self"},{"name":"gconverterflags"}],"output":{"name":"gconverterflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",209,{"inputs":[{"name":"self"},{"name":"gconverterflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",209,{"inputs":[{"name":"self"},{"name":"gconverterflags"}],"output":{"name":"gconverterflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",209,{"inputs":[{"name":"self"},{"name":"gconverterflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",209,{"inputs":[{"name":"self"},{"name":"gconverterflags"}],"output":{"name":"gconverterflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",209,{"inputs":[{"name":"self"},{"name":"gconverterflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",209,{"inputs":[{"name":"self"}],"output":{"name":"gconverterflags"}}],[11,"extend","","",209,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",209,{"inputs":[{"name":"t"}],"output":{"name":"gconverterflags"}}],[11,"eq","","",210,{"inputs":[{"name":"self"},{"name":"gdbuscallflags"}],"output":{"name":"bool"}}],[11,"ne","","",210,{"inputs":[{"name":"self"},{"name":"gdbuscallflags"}],"output":{"name":"bool"}}],[11,"clone","","",210,{"inputs":[{"name":"self"}],"output":{"name":"gdbuscallflags"}}],[11,"partial_cmp","","",210,{"inputs":[{"name":"self"},{"name":"gdbuscallflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",210,{"inputs":[{"name":"self"},{"name":"gdbuscallflags"}],"output":{"name":"bool"}}],[11,"le","","",210,{"inputs":[{"name":"self"},{"name":"gdbuscallflags"}],"output":{"name":"bool"}}],[11,"gt","","",210,{"inputs":[{"name":"self"},{"name":"gdbuscallflags"}],"output":{"name":"bool"}}],[11,"ge","","",210,{"inputs":[{"name":"self"},{"name":"gdbuscallflags"}],"output":{"name":"bool"}}],[11,"cmp","","",210,{"inputs":[{"name":"self"},{"name":"gdbuscallflags"}],"output":{"name":"ordering"}}],[11,"hash","","",210,null],[11,"fmt","","",210,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",210,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",210,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",210,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",210,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",210,null],[18,"NO_AUTO_START","","",210,null],[18,"ALLOW_INTERACTIVE_AUTHORIZATION","","",210,null],[11,"empty","","Returns an empty set of flags.",210,{"inputs":[],"output":{"name":"gdbuscallflags"}}],[11,"all","","Returns the set containing all flags.",210,{"inputs":[],"output":{"name":"gdbuscallflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",210,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",210,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gdbuscallflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",210,{"inputs":[{"name":"c_uint"}],"output":{"name":"gdbuscallflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",210,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",210,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",210,{"inputs":[{"name":"self"},{"name":"gdbuscallflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",210,{"inputs":[{"name":"self"},{"name":"gdbuscallflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",210,{"inputs":[{"name":"self"},{"name":"gdbuscallflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",210,{"inputs":[{"name":"self"},{"name":"gdbuscallflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",210,{"inputs":[{"name":"self"},{"name":"gdbuscallflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",210,{"inputs":[{"name":"self"},{"name":"gdbuscallflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",210,{"inputs":[{"name":"self"},{"name":"gdbuscallflags"}],"output":{"name":"gdbuscallflags"}}],[11,"bitor_assign","","Adds the set of flags.",210,{"inputs":[{"name":"self"},{"name":"gdbuscallflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",210,{"inputs":[{"name":"self"},{"name":"gdbuscallflags"}],"output":{"name":"gdbuscallflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",210,{"inputs":[{"name":"self"},{"name":"gdbuscallflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",210,{"inputs":[{"name":"self"},{"name":"gdbuscallflags"}],"output":{"name":"gdbuscallflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",210,{"inputs":[{"name":"self"},{"name":"gdbuscallflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",210,{"inputs":[{"name":"self"},{"name":"gdbuscallflags"}],"output":{"name":"gdbuscallflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",210,{"inputs":[{"name":"self"},{"name":"gdbuscallflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",210,{"inputs":[{"name":"self"}],"output":{"name":"gdbuscallflags"}}],[11,"extend","","",210,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",210,{"inputs":[{"name":"t"}],"output":{"name":"gdbuscallflags"}}],[11,"eq","","",211,{"inputs":[{"name":"self"},{"name":"gdbuscapabilityflags"}],"output":{"name":"bool"}}],[11,"ne","","",211,{"inputs":[{"name":"self"},{"name":"gdbuscapabilityflags"}],"output":{"name":"bool"}}],[11,"clone","","",211,{"inputs":[{"name":"self"}],"output":{"name":"gdbuscapabilityflags"}}],[11,"partial_cmp","","",211,{"inputs":[{"name":"self"},{"name":"gdbuscapabilityflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",211,{"inputs":[{"name":"self"},{"name":"gdbuscapabilityflags"}],"output":{"name":"bool"}}],[11,"le","","",211,{"inputs":[{"name":"self"},{"name":"gdbuscapabilityflags"}],"output":{"name":"bool"}}],[11,"gt","","",211,{"inputs":[{"name":"self"},{"name":"gdbuscapabilityflags"}],"output":{"name":"bool"}}],[11,"ge","","",211,{"inputs":[{"name":"self"},{"name":"gdbuscapabilityflags"}],"output":{"name":"bool"}}],[11,"cmp","","",211,{"inputs":[{"name":"self"},{"name":"gdbuscapabilityflags"}],"output":{"name":"ordering"}}],[11,"hash","","",211,null],[11,"fmt","","",211,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",211,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",211,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",211,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",211,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",211,null],[18,"UNIX_FD_PASSING","","",211,null],[11,"empty","","Returns an empty set of flags.",211,{"inputs":[],"output":{"name":"gdbuscapabilityflags"}}],[11,"all","","Returns the set containing all flags.",211,{"inputs":[],"output":{"name":"gdbuscapabilityflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",211,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",211,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gdbuscapabilityflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",211,{"inputs":[{"name":"c_uint"}],"output":{"name":"gdbuscapabilityflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",211,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",211,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",211,{"inputs":[{"name":"self"},{"name":"gdbuscapabilityflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",211,{"inputs":[{"name":"self"},{"name":"gdbuscapabilityflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",211,{"inputs":[{"name":"self"},{"name":"gdbuscapabilityflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",211,{"inputs":[{"name":"self"},{"name":"gdbuscapabilityflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",211,{"inputs":[{"name":"self"},{"name":"gdbuscapabilityflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",211,{"inputs":[{"name":"self"},{"name":"gdbuscapabilityflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",211,{"inputs":[{"name":"self"},{"name":"gdbuscapabilityflags"}],"output":{"name":"gdbuscapabilityflags"}}],[11,"bitor_assign","","Adds the set of flags.",211,{"inputs":[{"name":"self"},{"name":"gdbuscapabilityflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",211,{"inputs":[{"name":"self"},{"name":"gdbuscapabilityflags"}],"output":{"name":"gdbuscapabilityflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",211,{"inputs":[{"name":"self"},{"name":"gdbuscapabilityflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",211,{"inputs":[{"name":"self"},{"name":"gdbuscapabilityflags"}],"output":{"name":"gdbuscapabilityflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",211,{"inputs":[{"name":"self"},{"name":"gdbuscapabilityflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",211,{"inputs":[{"name":"self"},{"name":"gdbuscapabilityflags"}],"output":{"name":"gdbuscapabilityflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",211,{"inputs":[{"name":"self"},{"name":"gdbuscapabilityflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",211,{"inputs":[{"name":"self"}],"output":{"name":"gdbuscapabilityflags"}}],[11,"extend","","",211,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",211,{"inputs":[{"name":"t"}],"output":{"name":"gdbuscapabilityflags"}}],[11,"eq","","",212,{"inputs":[{"name":"self"},{"name":"gdbusconnectionflags"}],"output":{"name":"bool"}}],[11,"ne","","",212,{"inputs":[{"name":"self"},{"name":"gdbusconnectionflags"}],"output":{"name":"bool"}}],[11,"clone","","",212,{"inputs":[{"name":"self"}],"output":{"name":"gdbusconnectionflags"}}],[11,"partial_cmp","","",212,{"inputs":[{"name":"self"},{"name":"gdbusconnectionflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",212,{"inputs":[{"name":"self"},{"name":"gdbusconnectionflags"}],"output":{"name":"bool"}}],[11,"le","","",212,{"inputs":[{"name":"self"},{"name":"gdbusconnectionflags"}],"output":{"name":"bool"}}],[11,"gt","","",212,{"inputs":[{"name":"self"},{"name":"gdbusconnectionflags"}],"output":{"name":"bool"}}],[11,"ge","","",212,{"inputs":[{"name":"self"},{"name":"gdbusconnectionflags"}],"output":{"name":"bool"}}],[11,"cmp","","",212,{"inputs":[{"name":"self"},{"name":"gdbusconnectionflags"}],"output":{"name":"ordering"}}],[11,"hash","","",212,null],[11,"fmt","","",212,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",212,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",212,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",212,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",212,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",212,null],[18,"AUTHENTICATION_CLIENT","","",212,null],[18,"AUTHENTICATION_SERVER","","",212,null],[18,"AUTHENTICATION_ALLOW_ANONYMOUS","","",212,null],[18,"MESSAGE_BUS_CONNECTION","","",212,null],[18,"DELAY_MESSAGE_PROCESSING","","",212,null],[11,"empty","","Returns an empty set of flags.",212,{"inputs":[],"output":{"name":"gdbusconnectionflags"}}],[11,"all","","Returns the set containing all flags.",212,{"inputs":[],"output":{"name":"gdbusconnectionflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",212,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",212,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gdbusconnectionflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",212,{"inputs":[{"name":"c_uint"}],"output":{"name":"gdbusconnectionflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",212,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",212,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",212,{"inputs":[{"name":"self"},{"name":"gdbusconnectionflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",212,{"inputs":[{"name":"self"},{"name":"gdbusconnectionflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",212,{"inputs":[{"name":"self"},{"name":"gdbusconnectionflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",212,{"inputs":[{"name":"self"},{"name":"gdbusconnectionflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",212,{"inputs":[{"name":"self"},{"name":"gdbusconnectionflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",212,{"inputs":[{"name":"self"},{"name":"gdbusconnectionflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",212,{"inputs":[{"name":"self"},{"name":"gdbusconnectionflags"}],"output":{"name":"gdbusconnectionflags"}}],[11,"bitor_assign","","Adds the set of flags.",212,{"inputs":[{"name":"self"},{"name":"gdbusconnectionflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",212,{"inputs":[{"name":"self"},{"name":"gdbusconnectionflags"}],"output":{"name":"gdbusconnectionflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",212,{"inputs":[{"name":"self"},{"name":"gdbusconnectionflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",212,{"inputs":[{"name":"self"},{"name":"gdbusconnectionflags"}],"output":{"name":"gdbusconnectionflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",212,{"inputs":[{"name":"self"},{"name":"gdbusconnectionflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",212,{"inputs":[{"name":"self"},{"name":"gdbusconnectionflags"}],"output":{"name":"gdbusconnectionflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",212,{"inputs":[{"name":"self"},{"name":"gdbusconnectionflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",212,{"inputs":[{"name":"self"}],"output":{"name":"gdbusconnectionflags"}}],[11,"extend","","",212,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",212,{"inputs":[{"name":"t"}],"output":{"name":"gdbusconnectionflags"}}],[11,"eq","","",213,{"inputs":[{"name":"self"},{"name":"gdbusinterfaceskeletonflags"}],"output":{"name":"bool"}}],[11,"ne","","",213,{"inputs":[{"name":"self"},{"name":"gdbusinterfaceskeletonflags"}],"output":{"name":"bool"}}],[11,"clone","","",213,{"inputs":[{"name":"self"}],"output":{"name":"gdbusinterfaceskeletonflags"}}],[11,"partial_cmp","","",213,{"inputs":[{"name":"self"},{"name":"gdbusinterfaceskeletonflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",213,{"inputs":[{"name":"self"},{"name":"gdbusinterfaceskeletonflags"}],"output":{"name":"bool"}}],[11,"le","","",213,{"inputs":[{"name":"self"},{"name":"gdbusinterfaceskeletonflags"}],"output":{"name":"bool"}}],[11,"gt","","",213,{"inputs":[{"name":"self"},{"name":"gdbusinterfaceskeletonflags"}],"output":{"name":"bool"}}],[11,"ge","","",213,{"inputs":[{"name":"self"},{"name":"gdbusinterfaceskeletonflags"}],"output":{"name":"bool"}}],[11,"cmp","","",213,{"inputs":[{"name":"self"},{"name":"gdbusinterfaceskeletonflags"}],"output":{"name":"ordering"}}],[11,"hash","","",213,null],[11,"fmt","","",213,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",213,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",213,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",213,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",213,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",213,null],[18,"HANDLE_METHOD_INVOCATIONS_IN_THREAD","","",213,null],[11,"empty","","Returns an empty set of flags.",213,{"inputs":[],"output":{"name":"gdbusinterfaceskeletonflags"}}],[11,"all","","Returns the set containing all flags.",213,{"inputs":[],"output":{"name":"gdbusinterfaceskeletonflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",213,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",213,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gdbusinterfaceskeletonflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",213,{"inputs":[{"name":"c_uint"}],"output":{"name":"gdbusinterfaceskeletonflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",213,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",213,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",213,{"inputs":[{"name":"self"},{"name":"gdbusinterfaceskeletonflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",213,{"inputs":[{"name":"self"},{"name":"gdbusinterfaceskeletonflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",213,{"inputs":[{"name":"self"},{"name":"gdbusinterfaceskeletonflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",213,{"inputs":[{"name":"self"},{"name":"gdbusinterfaceskeletonflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",213,{"inputs":[{"name":"self"},{"name":"gdbusinterfaceskeletonflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",213,{"inputs":[{"name":"self"},{"name":"gdbusinterfaceskeletonflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",213,{"inputs":[{"name":"self"},{"name":"gdbusinterfaceskeletonflags"}],"output":{"name":"gdbusinterfaceskeletonflags"}}],[11,"bitor_assign","","Adds the set of flags.",213,{"inputs":[{"name":"self"},{"name":"gdbusinterfaceskeletonflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",213,{"inputs":[{"name":"self"},{"name":"gdbusinterfaceskeletonflags"}],"output":{"name":"gdbusinterfaceskeletonflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",213,{"inputs":[{"name":"self"},{"name":"gdbusinterfaceskeletonflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",213,{"inputs":[{"name":"self"},{"name":"gdbusinterfaceskeletonflags"}],"output":{"name":"gdbusinterfaceskeletonflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",213,{"inputs":[{"name":"self"},{"name":"gdbusinterfaceskeletonflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",213,{"inputs":[{"name":"self"},{"name":"gdbusinterfaceskeletonflags"}],"output":{"name":"gdbusinterfaceskeletonflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",213,{"inputs":[{"name":"self"},{"name":"gdbusinterfaceskeletonflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",213,{"inputs":[{"name":"self"}],"output":{"name":"gdbusinterfaceskeletonflags"}}],[11,"extend","","",213,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",213,{"inputs":[{"name":"t"}],"output":{"name":"gdbusinterfaceskeletonflags"}}],[11,"eq","","",214,{"inputs":[{"name":"self"},{"name":"gdbusmessageflags"}],"output":{"name":"bool"}}],[11,"ne","","",214,{"inputs":[{"name":"self"},{"name":"gdbusmessageflags"}],"output":{"name":"bool"}}],[11,"clone","","",214,{"inputs":[{"name":"self"}],"output":{"name":"gdbusmessageflags"}}],[11,"partial_cmp","","",214,{"inputs":[{"name":"self"},{"name":"gdbusmessageflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",214,{"inputs":[{"name":"self"},{"name":"gdbusmessageflags"}],"output":{"name":"bool"}}],[11,"le","","",214,{"inputs":[{"name":"self"},{"name":"gdbusmessageflags"}],"output":{"name":"bool"}}],[11,"gt","","",214,{"inputs":[{"name":"self"},{"name":"gdbusmessageflags"}],"output":{"name":"bool"}}],[11,"ge","","",214,{"inputs":[{"name":"self"},{"name":"gdbusmessageflags"}],"output":{"name":"bool"}}],[11,"cmp","","",214,{"inputs":[{"name":"self"},{"name":"gdbusmessageflags"}],"output":{"name":"ordering"}}],[11,"hash","","",214,null],[11,"fmt","","",214,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",214,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",214,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",214,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",214,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",214,null],[18,"NO_REPLY_EXPECTED","","",214,null],[18,"NO_AUTO_START","","",214,null],[18,"ALLOW_INTERACTIVE_AUTHORIZATION","","",214,null],[11,"empty","","Returns an empty set of flags.",214,{"inputs":[],"output":{"name":"gdbusmessageflags"}}],[11,"all","","Returns the set containing all flags.",214,{"inputs":[],"output":{"name":"gdbusmessageflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",214,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",214,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gdbusmessageflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",214,{"inputs":[{"name":"c_uint"}],"output":{"name":"gdbusmessageflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",214,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",214,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",214,{"inputs":[{"name":"self"},{"name":"gdbusmessageflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",214,{"inputs":[{"name":"self"},{"name":"gdbusmessageflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",214,{"inputs":[{"name":"self"},{"name":"gdbusmessageflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",214,{"inputs":[{"name":"self"},{"name":"gdbusmessageflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",214,{"inputs":[{"name":"self"},{"name":"gdbusmessageflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",214,{"inputs":[{"name":"self"},{"name":"gdbusmessageflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",214,{"inputs":[{"name":"self"},{"name":"gdbusmessageflags"}],"output":{"name":"gdbusmessageflags"}}],[11,"bitor_assign","","Adds the set of flags.",214,{"inputs":[{"name":"self"},{"name":"gdbusmessageflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",214,{"inputs":[{"name":"self"},{"name":"gdbusmessageflags"}],"output":{"name":"gdbusmessageflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",214,{"inputs":[{"name":"self"},{"name":"gdbusmessageflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",214,{"inputs":[{"name":"self"},{"name":"gdbusmessageflags"}],"output":{"name":"gdbusmessageflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",214,{"inputs":[{"name":"self"},{"name":"gdbusmessageflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",214,{"inputs":[{"name":"self"},{"name":"gdbusmessageflags"}],"output":{"name":"gdbusmessageflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",214,{"inputs":[{"name":"self"},{"name":"gdbusmessageflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",214,{"inputs":[{"name":"self"}],"output":{"name":"gdbusmessageflags"}}],[11,"extend","","",214,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",214,{"inputs":[{"name":"t"}],"output":{"name":"gdbusmessageflags"}}],[11,"eq","","",215,{"inputs":[{"name":"self"},{"name":"gdbusobjectmanagerclientflags"}],"output":{"name":"bool"}}],[11,"ne","","",215,{"inputs":[{"name":"self"},{"name":"gdbusobjectmanagerclientflags"}],"output":{"name":"bool"}}],[11,"clone","","",215,{"inputs":[{"name":"self"}],"output":{"name":"gdbusobjectmanagerclientflags"}}],[11,"partial_cmp","","",215,{"inputs":[{"name":"self"},{"name":"gdbusobjectmanagerclientflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",215,{"inputs":[{"name":"self"},{"name":"gdbusobjectmanagerclientflags"}],"output":{"name":"bool"}}],[11,"le","","",215,{"inputs":[{"name":"self"},{"name":"gdbusobjectmanagerclientflags"}],"output":{"name":"bool"}}],[11,"gt","","",215,{"inputs":[{"name":"self"},{"name":"gdbusobjectmanagerclientflags"}],"output":{"name":"bool"}}],[11,"ge","","",215,{"inputs":[{"name":"self"},{"name":"gdbusobjectmanagerclientflags"}],"output":{"name":"bool"}}],[11,"cmp","","",215,{"inputs":[{"name":"self"},{"name":"gdbusobjectmanagerclientflags"}],"output":{"name":"ordering"}}],[11,"hash","","",215,null],[11,"fmt","","",215,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",215,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",215,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",215,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",215,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",215,null],[18,"DO_NOT_AUTO_START","","",215,null],[11,"empty","","Returns an empty set of flags.",215,{"inputs":[],"output":{"name":"gdbusobjectmanagerclientflags"}}],[11,"all","","Returns the set containing all flags.",215,{"inputs":[],"output":{"name":"gdbusobjectmanagerclientflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",215,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",215,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gdbusobjectmanagerclientflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",215,{"inputs":[{"name":"c_uint"}],"output":{"name":"gdbusobjectmanagerclientflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",215,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",215,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",215,{"inputs":[{"name":"self"},{"name":"gdbusobjectmanagerclientflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",215,{"inputs":[{"name":"self"},{"name":"gdbusobjectmanagerclientflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",215,{"inputs":[{"name":"self"},{"name":"gdbusobjectmanagerclientflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",215,{"inputs":[{"name":"self"},{"name":"gdbusobjectmanagerclientflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",215,{"inputs":[{"name":"self"},{"name":"gdbusobjectmanagerclientflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",215,{"inputs":[{"name":"self"},{"name":"gdbusobjectmanagerclientflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",215,{"inputs":[{"name":"self"},{"name":"gdbusobjectmanagerclientflags"}],"output":{"name":"gdbusobjectmanagerclientflags"}}],[11,"bitor_assign","","Adds the set of flags.",215,{"inputs":[{"name":"self"},{"name":"gdbusobjectmanagerclientflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",215,{"inputs":[{"name":"self"},{"name":"gdbusobjectmanagerclientflags"}],"output":{"name":"gdbusobjectmanagerclientflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",215,{"inputs":[{"name":"self"},{"name":"gdbusobjectmanagerclientflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",215,{"inputs":[{"name":"self"},{"name":"gdbusobjectmanagerclientflags"}],"output":{"name":"gdbusobjectmanagerclientflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",215,{"inputs":[{"name":"self"},{"name":"gdbusobjectmanagerclientflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",215,{"inputs":[{"name":"self"},{"name":"gdbusobjectmanagerclientflags"}],"output":{"name":"gdbusobjectmanagerclientflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",215,{"inputs":[{"name":"self"},{"name":"gdbusobjectmanagerclientflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",215,{"inputs":[{"name":"self"}],"output":{"name":"gdbusobjectmanagerclientflags"}}],[11,"extend","","",215,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",215,{"inputs":[{"name":"t"}],"output":{"name":"gdbusobjectmanagerclientflags"}}],[11,"eq","","",216,{"inputs":[{"name":"self"},{"name":"gdbuspropertyinfoflags"}],"output":{"name":"bool"}}],[11,"ne","","",216,{"inputs":[{"name":"self"},{"name":"gdbuspropertyinfoflags"}],"output":{"name":"bool"}}],[11,"clone","","",216,{"inputs":[{"name":"self"}],"output":{"name":"gdbuspropertyinfoflags"}}],[11,"partial_cmp","","",216,{"inputs":[{"name":"self"},{"name":"gdbuspropertyinfoflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",216,{"inputs":[{"name":"self"},{"name":"gdbuspropertyinfoflags"}],"output":{"name":"bool"}}],[11,"le","","",216,{"inputs":[{"name":"self"},{"name":"gdbuspropertyinfoflags"}],"output":{"name":"bool"}}],[11,"gt","","",216,{"inputs":[{"name":"self"},{"name":"gdbuspropertyinfoflags"}],"output":{"name":"bool"}}],[11,"ge","","",216,{"inputs":[{"name":"self"},{"name":"gdbuspropertyinfoflags"}],"output":{"name":"bool"}}],[11,"cmp","","",216,{"inputs":[{"name":"self"},{"name":"gdbuspropertyinfoflags"}],"output":{"name":"ordering"}}],[11,"hash","","",216,null],[11,"fmt","","",216,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",216,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",216,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",216,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",216,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",216,null],[18,"READABLE","","",216,null],[18,"WRITABLE","","",216,null],[11,"empty","","Returns an empty set of flags.",216,{"inputs":[],"output":{"name":"gdbuspropertyinfoflags"}}],[11,"all","","Returns the set containing all flags.",216,{"inputs":[],"output":{"name":"gdbuspropertyinfoflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",216,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",216,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gdbuspropertyinfoflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",216,{"inputs":[{"name":"c_uint"}],"output":{"name":"gdbuspropertyinfoflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",216,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",216,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",216,{"inputs":[{"name":"self"},{"name":"gdbuspropertyinfoflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",216,{"inputs":[{"name":"self"},{"name":"gdbuspropertyinfoflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",216,{"inputs":[{"name":"self"},{"name":"gdbuspropertyinfoflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",216,{"inputs":[{"name":"self"},{"name":"gdbuspropertyinfoflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",216,{"inputs":[{"name":"self"},{"name":"gdbuspropertyinfoflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",216,{"inputs":[{"name":"self"},{"name":"gdbuspropertyinfoflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",216,{"inputs":[{"name":"self"},{"name":"gdbuspropertyinfoflags"}],"output":{"name":"gdbuspropertyinfoflags"}}],[11,"bitor_assign","","Adds the set of flags.",216,{"inputs":[{"name":"self"},{"name":"gdbuspropertyinfoflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",216,{"inputs":[{"name":"self"},{"name":"gdbuspropertyinfoflags"}],"output":{"name":"gdbuspropertyinfoflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",216,{"inputs":[{"name":"self"},{"name":"gdbuspropertyinfoflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",216,{"inputs":[{"name":"self"},{"name":"gdbuspropertyinfoflags"}],"output":{"name":"gdbuspropertyinfoflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",216,{"inputs":[{"name":"self"},{"name":"gdbuspropertyinfoflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",216,{"inputs":[{"name":"self"},{"name":"gdbuspropertyinfoflags"}],"output":{"name":"gdbuspropertyinfoflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",216,{"inputs":[{"name":"self"},{"name":"gdbuspropertyinfoflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",216,{"inputs":[{"name":"self"}],"output":{"name":"gdbuspropertyinfoflags"}}],[11,"extend","","",216,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",216,{"inputs":[{"name":"t"}],"output":{"name":"gdbuspropertyinfoflags"}}],[11,"eq","","",217,{"inputs":[{"name":"self"},{"name":"gdbusproxyflags"}],"output":{"name":"bool"}}],[11,"ne","","",217,{"inputs":[{"name":"self"},{"name":"gdbusproxyflags"}],"output":{"name":"bool"}}],[11,"clone","","",217,{"inputs":[{"name":"self"}],"output":{"name":"gdbusproxyflags"}}],[11,"partial_cmp","","",217,{"inputs":[{"name":"self"},{"name":"gdbusproxyflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",217,{"inputs":[{"name":"self"},{"name":"gdbusproxyflags"}],"output":{"name":"bool"}}],[11,"le","","",217,{"inputs":[{"name":"self"},{"name":"gdbusproxyflags"}],"output":{"name":"bool"}}],[11,"gt","","",217,{"inputs":[{"name":"self"},{"name":"gdbusproxyflags"}],"output":{"name":"bool"}}],[11,"ge","","",217,{"inputs":[{"name":"self"},{"name":"gdbusproxyflags"}],"output":{"name":"bool"}}],[11,"cmp","","",217,{"inputs":[{"name":"self"},{"name":"gdbusproxyflags"}],"output":{"name":"ordering"}}],[11,"hash","","",217,null],[11,"fmt","","",217,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",217,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",217,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",217,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",217,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",217,null],[18,"DO_NOT_LOAD_PROPERTIES","","",217,null],[18,"DO_NOT_CONNECT_SIGNALS","","",217,null],[18,"DO_NOT_AUTO_START","","",217,null],[18,"GET_INVALIDATED_PROPERTIES","","",217,null],[18,"DO_NOT_AUTO_START_AT_CONSTRUCTION","","",217,null],[11,"empty","","Returns an empty set of flags.",217,{"inputs":[],"output":{"name":"gdbusproxyflags"}}],[11,"all","","Returns the set containing all flags.",217,{"inputs":[],"output":{"name":"gdbusproxyflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",217,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",217,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gdbusproxyflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",217,{"inputs":[{"name":"c_uint"}],"output":{"name":"gdbusproxyflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",217,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",217,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",217,{"inputs":[{"name":"self"},{"name":"gdbusproxyflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",217,{"inputs":[{"name":"self"},{"name":"gdbusproxyflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",217,{"inputs":[{"name":"self"},{"name":"gdbusproxyflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",217,{"inputs":[{"name":"self"},{"name":"gdbusproxyflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",217,{"inputs":[{"name":"self"},{"name":"gdbusproxyflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",217,{"inputs":[{"name":"self"},{"name":"gdbusproxyflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",217,{"inputs":[{"name":"self"},{"name":"gdbusproxyflags"}],"output":{"name":"gdbusproxyflags"}}],[11,"bitor_assign","","Adds the set of flags.",217,{"inputs":[{"name":"self"},{"name":"gdbusproxyflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",217,{"inputs":[{"name":"self"},{"name":"gdbusproxyflags"}],"output":{"name":"gdbusproxyflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",217,{"inputs":[{"name":"self"},{"name":"gdbusproxyflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",217,{"inputs":[{"name":"self"},{"name":"gdbusproxyflags"}],"output":{"name":"gdbusproxyflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",217,{"inputs":[{"name":"self"},{"name":"gdbusproxyflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",217,{"inputs":[{"name":"self"},{"name":"gdbusproxyflags"}],"output":{"name":"gdbusproxyflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",217,{"inputs":[{"name":"self"},{"name":"gdbusproxyflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",217,{"inputs":[{"name":"self"}],"output":{"name":"gdbusproxyflags"}}],[11,"extend","","",217,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",217,{"inputs":[{"name":"t"}],"output":{"name":"gdbusproxyflags"}}],[11,"eq","","",218,{"inputs":[{"name":"self"},{"name":"gdbussendmessageflags"}],"output":{"name":"bool"}}],[11,"ne","","",218,{"inputs":[{"name":"self"},{"name":"gdbussendmessageflags"}],"output":{"name":"bool"}}],[11,"clone","","",218,{"inputs":[{"name":"self"}],"output":{"name":"gdbussendmessageflags"}}],[11,"partial_cmp","","",218,{"inputs":[{"name":"self"},{"name":"gdbussendmessageflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",218,{"inputs":[{"name":"self"},{"name":"gdbussendmessageflags"}],"output":{"name":"bool"}}],[11,"le","","",218,{"inputs":[{"name":"self"},{"name":"gdbussendmessageflags"}],"output":{"name":"bool"}}],[11,"gt","","",218,{"inputs":[{"name":"self"},{"name":"gdbussendmessageflags"}],"output":{"name":"bool"}}],[11,"ge","","",218,{"inputs":[{"name":"self"},{"name":"gdbussendmessageflags"}],"output":{"name":"bool"}}],[11,"cmp","","",218,{"inputs":[{"name":"self"},{"name":"gdbussendmessageflags"}],"output":{"name":"ordering"}}],[11,"hash","","",218,null],[11,"fmt","","",218,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",218,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",218,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",218,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",218,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",218,null],[18,"PRESERVE_SERIAL","","",218,null],[11,"empty","","Returns an empty set of flags.",218,{"inputs":[],"output":{"name":"gdbussendmessageflags"}}],[11,"all","","Returns the set containing all flags.",218,{"inputs":[],"output":{"name":"gdbussendmessageflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",218,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",218,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gdbussendmessageflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",218,{"inputs":[{"name":"c_uint"}],"output":{"name":"gdbussendmessageflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",218,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",218,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",218,{"inputs":[{"name":"self"},{"name":"gdbussendmessageflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",218,{"inputs":[{"name":"self"},{"name":"gdbussendmessageflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",218,{"inputs":[{"name":"self"},{"name":"gdbussendmessageflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",218,{"inputs":[{"name":"self"},{"name":"gdbussendmessageflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",218,{"inputs":[{"name":"self"},{"name":"gdbussendmessageflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",218,{"inputs":[{"name":"self"},{"name":"gdbussendmessageflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",218,{"inputs":[{"name":"self"},{"name":"gdbussendmessageflags"}],"output":{"name":"gdbussendmessageflags"}}],[11,"bitor_assign","","Adds the set of flags.",218,{"inputs":[{"name":"self"},{"name":"gdbussendmessageflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",218,{"inputs":[{"name":"self"},{"name":"gdbussendmessageflags"}],"output":{"name":"gdbussendmessageflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",218,{"inputs":[{"name":"self"},{"name":"gdbussendmessageflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",218,{"inputs":[{"name":"self"},{"name":"gdbussendmessageflags"}],"output":{"name":"gdbussendmessageflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",218,{"inputs":[{"name":"self"},{"name":"gdbussendmessageflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",218,{"inputs":[{"name":"self"},{"name":"gdbussendmessageflags"}],"output":{"name":"gdbussendmessageflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",218,{"inputs":[{"name":"self"},{"name":"gdbussendmessageflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",218,{"inputs":[{"name":"self"}],"output":{"name":"gdbussendmessageflags"}}],[11,"extend","","",218,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",218,{"inputs":[{"name":"t"}],"output":{"name":"gdbussendmessageflags"}}],[11,"eq","","",219,{"inputs":[{"name":"self"},{"name":"gdbusserverflags"}],"output":{"name":"bool"}}],[11,"ne","","",219,{"inputs":[{"name":"self"},{"name":"gdbusserverflags"}],"output":{"name":"bool"}}],[11,"clone","","",219,{"inputs":[{"name":"self"}],"output":{"name":"gdbusserverflags"}}],[11,"partial_cmp","","",219,{"inputs":[{"name":"self"},{"name":"gdbusserverflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",219,{"inputs":[{"name":"self"},{"name":"gdbusserverflags"}],"output":{"name":"bool"}}],[11,"le","","",219,{"inputs":[{"name":"self"},{"name":"gdbusserverflags"}],"output":{"name":"bool"}}],[11,"gt","","",219,{"inputs":[{"name":"self"},{"name":"gdbusserverflags"}],"output":{"name":"bool"}}],[11,"ge","","",219,{"inputs":[{"name":"self"},{"name":"gdbusserverflags"}],"output":{"name":"bool"}}],[11,"cmp","","",219,{"inputs":[{"name":"self"},{"name":"gdbusserverflags"}],"output":{"name":"ordering"}}],[11,"hash","","",219,null],[11,"fmt","","",219,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",219,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",219,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",219,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",219,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",219,null],[18,"RUN_IN_THREAD","","",219,null],[18,"AUTHENTICATION_ALLOW_ANONYMOUS","","",219,null],[11,"empty","","Returns an empty set of flags.",219,{"inputs":[],"output":{"name":"gdbusserverflags"}}],[11,"all","","Returns the set containing all flags.",219,{"inputs":[],"output":{"name":"gdbusserverflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",219,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",219,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gdbusserverflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",219,{"inputs":[{"name":"c_uint"}],"output":{"name":"gdbusserverflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",219,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",219,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",219,{"inputs":[{"name":"self"},{"name":"gdbusserverflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",219,{"inputs":[{"name":"self"},{"name":"gdbusserverflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",219,{"inputs":[{"name":"self"},{"name":"gdbusserverflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",219,{"inputs":[{"name":"self"},{"name":"gdbusserverflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",219,{"inputs":[{"name":"self"},{"name":"gdbusserverflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",219,{"inputs":[{"name":"self"},{"name":"gdbusserverflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",219,{"inputs":[{"name":"self"},{"name":"gdbusserverflags"}],"output":{"name":"gdbusserverflags"}}],[11,"bitor_assign","","Adds the set of flags.",219,{"inputs":[{"name":"self"},{"name":"gdbusserverflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",219,{"inputs":[{"name":"self"},{"name":"gdbusserverflags"}],"output":{"name":"gdbusserverflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",219,{"inputs":[{"name":"self"},{"name":"gdbusserverflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",219,{"inputs":[{"name":"self"},{"name":"gdbusserverflags"}],"output":{"name":"gdbusserverflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",219,{"inputs":[{"name":"self"},{"name":"gdbusserverflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",219,{"inputs":[{"name":"self"},{"name":"gdbusserverflags"}],"output":{"name":"gdbusserverflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",219,{"inputs":[{"name":"self"},{"name":"gdbusserverflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",219,{"inputs":[{"name":"self"}],"output":{"name":"gdbusserverflags"}}],[11,"extend","","",219,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",219,{"inputs":[{"name":"t"}],"output":{"name":"gdbusserverflags"}}],[11,"eq","","",220,{"inputs":[{"name":"self"},{"name":"gdbussignalflags"}],"output":{"name":"bool"}}],[11,"ne","","",220,{"inputs":[{"name":"self"},{"name":"gdbussignalflags"}],"output":{"name":"bool"}}],[11,"clone","","",220,{"inputs":[{"name":"self"}],"output":{"name":"gdbussignalflags"}}],[11,"partial_cmp","","",220,{"inputs":[{"name":"self"},{"name":"gdbussignalflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",220,{"inputs":[{"name":"self"},{"name":"gdbussignalflags"}],"output":{"name":"bool"}}],[11,"le","","",220,{"inputs":[{"name":"self"},{"name":"gdbussignalflags"}],"output":{"name":"bool"}}],[11,"gt","","",220,{"inputs":[{"name":"self"},{"name":"gdbussignalflags"}],"output":{"name":"bool"}}],[11,"ge","","",220,{"inputs":[{"name":"self"},{"name":"gdbussignalflags"}],"output":{"name":"bool"}}],[11,"cmp","","",220,{"inputs":[{"name":"self"},{"name":"gdbussignalflags"}],"output":{"name":"ordering"}}],[11,"hash","","",220,null],[11,"fmt","","",220,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",220,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",220,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",220,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",220,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",220,null],[18,"NO_MATCH_RULE","","",220,null],[18,"MATCH_ARG0_NAMESPACE","","",220,null],[18,"MATCH_ARG0_PATH","","",220,null],[11,"empty","","Returns an empty set of flags.",220,{"inputs":[],"output":{"name":"gdbussignalflags"}}],[11,"all","","Returns the set containing all flags.",220,{"inputs":[],"output":{"name":"gdbussignalflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",220,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",220,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gdbussignalflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",220,{"inputs":[{"name":"c_uint"}],"output":{"name":"gdbussignalflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",220,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",220,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",220,{"inputs":[{"name":"self"},{"name":"gdbussignalflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",220,{"inputs":[{"name":"self"},{"name":"gdbussignalflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",220,{"inputs":[{"name":"self"},{"name":"gdbussignalflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",220,{"inputs":[{"name":"self"},{"name":"gdbussignalflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",220,{"inputs":[{"name":"self"},{"name":"gdbussignalflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",220,{"inputs":[{"name":"self"},{"name":"gdbussignalflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",220,{"inputs":[{"name":"self"},{"name":"gdbussignalflags"}],"output":{"name":"gdbussignalflags"}}],[11,"bitor_assign","","Adds the set of flags.",220,{"inputs":[{"name":"self"},{"name":"gdbussignalflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",220,{"inputs":[{"name":"self"},{"name":"gdbussignalflags"}],"output":{"name":"gdbussignalflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",220,{"inputs":[{"name":"self"},{"name":"gdbussignalflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",220,{"inputs":[{"name":"self"},{"name":"gdbussignalflags"}],"output":{"name":"gdbussignalflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",220,{"inputs":[{"name":"self"},{"name":"gdbussignalflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",220,{"inputs":[{"name":"self"},{"name":"gdbussignalflags"}],"output":{"name":"gdbussignalflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",220,{"inputs":[{"name":"self"},{"name":"gdbussignalflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",220,{"inputs":[{"name":"self"}],"output":{"name":"gdbussignalflags"}}],[11,"extend","","",220,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",220,{"inputs":[{"name":"t"}],"output":{"name":"gdbussignalflags"}}],[11,"eq","","",221,{"inputs":[{"name":"self"},{"name":"gdbussubtreeflags"}],"output":{"name":"bool"}}],[11,"ne","","",221,{"inputs":[{"name":"self"},{"name":"gdbussubtreeflags"}],"output":{"name":"bool"}}],[11,"clone","","",221,{"inputs":[{"name":"self"}],"output":{"name":"gdbussubtreeflags"}}],[11,"partial_cmp","","",221,{"inputs":[{"name":"self"},{"name":"gdbussubtreeflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",221,{"inputs":[{"name":"self"},{"name":"gdbussubtreeflags"}],"output":{"name":"bool"}}],[11,"le","","",221,{"inputs":[{"name":"self"},{"name":"gdbussubtreeflags"}],"output":{"name":"bool"}}],[11,"gt","","",221,{"inputs":[{"name":"self"},{"name":"gdbussubtreeflags"}],"output":{"name":"bool"}}],[11,"ge","","",221,{"inputs":[{"name":"self"},{"name":"gdbussubtreeflags"}],"output":{"name":"bool"}}],[11,"cmp","","",221,{"inputs":[{"name":"self"},{"name":"gdbussubtreeflags"}],"output":{"name":"ordering"}}],[11,"hash","","",221,null],[11,"fmt","","",221,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",221,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",221,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",221,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",221,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",221,null],[18,"DISPATCH_TO_UNENUMERATED_NODES","","",221,null],[11,"empty","","Returns an empty set of flags.",221,{"inputs":[],"output":{"name":"gdbussubtreeflags"}}],[11,"all","","Returns the set containing all flags.",221,{"inputs":[],"output":{"name":"gdbussubtreeflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",221,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",221,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gdbussubtreeflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",221,{"inputs":[{"name":"c_uint"}],"output":{"name":"gdbussubtreeflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",221,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",221,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",221,{"inputs":[{"name":"self"},{"name":"gdbussubtreeflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",221,{"inputs":[{"name":"self"},{"name":"gdbussubtreeflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",221,{"inputs":[{"name":"self"},{"name":"gdbussubtreeflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",221,{"inputs":[{"name":"self"},{"name":"gdbussubtreeflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",221,{"inputs":[{"name":"self"},{"name":"gdbussubtreeflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",221,{"inputs":[{"name":"self"},{"name":"gdbussubtreeflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",221,{"inputs":[{"name":"self"},{"name":"gdbussubtreeflags"}],"output":{"name":"gdbussubtreeflags"}}],[11,"bitor_assign","","Adds the set of flags.",221,{"inputs":[{"name":"self"},{"name":"gdbussubtreeflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",221,{"inputs":[{"name":"self"},{"name":"gdbussubtreeflags"}],"output":{"name":"gdbussubtreeflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",221,{"inputs":[{"name":"self"},{"name":"gdbussubtreeflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",221,{"inputs":[{"name":"self"},{"name":"gdbussubtreeflags"}],"output":{"name":"gdbussubtreeflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",221,{"inputs":[{"name":"self"},{"name":"gdbussubtreeflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",221,{"inputs":[{"name":"self"},{"name":"gdbussubtreeflags"}],"output":{"name":"gdbussubtreeflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",221,{"inputs":[{"name":"self"},{"name":"gdbussubtreeflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",221,{"inputs":[{"name":"self"}],"output":{"name":"gdbussubtreeflags"}}],[11,"extend","","",221,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",221,{"inputs":[{"name":"t"}],"output":{"name":"gdbussubtreeflags"}}],[11,"eq","","",222,{"inputs":[{"name":"self"},{"name":"gdrivestartflags"}],"output":{"name":"bool"}}],[11,"ne","","",222,{"inputs":[{"name":"self"},{"name":"gdrivestartflags"}],"output":{"name":"bool"}}],[11,"clone","","",222,{"inputs":[{"name":"self"}],"output":{"name":"gdrivestartflags"}}],[11,"partial_cmp","","",222,{"inputs":[{"name":"self"},{"name":"gdrivestartflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",222,{"inputs":[{"name":"self"},{"name":"gdrivestartflags"}],"output":{"name":"bool"}}],[11,"le","","",222,{"inputs":[{"name":"self"},{"name":"gdrivestartflags"}],"output":{"name":"bool"}}],[11,"gt","","",222,{"inputs":[{"name":"self"},{"name":"gdrivestartflags"}],"output":{"name":"bool"}}],[11,"ge","","",222,{"inputs":[{"name":"self"},{"name":"gdrivestartflags"}],"output":{"name":"bool"}}],[11,"cmp","","",222,{"inputs":[{"name":"self"},{"name":"gdrivestartflags"}],"output":{"name":"ordering"}}],[11,"hash","","",222,null],[11,"fmt","","",222,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",222,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",222,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",222,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",222,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",222,null],[11,"empty","","Returns an empty set of flags.",222,{"inputs":[],"output":{"name":"gdrivestartflags"}}],[11,"all","","Returns the set containing all flags.",222,{"inputs":[],"output":{"name":"gdrivestartflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",222,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",222,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gdrivestartflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",222,{"inputs":[{"name":"c_uint"}],"output":{"name":"gdrivestartflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",222,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",222,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",222,{"inputs":[{"name":"self"},{"name":"gdrivestartflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",222,{"inputs":[{"name":"self"},{"name":"gdrivestartflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",222,{"inputs":[{"name":"self"},{"name":"gdrivestartflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",222,{"inputs":[{"name":"self"},{"name":"gdrivestartflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",222,{"inputs":[{"name":"self"},{"name":"gdrivestartflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",222,{"inputs":[{"name":"self"},{"name":"gdrivestartflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",222,{"inputs":[{"name":"self"},{"name":"gdrivestartflags"}],"output":{"name":"gdrivestartflags"}}],[11,"bitor_assign","","Adds the set of flags.",222,{"inputs":[{"name":"self"},{"name":"gdrivestartflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",222,{"inputs":[{"name":"self"},{"name":"gdrivestartflags"}],"output":{"name":"gdrivestartflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",222,{"inputs":[{"name":"self"},{"name":"gdrivestartflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",222,{"inputs":[{"name":"self"},{"name":"gdrivestartflags"}],"output":{"name":"gdrivestartflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",222,{"inputs":[{"name":"self"},{"name":"gdrivestartflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",222,{"inputs":[{"name":"self"},{"name":"gdrivestartflags"}],"output":{"name":"gdrivestartflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",222,{"inputs":[{"name":"self"},{"name":"gdrivestartflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",222,{"inputs":[{"name":"self"}],"output":{"name":"gdrivestartflags"}}],[11,"extend","","",222,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",222,{"inputs":[{"name":"t"}],"output":{"name":"gdrivestartflags"}}],[11,"eq","","",223,{"inputs":[{"name":"self"},{"name":"gfileattributeinfoflags"}],"output":{"name":"bool"}}],[11,"ne","","",223,{"inputs":[{"name":"self"},{"name":"gfileattributeinfoflags"}],"output":{"name":"bool"}}],[11,"clone","","",223,{"inputs":[{"name":"self"}],"output":{"name":"gfileattributeinfoflags"}}],[11,"partial_cmp","","",223,{"inputs":[{"name":"self"},{"name":"gfileattributeinfoflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",223,{"inputs":[{"name":"self"},{"name":"gfileattributeinfoflags"}],"output":{"name":"bool"}}],[11,"le","","",223,{"inputs":[{"name":"self"},{"name":"gfileattributeinfoflags"}],"output":{"name":"bool"}}],[11,"gt","","",223,{"inputs":[{"name":"self"},{"name":"gfileattributeinfoflags"}],"output":{"name":"bool"}}],[11,"ge","","",223,{"inputs":[{"name":"self"},{"name":"gfileattributeinfoflags"}],"output":{"name":"bool"}}],[11,"cmp","","",223,{"inputs":[{"name":"self"},{"name":"gfileattributeinfoflags"}],"output":{"name":"ordering"}}],[11,"hash","","",223,null],[11,"fmt","","",223,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",223,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",223,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",223,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",223,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",223,null],[18,"COPY_WITH_FILE","","",223,null],[18,"COPY_WHEN_MOVED","","",223,null],[11,"empty","","Returns an empty set of flags.",223,{"inputs":[],"output":{"name":"gfileattributeinfoflags"}}],[11,"all","","Returns the set containing all flags.",223,{"inputs":[],"output":{"name":"gfileattributeinfoflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",223,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",223,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gfileattributeinfoflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",223,{"inputs":[{"name":"c_uint"}],"output":{"name":"gfileattributeinfoflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",223,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",223,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",223,{"inputs":[{"name":"self"},{"name":"gfileattributeinfoflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",223,{"inputs":[{"name":"self"},{"name":"gfileattributeinfoflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",223,{"inputs":[{"name":"self"},{"name":"gfileattributeinfoflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",223,{"inputs":[{"name":"self"},{"name":"gfileattributeinfoflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",223,{"inputs":[{"name":"self"},{"name":"gfileattributeinfoflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",223,{"inputs":[{"name":"self"},{"name":"gfileattributeinfoflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",223,{"inputs":[{"name":"self"},{"name":"gfileattributeinfoflags"}],"output":{"name":"gfileattributeinfoflags"}}],[11,"bitor_assign","","Adds the set of flags.",223,{"inputs":[{"name":"self"},{"name":"gfileattributeinfoflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",223,{"inputs":[{"name":"self"},{"name":"gfileattributeinfoflags"}],"output":{"name":"gfileattributeinfoflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",223,{"inputs":[{"name":"self"},{"name":"gfileattributeinfoflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",223,{"inputs":[{"name":"self"},{"name":"gfileattributeinfoflags"}],"output":{"name":"gfileattributeinfoflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",223,{"inputs":[{"name":"self"},{"name":"gfileattributeinfoflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",223,{"inputs":[{"name":"self"},{"name":"gfileattributeinfoflags"}],"output":{"name":"gfileattributeinfoflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",223,{"inputs":[{"name":"self"},{"name":"gfileattributeinfoflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",223,{"inputs":[{"name":"self"}],"output":{"name":"gfileattributeinfoflags"}}],[11,"extend","","",223,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",223,{"inputs":[{"name":"t"}],"output":{"name":"gfileattributeinfoflags"}}],[11,"eq","","",224,{"inputs":[{"name":"self"},{"name":"gfilecopyflags"}],"output":{"name":"bool"}}],[11,"ne","","",224,{"inputs":[{"name":"self"},{"name":"gfilecopyflags"}],"output":{"name":"bool"}}],[11,"clone","","",224,{"inputs":[{"name":"self"}],"output":{"name":"gfilecopyflags"}}],[11,"partial_cmp","","",224,{"inputs":[{"name":"self"},{"name":"gfilecopyflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",224,{"inputs":[{"name":"self"},{"name":"gfilecopyflags"}],"output":{"name":"bool"}}],[11,"le","","",224,{"inputs":[{"name":"self"},{"name":"gfilecopyflags"}],"output":{"name":"bool"}}],[11,"gt","","",224,{"inputs":[{"name":"self"},{"name":"gfilecopyflags"}],"output":{"name":"bool"}}],[11,"ge","","",224,{"inputs":[{"name":"self"},{"name":"gfilecopyflags"}],"output":{"name":"bool"}}],[11,"cmp","","",224,{"inputs":[{"name":"self"},{"name":"gfilecopyflags"}],"output":{"name":"ordering"}}],[11,"hash","","",224,null],[11,"fmt","","",224,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",224,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",224,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",224,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",224,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",224,null],[18,"OVERWRITE","","",224,null],[18,"BACKUP","","",224,null],[18,"NOFOLLOW_SYMLINKS","","",224,null],[18,"ALL_METADATA","","",224,null],[18,"NO_FALLBACK_FOR_MOVE","","",224,null],[18,"TARGET_DEFAULT_PERMS","","",224,null],[11,"empty","","Returns an empty set of flags.",224,{"inputs":[],"output":{"name":"gfilecopyflags"}}],[11,"all","","Returns the set containing all flags.",224,{"inputs":[],"output":{"name":"gfilecopyflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",224,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",224,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gfilecopyflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",224,{"inputs":[{"name":"c_uint"}],"output":{"name":"gfilecopyflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",224,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",224,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",224,{"inputs":[{"name":"self"},{"name":"gfilecopyflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",224,{"inputs":[{"name":"self"},{"name":"gfilecopyflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",224,{"inputs":[{"name":"self"},{"name":"gfilecopyflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",224,{"inputs":[{"name":"self"},{"name":"gfilecopyflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",224,{"inputs":[{"name":"self"},{"name":"gfilecopyflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",224,{"inputs":[{"name":"self"},{"name":"gfilecopyflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",224,{"inputs":[{"name":"self"},{"name":"gfilecopyflags"}],"output":{"name":"gfilecopyflags"}}],[11,"bitor_assign","","Adds the set of flags.",224,{"inputs":[{"name":"self"},{"name":"gfilecopyflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",224,{"inputs":[{"name":"self"},{"name":"gfilecopyflags"}],"output":{"name":"gfilecopyflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",224,{"inputs":[{"name":"self"},{"name":"gfilecopyflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",224,{"inputs":[{"name":"self"},{"name":"gfilecopyflags"}],"output":{"name":"gfilecopyflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",224,{"inputs":[{"name":"self"},{"name":"gfilecopyflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",224,{"inputs":[{"name":"self"},{"name":"gfilecopyflags"}],"output":{"name":"gfilecopyflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",224,{"inputs":[{"name":"self"},{"name":"gfilecopyflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",224,{"inputs":[{"name":"self"}],"output":{"name":"gfilecopyflags"}}],[11,"extend","","",224,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",224,{"inputs":[{"name":"t"}],"output":{"name":"gfilecopyflags"}}],[11,"eq","","",225,{"inputs":[{"name":"self"},{"name":"gfilecreateflags"}],"output":{"name":"bool"}}],[11,"ne","","",225,{"inputs":[{"name":"self"},{"name":"gfilecreateflags"}],"output":{"name":"bool"}}],[11,"clone","","",225,{"inputs":[{"name":"self"}],"output":{"name":"gfilecreateflags"}}],[11,"partial_cmp","","",225,{"inputs":[{"name":"self"},{"name":"gfilecreateflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",225,{"inputs":[{"name":"self"},{"name":"gfilecreateflags"}],"output":{"name":"bool"}}],[11,"le","","",225,{"inputs":[{"name":"self"},{"name":"gfilecreateflags"}],"output":{"name":"bool"}}],[11,"gt","","",225,{"inputs":[{"name":"self"},{"name":"gfilecreateflags"}],"output":{"name":"bool"}}],[11,"ge","","",225,{"inputs":[{"name":"self"},{"name":"gfilecreateflags"}],"output":{"name":"bool"}}],[11,"cmp","","",225,{"inputs":[{"name":"self"},{"name":"gfilecreateflags"}],"output":{"name":"ordering"}}],[11,"hash","","",225,null],[11,"fmt","","",225,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",225,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",225,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",225,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",225,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",225,null],[18,"PRIVATE","","",225,null],[18,"REPLACE_DESTINATION","","",225,null],[11,"empty","","Returns an empty set of flags.",225,{"inputs":[],"output":{"name":"gfilecreateflags"}}],[11,"all","","Returns the set containing all flags.",225,{"inputs":[],"output":{"name":"gfilecreateflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",225,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",225,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gfilecreateflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",225,{"inputs":[{"name":"c_uint"}],"output":{"name":"gfilecreateflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",225,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",225,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",225,{"inputs":[{"name":"self"},{"name":"gfilecreateflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",225,{"inputs":[{"name":"self"},{"name":"gfilecreateflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",225,{"inputs":[{"name":"self"},{"name":"gfilecreateflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",225,{"inputs":[{"name":"self"},{"name":"gfilecreateflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",225,{"inputs":[{"name":"self"},{"name":"gfilecreateflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",225,{"inputs":[{"name":"self"},{"name":"gfilecreateflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",225,{"inputs":[{"name":"self"},{"name":"gfilecreateflags"}],"output":{"name":"gfilecreateflags"}}],[11,"bitor_assign","","Adds the set of flags.",225,{"inputs":[{"name":"self"},{"name":"gfilecreateflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",225,{"inputs":[{"name":"self"},{"name":"gfilecreateflags"}],"output":{"name":"gfilecreateflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",225,{"inputs":[{"name":"self"},{"name":"gfilecreateflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",225,{"inputs":[{"name":"self"},{"name":"gfilecreateflags"}],"output":{"name":"gfilecreateflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",225,{"inputs":[{"name":"self"},{"name":"gfilecreateflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",225,{"inputs":[{"name":"self"},{"name":"gfilecreateflags"}],"output":{"name":"gfilecreateflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",225,{"inputs":[{"name":"self"},{"name":"gfilecreateflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",225,{"inputs":[{"name":"self"}],"output":{"name":"gfilecreateflags"}}],[11,"extend","","",225,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",225,{"inputs":[{"name":"t"}],"output":{"name":"gfilecreateflags"}}],[11,"eq","","",226,{"inputs":[{"name":"self"},{"name":"gfilemeasureflags"}],"output":{"name":"bool"}}],[11,"ne","","",226,{"inputs":[{"name":"self"},{"name":"gfilemeasureflags"}],"output":{"name":"bool"}}],[11,"clone","","",226,{"inputs":[{"name":"self"}],"output":{"name":"gfilemeasureflags"}}],[11,"partial_cmp","","",226,{"inputs":[{"name":"self"},{"name":"gfilemeasureflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",226,{"inputs":[{"name":"self"},{"name":"gfilemeasureflags"}],"output":{"name":"bool"}}],[11,"le","","",226,{"inputs":[{"name":"self"},{"name":"gfilemeasureflags"}],"output":{"name":"bool"}}],[11,"gt","","",226,{"inputs":[{"name":"self"},{"name":"gfilemeasureflags"}],"output":{"name":"bool"}}],[11,"ge","","",226,{"inputs":[{"name":"self"},{"name":"gfilemeasureflags"}],"output":{"name":"bool"}}],[11,"cmp","","",226,{"inputs":[{"name":"self"},{"name":"gfilemeasureflags"}],"output":{"name":"ordering"}}],[11,"hash","","",226,null],[11,"fmt","","",226,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",226,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",226,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",226,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",226,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",226,null],[18,"REPORT_ANY_ERROR","","",226,null],[18,"APPARENT_SIZE","","",226,null],[18,"NO_XDEV","","",226,null],[11,"empty","","Returns an empty set of flags.",226,{"inputs":[],"output":{"name":"gfilemeasureflags"}}],[11,"all","","Returns the set containing all flags.",226,{"inputs":[],"output":{"name":"gfilemeasureflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",226,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",226,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gfilemeasureflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",226,{"inputs":[{"name":"c_uint"}],"output":{"name":"gfilemeasureflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",226,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",226,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",226,{"inputs":[{"name":"self"},{"name":"gfilemeasureflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",226,{"inputs":[{"name":"self"},{"name":"gfilemeasureflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",226,{"inputs":[{"name":"self"},{"name":"gfilemeasureflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",226,{"inputs":[{"name":"self"},{"name":"gfilemeasureflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",226,{"inputs":[{"name":"self"},{"name":"gfilemeasureflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",226,{"inputs":[{"name":"self"},{"name":"gfilemeasureflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",226,{"inputs":[{"name":"self"},{"name":"gfilemeasureflags"}],"output":{"name":"gfilemeasureflags"}}],[11,"bitor_assign","","Adds the set of flags.",226,{"inputs":[{"name":"self"},{"name":"gfilemeasureflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",226,{"inputs":[{"name":"self"},{"name":"gfilemeasureflags"}],"output":{"name":"gfilemeasureflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",226,{"inputs":[{"name":"self"},{"name":"gfilemeasureflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",226,{"inputs":[{"name":"self"},{"name":"gfilemeasureflags"}],"output":{"name":"gfilemeasureflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",226,{"inputs":[{"name":"self"},{"name":"gfilemeasureflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",226,{"inputs":[{"name":"self"},{"name":"gfilemeasureflags"}],"output":{"name":"gfilemeasureflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",226,{"inputs":[{"name":"self"},{"name":"gfilemeasureflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",226,{"inputs":[{"name":"self"}],"output":{"name":"gfilemeasureflags"}}],[11,"extend","","",226,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",226,{"inputs":[{"name":"t"}],"output":{"name":"gfilemeasureflags"}}],[11,"eq","","",227,{"inputs":[{"name":"self"},{"name":"gfilemonitorflags"}],"output":{"name":"bool"}}],[11,"ne","","",227,{"inputs":[{"name":"self"},{"name":"gfilemonitorflags"}],"output":{"name":"bool"}}],[11,"clone","","",227,{"inputs":[{"name":"self"}],"output":{"name":"gfilemonitorflags"}}],[11,"partial_cmp","","",227,{"inputs":[{"name":"self"},{"name":"gfilemonitorflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",227,{"inputs":[{"name":"self"},{"name":"gfilemonitorflags"}],"output":{"name":"bool"}}],[11,"le","","",227,{"inputs":[{"name":"self"},{"name":"gfilemonitorflags"}],"output":{"name":"bool"}}],[11,"gt","","",227,{"inputs":[{"name":"self"},{"name":"gfilemonitorflags"}],"output":{"name":"bool"}}],[11,"ge","","",227,{"inputs":[{"name":"self"},{"name":"gfilemonitorflags"}],"output":{"name":"bool"}}],[11,"cmp","","",227,{"inputs":[{"name":"self"},{"name":"gfilemonitorflags"}],"output":{"name":"ordering"}}],[11,"hash","","",227,null],[11,"fmt","","",227,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",227,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",227,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",227,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",227,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",227,null],[18,"WATCH_MOUNTS","","",227,null],[18,"SEND_MOVED","","",227,null],[18,"WATCH_HARD_LINKS","","",227,null],[18,"WATCH_MOVES","","",227,null],[11,"empty","","Returns an empty set of flags.",227,{"inputs":[],"output":{"name":"gfilemonitorflags"}}],[11,"all","","Returns the set containing all flags.",227,{"inputs":[],"output":{"name":"gfilemonitorflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",227,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",227,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gfilemonitorflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",227,{"inputs":[{"name":"c_uint"}],"output":{"name":"gfilemonitorflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",227,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",227,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",227,{"inputs":[{"name":"self"},{"name":"gfilemonitorflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",227,{"inputs":[{"name":"self"},{"name":"gfilemonitorflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",227,{"inputs":[{"name":"self"},{"name":"gfilemonitorflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",227,{"inputs":[{"name":"self"},{"name":"gfilemonitorflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",227,{"inputs":[{"name":"self"},{"name":"gfilemonitorflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",227,{"inputs":[{"name":"self"},{"name":"gfilemonitorflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",227,{"inputs":[{"name":"self"},{"name":"gfilemonitorflags"}],"output":{"name":"gfilemonitorflags"}}],[11,"bitor_assign","","Adds the set of flags.",227,{"inputs":[{"name":"self"},{"name":"gfilemonitorflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",227,{"inputs":[{"name":"self"},{"name":"gfilemonitorflags"}],"output":{"name":"gfilemonitorflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",227,{"inputs":[{"name":"self"},{"name":"gfilemonitorflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",227,{"inputs":[{"name":"self"},{"name":"gfilemonitorflags"}],"output":{"name":"gfilemonitorflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",227,{"inputs":[{"name":"self"},{"name":"gfilemonitorflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",227,{"inputs":[{"name":"self"},{"name":"gfilemonitorflags"}],"output":{"name":"gfilemonitorflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",227,{"inputs":[{"name":"self"},{"name":"gfilemonitorflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",227,{"inputs":[{"name":"self"}],"output":{"name":"gfilemonitorflags"}}],[11,"extend","","",227,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",227,{"inputs":[{"name":"t"}],"output":{"name":"gfilemonitorflags"}}],[11,"eq","","",228,{"inputs":[{"name":"self"},{"name":"gfilequeryinfoflags"}],"output":{"name":"bool"}}],[11,"ne","","",228,{"inputs":[{"name":"self"},{"name":"gfilequeryinfoflags"}],"output":{"name":"bool"}}],[11,"clone","","",228,{"inputs":[{"name":"self"}],"output":{"name":"gfilequeryinfoflags"}}],[11,"partial_cmp","","",228,{"inputs":[{"name":"self"},{"name":"gfilequeryinfoflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",228,{"inputs":[{"name":"self"},{"name":"gfilequeryinfoflags"}],"output":{"name":"bool"}}],[11,"le","","",228,{"inputs":[{"name":"self"},{"name":"gfilequeryinfoflags"}],"output":{"name":"bool"}}],[11,"gt","","",228,{"inputs":[{"name":"self"},{"name":"gfilequeryinfoflags"}],"output":{"name":"bool"}}],[11,"ge","","",228,{"inputs":[{"name":"self"},{"name":"gfilequeryinfoflags"}],"output":{"name":"bool"}}],[11,"cmp","","",228,{"inputs":[{"name":"self"},{"name":"gfilequeryinfoflags"}],"output":{"name":"ordering"}}],[11,"hash","","",228,null],[11,"fmt","","",228,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",228,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",228,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",228,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",228,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",228,null],[18,"NOFOLLOW_SYMLINKS","","",228,null],[11,"empty","","Returns an empty set of flags.",228,{"inputs":[],"output":{"name":"gfilequeryinfoflags"}}],[11,"all","","Returns the set containing all flags.",228,{"inputs":[],"output":{"name":"gfilequeryinfoflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",228,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",228,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gfilequeryinfoflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",228,{"inputs":[{"name":"c_uint"}],"output":{"name":"gfilequeryinfoflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",228,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",228,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",228,{"inputs":[{"name":"self"},{"name":"gfilequeryinfoflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",228,{"inputs":[{"name":"self"},{"name":"gfilequeryinfoflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",228,{"inputs":[{"name":"self"},{"name":"gfilequeryinfoflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",228,{"inputs":[{"name":"self"},{"name":"gfilequeryinfoflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",228,{"inputs":[{"name":"self"},{"name":"gfilequeryinfoflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",228,{"inputs":[{"name":"self"},{"name":"gfilequeryinfoflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",228,{"inputs":[{"name":"self"},{"name":"gfilequeryinfoflags"}],"output":{"name":"gfilequeryinfoflags"}}],[11,"bitor_assign","","Adds the set of flags.",228,{"inputs":[{"name":"self"},{"name":"gfilequeryinfoflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",228,{"inputs":[{"name":"self"},{"name":"gfilequeryinfoflags"}],"output":{"name":"gfilequeryinfoflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",228,{"inputs":[{"name":"self"},{"name":"gfilequeryinfoflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",228,{"inputs":[{"name":"self"},{"name":"gfilequeryinfoflags"}],"output":{"name":"gfilequeryinfoflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",228,{"inputs":[{"name":"self"},{"name":"gfilequeryinfoflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",228,{"inputs":[{"name":"self"},{"name":"gfilequeryinfoflags"}],"output":{"name":"gfilequeryinfoflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",228,{"inputs":[{"name":"self"},{"name":"gfilequeryinfoflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",228,{"inputs":[{"name":"self"}],"output":{"name":"gfilequeryinfoflags"}}],[11,"extend","","",228,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",228,{"inputs":[{"name":"t"}],"output":{"name":"gfilequeryinfoflags"}}],[11,"eq","","",229,{"inputs":[{"name":"self"},{"name":"giostreamspliceflags"}],"output":{"name":"bool"}}],[11,"ne","","",229,{"inputs":[{"name":"self"},{"name":"giostreamspliceflags"}],"output":{"name":"bool"}}],[11,"clone","","",229,{"inputs":[{"name":"self"}],"output":{"name":"giostreamspliceflags"}}],[11,"partial_cmp","","",229,{"inputs":[{"name":"self"},{"name":"giostreamspliceflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",229,{"inputs":[{"name":"self"},{"name":"giostreamspliceflags"}],"output":{"name":"bool"}}],[11,"le","","",229,{"inputs":[{"name":"self"},{"name":"giostreamspliceflags"}],"output":{"name":"bool"}}],[11,"gt","","",229,{"inputs":[{"name":"self"},{"name":"giostreamspliceflags"}],"output":{"name":"bool"}}],[11,"ge","","",229,{"inputs":[{"name":"self"},{"name":"giostreamspliceflags"}],"output":{"name":"bool"}}],[11,"cmp","","",229,{"inputs":[{"name":"self"},{"name":"giostreamspliceflags"}],"output":{"name":"ordering"}}],[11,"hash","","",229,null],[11,"fmt","","",229,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",229,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",229,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",229,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",229,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",229,null],[18,"CLOSE_STREAM1","","",229,null],[18,"CLOSE_STREAM2","","",229,null],[18,"WAIT_FOR_BOTH","","",229,null],[11,"empty","","Returns an empty set of flags.",229,{"inputs":[],"output":{"name":"giostreamspliceflags"}}],[11,"all","","Returns the set containing all flags.",229,{"inputs":[],"output":{"name":"giostreamspliceflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",229,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",229,{"inputs":[{"name":"c_uint"}],"output":{"generics":["giostreamspliceflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",229,{"inputs":[{"name":"c_uint"}],"output":{"name":"giostreamspliceflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",229,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",229,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",229,{"inputs":[{"name":"self"},{"name":"giostreamspliceflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",229,{"inputs":[{"name":"self"},{"name":"giostreamspliceflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",229,{"inputs":[{"name":"self"},{"name":"giostreamspliceflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",229,{"inputs":[{"name":"self"},{"name":"giostreamspliceflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",229,{"inputs":[{"name":"self"},{"name":"giostreamspliceflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",229,{"inputs":[{"name":"self"},{"name":"giostreamspliceflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",229,{"inputs":[{"name":"self"},{"name":"giostreamspliceflags"}],"output":{"name":"giostreamspliceflags"}}],[11,"bitor_assign","","Adds the set of flags.",229,{"inputs":[{"name":"self"},{"name":"giostreamspliceflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",229,{"inputs":[{"name":"self"},{"name":"giostreamspliceflags"}],"output":{"name":"giostreamspliceflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",229,{"inputs":[{"name":"self"},{"name":"giostreamspliceflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",229,{"inputs":[{"name":"self"},{"name":"giostreamspliceflags"}],"output":{"name":"giostreamspliceflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",229,{"inputs":[{"name":"self"},{"name":"giostreamspliceflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",229,{"inputs":[{"name":"self"},{"name":"giostreamspliceflags"}],"output":{"name":"giostreamspliceflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",229,{"inputs":[{"name":"self"},{"name":"giostreamspliceflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",229,{"inputs":[{"name":"self"}],"output":{"name":"giostreamspliceflags"}}],[11,"extend","","",229,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",229,{"inputs":[{"name":"t"}],"output":{"name":"giostreamspliceflags"}}],[11,"eq","","",230,{"inputs":[{"name":"self"},{"name":"gmountmountflags"}],"output":{"name":"bool"}}],[11,"ne","","",230,{"inputs":[{"name":"self"},{"name":"gmountmountflags"}],"output":{"name":"bool"}}],[11,"clone","","",230,{"inputs":[{"name":"self"}],"output":{"name":"gmountmountflags"}}],[11,"partial_cmp","","",230,{"inputs":[{"name":"self"},{"name":"gmountmountflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",230,{"inputs":[{"name":"self"},{"name":"gmountmountflags"}],"output":{"name":"bool"}}],[11,"le","","",230,{"inputs":[{"name":"self"},{"name":"gmountmountflags"}],"output":{"name":"bool"}}],[11,"gt","","",230,{"inputs":[{"name":"self"},{"name":"gmountmountflags"}],"output":{"name":"bool"}}],[11,"ge","","",230,{"inputs":[{"name":"self"},{"name":"gmountmountflags"}],"output":{"name":"bool"}}],[11,"cmp","","",230,{"inputs":[{"name":"self"},{"name":"gmountmountflags"}],"output":{"name":"ordering"}}],[11,"hash","","",230,null],[11,"fmt","","",230,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",230,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",230,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",230,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",230,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",230,null],[11,"empty","","Returns an empty set of flags.",230,{"inputs":[],"output":{"name":"gmountmountflags"}}],[11,"all","","Returns the set containing all flags.",230,{"inputs":[],"output":{"name":"gmountmountflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",230,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",230,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gmountmountflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",230,{"inputs":[{"name":"c_uint"}],"output":{"name":"gmountmountflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",230,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",230,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",230,{"inputs":[{"name":"self"},{"name":"gmountmountflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",230,{"inputs":[{"name":"self"},{"name":"gmountmountflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",230,{"inputs":[{"name":"self"},{"name":"gmountmountflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",230,{"inputs":[{"name":"self"},{"name":"gmountmountflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",230,{"inputs":[{"name":"self"},{"name":"gmountmountflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",230,{"inputs":[{"name":"self"},{"name":"gmountmountflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",230,{"inputs":[{"name":"self"},{"name":"gmountmountflags"}],"output":{"name":"gmountmountflags"}}],[11,"bitor_assign","","Adds the set of flags.",230,{"inputs":[{"name":"self"},{"name":"gmountmountflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",230,{"inputs":[{"name":"self"},{"name":"gmountmountflags"}],"output":{"name":"gmountmountflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",230,{"inputs":[{"name":"self"},{"name":"gmountmountflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",230,{"inputs":[{"name":"self"},{"name":"gmountmountflags"}],"output":{"name":"gmountmountflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",230,{"inputs":[{"name":"self"},{"name":"gmountmountflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",230,{"inputs":[{"name":"self"},{"name":"gmountmountflags"}],"output":{"name":"gmountmountflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",230,{"inputs":[{"name":"self"},{"name":"gmountmountflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",230,{"inputs":[{"name":"self"}],"output":{"name":"gmountmountflags"}}],[11,"extend","","",230,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",230,{"inputs":[{"name":"t"}],"output":{"name":"gmountmountflags"}}],[11,"eq","","",231,{"inputs":[{"name":"self"},{"name":"gmountunmountflags"}],"output":{"name":"bool"}}],[11,"ne","","",231,{"inputs":[{"name":"self"},{"name":"gmountunmountflags"}],"output":{"name":"bool"}}],[11,"clone","","",231,{"inputs":[{"name":"self"}],"output":{"name":"gmountunmountflags"}}],[11,"partial_cmp","","",231,{"inputs":[{"name":"self"},{"name":"gmountunmountflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",231,{"inputs":[{"name":"self"},{"name":"gmountunmountflags"}],"output":{"name":"bool"}}],[11,"le","","",231,{"inputs":[{"name":"self"},{"name":"gmountunmountflags"}],"output":{"name":"bool"}}],[11,"gt","","",231,{"inputs":[{"name":"self"},{"name":"gmountunmountflags"}],"output":{"name":"bool"}}],[11,"ge","","",231,{"inputs":[{"name":"self"},{"name":"gmountunmountflags"}],"output":{"name":"bool"}}],[11,"cmp","","",231,{"inputs":[{"name":"self"},{"name":"gmountunmountflags"}],"output":{"name":"ordering"}}],[11,"hash","","",231,null],[11,"fmt","","",231,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",231,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",231,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",231,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",231,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",231,null],[18,"FORCE","","",231,null],[11,"empty","","Returns an empty set of flags.",231,{"inputs":[],"output":{"name":"gmountunmountflags"}}],[11,"all","","Returns the set containing all flags.",231,{"inputs":[],"output":{"name":"gmountunmountflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",231,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",231,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gmountunmountflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",231,{"inputs":[{"name":"c_uint"}],"output":{"name":"gmountunmountflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",231,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",231,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",231,{"inputs":[{"name":"self"},{"name":"gmountunmountflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",231,{"inputs":[{"name":"self"},{"name":"gmountunmountflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",231,{"inputs":[{"name":"self"},{"name":"gmountunmountflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",231,{"inputs":[{"name":"self"},{"name":"gmountunmountflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",231,{"inputs":[{"name":"self"},{"name":"gmountunmountflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",231,{"inputs":[{"name":"self"},{"name":"gmountunmountflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",231,{"inputs":[{"name":"self"},{"name":"gmountunmountflags"}],"output":{"name":"gmountunmountflags"}}],[11,"bitor_assign","","Adds the set of flags.",231,{"inputs":[{"name":"self"},{"name":"gmountunmountflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",231,{"inputs":[{"name":"self"},{"name":"gmountunmountflags"}],"output":{"name":"gmountunmountflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",231,{"inputs":[{"name":"self"},{"name":"gmountunmountflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",231,{"inputs":[{"name":"self"},{"name":"gmountunmountflags"}],"output":{"name":"gmountunmountflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",231,{"inputs":[{"name":"self"},{"name":"gmountunmountflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",231,{"inputs":[{"name":"self"},{"name":"gmountunmountflags"}],"output":{"name":"gmountunmountflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",231,{"inputs":[{"name":"self"},{"name":"gmountunmountflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",231,{"inputs":[{"name":"self"}],"output":{"name":"gmountunmountflags"}}],[11,"extend","","",231,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",231,{"inputs":[{"name":"t"}],"output":{"name":"gmountunmountflags"}}],[11,"eq","","",232,{"inputs":[{"name":"self"},{"name":"goutputstreamspliceflags"}],"output":{"name":"bool"}}],[11,"ne","","",232,{"inputs":[{"name":"self"},{"name":"goutputstreamspliceflags"}],"output":{"name":"bool"}}],[11,"clone","","",232,{"inputs":[{"name":"self"}],"output":{"name":"goutputstreamspliceflags"}}],[11,"partial_cmp","","",232,{"inputs":[{"name":"self"},{"name":"goutputstreamspliceflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",232,{"inputs":[{"name":"self"},{"name":"goutputstreamspliceflags"}],"output":{"name":"bool"}}],[11,"le","","",232,{"inputs":[{"name":"self"},{"name":"goutputstreamspliceflags"}],"output":{"name":"bool"}}],[11,"gt","","",232,{"inputs":[{"name":"self"},{"name":"goutputstreamspliceflags"}],"output":{"name":"bool"}}],[11,"ge","","",232,{"inputs":[{"name":"self"},{"name":"goutputstreamspliceflags"}],"output":{"name":"bool"}}],[11,"cmp","","",232,{"inputs":[{"name":"self"},{"name":"goutputstreamspliceflags"}],"output":{"name":"ordering"}}],[11,"hash","","",232,null],[11,"fmt","","",232,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",232,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",232,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",232,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",232,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",232,null],[18,"CLOSE_SOURCE","","",232,null],[18,"CLOSE_TARGET","","",232,null],[11,"empty","","Returns an empty set of flags.",232,{"inputs":[],"output":{"name":"goutputstreamspliceflags"}}],[11,"all","","Returns the set containing all flags.",232,{"inputs":[],"output":{"name":"goutputstreamspliceflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",232,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",232,{"inputs":[{"name":"c_uint"}],"output":{"generics":["goutputstreamspliceflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",232,{"inputs":[{"name":"c_uint"}],"output":{"name":"goutputstreamspliceflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",232,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",232,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",232,{"inputs":[{"name":"self"},{"name":"goutputstreamspliceflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",232,{"inputs":[{"name":"self"},{"name":"goutputstreamspliceflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",232,{"inputs":[{"name":"self"},{"name":"goutputstreamspliceflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",232,{"inputs":[{"name":"self"},{"name":"goutputstreamspliceflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",232,{"inputs":[{"name":"self"},{"name":"goutputstreamspliceflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",232,{"inputs":[{"name":"self"},{"name":"goutputstreamspliceflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",232,{"inputs":[{"name":"self"},{"name":"goutputstreamspliceflags"}],"output":{"name":"goutputstreamspliceflags"}}],[11,"bitor_assign","","Adds the set of flags.",232,{"inputs":[{"name":"self"},{"name":"goutputstreamspliceflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",232,{"inputs":[{"name":"self"},{"name":"goutputstreamspliceflags"}],"output":{"name":"goutputstreamspliceflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",232,{"inputs":[{"name":"self"},{"name":"goutputstreamspliceflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",232,{"inputs":[{"name":"self"},{"name":"goutputstreamspliceflags"}],"output":{"name":"goutputstreamspliceflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",232,{"inputs":[{"name":"self"},{"name":"goutputstreamspliceflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",232,{"inputs":[{"name":"self"},{"name":"goutputstreamspliceflags"}],"output":{"name":"goutputstreamspliceflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",232,{"inputs":[{"name":"self"},{"name":"goutputstreamspliceflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",232,{"inputs":[{"name":"self"}],"output":{"name":"goutputstreamspliceflags"}}],[11,"extend","","",232,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",232,{"inputs":[{"name":"t"}],"output":{"name":"goutputstreamspliceflags"}}],[11,"eq","","",233,{"inputs":[{"name":"self"},{"name":"gresourceflags"}],"output":{"name":"bool"}}],[11,"ne","","",233,{"inputs":[{"name":"self"},{"name":"gresourceflags"}],"output":{"name":"bool"}}],[11,"clone","","",233,{"inputs":[{"name":"self"}],"output":{"name":"gresourceflags"}}],[11,"partial_cmp","","",233,{"inputs":[{"name":"self"},{"name":"gresourceflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",233,{"inputs":[{"name":"self"},{"name":"gresourceflags"}],"output":{"name":"bool"}}],[11,"le","","",233,{"inputs":[{"name":"self"},{"name":"gresourceflags"}],"output":{"name":"bool"}}],[11,"gt","","",233,{"inputs":[{"name":"self"},{"name":"gresourceflags"}],"output":{"name":"bool"}}],[11,"ge","","",233,{"inputs":[{"name":"self"},{"name":"gresourceflags"}],"output":{"name":"bool"}}],[11,"cmp","","",233,{"inputs":[{"name":"self"},{"name":"gresourceflags"}],"output":{"name":"ordering"}}],[11,"hash","","",233,null],[11,"fmt","","",233,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",233,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",233,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",233,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",233,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",233,null],[18,"COMPRESSED","","",233,null],[11,"empty","","Returns an empty set of flags.",233,{"inputs":[],"output":{"name":"gresourceflags"}}],[11,"all","","Returns the set containing all flags.",233,{"inputs":[],"output":{"name":"gresourceflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",233,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",233,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gresourceflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",233,{"inputs":[{"name":"c_uint"}],"output":{"name":"gresourceflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",233,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",233,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",233,{"inputs":[{"name":"self"},{"name":"gresourceflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",233,{"inputs":[{"name":"self"},{"name":"gresourceflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",233,{"inputs":[{"name":"self"},{"name":"gresourceflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",233,{"inputs":[{"name":"self"},{"name":"gresourceflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",233,{"inputs":[{"name":"self"},{"name":"gresourceflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",233,{"inputs":[{"name":"self"},{"name":"gresourceflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",233,{"inputs":[{"name":"self"},{"name":"gresourceflags"}],"output":{"name":"gresourceflags"}}],[11,"bitor_assign","","Adds the set of flags.",233,{"inputs":[{"name":"self"},{"name":"gresourceflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",233,{"inputs":[{"name":"self"},{"name":"gresourceflags"}],"output":{"name":"gresourceflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",233,{"inputs":[{"name":"self"},{"name":"gresourceflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",233,{"inputs":[{"name":"self"},{"name":"gresourceflags"}],"output":{"name":"gresourceflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",233,{"inputs":[{"name":"self"},{"name":"gresourceflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",233,{"inputs":[{"name":"self"},{"name":"gresourceflags"}],"output":{"name":"gresourceflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",233,{"inputs":[{"name":"self"},{"name":"gresourceflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",233,{"inputs":[{"name":"self"}],"output":{"name":"gresourceflags"}}],[11,"extend","","",233,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",233,{"inputs":[{"name":"t"}],"output":{"name":"gresourceflags"}}],[11,"eq","","",234,{"inputs":[{"name":"self"},{"name":"gresourcelookupflags"}],"output":{"name":"bool"}}],[11,"ne","","",234,{"inputs":[{"name":"self"},{"name":"gresourcelookupflags"}],"output":{"name":"bool"}}],[11,"clone","","",234,{"inputs":[{"name":"self"}],"output":{"name":"gresourcelookupflags"}}],[11,"partial_cmp","","",234,{"inputs":[{"name":"self"},{"name":"gresourcelookupflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",234,{"inputs":[{"name":"self"},{"name":"gresourcelookupflags"}],"output":{"name":"bool"}}],[11,"le","","",234,{"inputs":[{"name":"self"},{"name":"gresourcelookupflags"}],"output":{"name":"bool"}}],[11,"gt","","",234,{"inputs":[{"name":"self"},{"name":"gresourcelookupflags"}],"output":{"name":"bool"}}],[11,"ge","","",234,{"inputs":[{"name":"self"},{"name":"gresourcelookupflags"}],"output":{"name":"bool"}}],[11,"cmp","","",234,{"inputs":[{"name":"self"},{"name":"gresourcelookupflags"}],"output":{"name":"ordering"}}],[11,"hash","","",234,null],[11,"fmt","","",234,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",234,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",234,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",234,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",234,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",234,null],[11,"empty","","Returns an empty set of flags.",234,{"inputs":[],"output":{"name":"gresourcelookupflags"}}],[11,"all","","Returns the set containing all flags.",234,{"inputs":[],"output":{"name":"gresourcelookupflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",234,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",234,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gresourcelookupflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",234,{"inputs":[{"name":"c_uint"}],"output":{"name":"gresourcelookupflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",234,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",234,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",234,{"inputs":[{"name":"self"},{"name":"gresourcelookupflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",234,{"inputs":[{"name":"self"},{"name":"gresourcelookupflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",234,{"inputs":[{"name":"self"},{"name":"gresourcelookupflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",234,{"inputs":[{"name":"self"},{"name":"gresourcelookupflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",234,{"inputs":[{"name":"self"},{"name":"gresourcelookupflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",234,{"inputs":[{"name":"self"},{"name":"gresourcelookupflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",234,{"inputs":[{"name":"self"},{"name":"gresourcelookupflags"}],"output":{"name":"gresourcelookupflags"}}],[11,"bitor_assign","","Adds the set of flags.",234,{"inputs":[{"name":"self"},{"name":"gresourcelookupflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",234,{"inputs":[{"name":"self"},{"name":"gresourcelookupflags"}],"output":{"name":"gresourcelookupflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",234,{"inputs":[{"name":"self"},{"name":"gresourcelookupflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",234,{"inputs":[{"name":"self"},{"name":"gresourcelookupflags"}],"output":{"name":"gresourcelookupflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",234,{"inputs":[{"name":"self"},{"name":"gresourcelookupflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",234,{"inputs":[{"name":"self"},{"name":"gresourcelookupflags"}],"output":{"name":"gresourcelookupflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",234,{"inputs":[{"name":"self"},{"name":"gresourcelookupflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",234,{"inputs":[{"name":"self"}],"output":{"name":"gresourcelookupflags"}}],[11,"extend","","",234,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",234,{"inputs":[{"name":"t"}],"output":{"name":"gresourcelookupflags"}}],[11,"eq","","",235,{"inputs":[{"name":"self"},{"name":"gsettingsbindflags"}],"output":{"name":"bool"}}],[11,"ne","","",235,{"inputs":[{"name":"self"},{"name":"gsettingsbindflags"}],"output":{"name":"bool"}}],[11,"clone","","",235,{"inputs":[{"name":"self"}],"output":{"name":"gsettingsbindflags"}}],[11,"partial_cmp","","",235,{"inputs":[{"name":"self"},{"name":"gsettingsbindflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",235,{"inputs":[{"name":"self"},{"name":"gsettingsbindflags"}],"output":{"name":"bool"}}],[11,"le","","",235,{"inputs":[{"name":"self"},{"name":"gsettingsbindflags"}],"output":{"name":"bool"}}],[11,"gt","","",235,{"inputs":[{"name":"self"},{"name":"gsettingsbindflags"}],"output":{"name":"bool"}}],[11,"ge","","",235,{"inputs":[{"name":"self"},{"name":"gsettingsbindflags"}],"output":{"name":"bool"}}],[11,"cmp","","",235,{"inputs":[{"name":"self"},{"name":"gsettingsbindflags"}],"output":{"name":"ordering"}}],[11,"hash","","",235,null],[11,"fmt","","",235,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",235,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",235,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",235,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",235,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"DEFAULT","","",235,null],[18,"GET","","",235,null],[18,"SET","","",235,null],[18,"NO_SENSITIVITY","","",235,null],[18,"GET_NO_CHANGES","","",235,null],[18,"INVERT_BOOLEAN","","",235,null],[11,"empty","","Returns an empty set of flags.",235,{"inputs":[],"output":{"name":"gsettingsbindflags"}}],[11,"all","","Returns the set containing all flags.",235,{"inputs":[],"output":{"name":"gsettingsbindflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",235,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",235,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gsettingsbindflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",235,{"inputs":[{"name":"c_uint"}],"output":{"name":"gsettingsbindflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",235,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",235,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",235,{"inputs":[{"name":"self"},{"name":"gsettingsbindflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",235,{"inputs":[{"name":"self"},{"name":"gsettingsbindflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",235,{"inputs":[{"name":"self"},{"name":"gsettingsbindflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",235,{"inputs":[{"name":"self"},{"name":"gsettingsbindflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",235,{"inputs":[{"name":"self"},{"name":"gsettingsbindflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",235,{"inputs":[{"name":"self"},{"name":"gsettingsbindflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",235,{"inputs":[{"name":"self"},{"name":"gsettingsbindflags"}],"output":{"name":"gsettingsbindflags"}}],[11,"bitor_assign","","Adds the set of flags.",235,{"inputs":[{"name":"self"},{"name":"gsettingsbindflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",235,{"inputs":[{"name":"self"},{"name":"gsettingsbindflags"}],"output":{"name":"gsettingsbindflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",235,{"inputs":[{"name":"self"},{"name":"gsettingsbindflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",235,{"inputs":[{"name":"self"},{"name":"gsettingsbindflags"}],"output":{"name":"gsettingsbindflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",235,{"inputs":[{"name":"self"},{"name":"gsettingsbindflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",235,{"inputs":[{"name":"self"},{"name":"gsettingsbindflags"}],"output":{"name":"gsettingsbindflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",235,{"inputs":[{"name":"self"},{"name":"gsettingsbindflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",235,{"inputs":[{"name":"self"}],"output":{"name":"gsettingsbindflags"}}],[11,"extend","","",235,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",235,{"inputs":[{"name":"t"}],"output":{"name":"gsettingsbindflags"}}],[11,"eq","","",236,{"inputs":[{"name":"self"},{"name":"gsocketmsgflags"}],"output":{"name":"bool"}}],[11,"ne","","",236,{"inputs":[{"name":"self"},{"name":"gsocketmsgflags"}],"output":{"name":"bool"}}],[11,"clone","","",236,{"inputs":[{"name":"self"}],"output":{"name":"gsocketmsgflags"}}],[11,"partial_cmp","","",236,{"inputs":[{"name":"self"},{"name":"gsocketmsgflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",236,{"inputs":[{"name":"self"},{"name":"gsocketmsgflags"}],"output":{"name":"bool"}}],[11,"le","","",236,{"inputs":[{"name":"self"},{"name":"gsocketmsgflags"}],"output":{"name":"bool"}}],[11,"gt","","",236,{"inputs":[{"name":"self"},{"name":"gsocketmsgflags"}],"output":{"name":"bool"}}],[11,"ge","","",236,{"inputs":[{"name":"self"},{"name":"gsocketmsgflags"}],"output":{"name":"bool"}}],[11,"cmp","","",236,{"inputs":[{"name":"self"},{"name":"gsocketmsgflags"}],"output":{"name":"ordering"}}],[11,"hash","","",236,null],[11,"fmt","","",236,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",236,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",236,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",236,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",236,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",236,null],[18,"OOB","","",236,null],[18,"PEEK","","",236,null],[18,"DONTROUTE","","",236,null],[11,"empty","","Returns an empty set of flags.",236,{"inputs":[],"output":{"name":"gsocketmsgflags"}}],[11,"all","","Returns the set containing all flags.",236,{"inputs":[],"output":{"name":"gsocketmsgflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",236,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",236,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gsocketmsgflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",236,{"inputs":[{"name":"c_uint"}],"output":{"name":"gsocketmsgflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",236,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",236,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",236,{"inputs":[{"name":"self"},{"name":"gsocketmsgflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",236,{"inputs":[{"name":"self"},{"name":"gsocketmsgflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",236,{"inputs":[{"name":"self"},{"name":"gsocketmsgflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",236,{"inputs":[{"name":"self"},{"name":"gsocketmsgflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",236,{"inputs":[{"name":"self"},{"name":"gsocketmsgflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",236,{"inputs":[{"name":"self"},{"name":"gsocketmsgflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",236,{"inputs":[{"name":"self"},{"name":"gsocketmsgflags"}],"output":{"name":"gsocketmsgflags"}}],[11,"bitor_assign","","Adds the set of flags.",236,{"inputs":[{"name":"self"},{"name":"gsocketmsgflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",236,{"inputs":[{"name":"self"},{"name":"gsocketmsgflags"}],"output":{"name":"gsocketmsgflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",236,{"inputs":[{"name":"self"},{"name":"gsocketmsgflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",236,{"inputs":[{"name":"self"},{"name":"gsocketmsgflags"}],"output":{"name":"gsocketmsgflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",236,{"inputs":[{"name":"self"},{"name":"gsocketmsgflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",236,{"inputs":[{"name":"self"},{"name":"gsocketmsgflags"}],"output":{"name":"gsocketmsgflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",236,{"inputs":[{"name":"self"},{"name":"gsocketmsgflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",236,{"inputs":[{"name":"self"}],"output":{"name":"gsocketmsgflags"}}],[11,"extend","","",236,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",236,{"inputs":[{"name":"t"}],"output":{"name":"gsocketmsgflags"}}],[11,"eq","","",237,{"inputs":[{"name":"self"},{"name":"gsubprocessflags"}],"output":{"name":"bool"}}],[11,"ne","","",237,{"inputs":[{"name":"self"},{"name":"gsubprocessflags"}],"output":{"name":"bool"}}],[11,"clone","","",237,{"inputs":[{"name":"self"}],"output":{"name":"gsubprocessflags"}}],[11,"partial_cmp","","",237,{"inputs":[{"name":"self"},{"name":"gsubprocessflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",237,{"inputs":[{"name":"self"},{"name":"gsubprocessflags"}],"output":{"name":"bool"}}],[11,"le","","",237,{"inputs":[{"name":"self"},{"name":"gsubprocessflags"}],"output":{"name":"bool"}}],[11,"gt","","",237,{"inputs":[{"name":"self"},{"name":"gsubprocessflags"}],"output":{"name":"bool"}}],[11,"ge","","",237,{"inputs":[{"name":"self"},{"name":"gsubprocessflags"}],"output":{"name":"bool"}}],[11,"cmp","","",237,{"inputs":[{"name":"self"},{"name":"gsubprocessflags"}],"output":{"name":"ordering"}}],[11,"hash","","",237,null],[11,"fmt","","",237,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",237,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",237,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",237,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",237,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",237,null],[18,"STDIN_PIPE","","",237,null],[18,"STDIN_INHERIT","","",237,null],[18,"STDOUT_PIPE","","",237,null],[18,"STDOUT_SILENCE","","",237,null],[18,"STDERR_PIPE","","",237,null],[18,"STDERR_SILENCE","","",237,null],[18,"STDERR_MERGE","","",237,null],[18,"INHERIT_FDS","","",237,null],[11,"empty","","Returns an empty set of flags.",237,{"inputs":[],"output":{"name":"gsubprocessflags"}}],[11,"all","","Returns the set containing all flags.",237,{"inputs":[],"output":{"name":"gsubprocessflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",237,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",237,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gsubprocessflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",237,{"inputs":[{"name":"c_uint"}],"output":{"name":"gsubprocessflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",237,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",237,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",237,{"inputs":[{"name":"self"},{"name":"gsubprocessflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",237,{"inputs":[{"name":"self"},{"name":"gsubprocessflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",237,{"inputs":[{"name":"self"},{"name":"gsubprocessflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",237,{"inputs":[{"name":"self"},{"name":"gsubprocessflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",237,{"inputs":[{"name":"self"},{"name":"gsubprocessflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",237,{"inputs":[{"name":"self"},{"name":"gsubprocessflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",237,{"inputs":[{"name":"self"},{"name":"gsubprocessflags"}],"output":{"name":"gsubprocessflags"}}],[11,"bitor_assign","","Adds the set of flags.",237,{"inputs":[{"name":"self"},{"name":"gsubprocessflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",237,{"inputs":[{"name":"self"},{"name":"gsubprocessflags"}],"output":{"name":"gsubprocessflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",237,{"inputs":[{"name":"self"},{"name":"gsubprocessflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",237,{"inputs":[{"name":"self"},{"name":"gsubprocessflags"}],"output":{"name":"gsubprocessflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",237,{"inputs":[{"name":"self"},{"name":"gsubprocessflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",237,{"inputs":[{"name":"self"},{"name":"gsubprocessflags"}],"output":{"name":"gsubprocessflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",237,{"inputs":[{"name":"self"},{"name":"gsubprocessflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",237,{"inputs":[{"name":"self"}],"output":{"name":"gsubprocessflags"}}],[11,"extend","","",237,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",237,{"inputs":[{"name":"t"}],"output":{"name":"gsubprocessflags"}}],[11,"eq","","",238,{"inputs":[{"name":"self"},{"name":"gtestdbusflags"}],"output":{"name":"bool"}}],[11,"ne","","",238,{"inputs":[{"name":"self"},{"name":"gtestdbusflags"}],"output":{"name":"bool"}}],[11,"clone","","",238,{"inputs":[{"name":"self"}],"output":{"name":"gtestdbusflags"}}],[11,"partial_cmp","","",238,{"inputs":[{"name":"self"},{"name":"gtestdbusflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",238,{"inputs":[{"name":"self"},{"name":"gtestdbusflags"}],"output":{"name":"bool"}}],[11,"le","","",238,{"inputs":[{"name":"self"},{"name":"gtestdbusflags"}],"output":{"name":"bool"}}],[11,"gt","","",238,{"inputs":[{"name":"self"},{"name":"gtestdbusflags"}],"output":{"name":"bool"}}],[11,"ge","","",238,{"inputs":[{"name":"self"},{"name":"gtestdbusflags"}],"output":{"name":"bool"}}],[11,"cmp","","",238,{"inputs":[{"name":"self"},{"name":"gtestdbusflags"}],"output":{"name":"ordering"}}],[11,"hash","","",238,null],[11,"fmt","","",238,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",238,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",238,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",238,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",238,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",238,null],[11,"empty","","Returns an empty set of flags.",238,{"inputs":[],"output":{"name":"gtestdbusflags"}}],[11,"all","","Returns the set containing all flags.",238,{"inputs":[],"output":{"name":"gtestdbusflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",238,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",238,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gtestdbusflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",238,{"inputs":[{"name":"c_uint"}],"output":{"name":"gtestdbusflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",238,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",238,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",238,{"inputs":[{"name":"self"},{"name":"gtestdbusflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",238,{"inputs":[{"name":"self"},{"name":"gtestdbusflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",238,{"inputs":[{"name":"self"},{"name":"gtestdbusflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",238,{"inputs":[{"name":"self"},{"name":"gtestdbusflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",238,{"inputs":[{"name":"self"},{"name":"gtestdbusflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",238,{"inputs":[{"name":"self"},{"name":"gtestdbusflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",238,{"inputs":[{"name":"self"},{"name":"gtestdbusflags"}],"output":{"name":"gtestdbusflags"}}],[11,"bitor_assign","","Adds the set of flags.",238,{"inputs":[{"name":"self"},{"name":"gtestdbusflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",238,{"inputs":[{"name":"self"},{"name":"gtestdbusflags"}],"output":{"name":"gtestdbusflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",238,{"inputs":[{"name":"self"},{"name":"gtestdbusflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",238,{"inputs":[{"name":"self"},{"name":"gtestdbusflags"}],"output":{"name":"gtestdbusflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",238,{"inputs":[{"name":"self"},{"name":"gtestdbusflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",238,{"inputs":[{"name":"self"},{"name":"gtestdbusflags"}],"output":{"name":"gtestdbusflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",238,{"inputs":[{"name":"self"},{"name":"gtestdbusflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",238,{"inputs":[{"name":"self"}],"output":{"name":"gtestdbusflags"}}],[11,"extend","","",238,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",238,{"inputs":[{"name":"t"}],"output":{"name":"gtestdbusflags"}}],[11,"eq","","",239,{"inputs":[{"name":"self"},{"name":"gtlscertificateflags"}],"output":{"name":"bool"}}],[11,"ne","","",239,{"inputs":[{"name":"self"},{"name":"gtlscertificateflags"}],"output":{"name":"bool"}}],[11,"clone","","",239,{"inputs":[{"name":"self"}],"output":{"name":"gtlscertificateflags"}}],[11,"partial_cmp","","",239,{"inputs":[{"name":"self"},{"name":"gtlscertificateflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",239,{"inputs":[{"name":"self"},{"name":"gtlscertificateflags"}],"output":{"name":"bool"}}],[11,"le","","",239,{"inputs":[{"name":"self"},{"name":"gtlscertificateflags"}],"output":{"name":"bool"}}],[11,"gt","","",239,{"inputs":[{"name":"self"},{"name":"gtlscertificateflags"}],"output":{"name":"bool"}}],[11,"ge","","",239,{"inputs":[{"name":"self"},{"name":"gtlscertificateflags"}],"output":{"name":"bool"}}],[11,"cmp","","",239,{"inputs":[{"name":"self"},{"name":"gtlscertificateflags"}],"output":{"name":"ordering"}}],[11,"hash","","",239,null],[11,"fmt","","",239,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",239,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",239,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",239,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",239,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"UNKNOWN_CA","","",239,null],[18,"BAD_IDENTITY","","",239,null],[18,"NOT_ACTIVATED","","",239,null],[18,"EXPIRED","","",239,null],[18,"REVOKED","","",239,null],[18,"INSECURE","","",239,null],[18,"GENERIC_ERROR","","",239,null],[18,"VALIDATE_ALL","","",239,null],[11,"empty","","Returns an empty set of flags.",239,{"inputs":[],"output":{"name":"gtlscertificateflags"}}],[11,"all","","Returns the set containing all flags.",239,{"inputs":[],"output":{"name":"gtlscertificateflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",239,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",239,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gtlscertificateflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",239,{"inputs":[{"name":"c_uint"}],"output":{"name":"gtlscertificateflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",239,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",239,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",239,{"inputs":[{"name":"self"},{"name":"gtlscertificateflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",239,{"inputs":[{"name":"self"},{"name":"gtlscertificateflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",239,{"inputs":[{"name":"self"},{"name":"gtlscertificateflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",239,{"inputs":[{"name":"self"},{"name":"gtlscertificateflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",239,{"inputs":[{"name":"self"},{"name":"gtlscertificateflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",239,{"inputs":[{"name":"self"},{"name":"gtlscertificateflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",239,{"inputs":[{"name":"self"},{"name":"gtlscertificateflags"}],"output":{"name":"gtlscertificateflags"}}],[11,"bitor_assign","","Adds the set of flags.",239,{"inputs":[{"name":"self"},{"name":"gtlscertificateflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",239,{"inputs":[{"name":"self"},{"name":"gtlscertificateflags"}],"output":{"name":"gtlscertificateflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",239,{"inputs":[{"name":"self"},{"name":"gtlscertificateflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",239,{"inputs":[{"name":"self"},{"name":"gtlscertificateflags"}],"output":{"name":"gtlscertificateflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",239,{"inputs":[{"name":"self"},{"name":"gtlscertificateflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",239,{"inputs":[{"name":"self"},{"name":"gtlscertificateflags"}],"output":{"name":"gtlscertificateflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",239,{"inputs":[{"name":"self"},{"name":"gtlscertificateflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",239,{"inputs":[{"name":"self"}],"output":{"name":"gtlscertificateflags"}}],[11,"extend","","",239,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",239,{"inputs":[{"name":"t"}],"output":{"name":"gtlscertificateflags"}}],[11,"eq","","",240,{"inputs":[{"name":"self"},{"name":"gtlsdatabaseverifyflags"}],"output":{"name":"bool"}}],[11,"ne","","",240,{"inputs":[{"name":"self"},{"name":"gtlsdatabaseverifyflags"}],"output":{"name":"bool"}}],[11,"clone","","",240,{"inputs":[{"name":"self"}],"output":{"name":"gtlsdatabaseverifyflags"}}],[11,"partial_cmp","","",240,{"inputs":[{"name":"self"},{"name":"gtlsdatabaseverifyflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",240,{"inputs":[{"name":"self"},{"name":"gtlsdatabaseverifyflags"}],"output":{"name":"bool"}}],[11,"le","","",240,{"inputs":[{"name":"self"},{"name":"gtlsdatabaseverifyflags"}],"output":{"name":"bool"}}],[11,"gt","","",240,{"inputs":[{"name":"self"},{"name":"gtlsdatabaseverifyflags"}],"output":{"name":"bool"}}],[11,"ge","","",240,{"inputs":[{"name":"self"},{"name":"gtlsdatabaseverifyflags"}],"output":{"name":"bool"}}],[11,"cmp","","",240,{"inputs":[{"name":"self"},{"name":"gtlsdatabaseverifyflags"}],"output":{"name":"ordering"}}],[11,"hash","","",240,null],[11,"fmt","","",240,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",240,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",240,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",240,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",240,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",240,null],[11,"empty","","Returns an empty set of flags.",240,{"inputs":[],"output":{"name":"gtlsdatabaseverifyflags"}}],[11,"all","","Returns the set containing all flags.",240,{"inputs":[],"output":{"name":"gtlsdatabaseverifyflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",240,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",240,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gtlsdatabaseverifyflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",240,{"inputs":[{"name":"c_uint"}],"output":{"name":"gtlsdatabaseverifyflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",240,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",240,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",240,{"inputs":[{"name":"self"},{"name":"gtlsdatabaseverifyflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",240,{"inputs":[{"name":"self"},{"name":"gtlsdatabaseverifyflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",240,{"inputs":[{"name":"self"},{"name":"gtlsdatabaseverifyflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",240,{"inputs":[{"name":"self"},{"name":"gtlsdatabaseverifyflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",240,{"inputs":[{"name":"self"},{"name":"gtlsdatabaseverifyflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",240,{"inputs":[{"name":"self"},{"name":"gtlsdatabaseverifyflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",240,{"inputs":[{"name":"self"},{"name":"gtlsdatabaseverifyflags"}],"output":{"name":"gtlsdatabaseverifyflags"}}],[11,"bitor_assign","","Adds the set of flags.",240,{"inputs":[{"name":"self"},{"name":"gtlsdatabaseverifyflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",240,{"inputs":[{"name":"self"},{"name":"gtlsdatabaseverifyflags"}],"output":{"name":"gtlsdatabaseverifyflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",240,{"inputs":[{"name":"self"},{"name":"gtlsdatabaseverifyflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",240,{"inputs":[{"name":"self"},{"name":"gtlsdatabaseverifyflags"}],"output":{"name":"gtlsdatabaseverifyflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",240,{"inputs":[{"name":"self"},{"name":"gtlsdatabaseverifyflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",240,{"inputs":[{"name":"self"},{"name":"gtlsdatabaseverifyflags"}],"output":{"name":"gtlsdatabaseverifyflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",240,{"inputs":[{"name":"self"},{"name":"gtlsdatabaseverifyflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",240,{"inputs":[{"name":"self"}],"output":{"name":"gtlsdatabaseverifyflags"}}],[11,"extend","","",240,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",240,{"inputs":[{"name":"t"}],"output":{"name":"gtlsdatabaseverifyflags"}}],[11,"eq","","",241,{"inputs":[{"name":"self"},{"name":"gtlspasswordflags"}],"output":{"name":"bool"}}],[11,"ne","","",241,{"inputs":[{"name":"self"},{"name":"gtlspasswordflags"}],"output":{"name":"bool"}}],[11,"clone","","",241,{"inputs":[{"name":"self"}],"output":{"name":"gtlspasswordflags"}}],[11,"partial_cmp","","",241,{"inputs":[{"name":"self"},{"name":"gtlspasswordflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",241,{"inputs":[{"name":"self"},{"name":"gtlspasswordflags"}],"output":{"name":"bool"}}],[11,"le","","",241,{"inputs":[{"name":"self"},{"name":"gtlspasswordflags"}],"output":{"name":"bool"}}],[11,"gt","","",241,{"inputs":[{"name":"self"},{"name":"gtlspasswordflags"}],"output":{"name":"bool"}}],[11,"ge","","",241,{"inputs":[{"name":"self"},{"name":"gtlspasswordflags"}],"output":{"name":"bool"}}],[11,"cmp","","",241,{"inputs":[{"name":"self"},{"name":"gtlspasswordflags"}],"output":{"name":"ordering"}}],[11,"hash","","",241,null],[11,"fmt","","",241,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",241,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",241,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",241,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",241,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",241,null],[18,"RETRY","","",241,null],[18,"MANY_TRIES","","",241,null],[18,"FINAL_TRY","","",241,null],[11,"empty","","Returns an empty set of flags.",241,{"inputs":[],"output":{"name":"gtlspasswordflags"}}],[11,"all","","Returns the set containing all flags.",241,{"inputs":[],"output":{"name":"gtlspasswordflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",241,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",241,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gtlspasswordflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",241,{"inputs":[{"name":"c_uint"}],"output":{"name":"gtlspasswordflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",241,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",241,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",241,{"inputs":[{"name":"self"},{"name":"gtlspasswordflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",241,{"inputs":[{"name":"self"},{"name":"gtlspasswordflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",241,{"inputs":[{"name":"self"},{"name":"gtlspasswordflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",241,{"inputs":[{"name":"self"},{"name":"gtlspasswordflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",241,{"inputs":[{"name":"self"},{"name":"gtlspasswordflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",241,{"inputs":[{"name":"self"},{"name":"gtlspasswordflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",241,{"inputs":[{"name":"self"},{"name":"gtlspasswordflags"}],"output":{"name":"gtlspasswordflags"}}],[11,"bitor_assign","","Adds the set of flags.",241,{"inputs":[{"name":"self"},{"name":"gtlspasswordflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",241,{"inputs":[{"name":"self"},{"name":"gtlspasswordflags"}],"output":{"name":"gtlspasswordflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",241,{"inputs":[{"name":"self"},{"name":"gtlspasswordflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",241,{"inputs":[{"name":"self"},{"name":"gtlspasswordflags"}],"output":{"name":"gtlspasswordflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",241,{"inputs":[{"name":"self"},{"name":"gtlspasswordflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",241,{"inputs":[{"name":"self"},{"name":"gtlspasswordflags"}],"output":{"name":"gtlspasswordflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",241,{"inputs":[{"name":"self"},{"name":"gtlspasswordflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",241,{"inputs":[{"name":"self"}],"output":{"name":"gtlspasswordflags"}}],[11,"extend","","",241,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",241,{"inputs":[{"name":"t"}],"output":{"name":"gtlspasswordflags"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",242,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",243,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",244,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",245,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",246,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",247,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",248,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",249,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",250,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",251,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",252,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",253,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",254,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",255,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",256,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",257,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",258,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",259,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",260,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",261,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",262,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",263,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",264,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",265,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",266,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",267,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",268,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",269,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",270,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",271,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",272,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",273,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",274,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",275,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",276,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",277,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",278,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",279,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",280,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",281,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",282,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",283,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",284,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",285,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",286,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",287,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",288,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",289,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",290,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",291,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",292,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",293,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",294,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",295,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",297,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",298,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",299,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",300,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",301,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",302,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",303,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",304,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",305,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",306,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",307,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",309,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",310,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",311,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",312,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",313,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",314,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",315,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",316,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",317,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",318,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",319,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",320,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",321,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",322,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",123,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",323,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",324,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",325,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",326,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",327,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",328,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",329,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",130,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",131,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",330,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",331,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",137,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",332,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",138,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",139,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",333,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",334,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",335,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",336,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",140,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",337,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",338,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",339,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",141,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",142,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",143,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",144,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",145,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",340,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",146,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",147,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",341,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",342,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",148,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",149,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",150,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",343,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",344,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",151,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",152,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",153,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",345,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",154,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",155,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",346,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",156,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",157,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",158,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",159,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",160,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",347,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",161,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",162,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",348,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",163,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",349,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",164,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",165,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",166,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",167,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",168,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",169,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",350,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",170,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",171,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",351,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",172,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",173,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",174,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",175,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",176,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",352,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",177,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",353,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",354,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",355,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",178,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",179,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",180,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",181,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",182,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",183,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",184,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",185,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",186,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",356,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",357,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",358,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",187,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",188,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",359,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",360,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",189,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",190,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",191,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",192,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",193,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",194,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",195,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",196,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",197,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",198,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",199,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",361,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",200,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",201,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",202,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",203,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",362,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",363,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",364,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",365,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",366,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",367,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",368,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",369,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",370,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",371,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",372,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",373,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",374,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",375,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",376,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",377,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",378,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",379,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",380,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",381,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",382,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",383,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",384,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",385,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",386,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",387,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",388,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",389,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",390,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",391,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",392,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",393,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",394,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",395,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",396,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",397,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",398,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",399,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"GActionEntry"],[3,"GActionGroupInterface"],[3,"GActionInterface"],[3,"GActionMapInterface"],[3,"GAppInfoIface"],[3,"GAppLaunchContextClass"],[3,"GApplicationClass"],[3,"GApplicationCommandLineClass"],[3,"GAsyncInitableIface"],[3,"GAsyncResultIface"],[3,"GBufferedInputStreamClass"],[3,"GBufferedOutputStreamClass"],[3,"GCancellableClass"],[3,"GCharsetConverterClass"],[3,"GConverterIface"],[3,"GConverterInputStreamClass"],[3,"GConverterOutputStreamClass"],[3,"GDBusAnnotationInfo"],[3,"GDBusArgInfo"],[3,"GDBusErrorEntry"],[3,"GDBusInterfaceIface"],[3,"GDBusInterfaceInfo"],[3,"GDBusInterfaceSkeletonClass"],[3,"GDBusInterfaceVTable"],[3,"GDBusMethodInfo"],[3,"GDBusNodeInfo"],[3,"GDBusObjectIface"],[3,"GDBusObjectManagerClientClass"],[3,"GDBusObjectManagerIface"],[3,"GDBusObjectManagerServerClass"],[3,"GDBusObjectProxyClass"],[3,"GDBusObjectSkeletonClass"],[3,"GDBusPropertyInfo"],[3,"GDBusProxyClass"],[3,"GDBusSignalInfo"],[3,"GDBusSubtreeVTable"],[3,"GDataInputStreamClass"],[3,"GDataOutputStreamClass"],[3,"GDatagramBasedInterface"],[3,"GDesktopAppInfoClass"],[3,"GDesktopAppInfoLookupIface"],[3,"GDriveIface"],[3,"GDtlsClientConnectionInterface"],[3,"GDtlsConnectionInterface"],[3,"GDtlsServerConnectionInterface"],[3,"GEmblemedIconClass"],[3,"GFileAttributeInfo"],[3,"GFileAttributeInfoList"],[3,"GFileDescriptorBasedIface"],[3,"GFileEnumeratorClass"],[3,"GFileIOStreamClass"],[3,"GFileIface"],[3,"GFileInputStreamClass"],[3,"GFileMonitorClass"],[3,"GFileOutputStreamClass"],[3,"GFilenameCompleterClass"],[3,"GFilterInputStreamClass"],[3,"GFilterOutputStreamClass"],[3,"GIOStreamClass"],[3,"GIconIface"],[3,"GInetAddressClass"],[3,"GInetAddressMaskClass"],[3,"GInetSocketAddressClass"],[3,"GInitableIface"],[3,"GInputMessage"],[3,"GInputStreamClass"],[3,"GInputVector"],[3,"GListModelInterface"],[3,"GListStoreClass"],[3,"GLoadableIconIface"],[3,"GMemoryInputStreamClass"],[3,"GMemoryOutputStreamClass"],[3,"GMenuAttributeIterClass"],[3,"GMenuLinkIterClass"],[3,"GMenuModelClass"],[3,"GMountIface"],[3,"GMountOperationClass"],[3,"GNativeVolumeMonitorClass"],[3,"GNetworkAddressClass"],[3,"GNetworkMonitorInterface"],[3,"GNetworkServiceClass"],[3,"GOutputMessage"],[3,"GOutputStreamClass"],[3,"GOutputVector"],[3,"GPermissionClass"],[3,"GPollableInputStreamInterface"],[3,"GPollableOutputStreamInterface"],[3,"GProxyAddressClass"],[3,"GProxyAddressEnumeratorClass"],[3,"GProxyInterface"],[3,"GProxyResolverInterface"],[3,"GRemoteActionGroupInterface"],[3,"GResolverClass"],[3,"GSeekableIface"],[3,"GSettingsBackendClass"],[3,"GSettingsClass"],[3,"GSimpleActionGroupClass"],[3,"GSimpleProxyResolverClass"],[3,"GSocketAddressClass"],[3,"GSocketAddressEnumeratorClass"],[3,"GSocketClass"],[3,"GSocketClientClass"],[3,"GSocketConnectableIface"],[3,"GSocketConnectionClass"],[3,"GSocketControlMessageClass"],[3,"GSocketListenerClass"],[3,"GSocketServiceClass"],[3,"GStaticResource"],[3,"GTcpConnectionClass"],[3,"GTcpWrapperConnectionClass"],[3,"GThreadedSocketServiceClass"],[3,"GTlsBackendInterface"],[3,"GTlsCertificateClass"],[3,"GTlsClientConnectionInterface"],[3,"GTlsConnectionClass"],[3,"GTlsDatabaseClass"],[3,"GTlsFileDatabaseInterface"],[3,"GTlsInteractionClass"],[3,"GTlsPasswordClass"],[3,"GTlsServerConnectionInterface"],[3,"GUnixConnectionClass"],[3,"GUnixCredentialsMessageClass"],[3,"GUnixFDListClass"],[3,"GUnixFDMessageClass"],[3,"GUnixInputStreamClass"],[3,"GUnixOutputStreamClass"],[3,"GUnixSocketAddressClass"],[3,"GVfsClass"],[3,"GVolumeIface"],[3,"GVolumeMonitorClass"],[3,"GZlibCompressorClass"],[3,"GZlibDecompressorClass"],[3,"GAppLaunchContext"],[3,"GApplication"],[3,"GApplicationCommandLine"],[3,"GBufferedInputStream"],[3,"GBufferedOutputStream"],[3,"GCancellable"],[3,"GConverterInputStream"],[3,"GConverterOutputStream"],[3,"GDBusInterfaceSkeleton"],[3,"GDBusObjectManagerClient"],[3,"GDBusObjectManagerServer"],[3,"GDBusObjectProxy"],[3,"GDBusObjectSkeleton"],[3,"GDBusProxy"],[3,"GDataInputStream"],[3,"GDataOutputStream"],[3,"GEmblemedIcon"],[3,"GFileEnumerator"],[3,"GFileIOStream"],[3,"GFileInputStream"],[3,"GFileMonitor"],[3,"GFileOutputStream"],[3,"GFilterInputStream"],[3,"GFilterOutputStream"],[3,"GIOStream"],[3,"GInetAddress"],[3,"GInetAddressMask"],[3,"GInetSocketAddress"],[3,"GInputStream"],[3,"GMemoryInputStream"],[3,"GMemoryOutputStream"],[3,"GMenuAttributeIter"],[3,"GMenuLinkIter"],[3,"GMenuModel"],[3,"GMountOperation"],[3,"GNativeVolumeMonitor"],[3,"GNetworkAddress"],[3,"GNetworkService"],[3,"GOutputStream"],[3,"GPermission"],[3,"GProxyAddress"],[3,"GProxyAddressEnumerator"],[3,"GResolver"],[3,"GSettings"],[3,"GSettingsBackend"],[3,"GSimpleActionGroup"],[3,"GSimpleProxyResolver"],[3,"GSocket"],[3,"GSocketAddress"],[3,"GSocketAddressEnumerator"],[3,"GSocketClient"],[3,"GSocketConnection"],[3,"GSocketControlMessage"],[3,"GSocketListener"],[3,"GSocketService"],[3,"GTcpConnection"],[3,"GTcpWrapperConnection"],[3,"GThreadedSocketService"],[3,"GTlsCertificate"],[3,"GTlsConnection"],[3,"GTlsDatabase"],[3,"GTlsInteraction"],[3,"GTlsPassword"],[3,"GUnixConnection"],[3,"GUnixCredentialsMessage"],[3,"GUnixFDList"],[3,"GUnixFDMessage"],[3,"GUnixInputStream"],[3,"GUnixOutputStream"],[3,"GUnixSocketAddress"],[3,"GVfs"],[3,"GVolumeMonitor"],[3,"GAppInfoCreateFlags"],[3,"GApplicationFlags"],[3,"GAskPasswordFlags"],[3,"GBusNameOwnerFlags"],[3,"GBusNameWatcherFlags"],[3,"GConverterFlags"],[3,"GDBusCallFlags"],[3,"GDBusCapabilityFlags"],[3,"GDBusConnectionFlags"],[3,"GDBusInterfaceSkeletonFlags"],[3,"GDBusMessageFlags"],[3,"GDBusObjectManagerClientFlags"],[3,"GDBusPropertyInfoFlags"],[3,"GDBusProxyFlags"],[3,"GDBusSendMessageFlags"],[3,"GDBusServerFlags"],[3,"GDBusSignalFlags"],[3,"GDBusSubtreeFlags"],[3,"GDriveStartFlags"],[3,"GFileAttributeInfoFlags"],[3,"GFileCopyFlags"],[3,"GFileCreateFlags"],[3,"GFileMeasureFlags"],[3,"GFileMonitorFlags"],[3,"GFileQueryInfoFlags"],[3,"GIOStreamSpliceFlags"],[3,"GMountMountFlags"],[3,"GMountUnmountFlags"],[3,"GOutputStreamSpliceFlags"],[3,"GResourceFlags"],[3,"GResourceLookupFlags"],[3,"GSettingsBindFlags"],[3,"GSocketMsgFlags"],[3,"GSubprocessFlags"],[3,"GTestDBusFlags"],[3,"GTlsCertificateFlags"],[3,"GTlsDatabaseVerifyFlags"],[3,"GTlsPasswordFlags"],[3,"GAppLaunchContextPrivate"],[3,"GApplicationCommandLinePrivate"],[3,"GApplicationPrivate"],[3,"GBufferedInputStreamPrivate"],[3,"GBufferedOutputStreamPrivate"],[3,"GCancellablePrivate"],[3,"GConverterInputStreamPrivate"],[3,"GConverterOutputStreamPrivate"],[3,"GCredentialsClass"],[3,"GDBusInterfaceSkeletonPrivate"],[3,"GDBusObjectManagerClientPrivate"],[3,"GDBusObjectManagerServerPrivate"],[3,"GDBusObjectProxyPrivate"],[3,"GDBusObjectSkeletonPrivate"],[3,"GDBusProxyPrivate"],[3,"GDataInputStreamPrivate"],[3,"GDataOutputStreamPrivate"],[3,"GEmblemClass"],[3,"GEmblemedIconPrivate"],[3,"GFileAttributeMatcher"],[3,"GFileEnumeratorPrivate"],[3,"GFileIOStreamPrivate"],[3,"GFileIconClass"],[3,"GFileInfoClass"],[3,"GFileInputStreamPrivate"],[3,"GFileMonitorPrivate"],[3,"GFileOutputStreamPrivate"],[3,"GIOExtension"],[3,"GIOExtensionPoint"],[3,"GIOModuleClass"],[3,"GIOModuleScope"],[3,"GIOSchedulerJob"],[3,"GIOStreamAdapter"],[3,"GIOStreamPrivate"],[3,"GInetAddressMaskPrivate"],[3,"GInetAddressPrivate"],[3,"GInetSocketAddressPrivate"],[3,"GInputStreamPrivate"],[3,"GMemoryInputStreamPrivate"],[3,"GMemoryOutputStreamPrivate"],[3,"GMenuAttributeIterPrivate"],[3,"GMenuLinkIterPrivate"],[3,"GMenuModelPrivate"],[3,"GMountOperationPrivate"],[3,"GNativeSocketAddress"],[3,"GNetworkAddressPrivate"],[3,"GNetworkServicePrivate"],[3,"GOutputStreamPrivate"],[3,"GPermissionPrivate"],[3,"GProxyAddressEnumeratorPrivate"],[3,"GProxyAddressPrivate"],[3,"GResolverPrivate"],[3,"GResource"],[3,"GSettingsBackendPrivate"],[3,"GSettingsPrivate"],[3,"GSettingsSchema"],[3,"GSettingsSchemaKey"],[3,"GSettingsSchemaSource"],[3,"GSimpleActionGroupPrivate"],[3,"GSimpleAsyncResultClass"],[3,"GSimpleProxyResolverPrivate"],[3,"GSocketClientPrivate"],[3,"GSocketConnectionPrivate"],[3,"GSocketControlMessagePrivate"],[3,"GSocketListenerPrivate"],[3,"GSocketPrivate"],[3,"GSocketServicePrivate"],[3,"GSrvTarget"],[3,"GTaskClass"],[3,"GTcpConnectionPrivate"],[3,"GTcpWrapperConnectionPrivate"],[3,"GThemedIconClass"],[3,"GThreadedSocketServicePrivate"],[3,"GTlsCertificatePrivate"],[3,"GTlsConnectionPrivate"],[3,"GTlsDatabasePrivate"],[3,"GTlsInteractionPrivate"],[3,"GTlsPasswordPrivate"],[3,"GUnixConnectionPrivate"],[3,"GUnixCredentialsMessagePrivate"],[3,"GUnixFDListPrivate"],[3,"GUnixFDMessagePrivate"],[3,"GUnixInputStreamPrivate"],[3,"GUnixMountEntry"],[3,"GUnixMountMonitorClass"],[3,"GUnixMountPoint"],[3,"GUnixOutputStreamPrivate"],[3,"GUnixSocketAddressPrivate"],[3,"GAppInfoMonitor"],[3,"GBytesIcon"],[3,"GCharsetConverter"],[3,"GCredentials"],[3,"GDBusActionGroup"],[3,"GDBusAuthObserver"],[3,"GDBusConnection"],[3,"GDBusMenuModel"],[3,"GDBusMessage"],[3,"GDBusMethodInvocation"],[3,"GDBusServer"],[3,"GDesktopAppInfo"],[3,"GEmblem"],[3,"GFileIcon"],[3,"GFileInfo"],[3,"GFilenameCompleter"],[3,"GIOModule"],[3,"GListStore"],[3,"GMenu"],[3,"GMenuItem"],[3,"GNotification"],[3,"GPropertyAction"],[3,"GSimpleAction"],[3,"GSimpleAsyncResult"],[3,"GSimpleIOStream"],[3,"GSimplePermission"],[3,"GSubprocess"],[3,"GSubprocessLauncher"],[3,"GTask"],[3,"GTestDBus"],[3,"GThemedIcon"],[3,"GUnixMountMonitor"],[3,"GZlibCompressor"],[3,"GZlibDecompressor"],[3,"GAction"],[3,"GActionGroup"],[3,"GActionMap"],[3,"GAppInfo"],[3,"GAsyncInitable"],[3,"GAsyncResult"],[3,"GConverter"],[3,"GDBusInterface"],[3,"GDBusObject"],[3,"GDBusObjectManager"],[3,"GDatagramBased"],[3,"GDesktopAppInfoLookup"],[3,"GDrive"],[3,"GDtlsClientConnection"],[3,"GDtlsConnection"],[3,"GDtlsServerConnection"],[3,"GFile"],[3,"GFileDescriptorBased"],[3,"GIcon"],[3,"GInitable"],[3,"GListModel"],[3,"GLoadableIcon"],[3,"GMount"],[3,"GNetworkMonitor"],[3,"GPollableInputStream"],[3,"GPollableOutputStream"],[3,"GProxy"],[3,"GProxyResolver"],[3,"GRemoteActionGroup"],[3,"GSeekable"],[3,"GSocketConnectable"],[3,"GTlsBackend"],[3,"GTlsClientConnection"],[3,"GTlsFileDatabase"],[3,"GTlsServerConnection"],[3,"GVolume"]]};
searchIndex["glib"] = {"doc":"glib, gobject and gio bindings for Rust","items":[[3,"TimeVal","glib","",null,null],[12,"tv_sec","","",0,null],[12,"tv_usec","","",0,null],[3,"Bytes","","A shared immutable byte slice (the equivalent of `Rc<[u8]>`).",null,null],[3,"VariantTy","","Describes `Variant` types.",null,null],[3,"VariantType","","Describes `Variant` types.",null,null],[3,"EnumClass","","Representation of an `enum` for dynamically, at runtime, querying the values of the enum and using them.",null,null],[3,"EnumValue","","Representation of a single enum value of an `EnumClass`.",null,null],[3,"FlagsClass","","Representation of a `flags` for dynamically, at runtime, querying the values of the enum and using them",null,null],[3,"FlagsValue","","Representation of a single flags value of a `FlagsClass`.",null,null],[3,"FlagsBuilder","","Builder for conveniently setting/unsetting flags and returning a `Value`.",null,null],[3,"KEY_FILE_DESKTOP_GROUP","","",null,null],[3,"KEY_FILE_DESKTOP_KEY_ACTIONS","","",null,null],[3,"KEY_FILE_DESKTOP_KEY_CATEGORIES","","",null,null],[3,"KEY_FILE_DESKTOP_KEY_COMMENT","","",null,null],[3,"KEY_FILE_DESKTOP_KEY_DBUS_ACTIVATABLE","","",null,null],[3,"KEY_FILE_DESKTOP_KEY_EXEC","","",null,null],[3,"KEY_FILE_DESKTOP_KEY_FULLNAME","","",null,null],[3,"KEY_FILE_DESKTOP_KEY_GENERIC_NAME","","",null,null],[3,"KEY_FILE_DESKTOP_KEY_GETTEXT_DOMAIN","","",null,null],[3,"KEY_FILE_DESKTOP_KEY_HIDDEN","","",null,null],[3,"KEY_FILE_DESKTOP_KEY_ICON","","",null,null],[3,"KEY_FILE_DESKTOP_KEY_KEYWORDS","","",null,null],[3,"KEY_FILE_DESKTOP_KEY_MIME_TYPE","","",null,null],[3,"KEY_FILE_DESKTOP_KEY_NAME","","",null,null],[3,"KEY_FILE_DESKTOP_KEY_NOT_SHOW_IN","","",null,null],[3,"KEY_FILE_DESKTOP_KEY_NO_DISPLAY","","",null,null],[3,"KEY_FILE_DESKTOP_KEY_ONLY_SHOW_IN","","",null,null],[3,"KEY_FILE_DESKTOP_KEY_PATH","","",null,null],[3,"KEY_FILE_DESKTOP_KEY_STARTUP_NOTIFY","","",null,null],[3,"KEY_FILE_DESKTOP_KEY_STARTUP_WM_CLASS","","",null,null],[3,"KEY_FILE_DESKTOP_KEY_TERMINAL","","",null,null],[3,"KEY_FILE_DESKTOP_KEY_TRY_EXEC","","",null,null],[3,"KEY_FILE_DESKTOP_KEY_TYPE","","",null,null],[3,"KEY_FILE_DESKTOP_KEY_URL","","",null,null],[3,"KEY_FILE_DESKTOP_KEY_VERSION","","",null,null],[3,"KEY_FILE_DESKTOP_TYPE_APPLICATION","","",null,null],[3,"KEY_FILE_DESKTOP_TYPE_DIRECTORY","","",null,null],[3,"KEY_FILE_DESKTOP_TYPE_LINK","","",null,null],[3,"Checksum","","",null,null],[3,"DateTime","","",null,null],[3,"KeyFile","","",null,null],[3,"MainContext","","",null,null],[3,"MainLoop","","",null,null],[3,"Source","","",null,null],[3,"TimeZone","","",null,null],[3,"FormatSizeFlags","","",null,null],[3,"KeyFileFlags","","",null,null],[3,"Date","","",null,null],[4,"FileError","","",null,null],[13,"Exist","","",1,null],[13,"Isdir","","",1,null],[13,"Acces","","",1,null],[13,"Nametoolong","","",1,null],[13,"Noent","","",1,null],[13,"Notdir","","",1,null],[13,"Nxio","","",1,null],[13,"Nodev","","",1,null],[13,"Rofs","","",1,null],[13,"Txtbsy","","",1,null],[13,"Fault","","",1,null],[13,"Loop","","",1,null],[13,"Nospc","","",1,null],[13,"Nomem","","",1,null],[13,"Mfile","","",1,null],[13,"Nfile","","",1,null],[13,"Badf","","",1,null],[13,"Inval","","",1,null],[13,"Pipe","","",1,null],[13,"Again","","",1,null],[13,"Intr","","",1,null],[13,"Io","","",1,null],[13,"Perm","","",1,null],[13,"Nosys","","",1,null],[13,"Failed","","",1,null],[4,"UserDirectory","","",null,null],[13,"Desktop","","",2,null],[13,"Documents","","",2,null],[13,"Downloads","","",2,null],[13,"Music","","",2,null],[13,"Pictures","","",2,null],[13,"PublicShare","","",2,null],[13,"Templates","","",2,null],[13,"Videos","","",2,null],[4,"ChecksumType","","",null,null],[13,"Md5","","",3,null],[13,"Sha1","","",3,null],[13,"Sha256","","",3,null],[13,"Sha512","","",3,null],[13,"Sha384","","",3,null],[4,"DateMonth","","",null,null],[13,"BadMonth","","",4,null],[13,"January","","",4,null],[13,"February","","",4,null],[13,"March","","",4,null],[13,"April","","",4,null],[13,"May","","",4,null],[13,"June","","",4,null],[13,"July","","",4,null],[13,"August","","",4,null],[13,"September","","",4,null],[13,"October","","",4,null],[13,"November","","",4,null],[13,"December","","",4,null],[4,"DateWeekday","","",null,null],[13,"BadWeekday","","",5,null],[13,"Monday","","",5,null],[13,"Tuesday","","",5,null],[13,"Wednesday","","",5,null],[13,"Thursday","","",5,null],[13,"Friday","","",5,null],[13,"Saturday","","",5,null],[13,"Sunday","","",5,null],[4,"KeyFileError","","",null,null],[13,"UnknownEncoding","","",6,null],[13,"Parse","","",6,null],[13,"NotFound","","",6,null],[13,"KeyNotFound","","",6,null],[13,"GroupNotFound","","",6,null],[13,"InvalidValue","","",6,null],[4,"TimeType","","",null,null],[13,"Standard","","",7,null],[13,"Daylight","","",7,null],[13,"Universal","","",7,null],[5,"get_current_time","","",null,{"inputs":[],"output":{"name":"timeval"}}],[5,"access","","",null,{"inputs":[{"name":"p"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"assert_warning","","",null,{"inputs":[{"name":"str"},{"name":"str"},{"name":"i32"},{"name":"str"},{"name":"str"}],"output":null}],[5,"assertion_message","","",null,{"inputs":[{"name":"str"},{"name":"str"},{"name":"i32"},{"name":"str"},{"name":"str"}],"output":null}],[5,"assertion_message_cmpstr","","",null,{"inputs":[{"name":"str"},{"name":"str"},{"name":"i32"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":null}],[5,"assertion_message_expr","","",null,{"inputs":[{"name":"p"},{"name":"str"},{"name":"i32"},{"name":"str"},{"name":"q"}],"output":null}],[5,"base64_decode","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["u8"],"name":"vec"}}],[5,"base64_encode","","",null,null],[5,"basename","","",null,{"inputs":[{"name":"p"}],"output":{"generics":["pathbuf"],"name":"option"}}],[5,"bit_nth_lsf","","",null,{"inputs":[{"name":"c_ulong"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"bit_nth_msf","","",null,{"inputs":[{"name":"c_ulong"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"bit_storage","","",null,{"inputs":[{"name":"c_ulong"}],"output":{"name":"u32"}}],[5,"build_filenamev","","",null,null],[5,"build_pathv","","",null,null],[5,"chdir","","",null,{"inputs":[{"name":"p"}],"output":{"name":"i32"}}],[5,"check_version","","",null,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["string"],"name":"option"}}],[5,"clear_error","","",null,{"inputs":[],"output":{"generics":["error"],"name":"result"}}],[5,"close","","",null,{"inputs":[{"name":"i32"}],"output":{"generics":["error"],"name":"result"}}],[5,"compute_checksum_for_bytes","","",null,{"inputs":[{"name":"checksumtype"},{"name":"bytes"}],"output":{"generics":["string"],"name":"option"}}],[5,"compute_checksum_for_data","","",null,null],[5,"compute_checksum_for_string","","",null,{"inputs":[{"name":"checksumtype"},{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[5,"compute_hmac_for_bytes","","",null,{"inputs":[{"name":"checksumtype"},{"name":"bytes"},{"name":"bytes"}],"output":{"generics":["string"],"name":"option"}}],[5,"compute_hmac_for_data","","",null,null],[5,"compute_hmac_for_string","","",null,null],[5,"dcgettext","","",null,{"inputs":[{"name":"p"},{"name":"str"},{"name":"i32"}],"output":{"generics":["string"],"name":"option"}}],[5,"dgettext","","",null,{"inputs":[{"name":"p"},{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[5,"dngettext","","",null,{"inputs":[{"name":"p"},{"name":"str"},{"name":"str"},{"name":"c_ulong"}],"output":{"generics":["string"],"name":"option"}}],[5,"dpgettext","","",null,{"inputs":[{"name":"p"},{"name":"str"},{"name":"usize"}],"output":{"generics":["string"],"name":"option"}}],[5,"dpgettext2","","",null,{"inputs":[{"name":"p"},{"name":"str"},{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[5,"environ_getenv","","",null,null],[5,"environ_setenv","","",null,null],[5,"environ_unsetenv","","",null,null],[5,"file_get_contents","","",null,{"inputs":[{"name":"p"}],"output":{"generics":["vec","error"],"name":"result"}}],[5,"file_open_tmp","","",null,{"inputs":[{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[5,"file_read_link","","",null,{"inputs":[{"name":"p"}],"output":{"generics":["pathbuf","error"],"name":"result"}}],[5,"file_set_contents","","",null,null],[5,"filename_display_basename","","",null,{"inputs":[{"name":"p"}],"output":{"generics":["string"],"name":"option"}}],[5,"filename_display_name","","",null,{"inputs":[{"name":"p"}],"output":{"generics":["string"],"name":"option"}}],[5,"format_size","","",null,{"inputs":[{"name":"u64"}],"output":{"generics":["string"],"name":"option"}}],[5,"format_size_for_display","","",null,{"inputs":[{"name":"i64"}],"output":{"generics":["string"],"name":"option"}}],[5,"format_size_full","","",null,{"inputs":[{"name":"u64"},{"name":"formatsizeflags"}],"output":{"generics":["string"],"name":"option"}}],[5,"get_application_name","","",null,{"inputs":[],"output":{"generics":["string"],"name":"option"}}],[5,"get_charset","","",null,{"inputs":[],"output":{"generics":["string"],"name":"option"}}],[5,"get_codeset","","",null,{"inputs":[],"output":{"generics":["string"],"name":"option"}}],[5,"get_environ","","",null,{"inputs":[],"output":{"generics":["string"],"name":"vec"}}],[5,"get_host_name","","",null,{"inputs":[],"output":{"generics":["string"],"name":"option"}}],[5,"get_language_names","","",null,{"inputs":[],"output":{"generics":["string"],"name":"vec"}}],[5,"get_locale_variants","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["string"],"name":"vec"}}],[5,"get_monotonic_time","","",null,{"inputs":[],"output":{"name":"i64"}}],[5,"get_num_processors","","",null,{"inputs":[],"output":{"name":"u32"}}],[5,"get_real_time","","",null,{"inputs":[],"output":{"name":"i64"}}],[5,"get_system_config_dirs","","",null,{"inputs":[],"output":{"generics":["pathbuf"],"name":"vec"}}],[5,"get_system_data_dirs","","",null,{"inputs":[],"output":{"generics":["pathbuf"],"name":"vec"}}],[5,"get_user_cache_dir","","",null,{"inputs":[],"output":{"generics":["pathbuf"],"name":"option"}}],[5,"get_user_config_dir","","",null,{"inputs":[],"output":{"generics":["pathbuf"],"name":"option"}}],[5,"get_user_data_dir","","",null,{"inputs":[],"output":{"generics":["pathbuf"],"name":"option"}}],[5,"get_user_runtime_dir","","",null,{"inputs":[],"output":{"generics":["pathbuf"],"name":"option"}}],[5,"get_user_special_dir","","",null,{"inputs":[{"name":"userdirectory"}],"output":{"generics":["pathbuf"],"name":"option"}}],[5,"hostname_is_ascii_encoded","","",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"hostname_is_ip_address","","",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"hostname_is_non_ascii","","",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"hostname_to_ascii","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[5,"hostname_to_unicode","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[5,"intern_static_string","","",null,{"inputs":[{"name":"p"}],"output":{"generics":["string"],"name":"option"}}],[5,"intern_string","","",null,{"inputs":[{"name":"p"}],"output":{"generics":["string"],"name":"option"}}],[5,"listenv","","",null,{"inputs":[],"output":{"generics":["string"],"name":"vec"}}],[5,"log_remove_handler","","",null,{"inputs":[{"name":"str"},{"name":"u32"}],"output":null}],[5,"log_writer_is_journald","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"bool"}}],[5,"log_writer_supports_color","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"bool"}}],[5,"main_current_source","","",null,{"inputs":[],"output":{"generics":["source"],"name":"option"}}],[5,"main_depth","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"mem_is_system_malloc","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"mem_profile","","",null,{"inputs":[],"output":null}],[5,"mkdir_with_parents","","",null,{"inputs":[{"name":"p"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"mkdtemp","","",null,{"inputs":[{"name":"p"}],"output":{"generics":["pathbuf"],"name":"option"}}],[5,"mkdtemp_full","","",null,{"inputs":[{"name":"p"},{"name":"i32"}],"output":{"generics":["pathbuf"],"name":"option"}}],[5,"mkstemp_full","","",null,{"inputs":[{"name":"p"},{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"on_error_query","","",null,{"inputs":[{"name":"str"}],"output":null}],[5,"on_error_stack_trace","","",null,{"inputs":[{"name":"str"}],"output":null}],[5,"path_get_basename","","",null,{"inputs":[{"name":"p"}],"output":{"generics":["pathbuf"],"name":"option"}}],[5,"path_get_dirname","","",null,{"inputs":[{"name":"p"}],"output":{"generics":["pathbuf"],"name":"option"}}],[5,"path_is_absolute","","",null,{"inputs":[{"name":"p"}],"output":{"name":"bool"}}],[5,"path_skip_root","","",null,{"inputs":[{"name":"p"}],"output":{"generics":["pathbuf"],"name":"option"}}],[5,"pattern_match_simple","","",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"bool"}}],[5,"random_double","","",null,{"inputs":[],"output":{"name":"f64"}}],[5,"random_double_range","","",null,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"random_int","","",null,{"inputs":[],"output":{"name":"u32"}}],[5,"random_int_range","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"random_set_seed","","",null,{"inputs":[{"name":"u32"}],"output":null}],[5,"reload_user_special_dirs_cache","","",null,{"inputs":[],"output":null}],[5,"return_if_fail_warning","","",null,{"inputs":[{"name":"p"},{"name":"str"},{"name":"q"}],"output":null}],[5,"rmdir","","",null,{"inputs":[{"name":"p"}],"output":{"name":"i32"}}],[5,"set_application_name","","",null,{"inputs":[{"name":"str"}],"output":null}],[5,"shell_parse_argv","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["vec","error"],"name":"result"}}],[5,"shell_quote","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[5,"shell_unquote","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["string","error"],"name":"result"}}],[5,"spaced_primes_closest","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"spawn_check_exit_status","","",null,{"inputs":[{"name":"i32"}],"output":{"generics":["error"],"name":"result"}}],[5,"spawn_command_line_async","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[5,"stpcpy","","",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[5,"test_assert_expected_messages_internal","","",null,{"inputs":[{"name":"str"},{"name":"str"},{"name":"i32"},{"name":"str"}],"output":null}],[5,"test_bug","","",null,{"inputs":[{"name":"str"}],"output":null}],[5,"test_bug_base","","",null,{"inputs":[{"name":"str"}],"output":null}],[5,"test_fail","","",null,{"inputs":[],"output":null}],[5,"test_failed","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"test_incomplete","","",null,{"inputs":[{"name":"p"}],"output":null}],[5,"test_rand_double","","",null,{"inputs":[],"output":{"name":"f64"}}],[5,"test_rand_double_range","","",null,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"test_rand_int","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"test_rand_int_range","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"test_run","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"test_set_nonfatal_assertions","","",null,{"inputs":[],"output":null}],[5,"test_skip","","",null,{"inputs":[{"name":"p"}],"output":null}],[5,"test_subprocess","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"test_timer_elapsed","","",null,{"inputs":[],"output":{"name":"f64"}}],[5,"test_timer_last","","",null,{"inputs":[],"output":{"name":"f64"}}],[5,"test_timer_start","","",null,{"inputs":[],"output":null}],[5,"test_trap_assertions","","",null,{"inputs":[{"name":"str"},{"name":"str"},{"name":"i32"},{"name":"str"},{"name":"u64"},{"name":"str"}],"output":null}],[5,"test_trap_has_passed","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"test_trap_reached_timeout","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"unix_set_fd_nonblocking","","",null,{"inputs":[{"name":"i32"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[5,"unlink","","",null,{"inputs":[{"name":"p"}],"output":{"name":"i32"}}],[5,"uri_escape_string","","",null,{"inputs":[{"name":"str"},{"name":"p"},{"name":"bool"}],"output":{"generics":["string"],"name":"option"}}],[5,"uri_list_extract_uris","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["string"],"name":"vec"}}],[5,"uri_parse_scheme","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[5,"uri_unescape_segment","","",null,{"inputs":[{"name":"p"},{"name":"q"},{"name":"r"}],"output":{"generics":["string"],"name":"option"}}],[5,"uri_unescape_string","","",null,{"inputs":[{"name":"str"},{"name":"p"}],"output":{"generics":["string"],"name":"option"}}],[5,"usleep","","",null,{"inputs":[{"name":"c_ulong"}],"output":null}],[5,"uuid_string_is_valid","","",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"uuid_string_random","","",null,{"inputs":[],"output":{"generics":["string"],"name":"option"}}],[5,"variant_get_gtype","","",null,{"inputs":[],"output":{"name":"type"}}],[5,"warn_message","","",null,{"inputs":[{"name":"p"},{"name":"str"},{"name":"i32"},{"name":"str"},{"name":"q"}],"output":null}],[5,"get_program_name","","Same as [`get_prgname()`].",null,{"inputs":[],"output":{"generics":["string"],"name":"option"}}],[5,"get_prgname","","",null,{"inputs":[],"output":{"generics":["string"],"name":"option"}}],[5,"set_program_name","","Same as [`set_prgname()`].",null,{"inputs":[{"generics":["str"],"name":"option"}],"output":null}],[5,"set_prgname","","",null,{"inputs":[{"generics":["str"],"name":"option"}],"output":null}],[5,"getenv","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[5,"setenv","","",null,{"inputs":[{"name":"str"},{"name":"str"},{"name":"bool"}],"output":{"generics":["boolerror"],"name":"result"}}],[5,"unsetenv","","",null,{"inputs":[{"name":"str"}],"output":null}],[5,"get_user_name","","",null,{"inputs":[],"output":{"generics":["string"],"name":"option"}}],[5,"get_real_name","","",null,{"inputs":[],"output":{"generics":["pathbuf"],"name":"option"}}],[5,"get_current_dir","","",null,{"inputs":[],"output":{"generics":["pathbuf"],"name":"option"}}],[5,"filename_to_uri","","",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"generics":["string","error"],"name":"result"}}],[5,"filename_from_uri","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[5,"find_program_in_path","","",null,{"inputs":[{"name":"p"}],"output":{"generics":["pathbuf"],"name":"option"}}],[5,"get_home_dir","","",null,{"inputs":[],"output":{"generics":["pathbuf"],"name":"option"}}],[5,"get_tmp_dir","","",null,{"inputs":[],"output":{"generics":["pathbuf"],"name":"option"}}],[5,"mkstemp","","",null,{"inputs":[{"name":"p"}],"output":{"name":"i32"}}],[0,"wrapper","","`IMPL` The `glib_wrapper!` macro and miscellaneous wrapper traits.",null,null],[6,"Void","glib::wrapper","",null,null],[8,"Wrapper","","Represents a pair of structures (instance, class) as exposed by descendants of GObject",null,null],[16,"GlibType","","type of the Instance structure",8,null],[16,"GlibClassType","","type of the Class structure",8,null],[8,"UnsafeFrom","","",null,null],[10,"from","","",9,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"boxed","glib","`IMPL` Boxed wrapper implementation.",null,null],[3,"Boxed","glib::boxed","Encapsulates memory management logic for boxed types.",null,null],[8,"BoxedMemoryManager","","Memory management functions for a boxed type.",null,null],[10,"copy","","Makes a copy.",10,null],[10,"free","","Frees the object.",10,null],[11,"uninitialized","","",11,{"inputs":[],"output":{"name":"self"}}],[11,"uninitialized","","",11,{"inputs":[],"output":{"name":"self"}}],[11,"to_glib_none","","",11,{"inputs":[{"name":"self"}],"output":{"name":"stash"}}],[11,"to_glib_full","","",11,null],[11,"to_glib_none_mut","","",11,{"inputs":[{"name":"self"}],"output":{"name":"stashmut"}}],[11,"from_glib_none","","",11,null],[11,"from_glib_full","","",11,null],[11,"from_glib_borrow","","",11,null],[11,"drop","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"deref","","",11,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",11,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[0,"shared","glib","`IMPL` Shared (reference counted) wrapper implementation.",null,null],[3,"Shared","glib::shared","Encapsulates memory management logic for shared types.",null,null],[8,"SharedMemoryManager","","",null,null],[10,"ref_","","",12,null],[10,"unref","","",12,null],[11,"drop","","",13,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",13,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_glib_none","","",13,{"inputs":[{"name":"self"}],"output":{"name":"stash"}}],[11,"to_glib_full","","",13,null],[11,"from_glib_none","","",13,null],[11,"from_glib_full","","",13,null],[11,"from_glib_borrow","","",13,null],[0,"object","glib","`IMPL` Object wrapper implementation and `Object` binding.",null,null],[3,"Object","glib::object","The base class in the object hierarchy.",null,null],[3,"WeakRef","","",null,null],[8,"Cast","","Upcasting and downcasting support.",null,null],[11,"upcast","","Upcasts an object to a superclass or interface `T`.",14,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"downcast","","Tries to downcast to a subclass or interface implementor `T`.",14,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"is","","Returns `true` if the object is an instance of (can be cast to) `T`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"dynamic_cast","","Tries to cast to an object of type `T`. This handles upcasting, downcasting and casting between interface and interface implementors. All checks are performed at runtime, while `downcast` and `upcast` will do many checks at compile-time already.",14,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"IsA","","Declares the \"is a\" relationship.",null,null],[8,"Downcast","","Downcasts support.",null,null],[10,"can_downcast","","Checks if it's possible to downcast to `T`.",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"downcast","","Tries to downcast to `T`.",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"downcast_unchecked","","Downcasts to `T` unconditionally.",15,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"ObjectExt","","",null,null],[10,"get_type","","",16,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[10,"set_property","","",16,{"inputs":[{"name":"self"},{"name":"n"},{"name":"tovalue"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"get_property","","",16,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"generics":["value","boolerror"],"name":"result"}}],[10,"has_property","","",16,{"inputs":[{"name":"self"},{"name":"n"},{"generics":["type"],"name":"option"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"get_property_type","","",16,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"generics":["type"],"name":"option"}}],[10,"block_signal","","",16,{"inputs":[{"name":"self"},{"name":"signalhandlerid"}],"output":null}],[10,"unblock_signal","","",16,{"inputs":[{"name":"self"},{"name":"signalhandlerid"}],"output":null}],[10,"stop_signal_emission","","",16,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"connect","","",16,{"inputs":[{"name":"self"},{"name":"n"},{"name":"bool"},{"name":"f"}],"output":{"generics":["signalhandlerid","boolerror"],"name":"result"}}],[10,"emit","","",16,null],[10,"disconnect","","",16,{"inputs":[{"name":"self"},{"name":"signalhandlerid"}],"output":null}],[10,"downgrade","","",16,{"inputs":[{"name":"self"}],"output":{"name":"weakref"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"object"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",17,null],[11,"static_type","","",17,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"upgrade","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",18,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[0,"functions","glib","",null,null],[5,"access","glib::functions","",null,{"inputs":[{"name":"p"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"assert_warning","","",null,{"inputs":[{"name":"str"},{"name":"str"},{"name":"i32"},{"name":"str"},{"name":"str"}],"output":null}],[5,"assertion_message","","",null,{"inputs":[{"name":"str"},{"name":"str"},{"name":"i32"},{"name":"str"},{"name":"str"}],"output":null}],[5,"assertion_message_cmpstr","","",null,{"inputs":[{"name":"str"},{"name":"str"},{"name":"i32"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":null}],[5,"assertion_message_expr","","",null,{"inputs":[{"name":"p"},{"name":"str"},{"name":"i32"},{"name":"str"},{"name":"q"}],"output":null}],[5,"base64_decode","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["u8"],"name":"vec"}}],[5,"base64_encode","","",null,null],[5,"basename","","",null,{"inputs":[{"name":"p"}],"output":{"generics":["pathbuf"],"name":"option"}}],[5,"bit_nth_lsf","","",null,{"inputs":[{"name":"c_ulong"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"bit_nth_msf","","",null,{"inputs":[{"name":"c_ulong"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"bit_storage","","",null,{"inputs":[{"name":"c_ulong"}],"output":{"name":"u32"}}],[5,"build_filenamev","","",null,null],[5,"build_pathv","","",null,null],[5,"chdir","","",null,{"inputs":[{"name":"p"}],"output":{"name":"i32"}}],[5,"check_version","","",null,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["string"],"name":"option"}}],[5,"clear_error","","",null,{"inputs":[],"output":{"generics":["error"],"name":"result"}}],[5,"close","","",null,{"inputs":[{"name":"i32"}],"output":{"generics":["error"],"name":"result"}}],[5,"compute_checksum_for_bytes","","",null,{"inputs":[{"name":"checksumtype"},{"name":"bytes"}],"output":{"generics":["string"],"name":"option"}}],[5,"compute_checksum_for_data","","",null,null],[5,"compute_checksum_for_string","","",null,{"inputs":[{"name":"checksumtype"},{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[5,"compute_hmac_for_bytes","","",null,{"inputs":[{"name":"checksumtype"},{"name":"bytes"},{"name":"bytes"}],"output":{"generics":["string"],"name":"option"}}],[5,"compute_hmac_for_data","","",null,null],[5,"compute_hmac_for_string","","",null,null],[5,"dcgettext","","",null,{"inputs":[{"name":"p"},{"name":"str"},{"name":"i32"}],"output":{"generics":["string"],"name":"option"}}],[5,"dgettext","","",null,{"inputs":[{"name":"p"},{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[5,"dngettext","","",null,{"inputs":[{"name":"p"},{"name":"str"},{"name":"str"},{"name":"c_ulong"}],"output":{"generics":["string"],"name":"option"}}],[5,"dpgettext","","",null,{"inputs":[{"name":"p"},{"name":"str"},{"name":"usize"}],"output":{"generics":["string"],"name":"option"}}],[5,"dpgettext2","","",null,{"inputs":[{"name":"p"},{"name":"str"},{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[5,"environ_getenv","","",null,null],[5,"environ_setenv","","",null,null],[5,"environ_unsetenv","","",null,null],[5,"file_get_contents","","",null,{"inputs":[{"name":"p"}],"output":{"generics":["vec","error"],"name":"result"}}],[5,"file_open_tmp","","",null,{"inputs":[{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[5,"file_read_link","","",null,{"inputs":[{"name":"p"}],"output":{"generics":["pathbuf","error"],"name":"result"}}],[5,"file_set_contents","","",null,null],[5,"filename_display_basename","","",null,{"inputs":[{"name":"p"}],"output":{"generics":["string"],"name":"option"}}],[5,"filename_display_name","","",null,{"inputs":[{"name":"p"}],"output":{"generics":["string"],"name":"option"}}],[5,"format_size","","",null,{"inputs":[{"name":"u64"}],"output":{"generics":["string"],"name":"option"}}],[5,"format_size_for_display","","",null,{"inputs":[{"name":"i64"}],"output":{"generics":["string"],"name":"option"}}],[5,"format_size_full","","",null,{"inputs":[{"name":"u64"},{"name":"formatsizeflags"}],"output":{"generics":["string"],"name":"option"}}],[5,"get_application_name","","",null,{"inputs":[],"output":{"generics":["string"],"name":"option"}}],[5,"get_charset","","",null,{"inputs":[],"output":{"generics":["string"],"name":"option"}}],[5,"get_codeset","","",null,{"inputs":[],"output":{"generics":["string"],"name":"option"}}],[5,"get_environ","","",null,{"inputs":[],"output":{"generics":["string"],"name":"vec"}}],[5,"get_host_name","","",null,{"inputs":[],"output":{"generics":["string"],"name":"option"}}],[5,"get_language_names","","",null,{"inputs":[],"output":{"generics":["string"],"name":"vec"}}],[5,"get_locale_variants","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["string"],"name":"vec"}}],[5,"get_monotonic_time","","",null,{"inputs":[],"output":{"name":"i64"}}],[5,"get_num_processors","","",null,{"inputs":[],"output":{"name":"u32"}}],[5,"get_real_time","","",null,{"inputs":[],"output":{"name":"i64"}}],[5,"get_system_config_dirs","","",null,{"inputs":[],"output":{"generics":["pathbuf"],"name":"vec"}}],[5,"get_system_data_dirs","","",null,{"inputs":[],"output":{"generics":["pathbuf"],"name":"vec"}}],[5,"get_user_cache_dir","","",null,{"inputs":[],"output":{"generics":["pathbuf"],"name":"option"}}],[5,"get_user_config_dir","","",null,{"inputs":[],"output":{"generics":["pathbuf"],"name":"option"}}],[5,"get_user_data_dir","","",null,{"inputs":[],"output":{"generics":["pathbuf"],"name":"option"}}],[5,"get_user_runtime_dir","","",null,{"inputs":[],"output":{"generics":["pathbuf"],"name":"option"}}],[5,"get_user_special_dir","","",null,{"inputs":[{"name":"userdirectory"}],"output":{"generics":["pathbuf"],"name":"option"}}],[5,"hostname_is_ascii_encoded","","",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"hostname_is_ip_address","","",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"hostname_is_non_ascii","","",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"hostname_to_ascii","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[5,"hostname_to_unicode","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[5,"intern_static_string","","",null,{"inputs":[{"name":"p"}],"output":{"generics":["string"],"name":"option"}}],[5,"intern_string","","",null,{"inputs":[{"name":"p"}],"output":{"generics":["string"],"name":"option"}}],[5,"listenv","","",null,{"inputs":[],"output":{"generics":["string"],"name":"vec"}}],[5,"log_remove_handler","","",null,{"inputs":[{"name":"str"},{"name":"u32"}],"output":null}],[5,"log_writer_is_journald","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"bool"}}],[5,"log_writer_supports_color","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"bool"}}],[5,"main_current_source","","",null,{"inputs":[],"output":{"generics":["source"],"name":"option"}}],[5,"main_depth","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"mem_is_system_malloc","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"mem_profile","","",null,{"inputs":[],"output":null}],[5,"mkdir_with_parents","","",null,{"inputs":[{"name":"p"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"mkdtemp","","",null,{"inputs":[{"name":"p"}],"output":{"generics":["pathbuf"],"name":"option"}}],[5,"mkdtemp_full","","",null,{"inputs":[{"name":"p"},{"name":"i32"}],"output":{"generics":["pathbuf"],"name":"option"}}],[5,"mkstemp_full","","",null,{"inputs":[{"name":"p"},{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"on_error_query","","",null,{"inputs":[{"name":"str"}],"output":null}],[5,"on_error_stack_trace","","",null,{"inputs":[{"name":"str"}],"output":null}],[5,"path_get_basename","","",null,{"inputs":[{"name":"p"}],"output":{"generics":["pathbuf"],"name":"option"}}],[5,"path_get_dirname","","",null,{"inputs":[{"name":"p"}],"output":{"generics":["pathbuf"],"name":"option"}}],[5,"path_is_absolute","","",null,{"inputs":[{"name":"p"}],"output":{"name":"bool"}}],[5,"path_skip_root","","",null,{"inputs":[{"name":"p"}],"output":{"generics":["pathbuf"],"name":"option"}}],[5,"pattern_match_simple","","",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"bool"}}],[5,"random_double","","",null,{"inputs":[],"output":{"name":"f64"}}],[5,"random_double_range","","",null,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"random_int","","",null,{"inputs":[],"output":{"name":"u32"}}],[5,"random_int_range","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"random_set_seed","","",null,{"inputs":[{"name":"u32"}],"output":null}],[5,"reload_user_special_dirs_cache","","",null,{"inputs":[],"output":null}],[5,"return_if_fail_warning","","",null,{"inputs":[{"name":"p"},{"name":"str"},{"name":"q"}],"output":null}],[5,"rmdir","","",null,{"inputs":[{"name":"p"}],"output":{"name":"i32"}}],[5,"set_application_name","","",null,{"inputs":[{"name":"str"}],"output":null}],[5,"shell_parse_argv","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["vec","error"],"name":"result"}}],[5,"shell_quote","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[5,"shell_unquote","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["string","error"],"name":"result"}}],[5,"spaced_primes_closest","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"spawn_check_exit_status","","",null,{"inputs":[{"name":"i32"}],"output":{"generics":["error"],"name":"result"}}],[5,"spawn_command_line_async","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[5,"stpcpy","","",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[5,"test_assert_expected_messages_internal","","",null,{"inputs":[{"name":"str"},{"name":"str"},{"name":"i32"},{"name":"str"}],"output":null}],[5,"test_bug","","",null,{"inputs":[{"name":"str"}],"output":null}],[5,"test_bug_base","","",null,{"inputs":[{"name":"str"}],"output":null}],[5,"test_fail","","",null,{"inputs":[],"output":null}],[5,"test_failed","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"test_incomplete","","",null,{"inputs":[{"name":"p"}],"output":null}],[5,"test_rand_double","","",null,{"inputs":[],"output":{"name":"f64"}}],[5,"test_rand_double_range","","",null,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"test_rand_int","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"test_rand_int_range","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"test_run","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"test_set_nonfatal_assertions","","",null,{"inputs":[],"output":null}],[5,"test_skip","","",null,{"inputs":[{"name":"p"}],"output":null}],[5,"test_subprocess","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"test_timer_elapsed","","",null,{"inputs":[],"output":{"name":"f64"}}],[5,"test_timer_last","","",null,{"inputs":[],"output":{"name":"f64"}}],[5,"test_timer_start","","",null,{"inputs":[],"output":null}],[5,"test_trap_assertions","","",null,{"inputs":[{"name":"str"},{"name":"str"},{"name":"i32"},{"name":"str"},{"name":"u64"},{"name":"str"}],"output":null}],[5,"test_trap_has_passed","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"test_trap_reached_timeout","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"unix_set_fd_nonblocking","","",null,{"inputs":[{"name":"i32"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[5,"unlink","","",null,{"inputs":[{"name":"p"}],"output":{"name":"i32"}}],[5,"uri_escape_string","","",null,{"inputs":[{"name":"str"},{"name":"p"},{"name":"bool"}],"output":{"generics":["string"],"name":"option"}}],[5,"uri_list_extract_uris","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["string"],"name":"vec"}}],[5,"uri_parse_scheme","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[5,"uri_unescape_segment","","",null,{"inputs":[{"name":"p"},{"name":"q"},{"name":"r"}],"output":{"generics":["string"],"name":"option"}}],[5,"uri_unescape_string","","",null,{"inputs":[{"name":"str"},{"name":"p"}],"output":{"generics":["string"],"name":"option"}}],[5,"usleep","","",null,{"inputs":[{"name":"c_ulong"}],"output":null}],[5,"uuid_string_is_valid","","",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"uuid_string_random","","",null,{"inputs":[],"output":{"generics":["string"],"name":"option"}}],[5,"variant_get_gtype","","",null,{"inputs":[],"output":{"name":"type"}}],[5,"warn_message","","",null,{"inputs":[{"name":"p"},{"name":"str"},{"name":"i32"},{"name":"str"},{"name":"q"}],"output":null}],[11,"clone","glib","",19,{"inputs":[{"name":"self"}],"output":{"name":"checksum"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"static_type","","",19,{"inputs":[],"output":{"name":"type"}}],[11,"new","","",19,{"inputs":[{"name":"checksumtype"}],"output":{"name":"checksum"}}],[11,"reset","","",19,{"inputs":[{"name":"self"}],"output":null}],[11,"update","","",19,null],[11,"type_get_length","","",19,{"inputs":[{"name":"checksumtype"}],"output":{"name":"isize"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"datetime"}}],[11,"static_type","","",20,{"inputs":[],"output":{"name":"type"}}],[11,"new","","",20,{"inputs":[{"name":"timezone"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"f64"}],"output":{"name":"datetime"}}],[11,"new_from_unix_local","","",20,{"inputs":[{"name":"i64"}],"output":{"name":"datetime"}}],[11,"new_from_unix_utc","","",20,{"inputs":[{"name":"i64"}],"output":{"name":"datetime"}}],[11,"new_local","","",20,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"f64"}],"output":{"name":"datetime"}}],[11,"new_now","","",20,{"inputs":[{"name":"timezone"}],"output":{"name":"datetime"}}],[11,"new_now_local","","",20,{"inputs":[],"output":{"name":"datetime"}}],[11,"new_now_utc","","",20,{"inputs":[],"output":{"name":"datetime"}}],[11,"new_utc","","",20,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"f64"}],"output":{"name":"datetime"}}],[11,"add","","",20,{"inputs":[{"name":"self"},{"name":"timespan"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"add_days","","",20,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"add_full","","",20,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"f64"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"add_hours","","",20,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"add_minutes","","",20,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"add_months","","",20,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"add_seconds","","",20,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"add_weeks","","",20,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"add_years","","",20,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"difference","","",20,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"name":"timespan"}}],[11,"format","","",20,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[11,"get_day_of_month","","",20,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_day_of_week","","",20,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_day_of_year","","",20,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_hour","","",20,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_microsecond","","",20,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_minute","","",20,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_month","","",20,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_second","","",20,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_seconds","","",20,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"get_timezone_abbreviation","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"get_utc_offset","","",20,{"inputs":[{"name":"self"}],"output":{"name":"timespan"}}],[11,"get_week_numbering_year","","",20,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_week_of_year","","",20,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_year","","",20,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_ymd","","",20,null],[11,"is_daylight_savings","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_local","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"to_timezone","","",20,{"inputs":[{"name":"self"},{"name":"timezone"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"to_unix","","",20,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"to_utc","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"partial_cmp","","",20,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",20,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"keyfile"}}],[11,"static_type","","",21,{"inputs":[],"output":{"name":"type"}}],[11,"new","","",21,{"inputs":[],"output":{"name":"keyfile"}}],[11,"get_boolean","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"get_comment","","",21,{"inputs":[{"name":"self"},{"name":"p"},{"name":"str"}],"output":{"generics":["string","error"],"name":"result"}}],[11,"get_double","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"generics":["f64","error"],"name":"result"}}],[11,"get_double_list","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"generics":["vec","error"],"name":"result"}}],[11,"get_groups","","",21,null],[11,"get_int64","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"generics":["i64","error"],"name":"result"}}],[11,"get_integer","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"generics":["i32","error"],"name":"result"}}],[11,"get_integer_list","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"generics":["vec","error"],"name":"result"}}],[11,"get_keys","","",21,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"get_locale_string","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"p"}],"output":{"generics":["string","error"],"name":"result"}}],[11,"get_locale_string_list","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"p"}],"output":{"generics":["vec","error"],"name":"result"}}],[11,"get_start_group","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"get_string","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"generics":["string","error"],"name":"result"}}],[11,"get_string_list","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"generics":["vec","error"],"name":"result"}}],[11,"get_uint64","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"generics":["u64","error"],"name":"result"}}],[11,"get_value","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"generics":["string","error"],"name":"result"}}],[11,"has_group","","",21,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"has_key","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"load_from_bytes","","",21,{"inputs":[{"name":"self"},{"name":"bytes"},{"name":"keyfileflags"}],"output":{"generics":["error"],"name":"result"}}],[11,"load_from_file","","",21,{"inputs":[{"name":"self"},{"name":"p"},{"name":"keyfileflags"}],"output":{"generics":["error"],"name":"result"}}],[11,"remove_comment","","",21,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":{"generics":["error"],"name":"result"}}],[11,"remove_group","","",21,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"remove_key","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"set_boolean","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"bool"}],"output":null}],[11,"set_comment","","",21,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"set_double","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"f64"}],"output":null}],[11,"set_int64","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"i64"}],"output":null}],[11,"set_integer","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"i32"}],"output":null}],[11,"set_locale_string","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":null}],[11,"set_string","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":null}],[11,"set_uint64","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"u64"}],"output":null}],[11,"set_value","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":null}],[11,"to_data","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"default","","",21,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"maincontext"}}],[11,"static_type","","",22,{"inputs":[],"output":{"name":"type"}}],[11,"new","","",22,{"inputs":[],"output":{"name":"maincontext"}}],[11,"acquire","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"dispatch","","",22,{"inputs":[{"name":"self"}],"output":null}],[11,"is_owner","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"iteration","","",22,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"pending","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"pop_thread_default","","",22,{"inputs":[{"name":"self"}],"output":null}],[11,"push_thread_default","","",22,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",22,{"inputs":[{"name":"self"}],"output":null}],[11,"wakeup","","",22,{"inputs":[{"name":"self"}],"output":null}],[11,"default","","",22,{"inputs":[],"output":{"generics":["maincontext"],"name":"option"}}],[11,"get_thread_default","","",22,{"inputs":[],"output":{"generics":["maincontext"],"name":"option"}}],[11,"ref_thread_default","","",22,{"inputs":[],"output":{"generics":["maincontext"],"name":"option"}}],[11,"default","","",22,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"mainloop"}}],[11,"static_type","","",23,{"inputs":[],"output":{"name":"type"}}],[11,"new","","",23,{"inputs":[{"name":"p"},{"name":"bool"}],"output":{"name":"mainloop"}}],[11,"get_context","","",23,{"inputs":[{"name":"self"}],"output":{"generics":["maincontext"],"name":"option"}}],[11,"is_running","","",23,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"quit","","",23,{"inputs":[{"name":"self"}],"output":null}],[11,"run","","",23,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"source"}}],[11,"static_type","","",24,{"inputs":[],"output":{"name":"type"}}],[11,"add_child_source","","",24,{"inputs":[{"name":"self"},{"name":"source"}],"output":null}],[11,"attach","","",24,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"u32"}}],[11,"destroy","","",24,{"inputs":[{"name":"self"}],"output":null}],[11,"get_can_recurse","","",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_context","","",24,{"inputs":[{"name":"self"}],"output":{"generics":["maincontext"],"name":"option"}}],[11,"get_id","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_name","","",24,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"get_priority","","",24,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_ready_time","","",24,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"get_time","","",24,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"is_destroyed","","",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"remove_child_source","","",24,{"inputs":[{"name":"self"},{"name":"source"}],"output":null}],[11,"remove","","",24,{"inputs":[{"name":"u32"}],"output":{"name":"bool"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"timezone"}}],[11,"static_type","","",25,{"inputs":[],"output":{"name":"type"}}],[11,"new","","",25,{"inputs":[{"name":"p"}],"output":{"name":"timezone"}}],[11,"new_local","","",25,{"inputs":[],"output":{"name":"timezone"}}],[11,"new_utc","","",25,{"inputs":[],"output":{"name":"timezone"}}],[11,"find_interval","","",25,{"inputs":[{"name":"self"},{"name":"timetype"},{"name":"i64"}],"output":{"name":"i32"}}],[11,"get_abbreviation","","",25,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["string"],"name":"option"}}],[11,"get_offset","","",25,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"is_dst","","",25,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"checksumtype"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"checksumtype"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"checksumtype"}],"output":{"name":"bool"}}],[11,"hash","","",3,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"datemonth"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"datemonth"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"datemonth"}],"output":{"name":"bool"}}],[11,"hash","","",4,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"dateweekday"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"dateweekday"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"dateweekday"}],"output":{"name":"bool"}}],[11,"hash","","",5,null],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"keyfileerror"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"keyfileerror"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"keyfileerror"}],"output":{"name":"bool"}}],[11,"hash","","",6,null],[11,"domain","","",6,{"inputs":[],"output":{"name":"gquark"}}],[11,"code","","",6,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from","","",6,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"timetype"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"timetype"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"timetype"}],"output":{"name":"bool"}}],[11,"hash","","",7,null],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"formatsizeflags"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"formatsizeflags"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"formatsizeflags"}}],[11,"partial_cmp","","",26,{"inputs":[{"name":"self"},{"name":"formatsizeflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",26,{"inputs":[{"name":"self"},{"name":"formatsizeflags"}],"output":{"name":"bool"}}],[11,"le","","",26,{"inputs":[{"name":"self"},{"name":"formatsizeflags"}],"output":{"name":"bool"}}],[11,"gt","","",26,{"inputs":[{"name":"self"},{"name":"formatsizeflags"}],"output":{"name":"bool"}}],[11,"ge","","",26,{"inputs":[{"name":"self"},{"name":"formatsizeflags"}],"output":{"name":"bool"}}],[11,"cmp","","",26,{"inputs":[{"name":"self"},{"name":"formatsizeflags"}],"output":{"name":"ordering"}}],[11,"hash","","",26,null],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"DEFAULT","","",26,null],[18,"LONG_FORMAT","","",26,null],[18,"IEC_UNITS","","",26,null],[11,"empty","","Returns an empty set of flags.",26,{"inputs":[],"output":{"name":"formatsizeflags"}}],[11,"all","","Returns the set containing all flags.",26,{"inputs":[],"output":{"name":"formatsizeflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",26,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",26,{"inputs":[{"name":"u32"}],"output":{"generics":["formatsizeflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",26,{"inputs":[{"name":"u32"}],"output":{"name":"formatsizeflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",26,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",26,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",26,{"inputs":[{"name":"self"},{"name":"formatsizeflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",26,{"inputs":[{"name":"self"},{"name":"formatsizeflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",26,{"inputs":[{"name":"self"},{"name":"formatsizeflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",26,{"inputs":[{"name":"self"},{"name":"formatsizeflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",26,{"inputs":[{"name":"self"},{"name":"formatsizeflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",26,{"inputs":[{"name":"self"},{"name":"formatsizeflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",26,{"inputs":[{"name":"self"},{"name":"formatsizeflags"}],"output":{"name":"formatsizeflags"}}],[11,"bitor_assign","","Adds the set of flags.",26,{"inputs":[{"name":"self"},{"name":"formatsizeflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",26,{"inputs":[{"name":"self"},{"name":"formatsizeflags"}],"output":{"name":"formatsizeflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",26,{"inputs":[{"name":"self"},{"name":"formatsizeflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",26,{"inputs":[{"name":"self"},{"name":"formatsizeflags"}],"output":{"name":"formatsizeflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",26,{"inputs":[{"name":"self"},{"name":"formatsizeflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",26,{"inputs":[{"name":"self"},{"name":"formatsizeflags"}],"output":{"name":"formatsizeflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",26,{"inputs":[{"name":"self"},{"name":"formatsizeflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",26,{"inputs":[{"name":"self"}],"output":{"name":"formatsizeflags"}}],[11,"extend","","",26,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",26,{"inputs":[{"name":"t"}],"output":{"name":"formatsizeflags"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"keyfileflags"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"keyfileflags"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"keyfileflags"}}],[11,"partial_cmp","","",27,{"inputs":[{"name":"self"},{"name":"keyfileflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",27,{"inputs":[{"name":"self"},{"name":"keyfileflags"}],"output":{"name":"bool"}}],[11,"le","","",27,{"inputs":[{"name":"self"},{"name":"keyfileflags"}],"output":{"name":"bool"}}],[11,"gt","","",27,{"inputs":[{"name":"self"},{"name":"keyfileflags"}],"output":{"name":"bool"}}],[11,"ge","","",27,{"inputs":[{"name":"self"},{"name":"keyfileflags"}],"output":{"name":"bool"}}],[11,"cmp","","",27,{"inputs":[{"name":"self"},{"name":"keyfileflags"}],"output":{"name":"ordering"}}],[11,"hash","","",27,null],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",27,null],[18,"KEEP_COMMENTS","","",27,null],[18,"KEEP_TRANSLATIONS","","",27,null],[11,"empty","","Returns an empty set of flags.",27,{"inputs":[],"output":{"name":"keyfileflags"}}],[11,"all","","Returns the set containing all flags.",27,{"inputs":[],"output":{"name":"keyfileflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",27,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",27,{"inputs":[{"name":"u32"}],"output":{"generics":["keyfileflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",27,{"inputs":[{"name":"u32"}],"output":{"name":"keyfileflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",27,{"inputs":[{"name":"self"},{"name":"keyfileflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",27,{"inputs":[{"name":"self"},{"name":"keyfileflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",27,{"inputs":[{"name":"self"},{"name":"keyfileflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",27,{"inputs":[{"name":"self"},{"name":"keyfileflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",27,{"inputs":[{"name":"self"},{"name":"keyfileflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",27,{"inputs":[{"name":"self"},{"name":"keyfileflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",27,{"inputs":[{"name":"self"},{"name":"keyfileflags"}],"output":{"name":"keyfileflags"}}],[11,"bitor_assign","","Adds the set of flags.",27,{"inputs":[{"name":"self"},{"name":"keyfileflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",27,{"inputs":[{"name":"self"},{"name":"keyfileflags"}],"output":{"name":"keyfileflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",27,{"inputs":[{"name":"self"},{"name":"keyfileflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",27,{"inputs":[{"name":"self"},{"name":"keyfileflags"}],"output":{"name":"keyfileflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",27,{"inputs":[{"name":"self"},{"name":"keyfileflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",27,{"inputs":[{"name":"self"},{"name":"keyfileflags"}],"output":{"name":"keyfileflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",27,{"inputs":[{"name":"self"},{"name":"keyfileflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",27,{"inputs":[{"name":"self"}],"output":{"name":"keyfileflags"}}],[11,"extend","","",27,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",27,{"inputs":[{"name":"t"}],"output":{"name":"keyfileflags"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"static_type","","",28,{"inputs":[],"output":{"name":"type"}}],[11,"from_static","","Creates a view into static `data` without copying.",28,null],[11,"from","","",28,{"inputs":[{"name":"t"}],"output":{"name":"bytes"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",28,null],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",28,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",28,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"eq","","",28,null],[11,"partial_cmp","","",28,null],[11,"eq","","",28,null],[11,"partial_cmp","","",28,null],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",28,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"hash","","",28,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"get_digest","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_string","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[0,"closure","","",null,null],[3,"Closure","glib::closure","",null,null],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"closure"}}],[11,"static_type","","",29,{"inputs":[],"output":{"name":"type"}}],[11,"new","","",29,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"invoke","","",29,null],[0,"error","glib","`Error` binding and helper trait.",null,null],[3,"Error","glib::error","A generic error capable of representing various error domains (types).",null,null],[3,"BoolError","","Generic error used for functions that fail without any further information",null,null],[12,"0","","",30,null],[8,"ErrorDomain","","`GLib` error domain.",null,null],[10,"domain","","Returns the quark identifying the error domain.",31,{"inputs":[],"output":{"name":"gquark"}}],[10,"code","","Gets the integer representation of the variant.",31,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"from","","Tries to convert an integer code to an enum variant.",31,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"static_type","","",32,{"inputs":[],"output":{"name":"type"}}],[11,"new","","Creates an error with supplied error enum variant and message.",32,{"inputs":[{"name":"t"},{"name":"str"}],"output":{"name":"error"}}],[11,"is","","Checks if the error domain matches `T`.",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"kind","","Tries to convert to a specific error enum.",32,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"wrap","","",32,null],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",32,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_glib","","",30,{"inputs":[{"name":"gboolean"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",30,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","glib","",2,{"inputs":[{"name":"self"}],"output":{"name":"userdirectory"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"userdirectory"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `EnumClass` from a `Type`.",33,{"inputs":[{"name":"type"}],"output":{"name":"option"}}],[11,"type_","","`Type` of the enum.",33,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"get_value","","Gets `EnumValue` by integer `value`, if existing.",33,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["enumvalue"],"name":"option"}}],[11,"get_value_by_name","","Gets `EnumValue` by string name `name`, if existing.",33,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["enumvalue"],"name":"option"}}],[11,"get_value_by_nick","","Gets `EnumValue` by string nick `nick`, if existing.",33,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["enumvalue"],"name":"option"}}],[11,"get_values","","Gets all `EnumValue` of this `EnumClass`.",33,{"inputs":[{"name":"self"}],"output":{"generics":["enumvalue"],"name":"vec"}}],[11,"to_value","","Converts integer `value` to a `Value`, if part of the enum.",33,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["value"],"name":"option"}}],[11,"to_value_by_name","","Converts string name `name` to a `Value`, if part of the enum.",33,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["value"],"name":"option"}}],[11,"to_value_by_nick","","Converts string nick `nick` to a `Value`, if part of the enum.",33,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["value"],"name":"option"}}],[11,"drop","","",33,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"enumvalue"}}],[11,"get_value","","Get integer value corresponding to the value.",34,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_name","","Get name corresponding to the value.",34,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"get_nick","","Get nick corresponding to the value.",34,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"to_value","","Convert enum value to a `Value`.",34,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"from_value","","Convert enum value from a `Value`.",34,{"inputs":[{"name":"value"}],"output":{"generics":["enumvalue"],"name":"option"}}],[11,"get_class","","Get `EnumClass` to which the enum value belongs.",34,{"inputs":[{"name":"self"}],"output":{"name":"enumclass"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",34,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",34,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `FlagsClass` from a `Type`",35,{"inputs":[{"name":"type"}],"output":{"name":"option"}}],[11,"type_","","`Type` of the flags.",35,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"get_value","","Gets `FlagsValue` by integer `value`, if existing.",35,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["flagsvalue"],"name":"option"}}],[11,"get_value_by_name","","Gets `FlagsValue` by string name `name`, if existing.",35,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["flagsvalue"],"name":"option"}}],[11,"get_value_by_nick","","Gets `FlagsValue` by string nick `nick`, if existing.",35,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["flagsvalue"],"name":"option"}}],[11,"get_values","","Gets all `FlagsValue` of this `FlagsClass`.",35,{"inputs":[{"name":"self"}],"output":{"generics":["flagsvalue"],"name":"vec"}}],[11,"to_value","","Converts integer `value` to a `Value`, if part of the flags.",35,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["value"],"name":"option"}}],[11,"to_value_by_name","","Converts string name `name` to a `Value`, if part of the flags.",35,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["value"],"name":"option"}}],[11,"to_value_by_nick","","Converts string nick `nick` to a `Value`, if part of the flags.",35,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["value"],"name":"option"}}],[11,"is_set","","Checks if the flags corresponding to integer `f` is set in `value`.",35,{"inputs":[{"name":"self"},{"name":"value"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"is_set_by_name","","Checks if the flags corresponding to string name `name` is set in `value`.",35,{"inputs":[{"name":"self"},{"name":"value"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_set_by_nick","","Checks if the flags corresponding to string nick `nick` is set in `value`.",35,{"inputs":[{"name":"self"},{"name":"value"},{"name":"str"}],"output":{"name":"bool"}}],[11,"set","","Sets flags value corresponding to integer `f` in `value`, if part of that flags. If the flag is already set, it will succeed without doing any changes.",35,{"inputs":[{"name":"self"},{"name":"value"},{"name":"u32"}],"output":{"generics":["value","value"],"name":"result"}}],[11,"set_by_name","","Sets flags value corresponding to string name `name` in `value`, if part of that flags. If the flag is already set, it will succeed without doing any changes.",35,{"inputs":[{"name":"self"},{"name":"value"},{"name":"str"}],"output":{"generics":["value","value"],"name":"result"}}],[11,"set_by_nick","","Sets flags value corresponding to string nick `nick` in `value`, if part of that flags. If the flag is already set, it will succeed without doing any changes.",35,{"inputs":[{"name":"self"},{"name":"value"},{"name":"str"}],"output":{"generics":["value","value"],"name":"result"}}],[11,"unset","","Unsets flags value corresponding to integer `f` in `value`, if part of that flags. If the flag is already unset, it will succeed without doing any changes.",35,{"inputs":[{"name":"self"},{"name":"value"},{"name":"u32"}],"output":{"generics":["value","value"],"name":"result"}}],[11,"unset_by_name","","Unsets flags value corresponding to string name `name` in `value`, if part of that flags. If the flag is already unset, it will succeed without doing any changes.",35,{"inputs":[{"name":"self"},{"name":"value"},{"name":"str"}],"output":{"generics":["value","value"],"name":"result"}}],[11,"unset_by_nick","","Unsets flags value corresponding to string nick `nick` in `value`, if part of that flags. If the flag is already unset, it will succeed without doing any changes.",35,{"inputs":[{"name":"self"},{"name":"value"},{"name":"str"}],"output":{"generics":["value","value"],"name":"result"}}],[11,"builder","","Returns a new `FlagsBuilder` for conveniently setting/unsetting flags and building a `Value`.",35,{"inputs":[{"name":"self"}],"output":{"name":"flagsbuilder"}}],[11,"builder_with_value","","Returns a new `FlagsBuilder` for conveniently setting/unsetting flags and building a `Value`. The `Value` is initialized with `value`.",35,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"generics":["flagsbuilder"],"name":"option"}}],[11,"drop","","",35,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"flagsvalue"}}],[11,"get_value","","Get integer value corresponding to the value.",36,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_name","","Get name corresponding to the value.",36,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"get_nick","","Get nick corresponding to the value.",36,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"to_value","","Convert flags value to a `Value`.",36,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"from_value","","Convert flags values from a `Value`. This returns all flags that are set.",36,{"inputs":[{"name":"value"}],"output":{"generics":["flagsvalue"],"name":"vec"}}],[11,"get_class","","Get `FlagsClass` to which the flags value belongs.",36,{"inputs":[{"name":"self"}],"output":{"name":"flagsclass"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"set","","Sets flags corresponding to integer value `f`.",37,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"set_by_name","","Sets flags corresponding to string name `name`.",37,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"set_by_nick","","Sets flags corresponding to string nick `nick`.",37,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"unset","","Unsets flags corresponding to integer value `f`.",37,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"unset_by_name","","Unsets flags corresponding to string name `name`.",37,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"unset_by_nick","","Unsets flags corresponding to string nick `nick`.",37,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"build","","Converts to the final `Value`, unless any previous setting/unsetting of flags failed.",37,{"inputs":[{"name":"self"}],"output":{"generics":["value"],"name":"option"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"fileerror"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"fileerror"}],"output":{"name":"bool"}}],[11,"domain","","",1,{"inputs":[],"output":{"name":"gquark"}}],[11,"code","","",1,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from","","",1,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"save_to_file","","",21,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"load_from_data_dirs","","",21,{"inputs":[{"name":"self"},{"name":"t"},{"name":"keyfileflags"}],"output":{"generics":["pathbuf","error"],"name":"result"}}],[11,"load_from_dirs","","",21,null],[0,"prelude","","Traits and essential types intended for blanket imports.",null,null],[0,"signal","","`IMPL` Low level signal support.",null,null],[3,"SignalHandlerId","glib::signal","The id of a signal that is returned by `connect`.",null,null],[3,"Inhibit","","Whether to propagate the signal to the default handler.",null,null],[12,"0","","",38,null],[5,"connect","","",null,null],[5,"signal_handler_block","","",null,{"inputs":[{"name":"t"},{"name":"signalhandlerid"}],"output":null}],[5,"signal_handler_unblock","","",null,{"inputs":[{"name":"t"},{"name":"signalhandlerid"}],"output":null}],[5,"signal_handler_disconnect","","",null,{"inputs":[{"name":"t"},{"name":"signalhandlerid"}],"output":null}],[5,"signal_stop_emission","","",null,{"inputs":[{"name":"t"},{"name":"u32"},{"name":"gquark"}],"output":null}],[5,"signal_stop_emission_by_name","","",null,{"inputs":[{"name":"t"},{"name":"str"}],"output":null}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"signalhandlerid"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"signalhandlerid"}],"output":{"name":"bool"}}],[11,"to_glib","","",39,{"inputs":[{"name":"self"}],"output":{"name":"c_ulong"}}],[11,"from_glib","","",39,{"inputs":[{"name":"c_ulong"}],"output":{"name":"signalhandlerid"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"inhibit"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",38,{"inputs":[],"output":{"name":"inhibit"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"inhibit"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"inhibit"}],"output":{"name":"bool"}}],[0,"source","glib","",null,null],[3,"SourceId","glib::source","The id of a source that is returned by `idle_add` and `timeout_add`.",null,null],[3,"Continue","","Continue calling the closure in the future iterations or drop it.",null,null],[12,"0","","",40,null],[3,"CallbackGuard","","Unwinding propagation guard. Aborts the process if destroyed while panicking.",null,null],[3,"Priority","","The priority of sources",null,null],[5,"idle_add","","Adds a closure to be called by the default main loop when it's idle.",null,{"inputs":[{"name":"f"}],"output":{"name":"sourceid"}}],[5,"timeout_add","","Adds a closure to be called by the default main loop at regular intervals with millisecond granularity.",null,{"inputs":[{"name":"u32"},{"name":"f"}],"output":{"name":"sourceid"}}],[5,"timeout_add_seconds","","Adds a closure to be called by the default main loop at regular intervals with second granularity.",null,{"inputs":[{"name":"u32"},{"name":"f"}],"output":{"name":"sourceid"}}],[5,"child_watch_add","","Adds a closure to be called by the main loop the returned `Source` is attached to when a child process exits.",null,{"inputs":[{"name":"u32"},{"name":"f"}],"output":{"name":"sourceid"}}],[5,"unix_signal_add","","Adds a closure to be called by the default main loop whenever a UNIX signal is raised.",null,{"inputs":[{"name":"i32"},{"name":"f"}],"output":{"name":"sourceid"}}],[5,"source_remove","","Removes the source with the given id `source_id` from the default main context.",null,{"inputs":[{"name":"sourceid"}],"output":null}],[5,"idle_source_new","","Adds a closure to be called by the main loop the return `Source` is attached to when it's idle.",null,{"inputs":[{"name":"n"},{"name":"priority"},{"name":"f"}],"output":{"name":"source"}}],[5,"timeout_source_new","","Adds a closure to be called by the main loop the returned `Source` is attached to at regular intervals with millisecond granularity.",null,{"inputs":[{"name":"u32"},{"name":"n"},{"name":"priority"},{"name":"f"}],"output":{"name":"source"}}],[5,"timeout_source_new_seconds","","Adds a closure to be called by the main loop the returned `Source` is attached to at regular intervals with second granularity.",null,{"inputs":[{"name":"u32"},{"name":"n"},{"name":"priority"},{"name":"f"}],"output":{"name":"source"}}],[5,"child_watch_source_new","","Adds a closure to be called by the main loop the returned `Source` is attached to when a child process exits.",null,{"inputs":[{"name":"u32"},{"name":"n"},{"name":"priority"},{"name":"f"}],"output":{"name":"source"}}],[5,"unix_signal_source_new","","Adds a closure to be called by the main loop the returned `Source` is attached to whenever a UNIX signal is raised.",null,{"inputs":[{"name":"i32"},{"name":"n"},{"name":"priority"},{"name":"f"}],"output":{"name":"source"}}],[17,"PRIORITY_HIGH","","",null,null],[17,"PRIORITY_DEFAULT","","",null,null],[17,"PRIORITY_HIGH_IDLE","","",null,null],[17,"PRIORITY_DEFAULT_IDLE","","",null,null],[17,"PRIORITY_LOW","","",null,null],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",41,{"inputs":[],"output":{"name":"sourceid"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"sourceid"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"sourceid"}],"output":{"name":"bool"}}],[11,"to_glib","","",41,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_glib","","",41,{"inputs":[{"name":"u32"}],"output":{"name":"sourceid"}}],[11,"to_glib","","",40,{"inputs":[{"name":"self"}],"output":{"name":"gboolean"}}],[11,"new","","",42,{"inputs":[],"output":{"name":"callbackguard"}}],[11,"default","","",42,{"inputs":[],"output":{"name":"self"}}],[11,"drop","","",42,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"priority"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",43,{"inputs":[],"output":{"name":"priority"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"priority"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"priority"}],"output":{"name":"bool"}}],[11,"to_glib","","",43,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_glib","","",43,{"inputs":[{"name":"i32"}],"output":{"name":"priority"}}],[0,"translate","glib","Translation between GLib/GLib-based FFI types and their Rust counterparts.",null,null],[3,"Stash","glib::translate","Helper type that stores temporary values used for translation.",null,null],[12,"0","","",44,null],[12,"1","","",44,null],[3,"StashMut","","",null,null],[12,"0","","",45,null],[12,"1","","",45,null],[3,"List","","",null,null],[3,"SList","","",null,null],[3,"HashTable","","",null,null],[5,"mut_override","","Overrides pointer mutability.",null,null],[5,"uninitialized","","Returns an uninitialized value.",null,{"inputs":[],"output":{"name":"t"}}],[5,"some_if","","Returns `Some(val)` if the condition is true and `None` otherwise.",null,{"inputs":[{"name":"b"},{"name":"f"}],"output":{"name":"option"}}],[5,"from_glib","","Translate a simple type.",null,{"inputs":[{"name":"g"}],"output":{"name":"t"}}],[5,"from_glib_none","","Translate from a pointer type, transfer: none.",null,{"inputs":[{"name":"p"}],"output":{"name":"t"}}],[5,"from_glib_full","","Translate from a pointer type, transfer: full (assume ownership).",null,{"inputs":[{"name":"p"}],"output":{"name":"t"}}],[5,"from_glib_borrow","","Translate from a pointer type, borrowing the pointer.",null,{"inputs":[{"name":"p"}],"output":{"name":"t"}}],[5,"c_ptr_array_len","","",null,null],[8,"Ptr","","A pointer",null,null],[10,"is_null","","",46,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"from","","",46,null],[10,"to","","",46,null],[8,"Uninitialized","","A trait for creating an uninitialized value. Handy for receiving outparams.",null,null],[10,"uninitialized","","Returns an uninitialized value.",47,{"inputs":[],"output":{"name":"self"}}],[8,"ToBool","","",null,null],[10,"to_bool","","",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"ToGlib","","Translate a simple type.",null,null],[16,"GlibType","","",49,null],[10,"to_glib","","",49,null],[8,"GlibPtrDefault","","Provides the default pointer type to be used in some container conversions.",null,null],[16,"GlibType","","",50,null],[8,"ToGlibPtr","","Translate to a pointer.",null,null],[16,"Storage","","",51,null],[10,"to_glib_none","","Transfer: none.",51,{"inputs":[{"name":"self"}],"output":{"name":"stash"}}],[11,"to_glib_container","","Transfer: container.",51,{"inputs":[{"name":"self"}],"output":{"name":"stash"}}],[11,"to_glib_full","","Transfer: full.",51,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[8,"ToGlibPtrMut","","Translate to a pointer with a mutable borrow.",null,null],[16,"Storage","","",52,null],[10,"to_glib_none_mut","","Transfer: none.",52,{"inputs":[{"name":"self"}],"output":{"name":"stashmut"}}],[8,"ToGlibContainerFromSlice","","",null,null],[16,"Storage","","",53,null],[10,"to_glib_none_from_slice","","",53,null],[10,"to_glib_container_from_slice","","",53,null],[10,"to_glib_full_from_slice","","",53,null],[8,"FromGlib","","Translate a simple type.",null,null],[10,"from_glib","","",54,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"FromGlibPtrNone","","Translate from a pointer type without taking ownership, transfer: none.",null,null],[10,"from_glib_none","","",55,{"inputs":[{"name":"p"}],"output":{"name":"self"}}],[8,"FromGlibPtrFull","","Translate from a pointer type taking ownership, transfer: full.",null,null],[10,"from_glib_full","","",56,{"inputs":[{"name":"p"}],"output":{"name":"self"}}],[8,"FromGlibPtrBorrow","","Translate from a pointer type by borrowing. Don't increase the refcount",null,null],[11,"from_glib_borrow","","",57,{"inputs":[{"name":"p"}],"output":{"name":"self"}}],[8,"FromGlibContainer","","Translate from a container.",null,null],[10,"from_glib_none_num","","Transfer: none.",58,{"inputs":[{"name":"p"},{"name":"usize"}],"output":{"name":"self"}}],[10,"from_glib_container_num","","Transfer: container.",58,{"inputs":[{"name":"p"},{"name":"usize"}],"output":{"name":"self"}}],[10,"from_glib_full_num","","Transfer: full.",58,{"inputs":[{"name":"p"},{"name":"usize"}],"output":{"name":"self"}}],[8,"FromGlibPtrContainer","","Translate from a container of pointers.",null,null],[10,"from_glib_none","","Transfer: none.",59,{"inputs":[{"name":"pp"}],"output":{"name":"self"}}],[10,"from_glib_container","","Transfer: container.",59,{"inputs":[{"name":"pp"}],"output":{"name":"self"}}],[10,"from_glib_full","","Transfer: full.",59,{"inputs":[{"name":"pp"}],"output":{"name":"self"}}],[8,"FromGlibContainerAsVec","","",null,null],[10,"from_glib_none_num_as_vec","","",60,{"inputs":[{"name":"p"},{"name":"usize"}],"output":{"name":"vec"}}],[10,"from_glib_container_num_as_vec","","",60,{"inputs":[{"name":"p"},{"name":"usize"}],"output":{"name":"vec"}}],[10,"from_glib_full_num_as_vec","","",60,{"inputs":[{"name":"p"},{"name":"usize"}],"output":{"name":"vec"}}],[8,"FromGlibPtrArrayContainerAsVec","","",null,null],[10,"from_glib_none_as_vec","","",61,{"inputs":[{"name":"pp"}],"output":{"name":"vec"}}],[10,"from_glib_container_as_vec","","",61,{"inputs":[{"name":"pp"}],"output":{"name":"vec"}}],[10,"from_glib_full_as_vec","","",61,{"inputs":[{"name":"pp"}],"output":{"name":"vec"}}],[11,"drop","","",62,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",63,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",64,{"inputs":[{"name":"self"}],"output":null}],[0,"types","glib","Runtime type information.",null,null],[4,"Type","glib::types","A GLib or GLib-based library type",null,null],[13,"Invalid","","An invalid `Type` used as error return value in some functions",65,null],[13,"Unit","","The fundamental type corresponding to the unit type `()`",65,null],[13,"I8","","The fundamental type corresponding to `i8`",65,null],[13,"U8","","The fundamental type corresponding to `u8`",65,null],[13,"Bool","","The fundamental type corresponding to `bool`",65,null],[13,"I32","","The fundamental type corresponding to `i32`",65,null],[13,"U32","","The fundamental type corresponding to `u32`",65,null],[13,"ILong","","The fundamental type corresponding to C `long`",65,null],[13,"ULong","","The fundamental type corresponding to C `unsigned long`",65,null],[13,"I64","","The fundamental type corresponding to `i64`",65,null],[13,"U64","","The fundamental type corresponding to `u64`",65,null],[13,"F32","","The fundamental type corresponding to `f32`",65,null],[13,"F64","","The fundamental type corresponding to `f64`",65,null],[13,"String","","The fundamental type corresponding to `String`",65,null],[13,"Pointer","","The fundamental type corresponding to a pointer",65,null],[13,"Variant","","The fundamental type of GVariant",65,null],[13,"BaseInterface","","The fundamental type from which all interfaces are derived",65,null],[13,"BaseEnum","","The fundamental type from which all enumeration types are derived",65,null],[13,"BaseFlags","","The fundamental type from which all flags types are derived",65,null],[13,"BaseBoxed","","The fundamental type from which all boxed types are derived",65,null],[13,"BaseParamSpec","","The fundamental type from which all `GParamSpec` types are derived",65,null],[13,"BaseObject","","The fundamental type from which all objects are derived",65,null],[13,"Other","","A non-fundamental type identified by value of type `usize`",65,null],[5,"instance_of","","",null,{"inputs":[{"name":"gconstpointer"}],"output":{"name":"bool"}}],[8,"StaticType","","Types that are supported by GLib dynamic typing.",null,null],[10,"static_type","","Returns the type identifier of `Self`.",66,{"inputs":[],"output":{"name":"type"}}],[8,"InstanceType","","",null,null],[10,"instance_type","","",67,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"name","","",65,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"is_a","","",65,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"parent","","",65,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"children","","",65,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"interfaces","","",65,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"interface_prerequisites","","",65,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"from_name","","",65,{"inputs":[{"name":"p"}],"output":{"name":"option"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_glib","","",65,{"inputs":[{"name":"gtype"}],"output":{"name":"type"}}],[11,"to_glib","","",65,{"inputs":[{"name":"self"}],"output":{"name":"gtype"}}],[11,"to_glib_none_from_slice","","",65,null],[11,"to_glib_container_from_slice","","",65,null],[11,"to_glib_full_from_slice","","",65,null],[11,"from_glib_none_num_as_vec","","",65,null],[11,"from_glib_container_num_as_vec","","",65,null],[11,"from_glib_full_num_as_vec","","",65,null],[11,"from_glib_none_num_as_vec","","",65,null],[11,"from_glib_container_num_as_vec","","",65,null],[11,"from_glib_full_num_as_vec","","",65,null],[0,"value","glib","`Value` binding and helper traits.",null,null],[3,"Value","glib::value","A generic value capable of carrying various types.",null,null],[3,"ValueArray","","",null,null],[3,"TypedValue","","A statically typed `Value`.",null,null],[3,"SendValue","","A version of `Value` for storing `Send` types, that implements Send itself.",null,null],[3,"AnyValue","","A container type that allows storing any `'static` type that implements `Any` and `Clone` to be stored in a `Value`.",null,null],[3,"AnySendValue","","A container type that allows storing any `'static` type that implements `Any`, `Clone` and `Send` to be stored in a `Value` or `SendValue`.",null,null],[8,"ToValue","","Converts to `Value`.",null,null],[10,"to_value","","Returns a `Value` clone of `self`.",68,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[10,"to_value_type","","Returns the type identifer of `self`.",68,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[8,"ToSendValue","","Converts to `SendValue`.",null,null],[10,"to_send_value","","Returns a `SendValue` clone of `self`.",69,{"inputs":[{"name":"self"}],"output":{"name":"sendvalue"}}],[8,"FromValueOptional","","Extracts a value.",null,null],[10,"from_value_optional","","",70,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[8,"FromValue","","Extracts a value.",null,null],[10,"from_value","","",71,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[8,"SetValueOptional","","Sets a value.",null,null],[10,"set_value_optional","","",72,{"inputs":[{"name":"value"},{"name":"option"}],"output":null}],[8,"SetValue","","Sets a value.",null,null],[10,"set_value","","",73,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"downcast","","Tries to downcast to a `TypedValue`.",74,{"inputs":[{"name":"self"}],"output":{"generics":["typedvalue"],"name":"result"}}],[11,"get","","Tries to get a value of type `T`.",74,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is","","Returns `true` if the type of the value corresponds to `T`.",74,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"type_","","Returns the type of the value.",74,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"type_transformable","","Returns whether `Value`s of type `src` can be transformed to type `dst`.",74,{"inputs":[{"name":"type"},{"name":"type"}],"output":{"name":"bool"}}],[11,"try_into_send_value","","",74,{"inputs":[{"name":"self"}],"output":{"generics":["sendvalue"],"name":"result"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drop","","",74,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from","","",74,{"inputs":[{"name":"option"}],"output":{"name":"self"}}],[11,"from","","",74,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",74,{"inputs":[{"name":"typedvalue"}],"output":{"name":"self"}}],[11,"from","","",74,{"inputs":[{"name":"sendvalue"}],"output":{"name":"self"}}],[11,"uninitialized","","",74,{"inputs":[],"output":{"name":"value"}}],[11,"to_glib_none","","",74,{"inputs":[{"name":"self"}],"output":{"name":"stash"}}],[11,"to_glib_none_mut","","",74,{"inputs":[{"name":"self"}],"output":{"name":"stashmut"}}],[11,"from_glib_none","","",74,null],[11,"from_glib_none","","",74,null],[11,"from_glib_full","","",74,null],[11,"from_glib_none_num_as_vec","","",74,null],[11,"from_glib_container_num_as_vec","","",74,null],[11,"from_glib_full_num_as_vec","","",74,null],[11,"from_glib_none_as_vec","","",74,null],[11,"from_glib_container_as_vec","","",74,null],[11,"from_glib_full_as_vec","","",74,null],[11,"from_glib_none_num_as_vec","","",74,null],[11,"from_glib_container_num_as_vec","","",74,null],[11,"from_glib_full_num_as_vec","","",74,null],[11,"from_glib_none_as_vec","","",74,null],[11,"from_glib_container_as_vec","","",74,null],[11,"from_glib_full_as_vec","","",74,null],[11,"drop","","",75,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"typedvalue"}}],[11,"get","","Returns the value.",76,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_some","","Returns the value.",76,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set","","Sets the value.",76,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"set_none","","Sets the value to `None`.",76,{"inputs":[{"name":"self"}],"output":null}],[11,"set_some","","Sets the value.",76,{"inputs":[{"name":"self"},{"name":"u"}],"output":null}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"into_send_value","","",76,{"inputs":[{"name":"self"}],"output":{"name":"sendvalue"}}],[11,"deref","","",76,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"from","","",76,{"inputs":[{"name":"option"}],"output":{"name":"self"}}],[11,"from","","",76,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",76,{"inputs":[{"generics":["str"],"name":"option"}],"output":{"name":"self"}}],[11,"from","","",76,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",76,{"inputs":[{"generics":["str"],"name":"typedvalue"}],"output":{"name":"self"}}],[11,"from","","",76,{"inputs":[{"generics":["string"],"name":"typedvalue"}],"output":{"name":"self"}}],[11,"to_glib_none_mut","","",76,{"inputs":[{"name":"self"}],"output":{"name":"stashmut"}}],[11,"to_value","","",74,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"to_value_type","","",74,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"sendvalue"}}],[11,"downcast","","Tries to downcast to a `TypedValue`.",77,{"inputs":[{"name":"self"}],"output":{"generics":["typedvalue"],"name":"result"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",77,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"from","","",77,{"inputs":[{"name":"option"}],"output":{"name":"self"}}],[11,"from","","",77,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",77,{"inputs":[{"name":"typedvalue"}],"output":{"name":"self"}}],[11,"from_glib_none","","",77,null],[11,"from_glib_none","","",77,null],[11,"from_glib_full","","",77,null],[11,"from_glib_none_num_as_vec","","",77,null],[11,"from_glib_container_num_as_vec","","",77,null],[11,"from_glib_full_num_as_vec","","",77,null],[11,"from_glib_none_as_vec","","",77,null],[11,"from_glib_container_as_vec","","",77,null],[11,"from_glib_full_as_vec","","",77,null],[11,"from_glib_none_num_as_vec","","",77,null],[11,"from_glib_container_num_as_vec","","",77,null],[11,"from_glib_full_num_as_vec","","",77,null],[11,"from_glib_none_as_vec","","",77,null],[11,"from_glib_container_as_vec","","",77,null],[11,"from_glib_full_as_vec","","",77,null],[11,"to_glib_none_mut","","",77,{"inputs":[{"name":"self"}],"output":{"name":"stashmut"}}],[11,"to_send_value","","",77,{"inputs":[{"name":"self"}],"output":{"name":"sendvalue"}}],[11,"to_value","","",77,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"to_value_type","","",77,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"new","","Create a new `AnyValue` from `val`",78,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"downcast","","Attempt the value to its concrete type.",78,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",78,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"set_value","","",78,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"anysendvalue"}}],[11,"new","","Create a new `AnySendValue` from `val`.",79,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"downcast","","Attempt the value to its concrete type.",79,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",79,{"inputs":[{"name":"self"}],"output":{"name":"anyvalue"}}],[11,"set_value","","",79,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"static_type","","",78,{"inputs":[],"output":{"name":"type"}}],[11,"static_type","","",79,{"inputs":[],"output":{"name":"type"}}],[0,"variant","glib","`Variant` binding and helper traits.",null,null],[3,"Variant","glib::variant","A generic immutable value capable of carrying various types.",null,null],[8,"ToVariant","","Converts to `Variant`.",null,null],[10,"to_variant","","Returns a `Variant` clone of `self`.",80,{"inputs":[{"name":"self"}],"output":{"name":"variant"}}],[8,"FromVariant","","Extracts a value.",null,null],[10,"from_variant","","Tries to extract a value.",81,{"inputs":[{"name":"variant"}],"output":{"name":"option"}}],[8,"StaticVariantType","","Returns `VariantType` of `Self`.",null,null],[10,"static_variant_type","","Returns the `VariantType` corresponding to `Self`.",82,{"inputs":[],"output":{"generics":["variantty"],"name":"cow"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"variant"}}],[11,"static_type","","",83,{"inputs":[],"output":{"name":"type"}}],[11,"type_","","Returns the type of the value.",83,{"inputs":[{"name":"self"}],"output":{"name":"variantty"}}],[11,"is","","Returns `true` if the type of the value corresponds to `T`.",83,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get","","Tries to extract a value of type `T`.",83,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_str","","Tries to extract a `&str`.",83,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",83,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",83,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"from","","",83,{"inputs":[{"name":"t"}],"output":{"name":"variant"}}],[11,"new","glib","Tries to create a `VariantType` from a string slice.",84,{"inputs":[{"name":"str"}],"output":{"generics":["varianttype"],"name":"result"}}],[11,"drop","","",84,{"inputs":[{"name":"self"}],"output":null}],[11,"borrow","","",84,{"inputs":[{"name":"self"}],"output":{"name":"variantty"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"varianttype"}}],[11,"deref","","",84,{"inputs":[{"name":"self"}],"output":{"name":"variantty"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",84,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"into","","",84,{"inputs":[{"name":"self"}],"output":{"generics":["variantty"],"name":"cow"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",85,{"inputs":[{"name":"self"},{"name":"variantty"}],"output":{"name":"bool"}}],[11,"ne","","",85,{"inputs":[{"name":"self"},{"name":"variantty"}],"output":{"name":"bool"}}],[11,"hash","","",85,null],[11,"new","","Tries to create a `&VariantTy` from a string slice.",85,{"inputs":[{"name":"str"}],"output":{"generics":["variantty"],"name":"result"}}],[11,"from_str_unchecked","","Converts a type string into `&VariantTy` without any checks.",85,{"inputs":[{"name":"str"}],"output":{"name":"variantty"}}],[11,"to_str","","Converts to a string slice.",85,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_owned","","",85,{"inputs":[{"name":"self"}],"output":{"name":"varianttype"}}],[11,"eq","","",84,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",84,{"inputs":[{"name":"self"},{"name":"variantty"}],"output":{"name":"bool"}}],[11,"eq","","",85,{"inputs":[{"name":"self"},{"name":"varianttype"}],"output":{"name":"bool"}}],[11,"eq","","",84,{"inputs":[{"name":"self"},{"name":"variantty"}],"output":{"name":"bool"}}],[11,"eq","","",84,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","","",85,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",85,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",85,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",84,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",84,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",84,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"prepare","","",22,null],[11,"find_source_by_id","","",22,{"inputs":[{"name":"self"},{"name":"sourceid"}],"output":{"generics":["source"],"name":"option"}}],[11,"invoke","","",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"invoke_with_priority","","",22,{"inputs":[{"name":"self"},{"name":"priority"},{"name":"f"}],"output":null}],[11,"compare","","",20,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"i32"}}],[11,"equal","","",20,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"date"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"static_type","","",86,{"inputs":[],"output":{"name":"type"}}],[11,"new","","",86,{"inputs":[],"output":{"name":"date"}}],[11,"new_dmy","","",86,{"inputs":[{"name":"dateday"},{"name":"datemonth"},{"name":"dateyear"}],"output":{"name":"date"}}],[11,"new_julian","","",86,{"inputs":[{"name":"u32"}],"output":{"name":"date"}}],[11,"add_days","","",86,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"add_months","","",86,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"add_years","","",86,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"clamp","","",86,{"inputs":[{"name":"self"},{"name":"date"},{"name":"date"}],"output":null}],[11,"clear","","",86,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"days_between","","",86,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"name":"i32"}}],[11,"get_day","","",86,{"inputs":[{"name":"self"}],"output":{"name":"dateday"}}],[11,"get_day_of_year","","",86,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_iso8601_week_of_year","","",86,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_julian","","",86,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_monday_week_of_year","","",86,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_month","","",86,{"inputs":[{"name":"self"}],"output":{"name":"datemonth"}}],[11,"get_sunday_week_of_year","","",86,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_weekday","","",86,{"inputs":[{"name":"self"}],"output":{"name":"dateweekday"}}],[11,"get_year","","",86,{"inputs":[{"name":"self"}],"output":{"name":"dateyear"}}],[11,"is_first_of_month","","",86,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_last_of_month","","",86,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"order","","",86,{"inputs":[{"name":"self"},{"name":"date"}],"output":null}],[11,"set_day","","",86,{"inputs":[{"name":"self"},{"name":"dateday"}],"output":null}],[11,"set_dmy","","",86,{"inputs":[{"name":"self"},{"name":"dateday"},{"name":"datemonth"},{"name":"dateyear"}],"output":null}],[11,"set_julian","","",86,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"set_month","","",86,{"inputs":[{"name":"self"},{"name":"datemonth"}],"output":null}],[11,"set_parse","","",86,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"set_time","","",86,{"inputs":[{"name":"self"},{"name":"time"}],"output":null}],[11,"set_time_t","","",86,{"inputs":[{"name":"self"},{"name":"c_long"}],"output":null}],[11,"set_year","","",86,{"inputs":[{"name":"self"},{"name":"dateyear"}],"output":null}],[11,"subtract_days","","",86,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"subtract_months","","",86,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"subtract_years","","",86,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"valid","","",86,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_days_in_month","","",86,{"inputs":[{"name":"datemonth"},{"name":"dateyear"}],"output":{"name":"u8"}}],[11,"get_monday_weeks_in_year","","",86,{"inputs":[{"name":"dateyear"}],"output":{"name":"u8"}}],[11,"get_sunday_weeks_in_year","","",86,{"inputs":[{"name":"dateyear"}],"output":{"name":"u8"}}],[11,"is_leap_year","","",86,{"inputs":[{"name":"dateyear"}],"output":{"name":"bool"}}],[11,"strftime","","",86,{"inputs":[{"name":"str"},{"name":"str"},{"name":"date"}],"output":{"name":"usize"}}],[11,"valid_day","","",86,{"inputs":[{"name":"dateday"}],"output":{"name":"bool"}}],[11,"valid_dmy","","",86,{"inputs":[{"name":"dateday"},{"name":"datemonth"},{"name":"dateyear"}],"output":{"name":"bool"}}],[11,"valid_julian","","",86,{"inputs":[{"name":"u32"}],"output":{"name":"bool"}}],[11,"valid_month","","",86,{"inputs":[{"name":"datemonth"}],"output":{"name":"bool"}}],[11,"valid_weekday","","",86,{"inputs":[{"name":"dateweekday"}],"output":{"name":"bool"}}],[11,"valid_year","","",86,{"inputs":[{"name":"dateyear"}],"output":{"name":"bool"}}],[11,"default","","",86,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",86,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",86,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",86,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[6,"DateDay","","",null,null],[6,"DateYear","","",null,null],[6,"Time","","",null,null],[6,"TimeSpan","","",null,null],[11,"deref","","",87,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",87,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",88,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",88,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",89,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",89,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",90,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",90,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",91,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",91,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",92,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",92,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",93,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",93,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",94,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",94,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",95,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",95,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",96,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",96,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",97,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",97,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",98,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",98,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",99,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",99,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",100,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",100,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",101,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",101,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",102,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",102,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",103,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",103,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",104,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",104,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",105,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",105,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",106,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",106,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",107,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",107,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",108,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",108,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",109,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",109,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",110,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",110,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",111,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",111,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",112,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",112,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",113,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",113,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",114,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",114,{"inputs":[{"name":"self"}],"output":null}],[14,"glib_wrapper","","Defines a wrapper type and implements the appropriate traits.",null,null],[14,"glib_boxed_wrapper","","Wrapper implementations for Boxed types. See `glib_wrapper!`.",null,null],[14,"glib_shared_wrapper","","Wrapper implementations for shared types. See `glib_wrapper!`.",null,null],[14,"glib_object_wrapper","","Wrapper implementations for Object types. See `glib_wrapper!`.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}]],"paths":[[3,"TimeVal"],[4,"FileError"],[4,"UserDirectory"],[4,"ChecksumType"],[4,"DateMonth"],[4,"DateWeekday"],[4,"KeyFileError"],[4,"TimeType"],[8,"Wrapper"],[8,"UnsafeFrom"],[8,"BoxedMemoryManager"],[3,"Boxed"],[8,"SharedMemoryManager"],[3,"Shared"],[8,"Cast"],[8,"Downcast"],[8,"ObjectExt"],[3,"Object"],[3,"WeakRef"],[3,"Checksum"],[3,"DateTime"],[3,"KeyFile"],[3,"MainContext"],[3,"MainLoop"],[3,"Source"],[3,"TimeZone"],[3,"FormatSizeFlags"],[3,"KeyFileFlags"],[3,"Bytes"],[3,"Closure"],[3,"BoolError"],[8,"ErrorDomain"],[3,"Error"],[3,"EnumClass"],[3,"EnumValue"],[3,"FlagsClass"],[3,"FlagsValue"],[3,"FlagsBuilder"],[3,"Inhibit"],[3,"SignalHandlerId"],[3,"Continue"],[3,"SourceId"],[3,"CallbackGuard"],[3,"Priority"],[3,"Stash"],[3,"StashMut"],[8,"Ptr"],[8,"Uninitialized"],[8,"ToBool"],[8,"ToGlib"],[8,"GlibPtrDefault"],[8,"ToGlibPtr"],[8,"ToGlibPtrMut"],[8,"ToGlibContainerFromSlice"],[8,"FromGlib"],[8,"FromGlibPtrNone"],[8,"FromGlibPtrFull"],[8,"FromGlibPtrBorrow"],[8,"FromGlibContainer"],[8,"FromGlibPtrContainer"],[8,"FromGlibContainerAsVec"],[8,"FromGlibPtrArrayContainerAsVec"],[3,"List"],[3,"SList"],[3,"HashTable"],[4,"Type"],[8,"StaticType"],[8,"InstanceType"],[8,"ToValue"],[8,"ToSendValue"],[8,"FromValueOptional"],[8,"FromValue"],[8,"SetValueOptional"],[8,"SetValue"],[3,"Value"],[3,"ValueArray"],[3,"TypedValue"],[3,"SendValue"],[3,"AnyValue"],[3,"AnySendValue"],[8,"ToVariant"],[8,"FromVariant"],[8,"StaticVariantType"],[3,"Variant"],[3,"VariantType"],[3,"VariantTy"],[3,"Date"],[3,"KEY_FILE_DESKTOP_GROUP"],[3,"KEY_FILE_DESKTOP_KEY_ACTIONS"],[3,"KEY_FILE_DESKTOP_KEY_CATEGORIES"],[3,"KEY_FILE_DESKTOP_KEY_COMMENT"],[3,"KEY_FILE_DESKTOP_KEY_DBUS_ACTIVATABLE"],[3,"KEY_FILE_DESKTOP_KEY_EXEC"],[3,"KEY_FILE_DESKTOP_KEY_FULLNAME"],[3,"KEY_FILE_DESKTOP_KEY_GENERIC_NAME"],[3,"KEY_FILE_DESKTOP_KEY_GETTEXT_DOMAIN"],[3,"KEY_FILE_DESKTOP_KEY_HIDDEN"],[3,"KEY_FILE_DESKTOP_KEY_ICON"],[3,"KEY_FILE_DESKTOP_KEY_KEYWORDS"],[3,"KEY_FILE_DESKTOP_KEY_MIME_TYPE"],[3,"KEY_FILE_DESKTOP_KEY_NAME"],[3,"KEY_FILE_DESKTOP_KEY_NOT_SHOW_IN"],[3,"KEY_FILE_DESKTOP_KEY_NO_DISPLAY"],[3,"KEY_FILE_DESKTOP_KEY_ONLY_SHOW_IN"],[3,"KEY_FILE_DESKTOP_KEY_PATH"],[3,"KEY_FILE_DESKTOP_KEY_STARTUP_NOTIFY"],[3,"KEY_FILE_DESKTOP_KEY_STARTUP_WM_CLASS"],[3,"KEY_FILE_DESKTOP_KEY_TERMINAL"],[3,"KEY_FILE_DESKTOP_KEY_TRY_EXEC"],[3,"KEY_FILE_DESKTOP_KEY_TYPE"],[3,"KEY_FILE_DESKTOP_KEY_URL"],[3,"KEY_FILE_DESKTOP_KEY_VERSION"],[3,"KEY_FILE_DESKTOP_TYPE_APPLICATION"],[3,"KEY_FILE_DESKTOP_TYPE_DIRECTORY"],[3,"KEY_FILE_DESKTOP_TYPE_LINK"]]};
searchIndex["glib_sys"] = {"doc":"","items":[[3,"Volatile","glib_sys","",null,null],[3,"GAsciiType","","",null,null],[3,"GFileTest","","",null,null],[3,"GFormatSizeFlags","","",null,null],[3,"GHookFlagMask","","",null,null],[3,"GIOCondition","","",null,null],[3,"GIOFlags","","",null,null],[3,"GKeyFileFlags","","",null,null],[3,"GLogLevelFlags","","",null,null],[3,"GMarkupCollectType","","",null,null],[3,"GMarkupParseFlags","","",null,null],[3,"GOptionFlags","","",null,null],[3,"GRegexCompileFlags","","",null,null],[3,"GRegexMatchFlags","","",null,null],[3,"GSpawnFlags","","",null,null],[3,"GTestSubprocessFlags","","",null,null],[3,"GTestTrapFlags","","",null,null],[3,"GTraverseFlags","","",null,null],[3,"GMutex","","",null,null],[3,"GArray","","",null,null],[12,"data","","",0,null],[12,"len","","",0,null],[3,"GAsyncQueue","","",null,null],[3,"GBookmarkFile","","",null,null],[3,"GByteArray","","",null,null],[12,"data","","",1,null],[12,"len","","",1,null],[3,"GBytes","","",null,null],[3,"GChecksum","","",null,null],[3,"GCond","","",null,null],[12,"p","","",2,null],[12,"i","","",2,null],[3,"GData","","",null,null],[3,"GDate","","",null,null],[3,"GDateTime","","",null,null],[3,"GDebugKey","","",null,null],[12,"key","","",3,null],[12,"value","","",3,null],[3,"GDir","","",null,null],[3,"GError","","",null,null],[12,"domain","","",4,null],[12,"code","","",4,null],[12,"message","","",4,null],[3,"GHashTable","","",null,null],[3,"GHashTableIter","","",null,null],[12,"dummy1","","",5,null],[12,"dummy2","","",5,null],[12,"dummy3","","",5,null],[12,"dummy4","","",5,null],[12,"dummy5","","",5,null],[12,"dummy6","","",5,null],[3,"GHmac","","",null,null],[3,"GHook","","",null,null],[12,"data","","",6,null],[12,"next","","",6,null],[12,"prev","","",6,null],[12,"ref_count","","",6,null],[12,"hook_id","","",6,null],[12,"flags","","",6,null],[12,"func","","",6,null],[12,"destroy","","",6,null],[3,"GHookList","","",null,null],[12,"seq_id","","",7,null],[12,"hook_size_and_setup","","",7,null],[12,"hooks","","",7,null],[12,"dummy3","","",7,null],[12,"finalize_hook","","",7,null],[12,"dummy","","",7,null],[3,"GIConv","","",null,null],[3,"GIOChannel","","",null,null],[12,"ref_count","","",8,null],[12,"funcs","","",8,null],[12,"encoding","","",8,null],[12,"read_cd","","",8,null],[12,"write_cd","","",8,null],[12,"line_term","","",8,null],[12,"line_term_len","","",8,null],[12,"buf_size","","",8,null],[12,"read_buf","","",8,null],[12,"encoded_read_buf","","",8,null],[12,"write_buf","","",8,null],[12,"partial_write_buf","","",8,null],[3,"GIOFuncs","","",null,null],[12,"io_read","","",9,null],[12,"io_write","","",9,null],[12,"io_seek","","",9,null],[12,"io_close","","",9,null],[12,"io_create_watch","","",9,null],[12,"io_free","","",9,null],[12,"io_set_flags","","",9,null],[12,"io_get_flags","","",9,null],[3,"GKeyFile","","",null,null],[3,"GList","","",null,null],[12,"data","","",10,null],[12,"next","","",10,null],[12,"prev","","",10,null],[3,"GLogField","","",null,null],[12,"key","","",11,null],[12,"value","","",11,null],[12,"length","","",11,null],[3,"GMainContext","","",null,null],[3,"GMainLoop","","",null,null],[3,"GMappedFile","","",null,null],[3,"GMarkupParseContext","","",null,null],[3,"GMarkupParser","","",null,null],[12,"start_element","","",12,null],[12,"end_element","","",12,null],[12,"text","","",12,null],[12,"passthrough","","",12,null],[12,"error","","",12,null],[3,"GMatchInfo","","",null,null],[3,"GMemVTable","","",null,null],[12,"malloc","","",13,null],[12,"realloc","","",13,null],[12,"free","","",13,null],[12,"calloc","","",13,null],[12,"try_malloc","","",13,null],[12,"try_realloc","","",13,null],[3,"GNode","","",null,null],[12,"data","","",14,null],[12,"next","","",14,null],[12,"prev","","",14,null],[12,"parent","","",14,null],[12,"children","","",14,null],[3,"GOnce","","",null,null],[12,"status","","",15,null],[12,"retval","","",15,null],[3,"GOptionContext","","",null,null],[3,"GOptionEntry","","",null,null],[12,"long_name","","",16,null],[12,"short_name","","",16,null],[12,"flags","","",16,null],[12,"arg","","",16,null],[12,"arg_data","","",16,null],[12,"description","","",16,null],[12,"arg_description","","",16,null],[3,"GOptionGroup","","",null,null],[3,"GPatternSpec","","",null,null],[3,"GPollFD","","",null,null],[12,"fd","","",17,null],[12,"events","","",17,null],[12,"revents","","",17,null],[3,"GPrivate","","",null,null],[12,"p","","",18,null],[12,"notify","","",18,null],[12,"future","","",18,null],[3,"GPtrArray","","",null,null],[12,"pdata","","",19,null],[12,"len","","",19,null],[3,"GQueue","","",null,null],[12,"head","","",20,null],[12,"tail","","",20,null],[12,"length","","",20,null],[3,"GRWLock","","",null,null],[12,"p","","",21,null],[12,"i","","",21,null],[3,"GRand","","",null,null],[3,"GRecMutex","","",null,null],[12,"p","","",22,null],[12,"i","","",22,null],[3,"GRegex","","",null,null],[3,"GSList","","",null,null],[12,"data","","",23,null],[12,"next","","",23,null],[3,"GScanner","","",null,null],[12,"user_data","","",24,null],[12,"max_parse_errors","","",24,null],[12,"parse_errors","","",24,null],[12,"input_name","","",24,null],[12,"qdata","","",24,null],[12,"config","","",24,null],[12,"token","","",24,null],[3,"GScannerConfig","","",null,null],[12,"cset_skip_characters","","",25,null],[12,"cset_identifier_first","","",25,null],[12,"cset_identifier_nth","","",25,null],[12,"cpair_comment_single","","",25,null],[3,"GSequence","","",null,null],[3,"GSequenceIter","","",null,null],[3,"GSource","","",null,null],[12,"callback_data","","",26,null],[12,"callback_funcs","","",26,null],[12,"source_funcs","","",26,null],[12,"ref_count","","",26,null],[12,"context","","",26,null],[12,"priority","","",26,null],[12,"flags","","",26,null],[12,"source_id","","",26,null],[12,"poll_fds","","",26,null],[12,"prev","","",26,null],[12,"next","","",26,null],[12,"name","","",26,null],[12,"priv_","","",26,null],[3,"GSourceCallbackFuncs","","",null,null],[12,"ref_","","",27,null],[12,"unref","","",27,null],[12,"get","","",27,null],[3,"GSourceFuncs","","",null,null],[12,"prepare","","",28,null],[12,"check","","",28,null],[12,"dispatch","","",28,null],[12,"finalize","","",28,null],[12,"closure_callback","","",28,null],[12,"closure_marshal","","",28,null],[3,"GSourcePrivate","","",null,null],[3,"GStatBuf","","",null,null],[3,"GString","","",null,null],[12,"str","","",29,null],[12,"len","","",29,null],[12,"allocated_len","","",29,null],[3,"GStringChunk","","",null,null],[3,"GTestCase","","",null,null],[3,"GTestConfig","","",null,null],[12,"test_initialized","","",30,null],[12,"test_quick","","",30,null],[12,"test_perf","","",30,null],[12,"test_verbose","","",30,null],[12,"test_quiet","","",30,null],[12,"test_undefined","","",30,null],[3,"GTestLogBuffer","","",null,null],[12,"data","","",31,null],[12,"msgs","","",31,null],[3,"GTestLogMsg","","",null,null],[12,"log_type","","",32,null],[12,"n_strings","","",32,null],[12,"strings","","",32,null],[12,"n_nums","","",32,null],[12,"nums","","",32,null],[3,"GTestSuite","","",null,null],[3,"GThread","","",null,null],[3,"GThreadPool","","",null,null],[12,"func","","",33,null],[12,"user_data","","",33,null],[12,"exclusive","","",33,null],[3,"GTimeVal","","",null,null],[12,"tv_sec","","",34,null],[12,"tv_usec","","",34,null],[3,"GTimeZone","","",null,null],[3,"GTimer","","",null,null],[3,"GTrashStack","","",null,null],[12,"next","","",35,null],[3,"GTree","","",null,null],[3,"GVariant","","",null,null],[3,"GVariantBuilder","","",null,null],[3,"GVariantDict","","",null,null],[3,"GVariantIter","","",null,null],[12,"x","","",36,null],[3,"GVariantType","","",null,null],[5,"g_io_condition_get_type","","",null,null],[5,"g_mutex_clear","","",null,null],[5,"g_mutex_init","","",null,null],[5,"g_mutex_lock","","",null,null],[5,"g_mutex_trylock","","",null,null],[5,"g_mutex_unlock","","",null,null],[5,"g_array_get_type","","",null,null],[5,"g_array_append_vals","","",null,null],[5,"g_array_free","","",null,null],[5,"g_array_get_element_size","","",null,null],[5,"g_array_insert_vals","","",null,null],[5,"g_array_new","","",null,null],[5,"g_array_prepend_vals","","",null,null],[5,"g_array_ref","","",null,null],[5,"g_array_remove_index","","",null,null],[5,"g_array_remove_index_fast","","",null,null],[5,"g_array_remove_range","","",null,null],[5,"g_array_set_clear_func","","",null,null],[5,"g_array_set_size","","",null,null],[5,"g_array_sized_new","","",null,null],[5,"g_array_sort","","",null,null],[5,"g_array_sort_with_data","","",null,null],[5,"g_array_unref","","",null,null],[5,"g_async_queue_length","","",null,null],[5,"g_async_queue_length_unlocked","","",null,null],[5,"g_async_queue_lock","","",null,null],[5,"g_async_queue_pop","","",null,null],[5,"g_async_queue_pop_unlocked","","",null,null],[5,"g_async_queue_push","","",null,null],[5,"g_async_queue_push_front","","",null,null],[5,"g_async_queue_push_front_unlocked","","",null,null],[5,"g_async_queue_push_sorted","","",null,null],[5,"g_async_queue_push_sorted_unlocked","","",null,null],[5,"g_async_queue_push_unlocked","","",null,null],[5,"g_async_queue_ref","","",null,null],[5,"g_async_queue_ref_unlocked","","",null,null],[5,"g_async_queue_remove","","",null,null],[5,"g_async_queue_remove_unlocked","","",null,null],[5,"g_async_queue_sort","","",null,null],[5,"g_async_queue_sort_unlocked","","",null,null],[5,"g_async_queue_timed_pop","","",null,null],[5,"g_async_queue_timed_pop_unlocked","","",null,null],[5,"g_async_queue_timeout_pop","","",null,null],[5,"g_async_queue_timeout_pop_unlocked","","",null,null],[5,"g_async_queue_try_pop","","",null,null],[5,"g_async_queue_try_pop_unlocked","","",null,null],[5,"g_async_queue_unlock","","",null,null],[5,"g_async_queue_unref","","",null,null],[5,"g_async_queue_unref_and_unlock","","",null,null],[5,"g_async_queue_new","","",null,null],[5,"g_async_queue_new_full","","",null,null],[5,"g_bookmark_file_add_application","","",null,null],[5,"g_bookmark_file_add_group","","",null,null],[5,"g_bookmark_file_free","","",null,null],[5,"g_bookmark_file_get_added","","",null,null],[5,"g_bookmark_file_get_app_info","","",null,null],[5,"g_bookmark_file_get_applications","","",null,null],[5,"g_bookmark_file_get_description","","",null,null],[5,"g_bookmark_file_get_groups","","",null,null],[5,"g_bookmark_file_get_icon","","",null,null],[5,"g_bookmark_file_get_is_private","","",null,null],[5,"g_bookmark_file_get_mime_type","","",null,null],[5,"g_bookmark_file_get_modified","","",null,null],[5,"g_bookmark_file_get_size","","",null,null],[5,"g_bookmark_file_get_title","","",null,null],[5,"g_bookmark_file_get_uris","","",null,null],[5,"g_bookmark_file_get_visited","","",null,null],[5,"g_bookmark_file_has_application","","",null,null],[5,"g_bookmark_file_has_group","","",null,null],[5,"g_bookmark_file_has_item","","",null,null],[5,"g_bookmark_file_load_from_data","","",null,null],[5,"g_bookmark_file_load_from_data_dirs","","",null,null],[5,"g_bookmark_file_load_from_file","","",null,null],[5,"g_bookmark_file_move_item","","",null,null],[5,"g_bookmark_file_remove_application","","",null,null],[5,"g_bookmark_file_remove_group","","",null,null],[5,"g_bookmark_file_remove_item","","",null,null],[5,"g_bookmark_file_set_added","","",null,null],[5,"g_bookmark_file_set_app_info","","",null,null],[5,"g_bookmark_file_set_description","","",null,null],[5,"g_bookmark_file_set_groups","","",null,null],[5,"g_bookmark_file_set_icon","","",null,null],[5,"g_bookmark_file_set_is_private","","",null,null],[5,"g_bookmark_file_set_mime_type","","",null,null],[5,"g_bookmark_file_set_modified","","",null,null],[5,"g_bookmark_file_set_title","","",null,null],[5,"g_bookmark_file_set_visited","","",null,null],[5,"g_bookmark_file_to_data","","",null,null],[5,"g_bookmark_file_to_file","","",null,null],[5,"g_bookmark_file_error_quark","","",null,null],[5,"g_bookmark_file_new","","",null,null],[5,"g_byte_array_get_type","","",null,null],[5,"g_byte_array_append","","",null,null],[5,"g_byte_array_free","","",null,null],[5,"g_byte_array_free_to_bytes","","",null,null],[5,"g_byte_array_new","","",null,null],[5,"g_byte_array_new_take","","",null,null],[5,"g_byte_array_prepend","","",null,null],[5,"g_byte_array_ref","","",null,null],[5,"g_byte_array_remove_index","","",null,null],[5,"g_byte_array_remove_index_fast","","",null,null],[5,"g_byte_array_remove_range","","",null,null],[5,"g_byte_array_set_size","","",null,null],[5,"g_byte_array_sized_new","","",null,null],[5,"g_byte_array_sort","","",null,null],[5,"g_byte_array_sort_with_data","","",null,null],[5,"g_byte_array_unref","","",null,null],[5,"g_bytes_get_type","","",null,null],[5,"g_bytes_new","","",null,null],[5,"g_bytes_new_static","","",null,null],[5,"g_bytes_new_take","","",null,null],[5,"g_bytes_new_with_free_func","","",null,null],[5,"g_bytes_compare","","",null,null],[5,"g_bytes_equal","","",null,null],[5,"g_bytes_get_data","","",null,null],[5,"g_bytes_get_size","","",null,null],[5,"g_bytes_hash","","",null,null],[5,"g_bytes_new_from_bytes","","",null,null],[5,"g_bytes_ref","","",null,null],[5,"g_bytes_unref","","",null,null],[5,"g_bytes_unref_to_array","","",null,null],[5,"g_bytes_unref_to_data","","",null,null],[5,"g_checksum_get_type","","",null,null],[5,"g_checksum_new","","",null,null],[5,"g_checksum_copy","","",null,null],[5,"g_checksum_free","","",null,null],[5,"g_checksum_get_digest","","",null,null],[5,"g_checksum_get_string","","",null,null],[5,"g_checksum_reset","","",null,null],[5,"g_checksum_update","","",null,null],[5,"g_checksum_type_get_length","","",null,null],[5,"g_cond_broadcast","","",null,null],[5,"g_cond_clear","","",null,null],[5,"g_cond_init","","",null,null],[5,"g_cond_signal","","",null,null],[5,"g_cond_wait","","",null,null],[5,"g_cond_wait_until","","",null,null],[5,"g_date_get_type","","",null,null],[5,"g_date_new","","",null,null],[5,"g_date_new_dmy","","",null,null],[5,"g_date_new_julian","","",null,null],[5,"g_date_add_days","","",null,null],[5,"g_date_add_months","","",null,null],[5,"g_date_add_years","","",null,null],[5,"g_date_clamp","","",null,null],[5,"g_date_clear","","",null,null],[5,"g_date_compare","","",null,null],[5,"g_date_days_between","","",null,null],[5,"g_date_free","","",null,null],[5,"g_date_get_day","","",null,null],[5,"g_date_get_day_of_year","","",null,null],[5,"g_date_get_iso8601_week_of_year","","",null,null],[5,"g_date_get_julian","","",null,null],[5,"g_date_get_monday_week_of_year","","",null,null],[5,"g_date_get_month","","",null,null],[5,"g_date_get_sunday_week_of_year","","",null,null],[5,"g_date_get_weekday","","",null,null],[5,"g_date_get_year","","",null,null],[5,"g_date_is_first_of_month","","",null,null],[5,"g_date_is_last_of_month","","",null,null],[5,"g_date_order","","",null,null],[5,"g_date_set_day","","",null,null],[5,"g_date_set_dmy","","",null,null],[5,"g_date_set_julian","","",null,null],[5,"g_date_set_month","","",null,null],[5,"g_date_set_parse","","",null,null],[5,"g_date_set_time","","",null,null],[5,"g_date_set_time_t","","",null,null],[5,"g_date_set_time_val","","",null,null],[5,"g_date_set_year","","",null,null],[5,"g_date_subtract_days","","",null,null],[5,"g_date_subtract_months","","",null,null],[5,"g_date_subtract_years","","",null,null],[5,"g_date_valid","","",null,null],[5,"g_date_get_days_in_month","","",null,null],[5,"g_date_get_monday_weeks_in_year","","",null,null],[5,"g_date_get_sunday_weeks_in_year","","",null,null],[5,"g_date_is_leap_year","","",null,null],[5,"g_date_strftime","","",null,null],[5,"g_date_valid_day","","",null,null],[5,"g_date_valid_dmy","","",null,null],[5,"g_date_valid_julian","","",null,null],[5,"g_date_valid_month","","",null,null],[5,"g_date_valid_weekday","","",null,null],[5,"g_date_valid_year","","",null,null],[5,"g_date_time_get_type","","",null,null],[5,"g_date_time_new","","",null,null],[5,"g_date_time_new_from_timeval_local","","",null,null],[5,"g_date_time_new_from_timeval_utc","","",null,null],[5,"g_date_time_new_from_unix_local","","",null,null],[5,"g_date_time_new_from_unix_utc","","",null,null],[5,"g_date_time_new_local","","",null,null],[5,"g_date_time_new_now","","",null,null],[5,"g_date_time_new_now_local","","",null,null],[5,"g_date_time_new_now_utc","","",null,null],[5,"g_date_time_new_utc","","",null,null],[5,"g_date_time_add","","",null,null],[5,"g_date_time_add_days","","",null,null],[5,"g_date_time_add_full","","",null,null],[5,"g_date_time_add_hours","","",null,null],[5,"g_date_time_add_minutes","","",null,null],[5,"g_date_time_add_months","","",null,null],[5,"g_date_time_add_seconds","","",null,null],[5,"g_date_time_add_weeks","","",null,null],[5,"g_date_time_add_years","","",null,null],[5,"g_date_time_difference","","",null,null],[5,"g_date_time_format","","",null,null],[5,"g_date_time_get_day_of_month","","",null,null],[5,"g_date_time_get_day_of_week","","",null,null],[5,"g_date_time_get_day_of_year","","",null,null],[5,"g_date_time_get_hour","","",null,null],[5,"g_date_time_get_microsecond","","",null,null],[5,"g_date_time_get_minute","","",null,null],[5,"g_date_time_get_month","","",null,null],[5,"g_date_time_get_second","","",null,null],[5,"g_date_time_get_seconds","","",null,null],[5,"g_date_time_get_timezone_abbreviation","","",null,null],[5,"g_date_time_get_utc_offset","","",null,null],[5,"g_date_time_get_week_numbering_year","","",null,null],[5,"g_date_time_get_week_of_year","","",null,null],[5,"g_date_time_get_year","","",null,null],[5,"g_date_time_get_ymd","","",null,null],[5,"g_date_time_is_daylight_savings","","",null,null],[5,"g_date_time_ref","","",null,null],[5,"g_date_time_to_local","","",null,null],[5,"g_date_time_to_timeval","","",null,null],[5,"g_date_time_to_timezone","","",null,null],[5,"g_date_time_to_unix","","",null,null],[5,"g_date_time_to_utc","","",null,null],[5,"g_date_time_unref","","",null,null],[5,"g_date_time_compare","","",null,null],[5,"g_date_time_equal","","",null,null],[5,"g_date_time_hash","","",null,null],[5,"g_dir_close","","",null,null],[5,"g_dir_read_name_utf8","","",null,null],[5,"g_dir_read_name","","",null,null],[5,"g_dir_rewind","","",null,null],[5,"g_dir_make_tmp","","",null,null],[5,"g_dir_open_utf8","","",null,null],[5,"g_dir_open","","",null,null],[5,"g_error_get_type","","",null,null],[5,"g_error_new","","",null,null],[5,"g_error_new_literal","","",null,null],[5,"g_error_copy","","",null,null],[5,"g_error_free","","",null,null],[5,"g_error_matches","","",null,null],[5,"g_hash_table_get_type","","",null,null],[5,"g_hash_table_add","","",null,null],[5,"g_hash_table_contains","","",null,null],[5,"g_hash_table_destroy","","",null,null],[5,"g_hash_table_find","","",null,null],[5,"g_hash_table_foreach","","",null,null],[5,"g_hash_table_foreach_remove","","",null,null],[5,"g_hash_table_foreach_steal","","",null,null],[5,"g_hash_table_get_keys","","",null,null],[5,"g_hash_table_get_keys_as_array","","",null,null],[5,"g_hash_table_get_values","","",null,null],[5,"g_hash_table_insert","","",null,null],[5,"g_hash_table_lookup","","",null,null],[5,"g_hash_table_lookup_extended","","",null,null],[5,"g_hash_table_new","","",null,null],[5,"g_hash_table_new_full","","",null,null],[5,"g_hash_table_ref","","",null,null],[5,"g_hash_table_remove","","",null,null],[5,"g_hash_table_remove_all","","",null,null],[5,"g_hash_table_replace","","",null,null],[5,"g_hash_table_size","","",null,null],[5,"g_hash_table_steal","","",null,null],[5,"g_hash_table_steal_all","","",null,null],[5,"g_hash_table_unref","","",null,null],[5,"g_hash_table_iter_get_hash_table","","",null,null],[5,"g_hash_table_iter_init","","",null,null],[5,"g_hash_table_iter_next","","",null,null],[5,"g_hash_table_iter_remove","","",null,null],[5,"g_hash_table_iter_replace","","",null,null],[5,"g_hash_table_iter_steal","","",null,null],[5,"g_hmac_copy","","",null,null],[5,"g_hmac_get_digest","","",null,null],[5,"g_hmac_get_string","","",null,null],[5,"g_hmac_ref","","",null,null],[5,"g_hmac_unref","","",null,null],[5,"g_hmac_update","","",null,null],[5,"g_hmac_new","","",null,null],[5,"g_hook_compare_ids","","",null,null],[5,"g_hook_alloc","","",null,null],[5,"g_hook_destroy","","",null,null],[5,"g_hook_destroy_link","","",null,null],[5,"g_hook_find","","",null,null],[5,"g_hook_find_data","","",null,null],[5,"g_hook_find_func","","",null,null],[5,"g_hook_find_func_data","","",null,null],[5,"g_hook_first_valid","","",null,null],[5,"g_hook_free","","",null,null],[5,"g_hook_get","","",null,null],[5,"g_hook_insert_before","","",null,null],[5,"g_hook_insert_sorted","","",null,null],[5,"g_hook_next_valid","","",null,null],[5,"g_hook_prepend","","",null,null],[5,"g_hook_ref","","",null,null],[5,"g_hook_unref","","",null,null],[5,"g_hook_list_clear","","",null,null],[5,"g_hook_list_init","","",null,null],[5,"g_hook_list_invoke","","",null,null],[5,"g_hook_list_invoke_check","","",null,null],[5,"g_hook_list_marshal","","",null,null],[5,"g_hook_list_marshal_check","","",null,null],[5,"g_iconv_close","","",null,null],[5,"g_iconv_open","","",null,null],[5,"g_io_channel_get_type","","",null,null],[5,"g_io_channel_new_file_utf8","","",null,null],[5,"g_io_channel_new_file","","",null,null],[5,"g_io_channel_unix_new","","",null,null],[5,"g_io_channel_close","","",null,null],[5,"g_io_channel_flush","","",null,null],[5,"g_io_channel_get_buffer_condition","","",null,null],[5,"g_io_channel_get_buffer_size","","",null,null],[5,"g_io_channel_get_buffered","","",null,null],[5,"g_io_channel_get_close_on_unref","","",null,null],[5,"g_io_channel_get_encoding","","",null,null],[5,"g_io_channel_get_flags","","",null,null],[5,"g_io_channel_get_line_term","","",null,null],[5,"g_io_channel_init","","",null,null],[5,"g_io_channel_read","","",null,null],[5,"g_io_channel_read_chars","","",null,null],[5,"g_io_channel_read_line","","",null,null],[5,"g_io_channel_read_line_string","","",null,null],[5,"g_io_channel_read_to_end","","",null,null],[5,"g_io_channel_read_unichar","","",null,null],[5,"g_io_channel_ref","","",null,null],[5,"g_io_channel_seek","","",null,null],[5,"g_io_channel_seek_position","","",null,null],[5,"g_io_channel_set_buffer_size","","",null,null],[5,"g_io_channel_set_buffered","","",null,null],[5,"g_io_channel_set_close_on_unref","","",null,null],[5,"g_io_channel_set_encoding","","",null,null],[5,"g_io_channel_set_flags","","",null,null],[5,"g_io_channel_set_line_term","","",null,null],[5,"g_io_channel_shutdown","","",null,null],[5,"g_io_channel_unix_get_fd","","",null,null],[5,"g_io_channel_unref","","",null,null],[5,"g_io_channel_write","","",null,null],[5,"g_io_channel_write_chars","","",null,null],[5,"g_io_channel_write_unichar","","",null,null],[5,"g_io_channel_error_from_errno","","",null,null],[5,"g_io_channel_error_quark","","",null,null],[5,"g_key_file_get_type","","",null,null],[5,"g_key_file_new","","",null,null],[5,"g_key_file_free","","",null,null],[5,"g_key_file_get_boolean","","",null,null],[5,"g_key_file_get_boolean_list","","",null,null],[5,"g_key_file_get_comment","","",null,null],[5,"g_key_file_get_double","","",null,null],[5,"g_key_file_get_double_list","","",null,null],[5,"g_key_file_get_groups","","",null,null],[5,"g_key_file_get_int64","","",null,null],[5,"g_key_file_get_integer","","",null,null],[5,"g_key_file_get_integer_list","","",null,null],[5,"g_key_file_get_keys","","",null,null],[5,"g_key_file_get_locale_string","","",null,null],[5,"g_key_file_get_locale_string_list","","",null,null],[5,"g_key_file_get_start_group","","",null,null],[5,"g_key_file_get_string","","",null,null],[5,"g_key_file_get_string_list","","",null,null],[5,"g_key_file_get_uint64","","",null,null],[5,"g_key_file_get_value","","",null,null],[5,"g_key_file_has_group","","",null,null],[5,"g_key_file_has_key","","",null,null],[5,"g_key_file_load_from_bytes","","",null,null],[5,"g_key_file_load_from_data","","",null,null],[5,"g_key_file_load_from_data_dirs","","",null,null],[5,"g_key_file_load_from_dirs","","",null,null],[5,"g_key_file_load_from_file","","",null,null],[5,"g_key_file_ref","","",null,null],[5,"g_key_file_remove_comment","","",null,null],[5,"g_key_file_remove_group","","",null,null],[5,"g_key_file_remove_key","","",null,null],[5,"g_key_file_save_to_file","","",null,null],[5,"g_key_file_set_boolean","","",null,null],[5,"g_key_file_set_boolean_list","","",null,null],[5,"g_key_file_set_comment","","",null,null],[5,"g_key_file_set_double","","",null,null],[5,"g_key_file_set_double_list","","",null,null],[5,"g_key_file_set_int64","","",null,null],[5,"g_key_file_set_integer","","",null,null],[5,"g_key_file_set_integer_list","","",null,null],[5,"g_key_file_set_list_separator","","",null,null],[5,"g_key_file_set_locale_string","","",null,null],[5,"g_key_file_set_locale_string_list","","",null,null],[5,"g_key_file_set_string","","",null,null],[5,"g_key_file_set_string_list","","",null,null],[5,"g_key_file_set_uint64","","",null,null],[5,"g_key_file_set_value","","",null,null],[5,"g_key_file_to_data","","",null,null],[5,"g_key_file_unref","","",null,null],[5,"g_key_file_error_quark","","",null,null],[5,"g_list_alloc","","",null,null],[5,"g_list_append","","",null,null],[5,"g_list_concat","","",null,null],[5,"g_list_copy","","",null,null],[5,"g_list_copy_deep","","",null,null],[5,"g_list_delete_link","","",null,null],[5,"g_list_find","","",null,null],[5,"g_list_find_custom","","",null,null],[5,"g_list_first","","",null,null],[5,"g_list_foreach","","",null,null],[5,"g_list_free","","",null,null],[5,"g_list_free_1","","",null,null],[5,"g_list_free_full","","",null,null],[5,"g_list_index","","",null,null],[5,"g_list_insert","","",null,null],[5,"g_list_insert_before","","",null,null],[5,"g_list_insert_sorted","","",null,null],[5,"g_list_insert_sorted_with_data","","",null,null],[5,"g_list_last","","",null,null],[5,"g_list_length","","",null,null],[5,"g_list_nth","","",null,null],[5,"g_list_nth_data","","",null,null],[5,"g_list_nth_prev","","",null,null],[5,"g_list_position","","",null,null],[5,"g_list_prepend","","",null,null],[5,"g_list_remove","","",null,null],[5,"g_list_remove_all","","",null,null],[5,"g_list_remove_link","","",null,null],[5,"g_list_reverse","","",null,null],[5,"g_list_sort","","",null,null],[5,"g_list_sort_with_data","","",null,null],[5,"g_main_context_get_type","","",null,null],[5,"g_main_context_new","","",null,null],[5,"g_main_context_acquire","","",null,null],[5,"g_main_context_add_poll","","",null,null],[5,"g_main_context_check","","",null,null],[5,"g_main_context_dispatch","","",null,null],[5,"g_main_context_find_source_by_funcs_user_data","","",null,null],[5,"g_main_context_find_source_by_id","","",null,null],[5,"g_main_context_find_source_by_user_data","","",null,null],[5,"g_main_context_get_poll_func","","",null,null],[5,"g_main_context_invoke","","",null,null],[5,"g_main_context_invoke_full","","",null,null],[5,"g_main_context_is_owner","","",null,null],[5,"g_main_context_iteration","","",null,null],[5,"g_main_context_pending","","",null,null],[5,"g_main_context_pop_thread_default","","",null,null],[5,"g_main_context_prepare","","",null,null],[5,"g_main_context_push_thread_default","","",null,null],[5,"g_main_context_query","","",null,null],[5,"g_main_context_ref","","",null,null],[5,"g_main_context_release","","",null,null],[5,"g_main_context_remove_poll","","",null,null],[5,"g_main_context_set_poll_func","","",null,null],[5,"g_main_context_unref","","",null,null],[5,"g_main_context_wait","","",null,null],[5,"g_main_context_wakeup","","",null,null],[5,"g_main_context_default","","",null,null],[5,"g_main_context_get_thread_default","","",null,null],[5,"g_main_context_ref_thread_default","","",null,null],[5,"g_main_loop_get_type","","",null,null],[5,"g_main_loop_new","","",null,null],[5,"g_main_loop_get_context","","",null,null],[5,"g_main_loop_is_running","","",null,null],[5,"g_main_loop_quit","","",null,null],[5,"g_main_loop_ref","","",null,null],[5,"g_main_loop_run","","",null,null],[5,"g_main_loop_unref","","",null,null],[5,"g_mapped_file_get_type","","",null,null],[5,"g_mapped_file_new","","",null,null],[5,"g_mapped_file_new_from_fd","","",null,null],[5,"g_mapped_file_free","","",null,null],[5,"g_mapped_file_get_bytes","","",null,null],[5,"g_mapped_file_get_contents","","",null,null],[5,"g_mapped_file_get_length","","",null,null],[5,"g_mapped_file_ref","","",null,null],[5,"g_mapped_file_unref","","",null,null],[5,"g_markup_parse_context_get_type","","",null,null],[5,"g_markup_parse_context_new","","",null,null],[5,"g_markup_parse_context_end_parse","","",null,null],[5,"g_markup_parse_context_free","","",null,null],[5,"g_markup_parse_context_get_element","","",null,null],[5,"g_markup_parse_context_get_element_stack","","",null,null],[5,"g_markup_parse_context_get_position","","",null,null],[5,"g_markup_parse_context_get_user_data","","",null,null],[5,"g_markup_parse_context_parse","","",null,null],[5,"g_markup_parse_context_pop","","",null,null],[5,"g_markup_parse_context_push","","",null,null],[5,"g_markup_parse_context_ref","","",null,null],[5,"g_markup_parse_context_unref","","",null,null],[5,"g_match_info_get_type","","",null,null],[5,"g_match_info_expand_references","","",null,null],[5,"g_match_info_fetch","","",null,null],[5,"g_match_info_fetch_all","","",null,null],[5,"g_match_info_fetch_named","","",null,null],[5,"g_match_info_fetch_named_pos","","",null,null],[5,"g_match_info_fetch_pos","","",null,null],[5,"g_match_info_free","","",null,null],[5,"g_match_info_get_match_count","","",null,null],[5,"g_match_info_get_regex","","",null,null],[5,"g_match_info_get_string","","",null,null],[5,"g_match_info_is_partial_match","","",null,null],[5,"g_match_info_matches","","",null,null],[5,"g_match_info_next","","",null,null],[5,"g_match_info_ref","","",null,null],[5,"g_match_info_unref","","",null,null],[5,"g_node_child_index","","",null,null],[5,"g_node_child_position","","",null,null],[5,"g_node_children_foreach","","",null,null],[5,"g_node_copy","","",null,null],[5,"g_node_copy_deep","","",null,null],[5,"g_node_depth","","",null,null],[5,"g_node_destroy","","",null,null],[5,"g_node_find","","",null,null],[5,"g_node_find_child","","",null,null],[5,"g_node_first_sibling","","",null,null],[5,"g_node_get_root","","",null,null],[5,"g_node_insert","","",null,null],[5,"g_node_insert_after","","",null,null],[5,"g_node_insert_before","","",null,null],[5,"g_node_is_ancestor","","",null,null],[5,"g_node_last_child","","",null,null],[5,"g_node_last_sibling","","",null,null],[5,"g_node_max_height","","",null,null],[5,"g_node_n_children","","",null,null],[5,"g_node_n_nodes","","",null,null],[5,"g_node_nth_child","","",null,null],[5,"g_node_prepend","","",null,null],[5,"g_node_reverse_children","","",null,null],[5,"g_node_traverse","","",null,null],[5,"g_node_unlink","","",null,null],[5,"g_node_new","","",null,null],[5,"g_once_impl","","",null,null],[5,"g_once_init_enter","","",null,null],[5,"g_once_init_leave","","",null,null],[5,"g_option_context_add_group","","",null,null],[5,"g_option_context_add_main_entries","","",null,null],[5,"g_option_context_free","","",null,null],[5,"g_option_context_get_description","","",null,null],[5,"g_option_context_get_help","","",null,null],[5,"g_option_context_get_help_enabled","","",null,null],[5,"g_option_context_get_ignore_unknown_options","","",null,null],[5,"g_option_context_get_main_group","","",null,null],[5,"g_option_context_get_strict_posix","","",null,null],[5,"g_option_context_get_summary","","",null,null],[5,"g_option_context_parse","","",null,null],[5,"g_option_context_parse_strv","","",null,null],[5,"g_option_context_set_description","","",null,null],[5,"g_option_context_set_help_enabled","","",null,null],[5,"g_option_context_set_ignore_unknown_options","","",null,null],[5,"g_option_context_set_main_group","","",null,null],[5,"g_option_context_set_strict_posix","","",null,null],[5,"g_option_context_set_summary","","",null,null],[5,"g_option_context_set_translate_func","","",null,null],[5,"g_option_context_set_translation_domain","","",null,null],[5,"g_option_context_new","","",null,null],[5,"g_option_group_get_type","","",null,null],[5,"g_option_group_new","","",null,null],[5,"g_option_group_add_entries","","",null,null],[5,"g_option_group_free","","",null,null],[5,"g_option_group_ref","","",null,null],[5,"g_option_group_set_error_hook","","",null,null],[5,"g_option_group_set_parse_hooks","","",null,null],[5,"g_option_group_set_translate_func","","",null,null],[5,"g_option_group_set_translation_domain","","",null,null],[5,"g_option_group_unref","","",null,null],[5,"g_pattern_spec_equal","","",null,null],[5,"g_pattern_spec_free","","",null,null],[5,"g_pattern_spec_new","","",null,null],[5,"g_pollfd_get_type","","",null,null],[5,"g_private_get","","",null,null],[5,"g_private_replace","","",null,null],[5,"g_private_set","","",null,null],[5,"g_ptr_array_get_type","","",null,null],[5,"g_ptr_array_add","","",null,null],[5,"g_ptr_array_find","","",null,null],[5,"g_ptr_array_find_with_equal_func","","",null,null],[5,"g_ptr_array_foreach","","",null,null],[5,"g_ptr_array_free","","",null,null],[5,"g_ptr_array_insert","","",null,null],[5,"g_ptr_array_new","","",null,null],[5,"g_ptr_array_new_full","","",null,null],[5,"g_ptr_array_new_with_free_func","","",null,null],[5,"g_ptr_array_ref","","",null,null],[5,"g_ptr_array_remove","","",null,null],[5,"g_ptr_array_remove_fast","","",null,null],[5,"g_ptr_array_remove_index","","",null,null],[5,"g_ptr_array_remove_index_fast","","",null,null],[5,"g_ptr_array_remove_range","","",null,null],[5,"g_ptr_array_set_free_func","","",null,null],[5,"g_ptr_array_set_size","","",null,null],[5,"g_ptr_array_sized_new","","",null,null],[5,"g_ptr_array_sort","","",null,null],[5,"g_ptr_array_sort_with_data","","",null,null],[5,"g_ptr_array_unref","","",null,null],[5,"g_queue_clear","","",null,null],[5,"g_queue_copy","","",null,null],[5,"g_queue_delete_link","","",null,null],[5,"g_queue_find","","",null,null],[5,"g_queue_find_custom","","",null,null],[5,"g_queue_foreach","","",null,null],[5,"g_queue_free","","",null,null],[5,"g_queue_free_full","","",null,null],[5,"g_queue_get_length","","",null,null],[5,"g_queue_index","","",null,null],[5,"g_queue_init","","",null,null],[5,"g_queue_insert_after","","",null,null],[5,"g_queue_insert_before","","",null,null],[5,"g_queue_insert_sorted","","",null,null],[5,"g_queue_is_empty","","",null,null],[5,"g_queue_link_index","","",null,null],[5,"g_queue_peek_head","","",null,null],[5,"g_queue_peek_head_link","","",null,null],[5,"g_queue_peek_nth","","",null,null],[5,"g_queue_peek_nth_link","","",null,null],[5,"g_queue_peek_tail","","",null,null],[5,"g_queue_peek_tail_link","","",null,null],[5,"g_queue_pop_head","","",null,null],[5,"g_queue_pop_head_link","","",null,null],[5,"g_queue_pop_nth","","",null,null],[5,"g_queue_pop_nth_link","","",null,null],[5,"g_queue_pop_tail","","",null,null],[5,"g_queue_pop_tail_link","","",null,null],[5,"g_queue_push_head","","",null,null],[5,"g_queue_push_head_link","","",null,null],[5,"g_queue_push_nth","","",null,null],[5,"g_queue_push_nth_link","","",null,null],[5,"g_queue_push_tail","","",null,null],[5,"g_queue_push_tail_link","","",null,null],[5,"g_queue_remove","","",null,null],[5,"g_queue_remove_all","","",null,null],[5,"g_queue_reverse","","",null,null],[5,"g_queue_sort","","",null,null],[5,"g_queue_unlink","","",null,null],[5,"g_queue_new","","",null,null],[5,"g_rw_lock_clear","","",null,null],[5,"g_rw_lock_init","","",null,null],[5,"g_rw_lock_reader_lock","","",null,null],[5,"g_rw_lock_reader_trylock","","",null,null],[5,"g_rw_lock_reader_unlock","","",null,null],[5,"g_rw_lock_writer_lock","","",null,null],[5,"g_rw_lock_writer_trylock","","",null,null],[5,"g_rw_lock_writer_unlock","","",null,null],[5,"g_rand_copy","","",null,null],[5,"g_rand_double","","",null,null],[5,"g_rand_double_range","","",null,null],[5,"g_rand_free","","",null,null],[5,"g_rand_int","","",null,null],[5,"g_rand_int_range","","",null,null],[5,"g_rand_set_seed","","",null,null],[5,"g_rand_set_seed_array","","",null,null],[5,"g_rand_new","","",null,null],[5,"g_rand_new_with_seed","","",null,null],[5,"g_rand_new_with_seed_array","","",null,null],[5,"g_rec_mutex_clear","","",null,null],[5,"g_rec_mutex_init","","",null,null],[5,"g_rec_mutex_lock","","",null,null],[5,"g_rec_mutex_trylock","","",null,null],[5,"g_rec_mutex_unlock","","",null,null],[5,"g_regex_get_type","","",null,null],[5,"g_regex_new","","",null,null],[5,"g_regex_get_capture_count","","",null,null],[5,"g_regex_get_compile_flags","","",null,null],[5,"g_regex_get_has_cr_or_lf","","",null,null],[5,"g_regex_get_match_flags","","",null,null],[5,"g_regex_get_max_backref","","",null,null],[5,"g_regex_get_max_lookbehind","","",null,null],[5,"g_regex_get_pattern","","",null,null],[5,"g_regex_get_string_number","","",null,null],[5,"g_regex_match","","",null,null],[5,"g_regex_match_all","","",null,null],[5,"g_regex_match_all_full","","",null,null],[5,"g_regex_match_full","","",null,null],[5,"g_regex_ref","","",null,null],[5,"g_regex_replace","","",null,null],[5,"g_regex_replace_eval","","",null,null],[5,"g_regex_replace_literal","","",null,null],[5,"g_regex_split","","",null,null],[5,"g_regex_split_full","","",null,null],[5,"g_regex_unref","","",null,null],[5,"g_regex_check_replacement","","",null,null],[5,"g_regex_error_quark","","",null,null],[5,"g_regex_escape_nul","","",null,null],[5,"g_regex_escape_string","","",null,null],[5,"g_regex_match_simple","","",null,null],[5,"g_regex_split_simple","","",null,null],[5,"g_slist_alloc","","",null,null],[5,"g_slist_append","","",null,null],[5,"g_slist_concat","","",null,null],[5,"g_slist_copy","","",null,null],[5,"g_slist_copy_deep","","",null,null],[5,"g_slist_delete_link","","",null,null],[5,"g_slist_find","","",null,null],[5,"g_slist_find_custom","","",null,null],[5,"g_slist_foreach","","",null,null],[5,"g_slist_free","","",null,null],[5,"g_slist_free_1","","",null,null],[5,"g_slist_free_full","","",null,null],[5,"g_slist_index","","",null,null],[5,"g_slist_insert","","",null,null],[5,"g_slist_insert_before","","",null,null],[5,"g_slist_insert_sorted","","",null,null],[5,"g_slist_insert_sorted_with_data","","",null,null],[5,"g_slist_last","","",null,null],[5,"g_slist_length","","",null,null],[5,"g_slist_nth","","",null,null],[5,"g_slist_nth_data","","",null,null],[5,"g_slist_position","","",null,null],[5,"g_slist_prepend","","",null,null],[5,"g_slist_remove","","",null,null],[5,"g_slist_remove_all","","",null,null],[5,"g_slist_remove_link","","",null,null],[5,"g_slist_reverse","","",null,null],[5,"g_slist_sort","","",null,null],[5,"g_slist_sort_with_data","","",null,null],[5,"g_scanner_cur_line","","",null,null],[5,"g_scanner_cur_position","","",null,null],[5,"g_scanner_cur_token","","",null,null],[5,"g_scanner_cur_value","","",null,null],[5,"g_scanner_destroy","","",null,null],[5,"g_scanner_eof","","",null,null],[5,"g_scanner_error","","",null,null],[5,"g_scanner_get_next_token","","",null,null],[5,"g_scanner_input_file","","",null,null],[5,"g_scanner_input_text","","",null,null],[5,"g_scanner_lookup_symbol","","",null,null],[5,"g_scanner_peek_next_token","","",null,null],[5,"g_scanner_scope_add_symbol","","",null,null],[5,"g_scanner_scope_foreach_symbol","","",null,null],[5,"g_scanner_scope_lookup_symbol","","",null,null],[5,"g_scanner_scope_remove_symbol","","",null,null],[5,"g_scanner_set_scope","","",null,null],[5,"g_scanner_sync_file_offset","","",null,null],[5,"g_scanner_unexp_token","","",null,null],[5,"g_scanner_warn","","",null,null],[5,"g_scanner_new","","",null,null],[5,"g_sequence_append","","",null,null],[5,"g_sequence_foreach","","",null,null],[5,"g_sequence_free","","",null,null],[5,"g_sequence_get_begin_iter","","",null,null],[5,"g_sequence_get_end_iter","","",null,null],[5,"g_sequence_get_iter_at_pos","","",null,null],[5,"g_sequence_get_length","","",null,null],[5,"g_sequence_insert_sorted","","",null,null],[5,"g_sequence_insert_sorted_iter","","",null,null],[5,"g_sequence_is_empty","","",null,null],[5,"g_sequence_lookup","","",null,null],[5,"g_sequence_lookup_iter","","",null,null],[5,"g_sequence_prepend","","",null,null],[5,"g_sequence_search","","",null,null],[5,"g_sequence_search_iter","","",null,null],[5,"g_sequence_sort","","",null,null],[5,"g_sequence_sort_iter","","",null,null],[5,"g_sequence_foreach_range","","",null,null],[5,"g_sequence_get","","",null,null],[5,"g_sequence_insert_before","","",null,null],[5,"g_sequence_move","","",null,null],[5,"g_sequence_move_range","","",null,null],[5,"g_sequence_new","","",null,null],[5,"g_sequence_range_get_midpoint","","",null,null],[5,"g_sequence_remove","","",null,null],[5,"g_sequence_remove_range","","",null,null],[5,"g_sequence_set","","",null,null],[5,"g_sequence_sort_changed","","",null,null],[5,"g_sequence_sort_changed_iter","","",null,null],[5,"g_sequence_swap","","",null,null],[5,"g_sequence_iter_compare","","",null,null],[5,"g_sequence_iter_get_position","","",null,null],[5,"g_sequence_iter_get_sequence","","",null,null],[5,"g_sequence_iter_is_begin","","",null,null],[5,"g_sequence_iter_is_end","","",null,null],[5,"g_sequence_iter_move","","",null,null],[5,"g_sequence_iter_next","","",null,null],[5,"g_sequence_iter_prev","","",null,null],[5,"g_source_get_type","","",null,null],[5,"g_source_new","","",null,null],[5,"g_source_add_child_source","","",null,null],[5,"g_source_add_poll","","",null,null],[5,"g_source_add_unix_fd","","",null,null],[5,"g_source_attach","","",null,null],[5,"g_source_destroy","","",null,null],[5,"g_source_get_can_recurse","","",null,null],[5,"g_source_get_context","","",null,null],[5,"g_source_get_current_time","","",null,null],[5,"g_source_get_id","","",null,null],[5,"g_source_get_name","","",null,null],[5,"g_source_get_priority","","",null,null],[5,"g_source_get_ready_time","","",null,null],[5,"g_source_get_time","","",null,null],[5,"g_source_is_destroyed","","",null,null],[5,"g_source_modify_unix_fd","","",null,null],[5,"g_source_query_unix_fd","","",null,null],[5,"g_source_ref","","",null,null],[5,"g_source_remove_child_source","","",null,null],[5,"g_source_remove_poll","","",null,null],[5,"g_source_remove_unix_fd","","",null,null],[5,"g_source_set_callback","","",null,null],[5,"g_source_set_callback_indirect","","",null,null],[5,"g_source_set_can_recurse","","",null,null],[5,"g_source_set_funcs","","",null,null],[5,"g_source_set_name","","",null,null],[5,"g_source_set_priority","","",null,null],[5,"g_source_set_ready_time","","",null,null],[5,"g_source_unref","","",null,null],[5,"g_source_remove","","",null,null],[5,"g_source_remove_by_funcs_user_data","","",null,null],[5,"g_source_remove_by_user_data","","",null,null],[5,"g_source_set_name_by_id","","",null,null],[5,"g_gstring_get_type","","",null,null],[5,"g_string_append","","",null,null],[5,"g_string_append_c","","",null,null],[5,"g_string_append_len","","",null,null],[5,"g_string_append_printf","","",null,null],[5,"g_string_append_unichar","","",null,null],[5,"g_string_append_uri_escaped","","",null,null],[5,"g_string_ascii_down","","",null,null],[5,"g_string_ascii_up","","",null,null],[5,"g_string_assign","","",null,null],[5,"g_string_down","","",null,null],[5,"g_string_equal","","",null,null],[5,"g_string_erase","","",null,null],[5,"g_string_free","","",null,null],[5,"g_string_free_to_bytes","","",null,null],[5,"g_string_hash","","",null,null],[5,"g_string_insert","","",null,null],[5,"g_string_insert_c","","",null,null],[5,"g_string_insert_len","","",null,null],[5,"g_string_insert_unichar","","",null,null],[5,"g_string_overwrite","","",null,null],[5,"g_string_overwrite_len","","",null,null],[5,"g_string_prepend","","",null,null],[5,"g_string_prepend_c","","",null,null],[5,"g_string_prepend_len","","",null,null],[5,"g_string_prepend_unichar","","",null,null],[5,"g_string_printf","","",null,null],[5,"g_string_set_size","","",null,null],[5,"g_string_truncate","","",null,null],[5,"g_string_up","","",null,null],[5,"g_string_chunk_clear","","",null,null],[5,"g_string_chunk_free","","",null,null],[5,"g_string_chunk_insert","","",null,null],[5,"g_string_chunk_insert_const","","",null,null],[5,"g_string_chunk_insert_len","","",null,null],[5,"g_string_chunk_new","","",null,null],[5,"g_test_log_buffer_free","","",null,null],[5,"g_test_log_buffer_pop","","",null,null],[5,"g_test_log_buffer_push","","",null,null],[5,"g_test_log_buffer_new","","",null,null],[5,"g_test_log_msg_free","","",null,null],[5,"g_test_suite_add","","",null,null],[5,"g_test_suite_add_suite","","",null,null],[5,"g_thread_get_type","","",null,null],[5,"g_thread_new","","",null,null],[5,"g_thread_try_new","","",null,null],[5,"g_thread_join","","",null,null],[5,"g_thread_ref","","",null,null],[5,"g_thread_unref","","",null,null],[5,"g_thread_error_quark","","",null,null],[5,"g_thread_exit","","",null,null],[5,"g_thread_self","","",null,null],[5,"g_thread_yield","","",null,null],[5,"g_thread_pool_free","","",null,null],[5,"g_thread_pool_get_max_threads","","",null,null],[5,"g_thread_pool_get_num_threads","","",null,null],[5,"g_thread_pool_move_to_front","","",null,null],[5,"g_thread_pool_push","","",null,null],[5,"g_thread_pool_set_max_threads","","",null,null],[5,"g_thread_pool_set_sort_function","","",null,null],[5,"g_thread_pool_unprocessed","","",null,null],[5,"g_thread_pool_get_max_idle_time","","",null,null],[5,"g_thread_pool_get_max_unused_threads","","",null,null],[5,"g_thread_pool_get_num_unused_threads","","",null,null],[5,"g_thread_pool_new","","",null,null],[5,"g_thread_pool_set_max_idle_time","","",null,null],[5,"g_thread_pool_set_max_unused_threads","","",null,null],[5,"g_thread_pool_stop_unused_threads","","",null,null],[5,"g_time_val_add","","",null,null],[5,"g_time_val_to_iso8601","","",null,null],[5,"g_time_val_from_iso8601","","",null,null],[5,"g_time_zone_get_type","","",null,null],[5,"g_time_zone_new","","",null,null],[5,"g_time_zone_new_local","","",null,null],[5,"g_time_zone_new_utc","","",null,null],[5,"g_time_zone_adjust_time","","",null,null],[5,"g_time_zone_find_interval","","",null,null],[5,"g_time_zone_get_abbreviation","","",null,null],[5,"g_time_zone_get_offset","","",null,null],[5,"g_time_zone_is_dst","","",null,null],[5,"g_time_zone_ref","","",null,null],[5,"g_time_zone_unref","","",null,null],[5,"g_timer_continue","","",null,null],[5,"g_timer_destroy","","",null,null],[5,"g_timer_elapsed","","",null,null],[5,"g_timer_reset","","",null,null],[5,"g_timer_start","","",null,null],[5,"g_timer_stop","","",null,null],[5,"g_timer_new","","",null,null],[5,"g_trash_stack_height","","",null,null],[5,"g_trash_stack_peek","","",null,null],[5,"g_trash_stack_pop","","",null,null],[5,"g_trash_stack_push","","",null,null],[5,"g_tree_destroy","","",null,null],[5,"g_tree_foreach","","",null,null],[5,"g_tree_height","","",null,null],[5,"g_tree_insert","","",null,null],[5,"g_tree_lookup","","",null,null],[5,"g_tree_lookup_extended","","",null,null],[5,"g_tree_nnodes","","",null,null],[5,"g_tree_ref","","",null,null],[5,"g_tree_remove","","",null,null],[5,"g_tree_replace","","",null,null],[5,"g_tree_search","","",null,null],[5,"g_tree_steal","","",null,null],[5,"g_tree_traverse","","",null,null],[5,"g_tree_unref","","",null,null],[5,"g_tree_new","","",null,null],[5,"g_tree_new_full","","",null,null],[5,"g_tree_new_with_data","","",null,null],[5,"g_variant_new","","",null,null],[5,"g_variant_new_array","","",null,null],[5,"g_variant_new_boolean","","",null,null],[5,"g_variant_new_byte","","",null,null],[5,"g_variant_new_bytestring","","",null,null],[5,"g_variant_new_bytestring_array","","",null,null],[5,"g_variant_new_dict_entry","","",null,null],[5,"g_variant_new_double","","",null,null],[5,"g_variant_new_fixed_array","","",null,null],[5,"g_variant_new_from_bytes","","",null,null],[5,"g_variant_new_from_data","","",null,null],[5,"g_variant_new_handle","","",null,null],[5,"g_variant_new_int16","","",null,null],[5,"g_variant_new_int32","","",null,null],[5,"g_variant_new_int64","","",null,null],[5,"g_variant_new_maybe","","",null,null],[5,"g_variant_new_object_path","","",null,null],[5,"g_variant_new_objv","","",null,null],[5,"g_variant_new_parsed","","",null,null],[5,"g_variant_new_printf","","",null,null],[5,"g_variant_new_signature","","",null,null],[5,"g_variant_new_string","","",null,null],[5,"g_variant_new_strv","","",null,null],[5,"g_variant_new_take_string","","",null,null],[5,"g_variant_new_tuple","","",null,null],[5,"g_variant_new_uint16","","",null,null],[5,"g_variant_new_uint32","","",null,null],[5,"g_variant_new_uint64","","",null,null],[5,"g_variant_new_variant","","",null,null],[5,"g_variant_byteswap","","",null,null],[5,"g_variant_check_format_string","","",null,null],[5,"g_variant_classify","","",null,null],[5,"g_variant_compare","","",null,null],[5,"g_variant_dup_bytestring","","",null,null],[5,"g_variant_dup_bytestring_array","","",null,null],[5,"g_variant_dup_objv","","",null,null],[5,"g_variant_dup_string","","",null,null],[5,"g_variant_dup_strv","","",null,null],[5,"g_variant_equal","","",null,null],[5,"g_variant_get","","",null,null],[5,"g_variant_get_boolean","","",null,null],[5,"g_variant_get_byte","","",null,null],[5,"g_variant_get_bytestring","","",null,null],[5,"g_variant_get_bytestring_array","","",null,null],[5,"g_variant_get_child","","",null,null],[5,"g_variant_get_child_value","","",null,null],[5,"g_variant_get_data","","",null,null],[5,"g_variant_get_data_as_bytes","","",null,null],[5,"g_variant_get_double","","",null,null],[5,"g_variant_get_fixed_array","","",null,null],[5,"g_variant_get_handle","","",null,null],[5,"g_variant_get_int16","","",null,null],[5,"g_variant_get_int32","","",null,null],[5,"g_variant_get_int64","","",null,null],[5,"g_variant_get_maybe","","",null,null],[5,"g_variant_get_normal_form","","",null,null],[5,"g_variant_get_objv","","",null,null],[5,"g_variant_get_size","","",null,null],[5,"g_variant_get_string","","",null,null],[5,"g_variant_get_strv","","",null,null],[5,"g_variant_get_type","","",null,null],[5,"g_variant_get_type_string","","",null,null],[5,"g_variant_get_uint16","","",null,null],[5,"g_variant_get_uint32","","",null,null],[5,"g_variant_get_uint64","","",null,null],[5,"g_variant_get_variant","","",null,null],[5,"g_variant_hash","","",null,null],[5,"g_variant_is_container","","",null,null],[5,"g_variant_is_floating","","",null,null],[5,"g_variant_is_normal_form","","",null,null],[5,"g_variant_is_of_type","","",null,null],[5,"g_variant_iter_new","","",null,null],[5,"g_variant_lookup","","",null,null],[5,"g_variant_lookup_value","","",null,null],[5,"g_variant_n_children","","",null,null],[5,"g_variant_print","","",null,null],[5,"g_variant_print_string","","",null,null],[5,"g_variant_ref","","",null,null],[5,"g_variant_ref_sink","","",null,null],[5,"g_variant_store","","",null,null],[5,"g_variant_take_ref","","",null,null],[5,"g_variant_unref","","",null,null],[5,"g_variant_is_object_path","","",null,null],[5,"g_variant_is_signature","","",null,null],[5,"g_variant_parse","","",null,null],[5,"g_variant_parse_error_print_context","","",null,null],[5,"g_variant_parse_error_quark","","",null,null],[5,"g_variant_parser_get_error_quark","","",null,null],[5,"g_variant_builder_get_type","","",null,null],[5,"g_variant_builder_new","","",null,null],[5,"g_variant_builder_add","","",null,null],[5,"g_variant_builder_add_parsed","","",null,null],[5,"g_variant_builder_add_value","","",null,null],[5,"g_variant_builder_clear","","",null,null],[5,"g_variant_builder_close","","",null,null],[5,"g_variant_builder_end","","",null,null],[5,"g_variant_builder_init","","",null,null],[5,"g_variant_builder_open","","",null,null],[5,"g_variant_builder_ref","","",null,null],[5,"g_variant_builder_unref","","",null,null],[5,"g_variant_dict_get_type","","",null,null],[5,"g_variant_dict_new","","",null,null],[5,"g_variant_dict_clear","","",null,null],[5,"g_variant_dict_contains","","",null,null],[5,"g_variant_dict_end","","",null,null],[5,"g_variant_dict_init","","",null,null],[5,"g_variant_dict_insert","","",null,null],[5,"g_variant_dict_insert_value","","",null,null],[5,"g_variant_dict_lookup","","",null,null],[5,"g_variant_dict_lookup_value","","",null,null],[5,"g_variant_dict_ref","","",null,null],[5,"g_variant_dict_remove","","",null,null],[5,"g_variant_dict_unref","","",null,null],[5,"g_variant_iter_copy","","",null,null],[5,"g_variant_iter_free","","",null,null],[5,"g_variant_iter_init","","",null,null],[5,"g_variant_iter_loop","","",null,null],[5,"g_variant_iter_n_children","","",null,null],[5,"g_variant_iter_next","","",null,null],[5,"g_variant_iter_next_value","","",null,null],[5,"g_variant_type_get_gtype","","",null,null],[5,"g_variant_type_new","","",null,null],[5,"g_variant_type_new_array","","",null,null],[5,"g_variant_type_new_dict_entry","","",null,null],[5,"g_variant_type_new_maybe","","",null,null],[5,"g_variant_type_new_tuple","","",null,null],[5,"g_variant_type_copy","","",null,null],[5,"g_variant_type_dup_string","","",null,null],[5,"g_variant_type_element","","",null,null],[5,"g_variant_type_equal","","",null,null],[5,"g_variant_type_first","","",null,null],[5,"g_variant_type_free","","",null,null],[5,"g_variant_type_get_string_length","","",null,null],[5,"g_variant_type_hash","","",null,null],[5,"g_variant_type_is_array","","",null,null],[5,"g_variant_type_is_basic","","",null,null],[5,"g_variant_type_is_container","","",null,null],[5,"g_variant_type_is_definite","","",null,null],[5,"g_variant_type_is_dict_entry","","",null,null],[5,"g_variant_type_is_maybe","","",null,null],[5,"g_variant_type_is_subtype_of","","",null,null],[5,"g_variant_type_is_tuple","","",null,null],[5,"g_variant_type_is_variant","","",null,null],[5,"g_variant_type_key","","",null,null],[5,"g_variant_type_n_items","","",null,null],[5,"g_variant_type_next","","",null,null],[5,"g_variant_type_peek_string","","",null,null],[5,"g_variant_type_value","","",null,null],[5,"g_variant_type_checked_","","",null,null],[5,"g_variant_type_string_is_valid","","",null,null],[5,"g_variant_type_string_scan","","",null,null],[5,"g_access","","",null,null],[5,"g_ascii_digit_value","","",null,null],[5,"g_ascii_dtostr","","",null,null],[5,"g_ascii_formatd","","",null,null],[5,"g_ascii_strcasecmp","","",null,null],[5,"g_ascii_strdown","","",null,null],[5,"g_ascii_string_to_signed","","",null,null],[5,"g_ascii_string_to_unsigned","","",null,null],[5,"g_ascii_strncasecmp","","",null,null],[5,"g_ascii_strtod","","",null,null],[5,"g_ascii_strtoll","","",null,null],[5,"g_ascii_strtoull","","",null,null],[5,"g_ascii_strup","","",null,null],[5,"g_ascii_tolower","","",null,null],[5,"g_ascii_toupper","","",null,null],[5,"g_ascii_xdigit_value","","",null,null],[5,"g_assert_warning","","",null,null],[5,"g_assertion_message","","",null,null],[5,"g_assertion_message_cmpstr","","",null,null],[5,"g_assertion_message_error","","",null,null],[5,"g_assertion_message_expr","","",null,null],[5,"g_atexit","","",null,null],[5,"g_atomic_int_add","","",null,null],[5,"g_atomic_int_and","","",null,null],[5,"g_atomic_int_compare_and_exchange","","",null,null],[5,"g_atomic_int_dec_and_test","","",null,null],[5,"g_atomic_int_exchange_and_add","","",null,null],[5,"g_atomic_int_get","","",null,null],[5,"g_atomic_int_inc","","",null,null],[5,"g_atomic_int_or","","",null,null],[5,"g_atomic_int_set","","",null,null],[5,"g_atomic_int_xor","","",null,null],[5,"g_atomic_pointer_add","","",null,null],[5,"g_atomic_pointer_and","","",null,null],[5,"g_atomic_pointer_compare_and_exchange","","",null,null],[5,"g_atomic_pointer_get","","",null,null],[5,"g_atomic_pointer_or","","",null,null],[5,"g_atomic_pointer_set","","",null,null],[5,"g_atomic_pointer_xor","","",null,null],[5,"g_base64_decode","","",null,null],[5,"g_base64_decode_inplace","","",null,null],[5,"g_base64_decode_step","","",null,null],[5,"g_base64_encode","","",null,null],[5,"g_base64_encode_close","","",null,null],[5,"g_base64_encode_step","","",null,null],[5,"g_basename","","",null,null],[5,"g_bit_lock","","",null,null],[5,"g_bit_nth_lsf","","",null,null],[5,"g_bit_nth_msf","","",null,null],[5,"g_bit_storage","","",null,null],[5,"g_bit_trylock","","",null,null],[5,"g_bit_unlock","","",null,null],[5,"g_build_filename","","",null,null],[5,"g_build_filenamev","","",null,null],[5,"g_build_path","","",null,null],[5,"g_build_pathv","","",null,null],[5,"g_chdir","","",null,null],[5,"glib_check_version","","",null,null],[5,"g_child_watch_add","","",null,null],[5,"g_child_watch_add_full","","",null,null],[5,"g_child_watch_source_new","","",null,null],[5,"g_clear_error","","",null,null],[5,"g_clear_pointer","","",null,null],[5,"g_close","","",null,null],[5,"g_compute_checksum_for_bytes","","",null,null],[5,"g_compute_checksum_for_data","","",null,null],[5,"g_compute_checksum_for_string","","",null,null],[5,"g_compute_hmac_for_bytes","","",null,null],[5,"g_compute_hmac_for_data","","",null,null],[5,"g_compute_hmac_for_string","","",null,null],[5,"g_convert","","",null,null],[5,"g_convert_error_quark","","",null,null],[5,"g_convert_with_fallback","","",null,null],[5,"g_convert_with_iconv","","",null,null],[5,"g_datalist_clear","","",null,null],[5,"g_datalist_foreach","","",null,null],[5,"g_datalist_get_data","","",null,null],[5,"g_datalist_get_flags","","",null,null],[5,"g_datalist_id_dup_data","","",null,null],[5,"g_datalist_id_get_data","","",null,null],[5,"g_datalist_id_remove_no_notify","","",null,null],[5,"g_datalist_id_replace_data","","",null,null],[5,"g_datalist_id_set_data_full","","",null,null],[5,"g_datalist_init","","",null,null],[5,"g_datalist_set_flags","","",null,null],[5,"g_datalist_unset_flags","","",null,null],[5,"g_dataset_destroy","","",null,null],[5,"g_dataset_foreach","","",null,null],[5,"g_dataset_id_get_data","","",null,null],[5,"g_dataset_id_remove_no_notify","","",null,null],[5,"g_dataset_id_set_data_full","","",null,null],[5,"g_dcgettext","","",null,null],[5,"g_dgettext","","",null,null],[5,"g_direct_equal","","",null,null],[5,"g_direct_hash","","",null,null],[5,"g_dngettext","","",null,null],[5,"g_double_equal","","",null,null],[5,"g_double_hash","","",null,null],[5,"g_dpgettext","","",null,null],[5,"g_dpgettext2","","",null,null],[5,"g_environ_getenv","","",null,null],[5,"g_environ_setenv","","",null,null],[5,"g_environ_unsetenv","","",null,null],[5,"g_file_error_from_errno","","",null,null],[5,"g_file_error_quark","","",null,null],[5,"g_file_get_contents_utf8","","",null,null],[5,"g_file_get_contents","","",null,null],[5,"g_file_open_tmp_utf8","","",null,null],[5,"g_file_open_tmp","","",null,null],[5,"g_file_read_link","","",null,null],[5,"g_file_set_contents","","",null,null],[5,"g_file_test_utf8","","",null,null],[5,"g_file_test","","",null,null],[5,"g_filename_display_basename","","",null,null],[5,"g_filename_display_name","","",null,null],[5,"g_filename_from_uri_utf8","","",null,null],[5,"g_filename_from_uri","","",null,null],[5,"g_filename_from_utf8_utf8","","",null,null],[5,"g_filename_from_utf8","","",null,null],[5,"g_filename_to_uri_utf8","","",null,null],[5,"g_filename_to_uri","","",null,null],[5,"g_filename_to_utf8_utf8","","",null,null],[5,"g_filename_to_utf8","","",null,null],[5,"g_find_program_in_path_utf8","","",null,null],[5,"g_find_program_in_path","","",null,null],[5,"g_format_size","","",null,null],[5,"g_format_size_for_display","","",null,null],[5,"g_format_size_full","","",null,null],[5,"g_fprintf","","",null,null],[5,"g_free","","",null,null],[5,"g_get_application_name","","",null,null],[5,"g_get_charset","","",null,null],[5,"g_get_codeset","","",null,null],[5,"g_get_current_dir_utf8","","",null,null],[5,"g_get_current_dir","","",null,null],[5,"g_get_current_time","","",null,null],[5,"g_get_environ","","",null,null],[5,"g_get_filename_charsets","","",null,null],[5,"g_get_home_dir_utf8","","",null,null],[5,"g_get_home_dir","","",null,null],[5,"g_get_host_name","","",null,null],[5,"g_get_language_names","","",null,null],[5,"g_get_locale_variants","","",null,null],[5,"g_get_monotonic_time","","",null,null],[5,"g_get_num_processors","","",null,null],[5,"g_get_prgname","","",null,null],[5,"g_get_real_name_utf8","","",null,null],[5,"g_get_real_name","","",null,null],[5,"g_get_real_time","","",null,null],[5,"g_get_system_config_dirs","","",null,null],[5,"g_get_system_data_dirs","","",null,null],[5,"g_get_tmp_dir_utf8","","",null,null],[5,"g_get_tmp_dir","","",null,null],[5,"g_get_user_cache_dir","","",null,null],[5,"g_get_user_config_dir","","",null,null],[5,"g_get_user_data_dir","","",null,null],[5,"g_get_user_name_utf8","","",null,null],[5,"g_get_user_name","","",null,null],[5,"g_get_user_runtime_dir","","",null,null],[5,"g_get_user_special_dir","","",null,null],[5,"g_getenv_utf8","","",null,null],[5,"g_getenv","","",null,null],[5,"g_hostname_is_ascii_encoded","","",null,null],[5,"g_hostname_is_ip_address","","",null,null],[5,"g_hostname_is_non_ascii","","",null,null],[5,"g_hostname_to_ascii","","",null,null],[5,"g_hostname_to_unicode","","",null,null],[5,"g_iconv","","",null,null],[5,"g_idle_add","","",null,null],[5,"g_idle_add_full","","",null,null],[5,"g_idle_remove_by_data","","",null,null],[5,"g_idle_source_new","","",null,null],[5,"g_int64_equal","","",null,null],[5,"g_int64_hash","","",null,null],[5,"g_int_equal","","",null,null],[5,"g_int_hash","","",null,null],[5,"g_intern_static_string","","",null,null],[5,"g_intern_string","","",null,null],[5,"g_io_add_watch","","",null,null],[5,"g_io_add_watch_full","","",null,null],[5,"g_io_create_watch","","",null,null],[5,"g_listenv","","",null,null],[5,"g_locale_from_utf8","","",null,null],[5,"g_locale_to_utf8","","",null,null],[5,"g_log","","",null,null],[5,"g_log_default_handler","","",null,null],[5,"g_log_remove_handler","","",null,null],[5,"g_log_set_always_fatal","","",null,null],[5,"g_log_set_default_handler","","",null,null],[5,"g_log_set_fatal_mask","","",null,null],[5,"g_log_set_handler","","",null,null],[5,"g_log_set_handler_full","","",null,null],[5,"g_log_set_writer_func","","",null,null],[5,"g_log_structured","","",null,null],[5,"g_log_structured_array","","",null,null],[5,"g_log_variant","","",null,null],[5,"g_log_writer_default","","",null,null],[5,"g_log_writer_format_fields","","",null,null],[5,"g_log_writer_is_journald","","",null,null],[5,"g_log_writer_journald","","",null,null],[5,"g_log_writer_standard_streams","","",null,null],[5,"g_log_writer_supports_color","","",null,null],[5,"g_main_current_source","","",null,null],[5,"g_main_depth","","",null,null],[5,"g_malloc","","",null,null],[5,"g_malloc0","","",null,null],[5,"g_malloc0_n","","",null,null],[5,"g_malloc_n","","",null,null],[5,"g_markup_collect_attributes","","",null,null],[5,"g_markup_error_quark","","",null,null],[5,"g_markup_escape_text","","",null,null],[5,"g_markup_printf_escaped","","",null,null],[5,"g_mem_is_system_malloc","","",null,null],[5,"g_mem_profile","","",null,null],[5,"g_mem_set_vtable","","",null,null],[5,"g_memdup","","",null,null],[5,"g_mkdir_with_parents","","",null,null],[5,"g_mkdtemp","","",null,null],[5,"g_mkdtemp_full","","",null,null],[5,"g_mkstemp_utf8","","",null,null],[5,"g_mkstemp","","",null,null],[5,"g_mkstemp_full","","",null,null],[5,"g_nullify_pointer","","",null,null],[5,"g_number_parser_error_quark","","",null,null],[5,"g_on_error_query","","",null,null],[5,"g_on_error_stack_trace","","",null,null],[5,"g_option_error_quark","","",null,null],[5,"g_parse_debug_string","","",null,null],[5,"g_path_get_basename","","",null,null],[5,"g_path_get_dirname","","",null,null],[5,"g_path_is_absolute","","",null,null],[5,"g_path_skip_root","","",null,null],[5,"g_pattern_match","","",null,null],[5,"g_pattern_match_simple","","",null,null],[5,"g_pattern_match_string","","",null,null],[5,"g_pointer_bit_lock","","",null,null],[5,"g_pointer_bit_trylock","","",null,null],[5,"g_pointer_bit_unlock","","",null,null],[5,"g_poll","","",null,null],[5,"g_prefix_error","","",null,null],[5,"g_print","","",null,null],[5,"g_printerr","","",null,null],[5,"g_printf","","",null,null],[5,"g_propagate_error","","",null,null],[5,"g_propagate_prefixed_error","","",null,null],[5,"g_qsort_with_data","","",null,null],[5,"g_quark_from_static_string","","",null,null],[5,"g_quark_from_string","","",null,null],[5,"g_quark_to_string","","",null,null],[5,"g_quark_try_string","","",null,null],[5,"g_random_double","","",null,null],[5,"g_random_double_range","","",null,null],[5,"g_random_int","","",null,null],[5,"g_random_int_range","","",null,null],[5,"g_random_set_seed","","",null,null],[5,"g_realloc","","",null,null],[5,"g_realloc_n","","",null,null],[5,"g_reload_user_special_dirs_cache","","",null,null],[5,"g_return_if_fail_warning","","",null,null],[5,"g_rmdir","","",null,null],[5,"g_set_application_name","","",null,null],[5,"g_set_error","","",null,null],[5,"g_set_error_literal","","",null,null],[5,"g_set_prgname","","",null,null],[5,"g_set_print_handler","","",null,null],[5,"g_set_printerr_handler","","",null,null],[5,"g_setenv_utf8","","",null,null],[5,"g_setenv","","",null,null],[5,"g_shell_error_quark","","",null,null],[5,"g_shell_parse_argv","","",null,null],[5,"g_shell_quote","","",null,null],[5,"g_shell_unquote","","",null,null],[5,"g_slice_alloc","","",null,null],[5,"g_slice_alloc0","","",null,null],[5,"g_slice_copy","","",null,null],[5,"g_slice_free1","","",null,null],[5,"g_slice_free_chain_with_offset","","",null,null],[5,"g_slice_get_config","","",null,null],[5,"g_slice_get_config_state","","",null,null],[5,"g_slice_set_config","","",null,null],[5,"g_snprintf","","",null,null],[5,"g_spaced_primes_closest","","",null,null],[5,"g_spawn_async_utf8","","",null,null],[5,"g_spawn_async","","",null,null],[5,"g_spawn_async_with_pipes_utf8","","",null,null],[5,"g_spawn_async_with_pipes","","",null,null],[5,"g_spawn_check_exit_status","","",null,null],[5,"g_spawn_close_pid","","",null,null],[5,"g_spawn_command_line_async_utf8","","",null,null],[5,"g_spawn_command_line_async","","",null,null],[5,"g_spawn_command_line_sync_utf8","","",null,null],[5,"g_spawn_command_line_sync","","",null,null],[5,"g_spawn_error_quark","","",null,null],[5,"g_spawn_exit_error_quark","","",null,null],[5,"g_spawn_sync_utf8","","",null,null],[5,"g_spawn_sync","","",null,null],[5,"g_sprintf","","",null,null],[5,"g_stpcpy","","",null,null],[5,"g_str_equal","","",null,null],[5,"g_str_has_prefix","","",null,null],[5,"g_str_has_suffix","","",null,null],[5,"g_str_hash","","",null,null],[5,"g_str_is_ascii","","",null,null],[5,"g_str_match_string","","",null,null],[5,"g_str_to_ascii","","",null,null],[5,"g_str_tokenize_and_fold","","",null,null],[5,"g_strcanon","","",null,null],[5,"g_strcasecmp","","",null,null],[5,"g_strchomp","","",null,null],[5,"g_strchug","","",null,null],[5,"g_strcmp0","","",null,null],[5,"g_strcompress","","",null,null],[5,"g_strconcat","","",null,null],[5,"g_strdelimit","","",null,null],[5,"g_strdown","","",null,null],[5,"g_strdup","","",null,null],[5,"g_strdup_printf","","",null,null],[5,"g_strdupv","","",null,null],[5,"g_strerror","","",null,null],[5,"g_strescape","","",null,null],[5,"g_strfreev","","",null,null],[5,"g_string_new","","",null,null],[5,"g_string_new_len","","",null,null],[5,"g_string_sized_new","","",null,null],[5,"g_strip_context","","",null,null],[5,"g_strjoin","","",null,null],[5,"g_strjoinv","","",null,null],[5,"g_strlcat","","",null,null],[5,"g_strlcpy","","",null,null],[5,"g_strncasecmp","","",null,null],[5,"g_strndup","","",null,null],[5,"g_strnfill","","",null,null],[5,"g_strreverse","","",null,null],[5,"g_strrstr","","",null,null],[5,"g_strrstr_len","","",null,null],[5,"g_strsignal","","",null,null],[5,"g_strsplit","","",null,null],[5,"g_strsplit_set","","",null,null],[5,"g_strstr_len","","",null,null],[5,"g_strtod","","",null,null],[5,"g_strup","","",null,null],[5,"g_strv_contains","","",null,null],[5,"g_strv_get_type","","",null,null],[5,"g_strv_length","","",null,null],[5,"g_test_add_data_func","","",null,null],[5,"g_test_add_data_func_full","","",null,null],[5,"g_test_add_func","","",null,null],[5,"g_test_add_vtable","","",null,null],[5,"g_test_assert_expected_messages_internal","","",null,null],[5,"g_test_bug","","",null,null],[5,"g_test_bug_base","","",null,null],[5,"g_test_build_filename","","",null,null],[5,"g_test_create_case","","",null,null],[5,"g_test_create_suite","","",null,null],[5,"g_test_expect_message","","",null,null],[5,"g_test_fail","","",null,null],[5,"g_test_failed","","",null,null],[5,"g_test_get_dir","","",null,null],[5,"g_test_get_filename","","",null,null],[5,"g_test_get_root","","",null,null],[5,"g_test_incomplete","","",null,null],[5,"g_test_init","","",null,null],[5,"g_test_log_set_fatal_handler","","",null,null],[5,"g_test_log_type_name","","",null,null],[5,"g_test_maximized_result","","",null,null],[5,"g_test_message","","",null,null],[5,"g_test_minimized_result","","",null,null],[5,"g_test_queue_destroy","","",null,null],[5,"g_test_queue_free","","",null,null],[5,"g_test_rand_double","","",null,null],[5,"g_test_rand_double_range","","",null,null],[5,"g_test_rand_int","","",null,null],[5,"g_test_rand_int_range","","",null,null],[5,"g_test_run","","",null,null],[5,"g_test_run_suite","","",null,null],[5,"g_test_set_nonfatal_assertions","","",null,null],[5,"g_test_skip","","",null,null],[5,"g_test_subprocess","","",null,null],[5,"g_test_timer_elapsed","","",null,null],[5,"g_test_timer_last","","",null,null],[5,"g_test_timer_start","","",null,null],[5,"g_test_trap_assertions","","",null,null],[5,"g_test_trap_fork","","",null,null],[5,"g_test_trap_has_passed","","",null,null],[5,"g_test_trap_reached_timeout","","",null,null],[5,"g_test_trap_subprocess","","",null,null],[5,"g_timeout_add","","",null,null],[5,"g_timeout_add_full","","",null,null],[5,"g_timeout_add_seconds","","",null,null],[5,"g_timeout_add_seconds_full","","",null,null],[5,"g_timeout_source_new","","",null,null],[5,"g_timeout_source_new_seconds","","",null,null],[5,"g_try_malloc","","",null,null],[5,"g_try_malloc0","","",null,null],[5,"g_try_malloc0_n","","",null,null],[5,"g_try_malloc_n","","",null,null],[5,"g_try_realloc","","",null,null],[5,"g_try_realloc_n","","",null,null],[5,"g_ucs4_to_utf16","","",null,null],[5,"g_ucs4_to_utf8","","",null,null],[5,"g_unichar_break_type","","",null,null],[5,"g_unichar_combining_class","","",null,null],[5,"g_unichar_compose","","",null,null],[5,"g_unichar_decompose","","",null,null],[5,"g_unichar_digit_value","","",null,null],[5,"g_unichar_fully_decompose","","",null,null],[5,"g_unichar_get_mirror_char","","",null,null],[5,"g_unichar_get_script","","",null,null],[5,"g_unichar_isalnum","","",null,null],[5,"g_unichar_isalpha","","",null,null],[5,"g_unichar_iscntrl","","",null,null],[5,"g_unichar_isdefined","","",null,null],[5,"g_unichar_isdigit","","",null,null],[5,"g_unichar_isgraph","","",null,null],[5,"g_unichar_islower","","",null,null],[5,"g_unichar_ismark","","",null,null],[5,"g_unichar_isprint","","",null,null],[5,"g_unichar_ispunct","","",null,null],[5,"g_unichar_isspace","","",null,null],[5,"g_unichar_istitle","","",null,null],[5,"g_unichar_isupper","","",null,null],[5,"g_unichar_iswide","","",null,null],[5,"g_unichar_iswide_cjk","","",null,null],[5,"g_unichar_isxdigit","","",null,null],[5,"g_unichar_iszerowidth","","",null,null],[5,"g_unichar_to_utf8","","",null,null],[5,"g_unichar_tolower","","",null,null],[5,"g_unichar_totitle","","",null,null],[5,"g_unichar_toupper","","",null,null],[5,"g_unichar_type","","",null,null],[5,"g_unichar_validate","","",null,null],[5,"g_unichar_xdigit_value","","",null,null],[5,"g_unicode_canonical_decomposition","","",null,null],[5,"g_unicode_canonical_ordering","","",null,null],[5,"g_unicode_script_from_iso15924","","",null,null],[5,"g_unicode_script_to_iso15924","","",null,null],[5,"g_unix_error_quark","","",null,null],[5,"g_unix_fd_add","","",null,null],[5,"g_unix_fd_add_full","","",null,null],[5,"g_unix_fd_source_new","","",null,null],[5,"g_unix_open_pipe","","",null,null],[5,"g_unix_set_fd_nonblocking","","",null,null],[5,"g_unix_signal_add","","",null,null],[5,"g_unix_signal_add_full","","",null,null],[5,"g_unix_signal_source_new","","",null,null],[5,"g_unlink","","",null,null],[5,"g_unsetenv_utf8","","",null,null],[5,"g_unsetenv","","",null,null],[5,"g_uri_escape_string","","",null,null],[5,"g_uri_list_extract_uris","","",null,null],[5,"g_uri_parse_scheme","","",null,null],[5,"g_uri_unescape_segment","","",null,null],[5,"g_uri_unescape_string","","",null,null],[5,"g_usleep","","",null,null],[5,"g_utf16_to_ucs4","","",null,null],[5,"g_utf16_to_utf8","","",null,null],[5,"g_utf8_casefold","","",null,null],[5,"g_utf8_collate","","",null,null],[5,"g_utf8_collate_key","","",null,null],[5,"g_utf8_collate_key_for_filename","","",null,null],[5,"g_utf8_find_next_char","","",null,null],[5,"g_utf8_find_prev_char","","",null,null],[5,"g_utf8_get_char","","",null,null],[5,"g_utf8_get_char_validated","","",null,null],[5,"g_utf8_make_valid","","",null,null],[5,"g_utf8_normalize","","",null,null],[5,"g_utf8_offset_to_pointer","","",null,null],[5,"g_utf8_pointer_to_offset","","",null,null],[5,"g_utf8_prev_char","","",null,null],[5,"g_utf8_strchr","","",null,null],[5,"g_utf8_strdown","","",null,null],[5,"g_utf8_strlen","","",null,null],[5,"g_utf8_strncpy","","",null,null],[5,"g_utf8_strrchr","","",null,null],[5,"g_utf8_strreverse","","",null,null],[5,"g_utf8_strup","","",null,null],[5,"g_utf8_substring","","",null,null],[5,"g_utf8_to_ucs4","","",null,null],[5,"g_utf8_to_ucs4_fast","","",null,null],[5,"g_utf8_to_utf16","","",null,null],[5,"g_utf8_validate","","",null,null],[5,"g_uuid_string_is_valid","","",null,null],[5,"g_uuid_string_random","","",null,null],[5,"g_variant_get_gtype","","",null,null],[5,"g_warn_message","","",null,null],[6,"gboolean","","",null,null],[6,"gconstpointer","","",null,null],[6,"gpointer","","",null,null],[6,"GDateDay","","",null,null],[6,"GDateYear","","",null,null],[6,"GMutexLocker","","",null,null],[6,"GPid","","",null,null],[6,"GQuark","","",null,null],[6,"GStrv","","",null,null],[6,"GTime","","",null,null],[6,"GTimeSpan","","",null,null],[6,"GType","","",null,null],[6,"GBookmarkFileError","","",null,null],[6,"GChecksumType","","",null,null],[6,"GConvertError","","",null,null],[6,"GDateDMY","","",null,null],[6,"GDateMonth","","",null,null],[6,"GDateWeekday","","",null,null],[6,"GErrorType","","",null,null],[6,"GFileError","","",null,null],[6,"GIOChannelError","","",null,null],[6,"GIOError","","",null,null],[6,"GIOStatus","","",null,null],[6,"GKeyFileError","","",null,null],[6,"GLogWriterOutput","","",null,null],[6,"GMarkupError","","",null,null],[6,"GNormalizeMode","","",null,null],[6,"GNumberParserError","","",null,null],[6,"GOnceStatus","","",null,null],[6,"GOptionArg","","",null,null],[6,"GOptionError","","",null,null],[6,"GRegexError","","",null,null],[6,"GSeekType","","",null,null],[6,"GShellError","","",null,null],[6,"GSliceConfig","","",null,null],[6,"GSpawnError","","",null,null],[6,"GTestFileType","","",null,null],[6,"GTestLogType","","",null,null],[6,"ThreadError","","",null,null],[6,"GThreadError","","",null,null],[6,"GTimeType","","",null,null],[6,"GTokenType","","",null,null],[6,"GTraverseType","","",null,null],[6,"GUnicodeBreakType","","",null,null],[6,"GUnicodeScript","","",null,null],[6,"GUnicodeType","","",null,null],[6,"GUserDirectory","","",null,null],[6,"GVariantClass","","",null,null],[6,"GVariantParseError","","",null,null],[6,"GDoubleIEEE754","","",null,null],[6,"GFloatIEEE754","","",null,null],[6,"GTokenValue","","",null,null],[6,"GChildWatchFunc","","",null,null],[6,"GCompareDataFunc","","",null,null],[6,"GCompareFunc","","",null,null],[6,"GCopyFunc","","",null,null],[6,"GDataForeachFunc","","",null,null],[6,"GDestroyNotify","","",null,null],[6,"GDuplicateFunc","","",null,null],[6,"GEqualFunc","","",null,null],[6,"GFreeFunc","","",null,null],[6,"GFunc","","",null,null],[6,"GHFunc","","",null,null],[6,"GHRFunc","","",null,null],[6,"GHashFunc","","",null,null],[6,"GHookCheckFunc","","",null,null],[6,"GHookCheckMarshaller","","",null,null],[6,"GHookCompareFunc","","",null,null],[6,"GHookFinalizeFunc","","",null,null],[6,"GHookFindFunc","","",null,null],[6,"GHookFunc","","",null,null],[6,"GHookMarshaller","","",null,null],[6,"GIOFunc","","",null,null],[6,"GLogFunc","","",null,null],[6,"GLogWriterFunc","","",null,null],[6,"GNodeForeachFunc","","",null,null],[6,"GNodeTraverseFunc","","",null,null],[6,"GOptionArgFunc","","",null,null],[6,"GOptionErrorFunc","","",null,null],[6,"GOptionParseFunc","","",null,null],[6,"GPollFunc","","",null,null],[6,"GPrintFunc","","",null,null],[6,"GRegexEvalCallback","","",null,null],[6,"GScannerMsgFunc","","",null,null],[6,"GSequenceIterCompareFunc","","",null,null],[6,"GSourceDummyMarshal","","",null,null],[6,"GSourceFunc","","",null,null],[6,"GSpawnChildSetupFunc","","",null,null],[6,"GTestDataFunc","","",null,null],[6,"GTestFixtureFunc","","",null,null],[6,"GTestFunc","","",null,null],[6,"GTestLogFatalFunc","","",null,null],[6,"GThreadFunc","","",null,null],[6,"GTranslateFunc","","",null,null],[6,"GTraverseFunc","","",null,null],[6,"GUnixFDSourceFunc","","",null,null],[6,"GVoidFunc","","",null,null],[17,"GFALSE","","",null,null],[17,"GTRUE","","",null,null],[17,"G_BOOKMARK_FILE_ERROR_INVALID_URI","","",null,null],[17,"G_BOOKMARK_FILE_ERROR_INVALID_VALUE","","",null,null],[17,"G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED","","",null,null],[17,"G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND","","",null,null],[17,"G_BOOKMARK_FILE_ERROR_READ","","",null,null],[17,"G_BOOKMARK_FILE_ERROR_UNKNOWN_ENCODING","","",null,null],[17,"G_BOOKMARK_FILE_ERROR_WRITE","","",null,null],[17,"G_BOOKMARK_FILE_ERROR_FILE_NOT_FOUND","","",null,null],[17,"G_CHECKSUM_MD5","","",null,null],[17,"G_CHECKSUM_SHA1","","",null,null],[17,"G_CHECKSUM_SHA256","","",null,null],[17,"G_CHECKSUM_SHA512","","",null,null],[17,"G_CHECKSUM_SHA384","","",null,null],[17,"G_CONVERT_ERROR_NO_CONVERSION","","",null,null],[17,"G_CONVERT_ERROR_ILLEGAL_SEQUENCE","","",null,null],[17,"G_CONVERT_ERROR_FAILED","","",null,null],[17,"G_CONVERT_ERROR_PARTIAL_INPUT","","",null,null],[17,"G_CONVERT_ERROR_BAD_URI","","",null,null],[17,"G_CONVERT_ERROR_NOT_ABSOLUTE_PATH","","",null,null],[17,"G_CONVERT_ERROR_NO_MEMORY","","",null,null],[17,"G_DATE_DAY","","",null,null],[17,"G_DATE_MONTH","","",null,null],[17,"G_DATE_YEAR","","",null,null],[17,"G_DATE_BAD_MONTH","","",null,null],[17,"G_DATE_JANUARY","","",null,null],[17,"G_DATE_FEBRUARY","","",null,null],[17,"G_DATE_MARCH","","",null,null],[17,"G_DATE_APRIL","","",null,null],[17,"G_DATE_MAY","","",null,null],[17,"G_DATE_JUNE","","",null,null],[17,"G_DATE_JULY","","",null,null],[17,"G_DATE_AUGUST","","",null,null],[17,"G_DATE_SEPTEMBER","","",null,null],[17,"G_DATE_OCTOBER","","",null,null],[17,"G_DATE_NOVEMBER","","",null,null],[17,"G_DATE_DECEMBER","","",null,null],[17,"G_DATE_BAD_WEEKDAY","","",null,null],[17,"G_DATE_MONDAY","","",null,null],[17,"G_DATE_TUESDAY","","",null,null],[17,"G_DATE_WEDNESDAY","","",null,null],[17,"G_DATE_THURSDAY","","",null,null],[17,"G_DATE_FRIDAY","","",null,null],[17,"G_DATE_SATURDAY","","",null,null],[17,"G_DATE_SUNDAY","","",null,null],[17,"G_ERR_UNKNOWN","","",null,null],[17,"G_ERR_UNEXP_EOF","","",null,null],[17,"G_ERR_UNEXP_EOF_IN_STRING","","",null,null],[17,"G_ERR_UNEXP_EOF_IN_COMMENT","","",null,null],[17,"G_ERR_NON_DIGIT_IN_CONST","","",null,null],[17,"G_ERR_DIGIT_RADIX","","",null,null],[17,"G_ERR_FLOAT_RADIX","","",null,null],[17,"G_ERR_FLOAT_MALFORMED","","",null,null],[17,"G_FILE_ERROR_EXIST","","",null,null],[17,"G_FILE_ERROR_ISDIR","","",null,null],[17,"G_FILE_ERROR_ACCES","","",null,null],[17,"G_FILE_ERROR_NAMETOOLONG","","",null,null],[17,"G_FILE_ERROR_NOENT","","",null,null],[17,"G_FILE_ERROR_NOTDIR","","",null,null],[17,"G_FILE_ERROR_NXIO","","",null,null],[17,"G_FILE_ERROR_NODEV","","",null,null],[17,"G_FILE_ERROR_ROFS","","",null,null],[17,"G_FILE_ERROR_TXTBSY","","",null,null],[17,"G_FILE_ERROR_FAULT","","",null,null],[17,"G_FILE_ERROR_LOOP","","",null,null],[17,"G_FILE_ERROR_NOSPC","","",null,null],[17,"G_FILE_ERROR_NOMEM","","",null,null],[17,"G_FILE_ERROR_MFILE","","",null,null],[17,"G_FILE_ERROR_NFILE","","",null,null],[17,"G_FILE_ERROR_BADF","","",null,null],[17,"G_FILE_ERROR_INVAL","","",null,null],[17,"G_FILE_ERROR_PIPE","","",null,null],[17,"G_FILE_ERROR_AGAIN","","",null,null],[17,"G_FILE_ERROR_INTR","","",null,null],[17,"G_FILE_ERROR_IO","","",null,null],[17,"G_FILE_ERROR_PERM","","",null,null],[17,"G_FILE_ERROR_NOSYS","","",null,null],[17,"G_FILE_ERROR_FAILED","","",null,null],[17,"G_IO_CHANNEL_ERROR_FBIG","","",null,null],[17,"G_IO_CHANNEL_ERROR_INVAL","","",null,null],[17,"G_IO_CHANNEL_ERROR_IO","","",null,null],[17,"G_IO_CHANNEL_ERROR_ISDIR","","",null,null],[17,"G_IO_CHANNEL_ERROR_NOSPC","","",null,null],[17,"G_IO_CHANNEL_ERROR_NXIO","","",null,null],[17,"G_IO_CHANNEL_ERROR_OVERFLOW","","",null,null],[17,"G_IO_CHANNEL_ERROR_PIPE","","",null,null],[17,"G_IO_CHANNEL_ERROR_FAILED","","",null,null],[17,"G_IO_ERROR_NONE","","",null,null],[17,"G_IO_ERROR_AGAIN","","",null,null],[17,"G_IO_ERROR_INVAL","","",null,null],[17,"G_IO_ERROR_UNKNOWN","","",null,null],[17,"G_IO_STATUS_ERROR","","",null,null],[17,"G_IO_STATUS_NORMAL","","",null,null],[17,"G_IO_STATUS_EOF","","",null,null],[17,"G_IO_STATUS_AGAIN","","",null,null],[17,"G_KEY_FILE_ERROR_UNKNOWN_ENCODING","","",null,null],[17,"G_KEY_FILE_ERROR_PARSE","","",null,null],[17,"G_KEY_FILE_ERROR_NOT_FOUND","","",null,null],[17,"G_KEY_FILE_ERROR_KEY_NOT_FOUND","","",null,null],[17,"G_KEY_FILE_ERROR_GROUP_NOT_FOUND","","",null,null],[17,"G_KEY_FILE_ERROR_INVALID_VALUE","","",null,null],[17,"G_LOG_WRITER_HANDLED","","",null,null],[17,"G_LOG_WRITER_UNHANDLED","","",null,null],[17,"G_MARKUP_ERROR_BAD_UTF8","","",null,null],[17,"G_MARKUP_ERROR_EMPTY","","",null,null],[17,"G_MARKUP_ERROR_PARSE","","",null,null],[17,"G_MARKUP_ERROR_UNKNOWN_ELEMENT","","",null,null],[17,"G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE","","",null,null],[17,"G_MARKUP_ERROR_INVALID_CONTENT","","",null,null],[17,"G_MARKUP_ERROR_MISSING_ATTRIBUTE","","",null,null],[17,"G_NORMALIZE_DEFAULT","","",null,null],[17,"G_NORMALIZE_DEFAULT_COMPOSE","","",null,null],[17,"G_NORMALIZE_ALL","","",null,null],[17,"G_NORMALIZE_ALL_COMPOSE","","",null,null],[17,"G_NUMBER_PARSER_ERROR_INVALID","","",null,null],[17,"G_NUMBER_PARSER_ERROR_OUT_OF_BOUNDS","","",null,null],[17,"G_ONCE_STATUS_NOTCALLED","","",null,null],[17,"G_ONCE_STATUS_PROGRESS","","",null,null],[17,"G_ONCE_STATUS_READY","","",null,null],[17,"G_OPTION_ARG_NONE","","",null,null],[17,"G_OPTION_ARG_STRING","","",null,null],[17,"G_OPTION_ARG_INT","","",null,null],[17,"G_OPTION_ARG_CALLBACK","","",null,null],[17,"G_OPTION_ARG_FILENAME","","",null,null],[17,"G_OPTION_ARG_STRING_ARRAY","","",null,null],[17,"G_OPTION_ARG_FILENAME_ARRAY","","",null,null],[17,"G_OPTION_ARG_DOUBLE","","",null,null],[17,"G_OPTION_ARG_INT64","","",null,null],[17,"G_OPTION_ERROR_UNKNOWN_OPTION","","",null,null],[17,"G_OPTION_ERROR_BAD_VALUE","","",null,null],[17,"G_OPTION_ERROR_FAILED","","",null,null],[17,"G_REGEX_ERROR_COMPILE","","",null,null],[17,"G_REGEX_ERROR_OPTIMIZE","","",null,null],[17,"G_REGEX_ERROR_REPLACE","","",null,null],[17,"G_REGEX_ERROR_MATCH","","",null,null],[17,"G_REGEX_ERROR_INTERNAL","","",null,null],[17,"G_REGEX_ERROR_STRAY_BACKSLASH","","",null,null],[17,"G_REGEX_ERROR_MISSING_CONTROL_CHAR","","",null,null],[17,"G_REGEX_ERROR_UNRECOGNIZED_ESCAPE","","",null,null],[17,"G_REGEX_ERROR_QUANTIFIERS_OUT_OF_ORDER","","",null,null],[17,"G_REGEX_ERROR_QUANTIFIER_TOO_BIG","","",null,null],[17,"G_REGEX_ERROR_UNTERMINATED_CHARACTER_CLASS","","",null,null],[17,"G_REGEX_ERROR_INVALID_ESCAPE_IN_CHARACTER_CLASS","","",null,null],[17,"G_REGEX_ERROR_RANGE_OUT_OF_ORDER","","",null,null],[17,"G_REGEX_ERROR_NOTHING_TO_REPEAT","","",null,null],[17,"G_REGEX_ERROR_UNRECOGNIZED_CHARACTER","","",null,null],[17,"G_REGEX_ERROR_POSIX_NAMED_CLASS_OUTSIDE_CLASS","","",null,null],[17,"G_REGEX_ERROR_UNMATCHED_PARENTHESIS","","",null,null],[17,"G_REGEX_ERROR_INEXISTENT_SUBPATTERN_REFERENCE","","",null,null],[17,"G_REGEX_ERROR_UNTERMINATED_COMMENT","","",null,null],[17,"G_REGEX_ERROR_EXPRESSION_TOO_LARGE","","",null,null],[17,"G_REGEX_ERROR_MEMORY_ERROR","","",null,null],[17,"G_REGEX_ERROR_VARIABLE_LENGTH_LOOKBEHIND","","",null,null],[17,"G_REGEX_ERROR_MALFORMED_CONDITION","","",null,null],[17,"G_REGEX_ERROR_TOO_MANY_CONDITIONAL_BRANCHES","","",null,null],[17,"G_REGEX_ERROR_ASSERTION_EXPECTED","","",null,null],[17,"G_REGEX_ERROR_UNKNOWN_POSIX_CLASS_NAME","","",null,null],[17,"G_REGEX_ERROR_POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED","","",null,null],[17,"G_REGEX_ERROR_HEX_CODE_TOO_LARGE","","",null,null],[17,"G_REGEX_ERROR_INVALID_CONDITION","","",null,null],[17,"G_REGEX_ERROR_SINGLE_BYTE_MATCH_IN_LOOKBEHIND","","",null,null],[17,"G_REGEX_ERROR_INFINITE_LOOP","","",null,null],[17,"G_REGEX_ERROR_MISSING_SUBPATTERN_NAME_TERMINATOR","","",null,null],[17,"G_REGEX_ERROR_DUPLICATE_SUBPATTERN_NAME","","",null,null],[17,"G_REGEX_ERROR_MALFORMED_PROPERTY","","",null,null],[17,"G_REGEX_ERROR_UNKNOWN_PROPERTY","","",null,null],[17,"G_REGEX_ERROR_SUBPATTERN_NAME_TOO_LONG","","",null,null],[17,"G_REGEX_ERROR_TOO_MANY_SUBPATTERNS","","",null,null],[17,"G_REGEX_ERROR_INVALID_OCTAL_VALUE","","",null,null],[17,"G_REGEX_ERROR_TOO_MANY_BRANCHES_IN_DEFINE","","",null,null],[17,"G_REGEX_ERROR_DEFINE_REPETION","","",null,null],[17,"G_REGEX_ERROR_INCONSISTENT_NEWLINE_OPTIONS","","",null,null],[17,"G_REGEX_ERROR_MISSING_BACK_REFERENCE","","",null,null],[17,"G_REGEX_ERROR_INVALID_RELATIVE_REFERENCE","","",null,null],[17,"G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_FORBIDDEN","","",null,null],[17,"G_REGEX_ERROR_UNKNOWN_BACKTRACKING_CONTROL_VERB","","",null,null],[17,"G_REGEX_ERROR_NUMBER_TOO_BIG","","",null,null],[17,"G_REGEX_ERROR_MISSING_SUBPATTERN_NAME","","",null,null],[17,"G_REGEX_ERROR_MISSING_DIGIT","","",null,null],[17,"G_REGEX_ERROR_INVALID_DATA_CHARACTER","","",null,null],[17,"G_REGEX_ERROR_EXTRA_SUBPATTERN_NAME","","",null,null],[17,"G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_REQUIRED","","",null,null],[17,"G_REGEX_ERROR_INVALID_CONTROL_CHAR","","",null,null],[17,"G_REGEX_ERROR_MISSING_NAME","","",null,null],[17,"G_REGEX_ERROR_NOT_SUPPORTED_IN_CLASS","","",null,null],[17,"G_REGEX_ERROR_TOO_MANY_FORWARD_REFERENCES","","",null,null],[17,"G_REGEX_ERROR_NAME_TOO_LONG","","",null,null],[17,"G_REGEX_ERROR_CHARACTER_VALUE_TOO_LARGE","","",null,null],[17,"G_SEEK_CUR","","",null,null],[17,"G_SEEK_SET","","",null,null],[17,"G_SEEK_END","","",null,null],[17,"G_SHELL_ERROR_BAD_QUOTING","","",null,null],[17,"G_SHELL_ERROR_EMPTY_STRING","","",null,null],[17,"G_SHELL_ERROR_FAILED","","",null,null],[17,"G_SLICE_CONFIG_ALWAYS_MALLOC","","",null,null],[17,"G_SLICE_CONFIG_BYPASS_MAGAZINES","","",null,null],[17,"G_SLICE_CONFIG_WORKING_SET_MSECS","","",null,null],[17,"G_SLICE_CONFIG_COLOR_INCREMENT","","",null,null],[17,"G_SLICE_CONFIG_CHUNK_SIZES","","",null,null],[17,"G_SLICE_CONFIG_CONTENTION_COUNTER","","",null,null],[17,"G_SPAWN_ERROR_FORK","","",null,null],[17,"G_SPAWN_ERROR_READ","","",null,null],[17,"G_SPAWN_ERROR_CHDIR","","",null,null],[17,"G_SPAWN_ERROR_ACCES","","",null,null],[17,"G_SPAWN_ERROR_PERM","","",null,null],[17,"G_SPAWN_ERROR_TOO_BIG","","",null,null],[17,"G_SPAWN_ERROR_NOEXEC","","",null,null],[17,"G_SPAWN_ERROR_NAMETOOLONG","","",null,null],[17,"G_SPAWN_ERROR_NOENT","","",null,null],[17,"G_SPAWN_ERROR_NOMEM","","",null,null],[17,"G_SPAWN_ERROR_NOTDIR","","",null,null],[17,"G_SPAWN_ERROR_LOOP","","",null,null],[17,"G_SPAWN_ERROR_TXTBUSY","","",null,null],[17,"G_SPAWN_ERROR_IO","","",null,null],[17,"G_SPAWN_ERROR_NFILE","","",null,null],[17,"G_SPAWN_ERROR_MFILE","","",null,null],[17,"G_SPAWN_ERROR_INVAL","","",null,null],[17,"G_SPAWN_ERROR_ISDIR","","",null,null],[17,"G_SPAWN_ERROR_LIBBAD","","",null,null],[17,"G_SPAWN_ERROR_FAILED","","",null,null],[17,"G_TEST_DIST","","",null,null],[17,"G_TEST_BUILT","","",null,null],[17,"G_TEST_LOG_NONE","","",null,null],[17,"G_TEST_LOG_ERROR","","",null,null],[17,"G_TEST_LOG_START_BINARY","","",null,null],[17,"G_TEST_LOG_LIST_CASE","","",null,null],[17,"G_TEST_LOG_SKIP_CASE","","",null,null],[17,"G_TEST_LOG_START_CASE","","",null,null],[17,"G_TEST_LOG_STOP_CASE","","",null,null],[17,"G_TEST_LOG_MIN_RESULT","","",null,null],[17,"G_TEST_LOG_MAX_RESULT","","",null,null],[17,"G_TEST_LOG_MESSAGE","","",null,null],[17,"G_TEST_LOG_START_SUITE","","",null,null],[17,"G_TEST_LOG_STOP_SUITE","","",null,null],[17,"G_THREAD_ERROR_AGAIN","","",null,null],[17,"G_TIME_TYPE_STANDARD","","",null,null],[17,"G_TIME_TYPE_DAYLIGHT","","",null,null],[17,"G_TIME_TYPE_UNIVERSAL","","",null,null],[17,"G_TOKEN_EOF","","",null,null],[17,"G_TOKEN_LEFT_PAREN","","",null,null],[17,"G_TOKEN_RIGHT_PAREN","","",null,null],[17,"G_TOKEN_LEFT_CURLY","","",null,null],[17,"G_TOKEN_RIGHT_CURLY","","",null,null],[17,"G_TOKEN_LEFT_BRACE","","",null,null],[17,"G_TOKEN_RIGHT_BRACE","","",null,null],[17,"G_TOKEN_EQUAL_SIGN","","",null,null],[17,"G_TOKEN_COMMA","","",null,null],[17,"G_TOKEN_NONE","","",null,null],[17,"G_TOKEN_ERROR","","",null,null],[17,"G_TOKEN_CHAR","","",null,null],[17,"G_TOKEN_BINARY","","",null,null],[17,"G_TOKEN_OCTAL","","",null,null],[17,"G_TOKEN_INT","","",null,null],[17,"G_TOKEN_HEX","","",null,null],[17,"G_TOKEN_FLOAT","","",null,null],[17,"G_TOKEN_STRING","","",null,null],[17,"G_TOKEN_SYMBOL","","",null,null],[17,"G_TOKEN_IDENTIFIER","","",null,null],[17,"G_TOKEN_IDENTIFIER_NULL","","",null,null],[17,"G_TOKEN_COMMENT_SINGLE","","",null,null],[17,"G_TOKEN_COMMENT_MULTI","","",null,null],[17,"G_IN_ORDER","","",null,null],[17,"G_PRE_ORDER","","",null,null],[17,"G_POST_ORDER","","",null,null],[17,"G_LEVEL_ORDER","","",null,null],[17,"G_UNICODE_BREAK_MANDATORY","","",null,null],[17,"G_UNICODE_BREAK_CARRIAGE_RETURN","","",null,null],[17,"G_UNICODE_BREAK_LINE_FEED","","",null,null],[17,"G_UNICODE_BREAK_COMBINING_MARK","","",null,null],[17,"G_UNICODE_BREAK_SURROGATE","","",null,null],[17,"G_UNICODE_BREAK_ZERO_WIDTH_SPACE","","",null,null],[17,"G_UNICODE_BREAK_INSEPARABLE","","",null,null],[17,"G_UNICODE_BREAK_NON_BREAKING_GLUE","","",null,null],[17,"G_UNICODE_BREAK_CONTINGENT","","",null,null],[17,"G_UNICODE_BREAK_SPACE","","",null,null],[17,"G_UNICODE_BREAK_AFTER","","",null,null],[17,"G_UNICODE_BREAK_BEFORE","","",null,null],[17,"G_UNICODE_BREAK_BEFORE_AND_AFTER","","",null,null],[17,"G_UNICODE_BREAK_HYPHEN","","",null,null],[17,"G_UNICODE_BREAK_NON_STARTER","","",null,null],[17,"G_UNICODE_BREAK_OPEN_PUNCTUATION","","",null,null],[17,"G_UNICODE_BREAK_CLOSE_PUNCTUATION","","",null,null],[17,"G_UNICODE_BREAK_QUOTATION","","",null,null],[17,"G_UNICODE_BREAK_EXCLAMATION","","",null,null],[17,"G_UNICODE_BREAK_IDEOGRAPHIC","","",null,null],[17,"G_UNICODE_BREAK_NUMERIC","","",null,null],[17,"G_UNICODE_BREAK_INFIX_SEPARATOR","","",null,null],[17,"G_UNICODE_BREAK_SYMBOL","","",null,null],[17,"G_UNICODE_BREAK_ALPHABETIC","","",null,null],[17,"G_UNICODE_BREAK_PREFIX","","",null,null],[17,"G_UNICODE_BREAK_POSTFIX","","",null,null],[17,"G_UNICODE_BREAK_COMPLEX_CONTEXT","","",null,null],[17,"G_UNICODE_BREAK_AMBIGUOUS","","",null,null],[17,"G_UNICODE_BREAK_UNKNOWN","","",null,null],[17,"G_UNICODE_BREAK_NEXT_LINE","","",null,null],[17,"G_UNICODE_BREAK_WORD_JOINER","","",null,null],[17,"G_UNICODE_BREAK_HANGUL_L_JAMO","","",null,null],[17,"G_UNICODE_BREAK_HANGUL_V_JAMO","","",null,null],[17,"G_UNICODE_BREAK_HANGUL_T_JAMO","","",null,null],[17,"G_UNICODE_BREAK_HANGUL_LV_SYLLABLE","","",null,null],[17,"G_UNICODE_BREAK_HANGUL_LVT_SYLLABLE","","",null,null],[17,"G_UNICODE_BREAK_CLOSE_PARANTHESIS","","",null,null],[17,"G_UNICODE_BREAK_CONDITIONAL_JAPANESE_STARTER","","",null,null],[17,"G_UNICODE_BREAK_HEBREW_LETTER","","",null,null],[17,"G_UNICODE_BREAK_REGIONAL_INDICATOR","","",null,null],[17,"G_UNICODE_BREAK_EMOJI_BASE","","",null,null],[17,"G_UNICODE_BREAK_EMOJI_MODIFIER","","",null,null],[17,"G_UNICODE_BREAK_ZERO_WIDTH_JOINER","","",null,null],[17,"G_UNICODE_SCRIPT_INVALID_CODE","","",null,null],[17,"G_UNICODE_SCRIPT_COMMON","","",null,null],[17,"G_UNICODE_SCRIPT_INHERITED","","",null,null],[17,"G_UNICODE_SCRIPT_ARABIC","","",null,null],[17,"G_UNICODE_SCRIPT_ARMENIAN","","",null,null],[17,"G_UNICODE_SCRIPT_BENGALI","","",null,null],[17,"G_UNICODE_SCRIPT_BOPOMOFO","","",null,null],[17,"G_UNICODE_SCRIPT_CHEROKEE","","",null,null],[17,"G_UNICODE_SCRIPT_COPTIC","","",null,null],[17,"G_UNICODE_SCRIPT_CYRILLIC","","",null,null],[17,"G_UNICODE_SCRIPT_DESERET","","",null,null],[17,"G_UNICODE_SCRIPT_DEVANAGARI","","",null,null],[17,"G_UNICODE_SCRIPT_ETHIOPIC","","",null,null],[17,"G_UNICODE_SCRIPT_GEORGIAN","","",null,null],[17,"G_UNICODE_SCRIPT_GOTHIC","","",null,null],[17,"G_UNICODE_SCRIPT_GREEK","","",null,null],[17,"G_UNICODE_SCRIPT_GUJARATI","","",null,null],[17,"G_UNICODE_SCRIPT_GURMUKHI","","",null,null],[17,"G_UNICODE_SCRIPT_HAN","","",null,null],[17,"G_UNICODE_SCRIPT_HANGUL","","",null,null],[17,"G_UNICODE_SCRIPT_HEBREW","","",null,null],[17,"G_UNICODE_SCRIPT_HIRAGANA","","",null,null],[17,"G_UNICODE_SCRIPT_KANNADA","","",null,null],[17,"G_UNICODE_SCRIPT_KATAKANA","","",null,null],[17,"G_UNICODE_SCRIPT_KHMER","","",null,null],[17,"G_UNICODE_SCRIPT_LAO","","",null,null],[17,"G_UNICODE_SCRIPT_LATIN","","",null,null],[17,"G_UNICODE_SCRIPT_MALAYALAM","","",null,null],[17,"G_UNICODE_SCRIPT_MONGOLIAN","","",null,null],[17,"G_UNICODE_SCRIPT_MYANMAR","","",null,null],[17,"G_UNICODE_SCRIPT_OGHAM","","",null,null],[17,"G_UNICODE_SCRIPT_OLD_ITALIC","","",null,null],[17,"G_UNICODE_SCRIPT_ORIYA","","",null,null],[17,"G_UNICODE_SCRIPT_RUNIC","","",null,null],[17,"G_UNICODE_SCRIPT_SINHALA","","",null,null],[17,"G_UNICODE_SCRIPT_SYRIAC","","",null,null],[17,"G_UNICODE_SCRIPT_TAMIL","","",null,null],[17,"G_UNICODE_SCRIPT_TELUGU","","",null,null],[17,"G_UNICODE_SCRIPT_THAANA","","",null,null],[17,"G_UNICODE_SCRIPT_THAI","","",null,null],[17,"G_UNICODE_SCRIPT_TIBETAN","","",null,null],[17,"G_UNICODE_SCRIPT_CANADIAN_ABORIGINAL","","",null,null],[17,"G_UNICODE_SCRIPT_YI","","",null,null],[17,"G_UNICODE_SCRIPT_TAGALOG","","",null,null],[17,"G_UNICODE_SCRIPT_HANUNOO","","",null,null],[17,"G_UNICODE_SCRIPT_BUHID","","",null,null],[17,"G_UNICODE_SCRIPT_TAGBANWA","","",null,null],[17,"G_UNICODE_SCRIPT_BRAILLE","","",null,null],[17,"G_UNICODE_SCRIPT_CYPRIOT","","",null,null],[17,"G_UNICODE_SCRIPT_LIMBU","","",null,null],[17,"G_UNICODE_SCRIPT_OSMANYA","","",null,null],[17,"G_UNICODE_SCRIPT_SHAVIAN","","",null,null],[17,"G_UNICODE_SCRIPT_LINEAR_B","","",null,null],[17,"G_UNICODE_SCRIPT_TAI_LE","","",null,null],[17,"G_UNICODE_SCRIPT_UGARITIC","","",null,null],[17,"G_UNICODE_SCRIPT_NEW_TAI_LUE","","",null,null],[17,"G_UNICODE_SCRIPT_BUGINESE","","",null,null],[17,"G_UNICODE_SCRIPT_GLAGOLITIC","","",null,null],[17,"G_UNICODE_SCRIPT_TIFINAGH","","",null,null],[17,"G_UNICODE_SCRIPT_SYLOTI_NAGRI","","",null,null],[17,"G_UNICODE_SCRIPT_OLD_PERSIAN","","",null,null],[17,"G_UNICODE_SCRIPT_KHAROSHTHI","","",null,null],[17,"G_UNICODE_SCRIPT_UNKNOWN","","",null,null],[17,"G_UNICODE_SCRIPT_BALINESE","","",null,null],[17,"G_UNICODE_SCRIPT_CUNEIFORM","","",null,null],[17,"G_UNICODE_SCRIPT_PHOENICIAN","","",null,null],[17,"G_UNICODE_SCRIPT_PHAGS_PA","","",null,null],[17,"G_UNICODE_SCRIPT_NKO","","",null,null],[17,"G_UNICODE_SCRIPT_KAYAH_LI","","",null,null],[17,"G_UNICODE_SCRIPT_LEPCHA","","",null,null],[17,"G_UNICODE_SCRIPT_REJANG","","",null,null],[17,"G_UNICODE_SCRIPT_SUNDANESE","","",null,null],[17,"G_UNICODE_SCRIPT_SAURASHTRA","","",null,null],[17,"G_UNICODE_SCRIPT_CHAM","","",null,null],[17,"G_UNICODE_SCRIPT_OL_CHIKI","","",null,null],[17,"G_UNICODE_SCRIPT_VAI","","",null,null],[17,"G_UNICODE_SCRIPT_CARIAN","","",null,null],[17,"G_UNICODE_SCRIPT_LYCIAN","","",null,null],[17,"G_UNICODE_SCRIPT_LYDIAN","","",null,null],[17,"G_UNICODE_SCRIPT_AVESTAN","","",null,null],[17,"G_UNICODE_SCRIPT_BAMUM","","",null,null],[17,"G_UNICODE_SCRIPT_EGYPTIAN_HIEROGLYPHS","","",null,null],[17,"G_UNICODE_SCRIPT_IMPERIAL_ARAMAIC","","",null,null],[17,"G_UNICODE_SCRIPT_INSCRIPTIONAL_PAHLAVI","","",null,null],[17,"G_UNICODE_SCRIPT_INSCRIPTIONAL_PARTHIAN","","",null,null],[17,"G_UNICODE_SCRIPT_JAVANESE","","",null,null],[17,"G_UNICODE_SCRIPT_KAITHI","","",null,null],[17,"G_UNICODE_SCRIPT_LISU","","",null,null],[17,"G_UNICODE_SCRIPT_MEETEI_MAYEK","","",null,null],[17,"G_UNICODE_SCRIPT_OLD_SOUTH_ARABIAN","","",null,null],[17,"G_UNICODE_SCRIPT_OLD_TURKIC","","",null,null],[17,"G_UNICODE_SCRIPT_SAMARITAN","","",null,null],[17,"G_UNICODE_SCRIPT_TAI_THAM","","",null,null],[17,"G_UNICODE_SCRIPT_TAI_VIET","","",null,null],[17,"G_UNICODE_SCRIPT_BATAK","","",null,null],[17,"G_UNICODE_SCRIPT_BRAHMI","","",null,null],[17,"G_UNICODE_SCRIPT_MANDAIC","","",null,null],[17,"G_UNICODE_SCRIPT_CHAKMA","","",null,null],[17,"G_UNICODE_SCRIPT_MEROITIC_CURSIVE","","",null,null],[17,"G_UNICODE_SCRIPT_MEROITIC_HIEROGLYPHS","","",null,null],[17,"G_UNICODE_SCRIPT_MIAO","","",null,null],[17,"G_UNICODE_SCRIPT_SHARADA","","",null,null],[17,"G_UNICODE_SCRIPT_SORA_SOMPENG","","",null,null],[17,"G_UNICODE_SCRIPT_TAKRI","","",null,null],[17,"G_UNICODE_SCRIPT_BASSA_VAH","","",null,null],[17,"G_UNICODE_SCRIPT_CAUCASIAN_ALBANIAN","","",null,null],[17,"G_UNICODE_SCRIPT_DUPLOYAN","","",null,null],[17,"G_UNICODE_SCRIPT_ELBASAN","","",null,null],[17,"G_UNICODE_SCRIPT_GRANTHA","","",null,null],[17,"G_UNICODE_SCRIPT_KHOJKI","","",null,null],[17,"G_UNICODE_SCRIPT_KHUDAWADI","","",null,null],[17,"G_UNICODE_SCRIPT_LINEAR_A","","",null,null],[17,"G_UNICODE_SCRIPT_MAHAJANI","","",null,null],[17,"G_UNICODE_SCRIPT_MANICHAEAN","","",null,null],[17,"G_UNICODE_SCRIPT_MENDE_KIKAKUI","","",null,null],[17,"G_UNICODE_SCRIPT_MODI","","",null,null],[17,"G_UNICODE_SCRIPT_MRO","","",null,null],[17,"G_UNICODE_SCRIPT_NABATAEAN","","",null,null],[17,"G_UNICODE_SCRIPT_OLD_NORTH_ARABIAN","","",null,null],[17,"G_UNICODE_SCRIPT_OLD_PERMIC","","",null,null],[17,"G_UNICODE_SCRIPT_PAHAWH_HMONG","","",null,null],[17,"G_UNICODE_SCRIPT_PALMYRENE","","",null,null],[17,"G_UNICODE_SCRIPT_PAU_CIN_HAU","","",null,null],[17,"G_UNICODE_SCRIPT_PSALTER_PAHLAVI","","",null,null],[17,"G_UNICODE_SCRIPT_SIDDHAM","","",null,null],[17,"G_UNICODE_SCRIPT_TIRHUTA","","",null,null],[17,"G_UNICODE_SCRIPT_WARANG_CITI","","",null,null],[17,"G_UNICODE_SCRIPT_AHOM","","",null,null],[17,"G_UNICODE_SCRIPT_ANATOLIAN_HIEROGLYPHS","","",null,null],[17,"G_UNICODE_SCRIPT_HATRAN","","",null,null],[17,"G_UNICODE_SCRIPT_MULTANI","","",null,null],[17,"G_UNICODE_SCRIPT_OLD_HUNGARIAN","","",null,null],[17,"G_UNICODE_SCRIPT_SIGNWRITING","","",null,null],[17,"G_UNICODE_SCRIPT_ADLAM","","",null,null],[17,"G_UNICODE_SCRIPT_BHAIKSUKI","","",null,null],[17,"G_UNICODE_SCRIPT_MARCHEN","","",null,null],[17,"G_UNICODE_SCRIPT_NEWA","","",null,null],[17,"G_UNICODE_SCRIPT_OSAGE","","",null,null],[17,"G_UNICODE_SCRIPT_TANGUT","","",null,null],[17,"G_UNICODE_SCRIPT_MASARAM_GONDI","","",null,null],[17,"G_UNICODE_SCRIPT_NUSHU","","",null,null],[17,"G_UNICODE_SCRIPT_SOYOMBO","","",null,null],[17,"G_UNICODE_SCRIPT_ZANABAZAR_SQUARE","","",null,null],[17,"G_UNICODE_CONTROL","","",null,null],[17,"G_UNICODE_FORMAT","","",null,null],[17,"G_UNICODE_UNASSIGNED","","",null,null],[17,"G_UNICODE_PRIVATE_USE","","",null,null],[17,"G_UNICODE_SURROGATE","","",null,null],[17,"G_UNICODE_LOWERCASE_LETTER","","",null,null],[17,"G_UNICODE_MODIFIER_LETTER","","",null,null],[17,"G_UNICODE_OTHER_LETTER","","",null,null],[17,"G_UNICODE_TITLECASE_LETTER","","",null,null],[17,"G_UNICODE_UPPERCASE_LETTER","","",null,null],[17,"G_UNICODE_SPACING_MARK","","",null,null],[17,"G_UNICODE_ENCLOSING_MARK","","",null,null],[17,"G_UNICODE_NON_SPACING_MARK","","",null,null],[17,"G_UNICODE_DECIMAL_NUMBER","","",null,null],[17,"G_UNICODE_LETTER_NUMBER","","",null,null],[17,"G_UNICODE_OTHER_NUMBER","","",null,null],[17,"G_UNICODE_CONNECT_PUNCTUATION","","",null,null],[17,"G_UNICODE_DASH_PUNCTUATION","","",null,null],[17,"G_UNICODE_CLOSE_PUNCTUATION","","",null,null],[17,"G_UNICODE_FINAL_PUNCTUATION","","",null,null],[17,"G_UNICODE_INITIAL_PUNCTUATION","","",null,null],[17,"G_UNICODE_OTHER_PUNCTUATION","","",null,null],[17,"G_UNICODE_OPEN_PUNCTUATION","","",null,null],[17,"G_UNICODE_CURRENCY_SYMBOL","","",null,null],[17,"G_UNICODE_MODIFIER_SYMBOL","","",null,null],[17,"G_UNICODE_MATH_SYMBOL","","",null,null],[17,"G_UNICODE_OTHER_SYMBOL","","",null,null],[17,"G_UNICODE_LINE_SEPARATOR","","",null,null],[17,"G_UNICODE_PARAGRAPH_SEPARATOR","","",null,null],[17,"G_UNICODE_SPACE_SEPARATOR","","",null,null],[17,"G_USER_DIRECTORY_DESKTOP","","",null,null],[17,"G_USER_DIRECTORY_DOCUMENTS","","",null,null],[17,"G_USER_DIRECTORY_DOWNLOAD","","",null,null],[17,"G_USER_DIRECTORY_MUSIC","","",null,null],[17,"G_USER_DIRECTORY_PICTURES","","",null,null],[17,"G_USER_DIRECTORY_PUBLIC_SHARE","","",null,null],[17,"G_USER_DIRECTORY_TEMPLATES","","",null,null],[17,"G_USER_DIRECTORY_VIDEOS","","",null,null],[17,"G_USER_N_DIRECTORIES","","",null,null],[17,"G_VARIANT_CLASS_BOOLEAN","","",null,null],[17,"G_VARIANT_CLASS_BYTE","","",null,null],[17,"G_VARIANT_CLASS_INT16","","",null,null],[17,"G_VARIANT_CLASS_UINT16","","",null,null],[17,"G_VARIANT_CLASS_INT32","","",null,null],[17,"G_VARIANT_CLASS_UINT32","","",null,null],[17,"G_VARIANT_CLASS_INT64","","",null,null],[17,"G_VARIANT_CLASS_UINT64","","",null,null],[17,"G_VARIANT_CLASS_HANDLE","","",null,null],[17,"G_VARIANT_CLASS_DOUBLE","","",null,null],[17,"G_VARIANT_CLASS_STRING","","",null,null],[17,"G_VARIANT_CLASS_OBJECT_PATH","","",null,null],[17,"G_VARIANT_CLASS_SIGNATURE","","",null,null],[17,"G_VARIANT_CLASS_VARIANT","","",null,null],[17,"G_VARIANT_CLASS_MAYBE","","",null,null],[17,"G_VARIANT_CLASS_ARRAY","","",null,null],[17,"G_VARIANT_CLASS_TUPLE","","",null,null],[17,"G_VARIANT_CLASS_DICT_ENTRY","","",null,null],[17,"G_VARIANT_PARSE_ERROR_FAILED","","",null,null],[17,"G_VARIANT_PARSE_ERROR_BASIC_TYPE_EXPECTED","","",null,null],[17,"G_VARIANT_PARSE_ERROR_CANNOT_INFER_TYPE","","",null,null],[17,"G_VARIANT_PARSE_ERROR_DEFINITE_TYPE_EXPECTED","","",null,null],[17,"G_VARIANT_PARSE_ERROR_INPUT_NOT_AT_END","","",null,null],[17,"G_VARIANT_PARSE_ERROR_INVALID_CHARACTER","","",null,null],[17,"G_VARIANT_PARSE_ERROR_INVALID_FORMAT_STRING","","",null,null],[17,"G_VARIANT_PARSE_ERROR_INVALID_OBJECT_PATH","","",null,null],[17,"G_VARIANT_PARSE_ERROR_INVALID_SIGNATURE","","",null,null],[17,"G_VARIANT_PARSE_ERROR_INVALID_TYPE_STRING","","",null,null],[17,"G_VARIANT_PARSE_ERROR_NO_COMMON_TYPE","","",null,null],[17,"G_VARIANT_PARSE_ERROR_NUMBER_OUT_OF_RANGE","","",null,null],[17,"G_VARIANT_PARSE_ERROR_NUMBER_TOO_BIG","","",null,null],[17,"G_VARIANT_PARSE_ERROR_TYPE_ERROR","","",null,null],[17,"G_VARIANT_PARSE_ERROR_UNEXPECTED_TOKEN","","",null,null],[17,"G_VARIANT_PARSE_ERROR_UNKNOWN_KEYWORD","","",null,null],[17,"G_VARIANT_PARSE_ERROR_UNTERMINATED_STRING_CONSTANT","","",null,null],[17,"G_VARIANT_PARSE_ERROR_VALUE_EXPECTED","","",null,null],[17,"G_ANALYZER_ANALYZING","","",null,null],[17,"G_ASCII_DTOSTR_BUF_SIZE","","",null,null],[17,"G_BIG_ENDIAN","","",null,null],[17,"G_CSET_A_2_Z","","",null,null],[17,"G_CSET_DIGITS","","",null,null],[17,"G_CSET_a_2_z","","",null,null],[17,"G_DATALIST_FLAGS_MASK","","",null,null],[17,"G_DATE_BAD_DAY","","",null,null],[17,"G_DATE_BAD_JULIAN","","",null,null],[17,"G_DATE_BAD_YEAR","","",null,null],[17,"G_DIR_SEPARATOR","","",null,null],[17,"G_DIR_SEPARATOR_S","","",null,null],[17,"G_E","","",null,null],[17,"G_GINT16_FORMAT","","",null,null],[17,"G_GINT16_MODIFIER","","",null,null],[17,"G_GINT32_FORMAT","","",null,null],[17,"G_GINT32_MODIFIER","","",null,null],[17,"G_GNUC_FUNCTION","","",null,null],[17,"G_GNUC_PRETTY_FUNCTION","","",null,null],[17,"G_GUINT16_FORMAT","","",null,null],[17,"G_GUINT32_FORMAT","","",null,null],[17,"G_HAVE_GINT64","","",null,null],[17,"G_HAVE_GNUC_VARARGS","","",null,null],[17,"G_HAVE_GNUC_VISIBILITY","","",null,null],[17,"G_HAVE_GROWING_STACK","","",null,null],[17,"G_HAVE_ISO_VARARGS","","",null,null],[17,"G_HOOK_FLAG_USER_SHIFT","","",null,null],[17,"G_IEEE754_DOUBLE_BIAS","","",null,null],[17,"G_IEEE754_FLOAT_BIAS","","",null,null],[17,"G_KEY_FILE_DESKTOP_GROUP","","",null,null],[17,"G_KEY_FILE_DESKTOP_KEY_ACTIONS","","",null,null],[17,"G_KEY_FILE_DESKTOP_KEY_CATEGORIES","","",null,null],[17,"G_KEY_FILE_DESKTOP_KEY_COMMENT","","",null,null],[17,"G_KEY_FILE_DESKTOP_KEY_DBUS_ACTIVATABLE","","",null,null],[17,"G_KEY_FILE_DESKTOP_KEY_EXEC","","",null,null],[17,"G_KEY_FILE_DESKTOP_KEY_FULLNAME","","",null,null],[17,"G_KEY_FILE_DESKTOP_KEY_GENERIC_NAME","","",null,null],[17,"G_KEY_FILE_DESKTOP_KEY_GETTEXT_DOMAIN","","",null,null],[17,"G_KEY_FILE_DESKTOP_KEY_HIDDEN","","",null,null],[17,"G_KEY_FILE_DESKTOP_KEY_ICON","","",null,null],[17,"G_KEY_FILE_DESKTOP_KEY_KEYWORDS","","",null,null],[17,"G_KEY_FILE_DESKTOP_KEY_MIME_TYPE","","",null,null],[17,"G_KEY_FILE_DESKTOP_KEY_NAME","","",null,null],[17,"G_KEY_FILE_DESKTOP_KEY_NOT_SHOW_IN","","",null,null],[17,"G_KEY_FILE_DESKTOP_KEY_NO_DISPLAY","","",null,null],[17,"G_KEY_FILE_DESKTOP_KEY_ONLY_SHOW_IN","","",null,null],[17,"G_KEY_FILE_DESKTOP_KEY_PATH","","",null,null],[17,"G_KEY_FILE_DESKTOP_KEY_STARTUP_NOTIFY","","",null,null],[17,"G_KEY_FILE_DESKTOP_KEY_STARTUP_WM_CLASS","","",null,null],[17,"G_KEY_FILE_DESKTOP_KEY_TERMINAL","","",null,null],[17,"G_KEY_FILE_DESKTOP_KEY_TRY_EXEC","","",null,null],[17,"G_KEY_FILE_DESKTOP_KEY_TYPE","","",null,null],[17,"G_KEY_FILE_DESKTOP_KEY_URL","","",null,null],[17,"G_KEY_FILE_DESKTOP_KEY_VERSION","","",null,null],[17,"G_KEY_FILE_DESKTOP_TYPE_APPLICATION","","",null,null],[17,"G_KEY_FILE_DESKTOP_TYPE_DIRECTORY","","",null,null],[17,"G_KEY_FILE_DESKTOP_TYPE_LINK","","",null,null],[17,"G_LITTLE_ENDIAN","","",null,null],[17,"G_LN10","","",null,null],[17,"G_LN2","","",null,null],[17,"G_LOG_2_BASE_10","","",null,null],[17,"G_LOG_DOMAIN","","",null,null],[17,"G_LOG_FATAL_MASK","","",null,null],[17,"G_LOG_LEVEL_USER_SHIFT","","",null,null],[17,"GLIB_MAJOR_VERSION","","",null,null],[17,"G_MAXINT16","","",null,null],[17,"G_MAXINT32","","",null,null],[17,"G_MAXINT64","","",null,null],[17,"G_MAXINT8","","",null,null],[17,"G_MAXUINT16","","",null,null],[17,"G_MAXUINT32","","",null,null],[17,"G_MAXUINT64","","",null,null],[17,"G_MAXUINT8","","",null,null],[17,"GLIB_MICRO_VERSION","","",null,null],[17,"G_MININT64","","",null,null],[17,"GLIB_MINOR_VERSION","","",null,null],[17,"G_MODULE_SUFFIX","","",null,null],[17,"G_OPTION_REMAINING","","",null,null],[17,"G_PDP_ENDIAN","","",null,null],[17,"G_PI","","",null,null],[17,"G_PID_FORMAT","","",null,null],[17,"G_PI_2","","",null,null],[17,"G_PI_4","","",null,null],[17,"G_POLLFD_FORMAT","","",null,null],[17,"G_PRIORITY_DEFAULT","","",null,null],[17,"G_PRIORITY_DEFAULT_IDLE","","",null,null],[17,"G_PRIORITY_HIGH","","",null,null],[17,"G_PRIORITY_HIGH_IDLE","","",null,null],[17,"G_PRIORITY_LOW","","",null,null],[17,"G_SEARCHPATH_SEPARATOR","","",null,null],[17,"G_SEARCHPATH_SEPARATOR_S","","",null,null],[17,"G_SOURCE_CONTINUE","","",null,null],[17,"G_SOURCE_REMOVE","","",null,null],[17,"G_SQRT2","","",null,null],[17,"G_STR_DELIMITERS","","",null,null],[17,"GLIB_SYSDEF_AF_INET","","",null,null],[17,"GLIB_SYSDEF_AF_INET6","","",null,null],[17,"GLIB_SYSDEF_AF_UNIX","","",null,null],[17,"GLIB_SYSDEF_MSG_DONTROUTE","","",null,null],[17,"GLIB_SYSDEF_MSG_OOB","","",null,null],[17,"GLIB_SYSDEF_MSG_PEEK","","",null,null],[17,"G_TIME_SPAN_DAY","","",null,null],[17,"G_TIME_SPAN_HOUR","","",null,null],[17,"G_TIME_SPAN_MILLISECOND","","",null,null],[17,"G_TIME_SPAN_MINUTE","","",null,null],[17,"G_TIME_SPAN_SECOND","","",null,null],[17,"G_UNICHAR_MAX_DECOMPOSITION_LENGTH","","",null,null],[17,"G_URI_RESERVED_CHARS_GENERIC_DELIMITERS","","",null,null],[17,"G_URI_RESERVED_CHARS_SUBCOMPONENT_DELIMITERS","","",null,null],[17,"G_USEC_PER_SEC","","",null,null],[17,"GLIB_VERSION_MIN_REQUIRED","","",null,null],[17,"G_WIN32_MSG_HANDLE","","",null,null],[17,"G_ASCII_ALNUM","","",null,null],[17,"G_ASCII_ALPHA","","",null,null],[17,"G_ASCII_CNTRL","","",null,null],[17,"G_ASCII_DIGIT","","",null,null],[17,"G_ASCII_GRAPH","","",null,null],[17,"G_ASCII_LOWER","","",null,null],[17,"G_ASCII_PRINT","","",null,null],[17,"G_ASCII_PUNCT","","",null,null],[17,"G_ASCII_SPACE","","",null,null],[17,"G_ASCII_UPPER","","",null,null],[17,"G_ASCII_XDIGIT","","",null,null],[17,"G_FILE_TEST_IS_REGULAR","","",null,null],[17,"G_FILE_TEST_IS_SYMLINK","","",null,null],[17,"G_FILE_TEST_IS_DIR","","",null,null],[17,"G_FILE_TEST_IS_EXECUTABLE","","",null,null],[17,"G_FILE_TEST_EXISTS","","",null,null],[17,"G_FORMAT_SIZE_DEFAULT","","",null,null],[17,"G_FORMAT_SIZE_LONG_FORMAT","","",null,null],[17,"G_FORMAT_SIZE_IEC_UNITS","","",null,null],[17,"G_HOOK_FLAG_ACTIVE","","",null,null],[17,"G_HOOK_FLAG_IN_CALL","","",null,null],[17,"G_HOOK_FLAG_MASK","","",null,null],[17,"G_IO_IN","","",null,null],[17,"G_IO_OUT","","",null,null],[17,"G_IO_PRI","","",null,null],[17,"G_IO_ERR","","",null,null],[17,"G_IO_HUP","","",null,null],[17,"G_IO_NVAL","","",null,null],[17,"G_IO_FLAG_APPEND","","",null,null],[17,"G_IO_FLAG_NONBLOCK","","",null,null],[17,"G_IO_FLAG_IS_READABLE","","",null,null],[17,"G_IO_FLAG_IS_WRITABLE","","",null,null],[17,"G_IO_FLAG_IS_WRITEABLE","","",null,null],[17,"G_IO_FLAG_IS_SEEKABLE","","",null,null],[17,"G_IO_FLAG_MASK","","",null,null],[17,"G_IO_FLAG_GET_MASK","","",null,null],[17,"G_IO_FLAG_SET_MASK","","",null,null],[17,"G_KEY_FILE_NONE","","",null,null],[17,"G_KEY_FILE_KEEP_COMMENTS","","",null,null],[17,"G_KEY_FILE_KEEP_TRANSLATIONS","","",null,null],[17,"G_LOG_FLAG_RECURSION","","",null,null],[17,"G_LOG_FLAG_FATAL","","",null,null],[17,"G_LOG_LEVEL_ERROR","","",null,null],[17,"G_LOG_LEVEL_CRITICAL","","",null,null],[17,"G_LOG_LEVEL_WARNING","","",null,null],[17,"G_LOG_LEVEL_MESSAGE","","",null,null],[17,"G_LOG_LEVEL_INFO","","",null,null],[17,"G_LOG_LEVEL_DEBUG","","",null,null],[17,"G_LOG_LEVEL_MASK","","",null,null],[17,"G_MARKUP_COLLECT_INVALID","","",null,null],[17,"G_MARKUP_COLLECT_STRING","","",null,null],[17,"G_MARKUP_COLLECT_STRDUP","","",null,null],[17,"G_MARKUP_COLLECT_BOOLEAN","","",null,null],[17,"G_MARKUP_COLLECT_TRISTATE","","",null,null],[17,"G_MARKUP_COLLECT_OPTIONAL","","",null,null],[17,"G_MARKUP_DO_NOT_USE_THIS_UNSUPPORTED_FLAG","","",null,null],[17,"G_MARKUP_TREAT_CDATA_AS_TEXT","","",null,null],[17,"G_MARKUP_PREFIX_ERROR_POSITION","","",null,null],[17,"G_MARKUP_IGNORE_QUALIFIED","","",null,null],[17,"G_OPTION_FLAG_NONE","","",null,null],[17,"G_OPTION_FLAG_HIDDEN","","",null,null],[17,"G_OPTION_FLAG_IN_MAIN","","",null,null],[17,"G_OPTION_FLAG_REVERSE","","",null,null],[17,"G_OPTION_FLAG_NO_ARG","","",null,null],[17,"G_OPTION_FLAG_FILENAME","","",null,null],[17,"G_OPTION_FLAG_OPTIONAL_ARG","","",null,null],[17,"G_OPTION_FLAG_NOALIAS","","",null,null],[17,"G_REGEX_CASELESS","","",null,null],[17,"G_REGEX_MULTILINE","","",null,null],[17,"G_REGEX_DOTALL","","",null,null],[17,"G_REGEX_EXTENDED","","",null,null],[17,"G_REGEX_ANCHORED","","",null,null],[17,"G_REGEX_DOLLAR_ENDONLY","","",null,null],[17,"G_REGEX_UNGREEDY","","",null,null],[17,"G_REGEX_RAW","","",null,null],[17,"G_REGEX_NO_AUTO_CAPTURE","","",null,null],[17,"G_REGEX_OPTIMIZE","","",null,null],[17,"G_REGEX_FIRSTLINE","","",null,null],[17,"G_REGEX_DUPNAMES","","",null,null],[17,"G_REGEX_NEWLINE_CR","","",null,null],[17,"G_REGEX_NEWLINE_LF","","",null,null],[17,"G_REGEX_NEWLINE_CRLF","","",null,null],[17,"G_REGEX_NEWLINE_ANYCRLF","","",null,null],[17,"G_REGEX_BSR_ANYCRLF","","",null,null],[17,"G_REGEX_JAVASCRIPT_COMPAT","","",null,null],[17,"G_REGEX_MATCH_ANCHORED","","",null,null],[17,"G_REGEX_MATCH_NOTBOL","","",null,null],[17,"G_REGEX_MATCH_NOTEOL","","",null,null],[17,"G_REGEX_MATCH_NOTEMPTY","","",null,null],[17,"G_REGEX_MATCH_PARTIAL","","",null,null],[17,"G_REGEX_MATCH_NEWLINE_CR","","",null,null],[17,"G_REGEX_MATCH_NEWLINE_LF","","",null,null],[17,"G_REGEX_MATCH_NEWLINE_CRLF","","",null,null],[17,"G_REGEX_MATCH_NEWLINE_ANY","","",null,null],[17,"G_REGEX_MATCH_NEWLINE_ANYCRLF","","",null,null],[17,"G_REGEX_MATCH_BSR_ANYCRLF","","",null,null],[17,"G_REGEX_MATCH_BSR_ANY","","",null,null],[17,"G_REGEX_MATCH_PARTIAL_SOFT","","",null,null],[17,"G_REGEX_MATCH_PARTIAL_HARD","","",null,null],[17,"G_REGEX_MATCH_NOTEMPTY_ATSTART","","",null,null],[17,"G_SPAWN_DEFAULT","","",null,null],[17,"G_SPAWN_LEAVE_DESCRIPTORS_OPEN","","",null,null],[17,"G_SPAWN_DO_NOT_REAP_CHILD","","",null,null],[17,"G_SPAWN_SEARCH_PATH","","",null,null],[17,"G_SPAWN_STDOUT_TO_DEV_NULL","","",null,null],[17,"G_SPAWN_STDERR_TO_DEV_NULL","","",null,null],[17,"G_SPAWN_CHILD_INHERITS_STDIN","","",null,null],[17,"G_SPAWN_FILE_AND_ARGV_ZERO","","",null,null],[17,"G_SPAWN_SEARCH_PATH_FROM_ENVP","","",null,null],[17,"G_SPAWN_CLOEXEC_PIPES","","",null,null],[17,"G_TEST_SUBPROCESS_INHERIT_STDIN","","",null,null],[17,"G_TEST_SUBPROCESS_INHERIT_STDOUT","","",null,null],[17,"G_TEST_SUBPROCESS_INHERIT_STDERR","","",null,null],[17,"G_TEST_TRAP_SILENCE_STDOUT","","",null,null],[17,"G_TEST_TRAP_SILENCE_STDERR","","",null,null],[17,"G_TEST_TRAP_INHERIT_STDIN","","",null,null],[17,"G_TRAVERSE_LEAVES","","",null,null],[17,"G_TRAVERSE_NON_LEAVES","","",null,null],[17,"G_TRAVERSE_ALL","","",null,null],[17,"G_TRAVERSE_MASK","","",null,null],[17,"G_TRAVERSE_LEAFS","","",null,null],[17,"G_TRAVERSE_NON_LEAFS","","",null,null],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"gasciitype"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"gasciitype"}],"output":{"name":"bool"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"gasciitype"}}],[11,"partial_cmp","","",38,{"inputs":[{"name":"self"},{"name":"gasciitype"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",38,{"inputs":[{"name":"self"},{"name":"gasciitype"}],"output":{"name":"bool"}}],[11,"le","","",38,{"inputs":[{"name":"self"},{"name":"gasciitype"}],"output":{"name":"bool"}}],[11,"gt","","",38,{"inputs":[{"name":"self"},{"name":"gasciitype"}],"output":{"name":"bool"}}],[11,"ge","","",38,{"inputs":[{"name":"self"},{"name":"gasciitype"}],"output":{"name":"bool"}}],[11,"cmp","","",38,{"inputs":[{"name":"self"},{"name":"gasciitype"}],"output":{"name":"ordering"}}],[11,"hash","","",38,null],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"ALNUM","","",38,null],[18,"ALPHA","","",38,null],[18,"CNTRL","","",38,null],[18,"DIGIT","","",38,null],[18,"GRAPH","","",38,null],[18,"LOWER","","",38,null],[18,"PRINT","","",38,null],[18,"PUNCT","","",38,null],[18,"SPACE","","",38,null],[18,"UPPER","","",38,null],[18,"XDIGIT","","",38,null],[11,"empty","","Returns an empty set of flags.",38,{"inputs":[],"output":{"name":"gasciitype"}}],[11,"all","","Returns the set containing all flags.",38,{"inputs":[],"output":{"name":"gasciitype"}}],[11,"bits","","Returns the raw value of the flags currently stored.",38,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",38,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gasciitype"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",38,{"inputs":[{"name":"c_uint"}],"output":{"name":"gasciitype"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",38,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",38,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",38,{"inputs":[{"name":"self"},{"name":"gasciitype"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",38,{"inputs":[{"name":"self"},{"name":"gasciitype"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",38,{"inputs":[{"name":"self"},{"name":"gasciitype"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",38,{"inputs":[{"name":"self"},{"name":"gasciitype"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",38,{"inputs":[{"name":"self"},{"name":"gasciitype"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",38,{"inputs":[{"name":"self"},{"name":"gasciitype"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",38,{"inputs":[{"name":"self"},{"name":"gasciitype"}],"output":{"name":"gasciitype"}}],[11,"bitor_assign","","Adds the set of flags.",38,{"inputs":[{"name":"self"},{"name":"gasciitype"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",38,{"inputs":[{"name":"self"},{"name":"gasciitype"}],"output":{"name":"gasciitype"}}],[11,"bitxor_assign","","Toggles the set of flags.",38,{"inputs":[{"name":"self"},{"name":"gasciitype"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",38,{"inputs":[{"name":"self"},{"name":"gasciitype"}],"output":{"name":"gasciitype"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",38,{"inputs":[{"name":"self"},{"name":"gasciitype"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",38,{"inputs":[{"name":"self"},{"name":"gasciitype"}],"output":{"name":"gasciitype"}}],[11,"sub_assign","","Disables all flags enabled in the set.",38,{"inputs":[{"name":"self"},{"name":"gasciitype"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",38,{"inputs":[{"name":"self"}],"output":{"name":"gasciitype"}}],[11,"extend","","",38,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",38,{"inputs":[{"name":"t"}],"output":{"name":"gasciitype"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"gfiletest"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"gfiletest"}],"output":{"name":"bool"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"gfiletest"}}],[11,"partial_cmp","","",39,{"inputs":[{"name":"self"},{"name":"gfiletest"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",39,{"inputs":[{"name":"self"},{"name":"gfiletest"}],"output":{"name":"bool"}}],[11,"le","","",39,{"inputs":[{"name":"self"},{"name":"gfiletest"}],"output":{"name":"bool"}}],[11,"gt","","",39,{"inputs":[{"name":"self"},{"name":"gfiletest"}],"output":{"name":"bool"}}],[11,"ge","","",39,{"inputs":[{"name":"self"},{"name":"gfiletest"}],"output":{"name":"bool"}}],[11,"cmp","","",39,{"inputs":[{"name":"self"},{"name":"gfiletest"}],"output":{"name":"ordering"}}],[11,"hash","","",39,null],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"IS_REGULAR","","",39,null],[18,"IS_SYMLINK","","",39,null],[18,"IS_DIR","","",39,null],[18,"IS_EXECUTABLE","","",39,null],[18,"EXISTS","","",39,null],[11,"empty","","Returns an empty set of flags.",39,{"inputs":[],"output":{"name":"gfiletest"}}],[11,"all","","Returns the set containing all flags.",39,{"inputs":[],"output":{"name":"gfiletest"}}],[11,"bits","","Returns the raw value of the flags currently stored.",39,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",39,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gfiletest"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",39,{"inputs":[{"name":"c_uint"}],"output":{"name":"gfiletest"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",39,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",39,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",39,{"inputs":[{"name":"self"},{"name":"gfiletest"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",39,{"inputs":[{"name":"self"},{"name":"gfiletest"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",39,{"inputs":[{"name":"self"},{"name":"gfiletest"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",39,{"inputs":[{"name":"self"},{"name":"gfiletest"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",39,{"inputs":[{"name":"self"},{"name":"gfiletest"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",39,{"inputs":[{"name":"self"},{"name":"gfiletest"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",39,{"inputs":[{"name":"self"},{"name":"gfiletest"}],"output":{"name":"gfiletest"}}],[11,"bitor_assign","","Adds the set of flags.",39,{"inputs":[{"name":"self"},{"name":"gfiletest"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",39,{"inputs":[{"name":"self"},{"name":"gfiletest"}],"output":{"name":"gfiletest"}}],[11,"bitxor_assign","","Toggles the set of flags.",39,{"inputs":[{"name":"self"},{"name":"gfiletest"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",39,{"inputs":[{"name":"self"},{"name":"gfiletest"}],"output":{"name":"gfiletest"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",39,{"inputs":[{"name":"self"},{"name":"gfiletest"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",39,{"inputs":[{"name":"self"},{"name":"gfiletest"}],"output":{"name":"gfiletest"}}],[11,"sub_assign","","Disables all flags enabled in the set.",39,{"inputs":[{"name":"self"},{"name":"gfiletest"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",39,{"inputs":[{"name":"self"}],"output":{"name":"gfiletest"}}],[11,"extend","","",39,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",39,{"inputs":[{"name":"t"}],"output":{"name":"gfiletest"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"gformatsizeflags"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"gformatsizeflags"}],"output":{"name":"bool"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"gformatsizeflags"}}],[11,"partial_cmp","","",40,{"inputs":[{"name":"self"},{"name":"gformatsizeflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",40,{"inputs":[{"name":"self"},{"name":"gformatsizeflags"}],"output":{"name":"bool"}}],[11,"le","","",40,{"inputs":[{"name":"self"},{"name":"gformatsizeflags"}],"output":{"name":"bool"}}],[11,"gt","","",40,{"inputs":[{"name":"self"},{"name":"gformatsizeflags"}],"output":{"name":"bool"}}],[11,"ge","","",40,{"inputs":[{"name":"self"},{"name":"gformatsizeflags"}],"output":{"name":"bool"}}],[11,"cmp","","",40,{"inputs":[{"name":"self"},{"name":"gformatsizeflags"}],"output":{"name":"ordering"}}],[11,"hash","","",40,null],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"DEFAULT","","",40,null],[18,"LONG_FORMAT","","",40,null],[18,"IEC_UNITS","","",40,null],[11,"empty","","Returns an empty set of flags.",40,{"inputs":[],"output":{"name":"gformatsizeflags"}}],[11,"all","","Returns the set containing all flags.",40,{"inputs":[],"output":{"name":"gformatsizeflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",40,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",40,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gformatsizeflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",40,{"inputs":[{"name":"c_uint"}],"output":{"name":"gformatsizeflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",40,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",40,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",40,{"inputs":[{"name":"self"},{"name":"gformatsizeflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",40,{"inputs":[{"name":"self"},{"name":"gformatsizeflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",40,{"inputs":[{"name":"self"},{"name":"gformatsizeflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",40,{"inputs":[{"name":"self"},{"name":"gformatsizeflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",40,{"inputs":[{"name":"self"},{"name":"gformatsizeflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",40,{"inputs":[{"name":"self"},{"name":"gformatsizeflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",40,{"inputs":[{"name":"self"},{"name":"gformatsizeflags"}],"output":{"name":"gformatsizeflags"}}],[11,"bitor_assign","","Adds the set of flags.",40,{"inputs":[{"name":"self"},{"name":"gformatsizeflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",40,{"inputs":[{"name":"self"},{"name":"gformatsizeflags"}],"output":{"name":"gformatsizeflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",40,{"inputs":[{"name":"self"},{"name":"gformatsizeflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",40,{"inputs":[{"name":"self"},{"name":"gformatsizeflags"}],"output":{"name":"gformatsizeflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",40,{"inputs":[{"name":"self"},{"name":"gformatsizeflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",40,{"inputs":[{"name":"self"},{"name":"gformatsizeflags"}],"output":{"name":"gformatsizeflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",40,{"inputs":[{"name":"self"},{"name":"gformatsizeflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",40,{"inputs":[{"name":"self"}],"output":{"name":"gformatsizeflags"}}],[11,"extend","","",40,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",40,{"inputs":[{"name":"t"}],"output":{"name":"gformatsizeflags"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"ghookflagmask"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"ghookflagmask"}],"output":{"name":"bool"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"ghookflagmask"}}],[11,"partial_cmp","","",41,{"inputs":[{"name":"self"},{"name":"ghookflagmask"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",41,{"inputs":[{"name":"self"},{"name":"ghookflagmask"}],"output":{"name":"bool"}}],[11,"le","","",41,{"inputs":[{"name":"self"},{"name":"ghookflagmask"}],"output":{"name":"bool"}}],[11,"gt","","",41,{"inputs":[{"name":"self"},{"name":"ghookflagmask"}],"output":{"name":"bool"}}],[11,"ge","","",41,{"inputs":[{"name":"self"},{"name":"ghookflagmask"}],"output":{"name":"bool"}}],[11,"cmp","","",41,{"inputs":[{"name":"self"},{"name":"ghookflagmask"}],"output":{"name":"ordering"}}],[11,"hash","","",41,null],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"ACTIVE","","",41,null],[18,"IN_CALL","","",41,null],[18,"MASK","","",41,null],[11,"empty","","Returns an empty set of flags.",41,{"inputs":[],"output":{"name":"ghookflagmask"}}],[11,"all","","Returns the set containing all flags.",41,{"inputs":[],"output":{"name":"ghookflagmask"}}],[11,"bits","","Returns the raw value of the flags currently stored.",41,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",41,{"inputs":[{"name":"c_uint"}],"output":{"generics":["ghookflagmask"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",41,{"inputs":[{"name":"c_uint"}],"output":{"name":"ghookflagmask"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",41,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",41,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",41,{"inputs":[{"name":"self"},{"name":"ghookflagmask"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",41,{"inputs":[{"name":"self"},{"name":"ghookflagmask"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",41,{"inputs":[{"name":"self"},{"name":"ghookflagmask"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",41,{"inputs":[{"name":"self"},{"name":"ghookflagmask"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",41,{"inputs":[{"name":"self"},{"name":"ghookflagmask"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",41,{"inputs":[{"name":"self"},{"name":"ghookflagmask"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",41,{"inputs":[{"name":"self"},{"name":"ghookflagmask"}],"output":{"name":"ghookflagmask"}}],[11,"bitor_assign","","Adds the set of flags.",41,{"inputs":[{"name":"self"},{"name":"ghookflagmask"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",41,{"inputs":[{"name":"self"},{"name":"ghookflagmask"}],"output":{"name":"ghookflagmask"}}],[11,"bitxor_assign","","Toggles the set of flags.",41,{"inputs":[{"name":"self"},{"name":"ghookflagmask"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",41,{"inputs":[{"name":"self"},{"name":"ghookflagmask"}],"output":{"name":"ghookflagmask"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",41,{"inputs":[{"name":"self"},{"name":"ghookflagmask"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",41,{"inputs":[{"name":"self"},{"name":"ghookflagmask"}],"output":{"name":"ghookflagmask"}}],[11,"sub_assign","","Disables all flags enabled in the set.",41,{"inputs":[{"name":"self"},{"name":"ghookflagmask"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",41,{"inputs":[{"name":"self"}],"output":{"name":"ghookflagmask"}}],[11,"extend","","",41,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",41,{"inputs":[{"name":"t"}],"output":{"name":"ghookflagmask"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"giocondition"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"self"},{"name":"giocondition"}],"output":{"name":"bool"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"giocondition"}}],[11,"partial_cmp","","",42,{"inputs":[{"name":"self"},{"name":"giocondition"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",42,{"inputs":[{"name":"self"},{"name":"giocondition"}],"output":{"name":"bool"}}],[11,"le","","",42,{"inputs":[{"name":"self"},{"name":"giocondition"}],"output":{"name":"bool"}}],[11,"gt","","",42,{"inputs":[{"name":"self"},{"name":"giocondition"}],"output":{"name":"bool"}}],[11,"ge","","",42,{"inputs":[{"name":"self"},{"name":"giocondition"}],"output":{"name":"bool"}}],[11,"cmp","","",42,{"inputs":[{"name":"self"},{"name":"giocondition"}],"output":{"name":"ordering"}}],[11,"hash","","",42,null],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"IN","","",42,null],[18,"OUT","","",42,null],[18,"PRI","","",42,null],[18,"ERR","","",42,null],[18,"HUP","","",42,null],[18,"NVAL","","",42,null],[11,"empty","","Returns an empty set of flags.",42,{"inputs":[],"output":{"name":"giocondition"}}],[11,"all","","Returns the set containing all flags.",42,{"inputs":[],"output":{"name":"giocondition"}}],[11,"bits","","Returns the raw value of the flags currently stored.",42,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",42,{"inputs":[{"name":"c_uint"}],"output":{"generics":["giocondition"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",42,{"inputs":[{"name":"c_uint"}],"output":{"name":"giocondition"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",42,{"inputs":[{"name":"self"},{"name":"giocondition"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",42,{"inputs":[{"name":"self"},{"name":"giocondition"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",42,{"inputs":[{"name":"self"},{"name":"giocondition"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",42,{"inputs":[{"name":"self"},{"name":"giocondition"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",42,{"inputs":[{"name":"self"},{"name":"giocondition"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",42,{"inputs":[{"name":"self"},{"name":"giocondition"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",42,{"inputs":[{"name":"self"},{"name":"giocondition"}],"output":{"name":"giocondition"}}],[11,"bitor_assign","","Adds the set of flags.",42,{"inputs":[{"name":"self"},{"name":"giocondition"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",42,{"inputs":[{"name":"self"},{"name":"giocondition"}],"output":{"name":"giocondition"}}],[11,"bitxor_assign","","Toggles the set of flags.",42,{"inputs":[{"name":"self"},{"name":"giocondition"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",42,{"inputs":[{"name":"self"},{"name":"giocondition"}],"output":{"name":"giocondition"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",42,{"inputs":[{"name":"self"},{"name":"giocondition"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",42,{"inputs":[{"name":"self"},{"name":"giocondition"}],"output":{"name":"giocondition"}}],[11,"sub_assign","","Disables all flags enabled in the set.",42,{"inputs":[{"name":"self"},{"name":"giocondition"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",42,{"inputs":[{"name":"self"}],"output":{"name":"giocondition"}}],[11,"extend","","",42,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",42,{"inputs":[{"name":"t"}],"output":{"name":"giocondition"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"gioflags"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"gioflags"}],"output":{"name":"bool"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"gioflags"}}],[11,"partial_cmp","","",43,{"inputs":[{"name":"self"},{"name":"gioflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",43,{"inputs":[{"name":"self"},{"name":"gioflags"}],"output":{"name":"bool"}}],[11,"le","","",43,{"inputs":[{"name":"self"},{"name":"gioflags"}],"output":{"name":"bool"}}],[11,"gt","","",43,{"inputs":[{"name":"self"},{"name":"gioflags"}],"output":{"name":"bool"}}],[11,"ge","","",43,{"inputs":[{"name":"self"},{"name":"gioflags"}],"output":{"name":"bool"}}],[11,"cmp","","",43,{"inputs":[{"name":"self"},{"name":"gioflags"}],"output":{"name":"ordering"}}],[11,"hash","","",43,null],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"APPEND","","",43,null],[18,"NONBLOCK","","",43,null],[18,"IS_READABLE","","",43,null],[18,"IS_WRITABLE","","",43,null],[18,"IS_WRITEABLE","","",43,null],[18,"IS_SEEKABLE","","",43,null],[18,"MASK","","",43,null],[18,"GET_MASK","","",43,null],[18,"SET_MASK","","",43,null],[11,"empty","","Returns an empty set of flags.",43,{"inputs":[],"output":{"name":"gioflags"}}],[11,"all","","Returns the set containing all flags.",43,{"inputs":[],"output":{"name":"gioflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",43,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",43,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gioflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",43,{"inputs":[{"name":"c_uint"}],"output":{"name":"gioflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",43,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",43,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",43,{"inputs":[{"name":"self"},{"name":"gioflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",43,{"inputs":[{"name":"self"},{"name":"gioflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",43,{"inputs":[{"name":"self"},{"name":"gioflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",43,{"inputs":[{"name":"self"},{"name":"gioflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",43,{"inputs":[{"name":"self"},{"name":"gioflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",43,{"inputs":[{"name":"self"},{"name":"gioflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",43,{"inputs":[{"name":"self"},{"name":"gioflags"}],"output":{"name":"gioflags"}}],[11,"bitor_assign","","Adds the set of flags.",43,{"inputs":[{"name":"self"},{"name":"gioflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",43,{"inputs":[{"name":"self"},{"name":"gioflags"}],"output":{"name":"gioflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",43,{"inputs":[{"name":"self"},{"name":"gioflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",43,{"inputs":[{"name":"self"},{"name":"gioflags"}],"output":{"name":"gioflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",43,{"inputs":[{"name":"self"},{"name":"gioflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",43,{"inputs":[{"name":"self"},{"name":"gioflags"}],"output":{"name":"gioflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",43,{"inputs":[{"name":"self"},{"name":"gioflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",43,{"inputs":[{"name":"self"}],"output":{"name":"gioflags"}}],[11,"extend","","",43,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",43,{"inputs":[{"name":"t"}],"output":{"name":"gioflags"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"gkeyfileflags"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"gkeyfileflags"}],"output":{"name":"bool"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"gkeyfileflags"}}],[11,"partial_cmp","","",44,{"inputs":[{"name":"self"},{"name":"gkeyfileflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",44,{"inputs":[{"name":"self"},{"name":"gkeyfileflags"}],"output":{"name":"bool"}}],[11,"le","","",44,{"inputs":[{"name":"self"},{"name":"gkeyfileflags"}],"output":{"name":"bool"}}],[11,"gt","","",44,{"inputs":[{"name":"self"},{"name":"gkeyfileflags"}],"output":{"name":"bool"}}],[11,"ge","","",44,{"inputs":[{"name":"self"},{"name":"gkeyfileflags"}],"output":{"name":"bool"}}],[11,"cmp","","",44,{"inputs":[{"name":"self"},{"name":"gkeyfileflags"}],"output":{"name":"ordering"}}],[11,"hash","","",44,null],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",44,null],[18,"KEEP_COMMENTS","","",44,null],[18,"KEEP_TRANSLATIONS","","",44,null],[11,"empty","","Returns an empty set of flags.",44,{"inputs":[],"output":{"name":"gkeyfileflags"}}],[11,"all","","Returns the set containing all flags.",44,{"inputs":[],"output":{"name":"gkeyfileflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",44,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",44,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gkeyfileflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",44,{"inputs":[{"name":"c_uint"}],"output":{"name":"gkeyfileflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",44,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",44,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",44,{"inputs":[{"name":"self"},{"name":"gkeyfileflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",44,{"inputs":[{"name":"self"},{"name":"gkeyfileflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",44,{"inputs":[{"name":"self"},{"name":"gkeyfileflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",44,{"inputs":[{"name":"self"},{"name":"gkeyfileflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",44,{"inputs":[{"name":"self"},{"name":"gkeyfileflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",44,{"inputs":[{"name":"self"},{"name":"gkeyfileflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",44,{"inputs":[{"name":"self"},{"name":"gkeyfileflags"}],"output":{"name":"gkeyfileflags"}}],[11,"bitor_assign","","Adds the set of flags.",44,{"inputs":[{"name":"self"},{"name":"gkeyfileflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",44,{"inputs":[{"name":"self"},{"name":"gkeyfileflags"}],"output":{"name":"gkeyfileflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",44,{"inputs":[{"name":"self"},{"name":"gkeyfileflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",44,{"inputs":[{"name":"self"},{"name":"gkeyfileflags"}],"output":{"name":"gkeyfileflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",44,{"inputs":[{"name":"self"},{"name":"gkeyfileflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",44,{"inputs":[{"name":"self"},{"name":"gkeyfileflags"}],"output":{"name":"gkeyfileflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",44,{"inputs":[{"name":"self"},{"name":"gkeyfileflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",44,{"inputs":[{"name":"self"}],"output":{"name":"gkeyfileflags"}}],[11,"extend","","",44,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",44,{"inputs":[{"name":"t"}],"output":{"name":"gkeyfileflags"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"gloglevelflags"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"gloglevelflags"}],"output":{"name":"bool"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"gloglevelflags"}}],[11,"partial_cmp","","",45,{"inputs":[{"name":"self"},{"name":"gloglevelflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",45,{"inputs":[{"name":"self"},{"name":"gloglevelflags"}],"output":{"name":"bool"}}],[11,"le","","",45,{"inputs":[{"name":"self"},{"name":"gloglevelflags"}],"output":{"name":"bool"}}],[11,"gt","","",45,{"inputs":[{"name":"self"},{"name":"gloglevelflags"}],"output":{"name":"bool"}}],[11,"ge","","",45,{"inputs":[{"name":"self"},{"name":"gloglevelflags"}],"output":{"name":"bool"}}],[11,"cmp","","",45,{"inputs":[{"name":"self"},{"name":"gloglevelflags"}],"output":{"name":"ordering"}}],[11,"hash","","",45,null],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"FLAG_RECURSION","","",45,null],[18,"FLAG_FATAL","","",45,null],[18,"LEVEL_ERROR","","",45,null],[18,"LEVEL_CRITICAL","","",45,null],[18,"LEVEL_WARNING","","",45,null],[18,"LEVEL_MESSAGE","","",45,null],[18,"LEVEL_INFO","","",45,null],[18,"LEVEL_DEBUG","","",45,null],[18,"LEVEL_MASK","","",45,null],[11,"empty","","Returns an empty set of flags.",45,{"inputs":[],"output":{"name":"gloglevelflags"}}],[11,"all","","Returns the set containing all flags.",45,{"inputs":[],"output":{"name":"gloglevelflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",45,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",45,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gloglevelflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",45,{"inputs":[{"name":"c_uint"}],"output":{"name":"gloglevelflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",45,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",45,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",45,{"inputs":[{"name":"self"},{"name":"gloglevelflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",45,{"inputs":[{"name":"self"},{"name":"gloglevelflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",45,{"inputs":[{"name":"self"},{"name":"gloglevelflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",45,{"inputs":[{"name":"self"},{"name":"gloglevelflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",45,{"inputs":[{"name":"self"},{"name":"gloglevelflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",45,{"inputs":[{"name":"self"},{"name":"gloglevelflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",45,{"inputs":[{"name":"self"},{"name":"gloglevelflags"}],"output":{"name":"gloglevelflags"}}],[11,"bitor_assign","","Adds the set of flags.",45,{"inputs":[{"name":"self"},{"name":"gloglevelflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",45,{"inputs":[{"name":"self"},{"name":"gloglevelflags"}],"output":{"name":"gloglevelflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",45,{"inputs":[{"name":"self"},{"name":"gloglevelflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",45,{"inputs":[{"name":"self"},{"name":"gloglevelflags"}],"output":{"name":"gloglevelflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",45,{"inputs":[{"name":"self"},{"name":"gloglevelflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",45,{"inputs":[{"name":"self"},{"name":"gloglevelflags"}],"output":{"name":"gloglevelflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",45,{"inputs":[{"name":"self"},{"name":"gloglevelflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",45,{"inputs":[{"name":"self"}],"output":{"name":"gloglevelflags"}}],[11,"extend","","",45,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",45,{"inputs":[{"name":"t"}],"output":{"name":"gloglevelflags"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"gmarkupcollecttype"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"gmarkupcollecttype"}],"output":{"name":"bool"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"gmarkupcollecttype"}}],[11,"partial_cmp","","",46,{"inputs":[{"name":"self"},{"name":"gmarkupcollecttype"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",46,{"inputs":[{"name":"self"},{"name":"gmarkupcollecttype"}],"output":{"name":"bool"}}],[11,"le","","",46,{"inputs":[{"name":"self"},{"name":"gmarkupcollecttype"}],"output":{"name":"bool"}}],[11,"gt","","",46,{"inputs":[{"name":"self"},{"name":"gmarkupcollecttype"}],"output":{"name":"bool"}}],[11,"ge","","",46,{"inputs":[{"name":"self"},{"name":"gmarkupcollecttype"}],"output":{"name":"bool"}}],[11,"cmp","","",46,{"inputs":[{"name":"self"},{"name":"gmarkupcollecttype"}],"output":{"name":"ordering"}}],[11,"hash","","",46,null],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"INVALID","","",46,null],[18,"STRING","","",46,null],[18,"STRDUP","","",46,null],[18,"BOOLEAN","","",46,null],[18,"TRISTATE","","",46,null],[18,"OPTIONAL","","",46,null],[11,"empty","","Returns an empty set of flags.",46,{"inputs":[],"output":{"name":"gmarkupcollecttype"}}],[11,"all","","Returns the set containing all flags.",46,{"inputs":[],"output":{"name":"gmarkupcollecttype"}}],[11,"bits","","Returns the raw value of the flags currently stored.",46,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",46,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gmarkupcollecttype"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",46,{"inputs":[{"name":"c_uint"}],"output":{"name":"gmarkupcollecttype"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",46,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",46,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",46,{"inputs":[{"name":"self"},{"name":"gmarkupcollecttype"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",46,{"inputs":[{"name":"self"},{"name":"gmarkupcollecttype"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",46,{"inputs":[{"name":"self"},{"name":"gmarkupcollecttype"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",46,{"inputs":[{"name":"self"},{"name":"gmarkupcollecttype"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",46,{"inputs":[{"name":"self"},{"name":"gmarkupcollecttype"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",46,{"inputs":[{"name":"self"},{"name":"gmarkupcollecttype"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",46,{"inputs":[{"name":"self"},{"name":"gmarkupcollecttype"}],"output":{"name":"gmarkupcollecttype"}}],[11,"bitor_assign","","Adds the set of flags.",46,{"inputs":[{"name":"self"},{"name":"gmarkupcollecttype"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",46,{"inputs":[{"name":"self"},{"name":"gmarkupcollecttype"}],"output":{"name":"gmarkupcollecttype"}}],[11,"bitxor_assign","","Toggles the set of flags.",46,{"inputs":[{"name":"self"},{"name":"gmarkupcollecttype"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",46,{"inputs":[{"name":"self"},{"name":"gmarkupcollecttype"}],"output":{"name":"gmarkupcollecttype"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",46,{"inputs":[{"name":"self"},{"name":"gmarkupcollecttype"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",46,{"inputs":[{"name":"self"},{"name":"gmarkupcollecttype"}],"output":{"name":"gmarkupcollecttype"}}],[11,"sub_assign","","Disables all flags enabled in the set.",46,{"inputs":[{"name":"self"},{"name":"gmarkupcollecttype"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",46,{"inputs":[{"name":"self"}],"output":{"name":"gmarkupcollecttype"}}],[11,"extend","","",46,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",46,{"inputs":[{"name":"t"}],"output":{"name":"gmarkupcollecttype"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"gmarkupparseflags"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"gmarkupparseflags"}],"output":{"name":"bool"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"gmarkupparseflags"}}],[11,"partial_cmp","","",47,{"inputs":[{"name":"self"},{"name":"gmarkupparseflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",47,{"inputs":[{"name":"self"},{"name":"gmarkupparseflags"}],"output":{"name":"bool"}}],[11,"le","","",47,{"inputs":[{"name":"self"},{"name":"gmarkupparseflags"}],"output":{"name":"bool"}}],[11,"gt","","",47,{"inputs":[{"name":"self"},{"name":"gmarkupparseflags"}],"output":{"name":"bool"}}],[11,"ge","","",47,{"inputs":[{"name":"self"},{"name":"gmarkupparseflags"}],"output":{"name":"bool"}}],[11,"cmp","","",47,{"inputs":[{"name":"self"},{"name":"gmarkupparseflags"}],"output":{"name":"ordering"}}],[11,"hash","","",47,null],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"DO_NOT_USE_THIS_UNSUPPORTED_FLAG","","",47,null],[18,"TREAT_CDATA_AS_TEXT","","",47,null],[18,"PREFIX_ERROR_POSITION","","",47,null],[18,"IGNORE_QUALIFIED","","",47,null],[11,"empty","","Returns an empty set of flags.",47,{"inputs":[],"output":{"name":"gmarkupparseflags"}}],[11,"all","","Returns the set containing all flags.",47,{"inputs":[],"output":{"name":"gmarkupparseflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",47,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",47,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gmarkupparseflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",47,{"inputs":[{"name":"c_uint"}],"output":{"name":"gmarkupparseflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",47,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",47,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",47,{"inputs":[{"name":"self"},{"name":"gmarkupparseflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",47,{"inputs":[{"name":"self"},{"name":"gmarkupparseflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",47,{"inputs":[{"name":"self"},{"name":"gmarkupparseflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",47,{"inputs":[{"name":"self"},{"name":"gmarkupparseflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",47,{"inputs":[{"name":"self"},{"name":"gmarkupparseflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",47,{"inputs":[{"name":"self"},{"name":"gmarkupparseflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",47,{"inputs":[{"name":"self"},{"name":"gmarkupparseflags"}],"output":{"name":"gmarkupparseflags"}}],[11,"bitor_assign","","Adds the set of flags.",47,{"inputs":[{"name":"self"},{"name":"gmarkupparseflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",47,{"inputs":[{"name":"self"},{"name":"gmarkupparseflags"}],"output":{"name":"gmarkupparseflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",47,{"inputs":[{"name":"self"},{"name":"gmarkupparseflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",47,{"inputs":[{"name":"self"},{"name":"gmarkupparseflags"}],"output":{"name":"gmarkupparseflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",47,{"inputs":[{"name":"self"},{"name":"gmarkupparseflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",47,{"inputs":[{"name":"self"},{"name":"gmarkupparseflags"}],"output":{"name":"gmarkupparseflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",47,{"inputs":[{"name":"self"},{"name":"gmarkupparseflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",47,{"inputs":[{"name":"self"}],"output":{"name":"gmarkupparseflags"}}],[11,"extend","","",47,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",47,{"inputs":[{"name":"t"}],"output":{"name":"gmarkupparseflags"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"goptionflags"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"goptionflags"}],"output":{"name":"bool"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"goptionflags"}}],[11,"partial_cmp","","",48,{"inputs":[{"name":"self"},{"name":"goptionflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",48,{"inputs":[{"name":"self"},{"name":"goptionflags"}],"output":{"name":"bool"}}],[11,"le","","",48,{"inputs":[{"name":"self"},{"name":"goptionflags"}],"output":{"name":"bool"}}],[11,"gt","","",48,{"inputs":[{"name":"self"},{"name":"goptionflags"}],"output":{"name":"bool"}}],[11,"ge","","",48,{"inputs":[{"name":"self"},{"name":"goptionflags"}],"output":{"name":"bool"}}],[11,"cmp","","",48,{"inputs":[{"name":"self"},{"name":"goptionflags"}],"output":{"name":"ordering"}}],[11,"hash","","",48,null],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",48,null],[18,"HIDDEN","","",48,null],[18,"IN_MAIN","","",48,null],[18,"REVERSE","","",48,null],[18,"NO_ARG","","",48,null],[18,"FILENAME","","",48,null],[18,"OPTIONAL_ARG","","",48,null],[18,"NOALIAS","","",48,null],[11,"empty","","Returns an empty set of flags.",48,{"inputs":[],"output":{"name":"goptionflags"}}],[11,"all","","Returns the set containing all flags.",48,{"inputs":[],"output":{"name":"goptionflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",48,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",48,{"inputs":[{"name":"c_uint"}],"output":{"generics":["goptionflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",48,{"inputs":[{"name":"c_uint"}],"output":{"name":"goptionflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",48,{"inputs":[{"name":"self"},{"name":"goptionflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",48,{"inputs":[{"name":"self"},{"name":"goptionflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",48,{"inputs":[{"name":"self"},{"name":"goptionflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",48,{"inputs":[{"name":"self"},{"name":"goptionflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",48,{"inputs":[{"name":"self"},{"name":"goptionflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",48,{"inputs":[{"name":"self"},{"name":"goptionflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",48,{"inputs":[{"name":"self"},{"name":"goptionflags"}],"output":{"name":"goptionflags"}}],[11,"bitor_assign","","Adds the set of flags.",48,{"inputs":[{"name":"self"},{"name":"goptionflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",48,{"inputs":[{"name":"self"},{"name":"goptionflags"}],"output":{"name":"goptionflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",48,{"inputs":[{"name":"self"},{"name":"goptionflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",48,{"inputs":[{"name":"self"},{"name":"goptionflags"}],"output":{"name":"goptionflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",48,{"inputs":[{"name":"self"},{"name":"goptionflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",48,{"inputs":[{"name":"self"},{"name":"goptionflags"}],"output":{"name":"goptionflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",48,{"inputs":[{"name":"self"},{"name":"goptionflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",48,{"inputs":[{"name":"self"}],"output":{"name":"goptionflags"}}],[11,"extend","","",48,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",48,{"inputs":[{"name":"t"}],"output":{"name":"goptionflags"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"gregexcompileflags"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"gregexcompileflags"}],"output":{"name":"bool"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"gregexcompileflags"}}],[11,"partial_cmp","","",49,{"inputs":[{"name":"self"},{"name":"gregexcompileflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",49,{"inputs":[{"name":"self"},{"name":"gregexcompileflags"}],"output":{"name":"bool"}}],[11,"le","","",49,{"inputs":[{"name":"self"},{"name":"gregexcompileflags"}],"output":{"name":"bool"}}],[11,"gt","","",49,{"inputs":[{"name":"self"},{"name":"gregexcompileflags"}],"output":{"name":"bool"}}],[11,"ge","","",49,{"inputs":[{"name":"self"},{"name":"gregexcompileflags"}],"output":{"name":"bool"}}],[11,"cmp","","",49,{"inputs":[{"name":"self"},{"name":"gregexcompileflags"}],"output":{"name":"ordering"}}],[11,"hash","","",49,null],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"CASELESS","","",49,null],[18,"MULTILINE","","",49,null],[18,"DOTALL","","",49,null],[18,"EXTENDED","","",49,null],[18,"ANCHORED","","",49,null],[18,"DOLLAR_ENDONLY","","",49,null],[18,"UNGREEDY","","",49,null],[18,"RAW","","",49,null],[18,"NO_AUTO_CAPTURE","","",49,null],[18,"OPTIMIZE","","",49,null],[18,"FIRSTLINE","","",49,null],[18,"DUPNAMES","","",49,null],[18,"NEWLINE_CR","","",49,null],[18,"NEWLINE_LF","","",49,null],[18,"NEWLINE_CRLF","","",49,null],[18,"NEWLINE_ANYCRLF","","",49,null],[18,"BSR_ANYCRLF","","",49,null],[18,"JAVASCRIPT_COMPAT","","",49,null],[11,"empty","","Returns an empty set of flags.",49,{"inputs":[],"output":{"name":"gregexcompileflags"}}],[11,"all","","Returns the set containing all flags.",49,{"inputs":[],"output":{"name":"gregexcompileflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",49,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",49,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gregexcompileflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",49,{"inputs":[{"name":"c_uint"}],"output":{"name":"gregexcompileflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",49,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",49,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",49,{"inputs":[{"name":"self"},{"name":"gregexcompileflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",49,{"inputs":[{"name":"self"},{"name":"gregexcompileflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",49,{"inputs":[{"name":"self"},{"name":"gregexcompileflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",49,{"inputs":[{"name":"self"},{"name":"gregexcompileflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",49,{"inputs":[{"name":"self"},{"name":"gregexcompileflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",49,{"inputs":[{"name":"self"},{"name":"gregexcompileflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",49,{"inputs":[{"name":"self"},{"name":"gregexcompileflags"}],"output":{"name":"gregexcompileflags"}}],[11,"bitor_assign","","Adds the set of flags.",49,{"inputs":[{"name":"self"},{"name":"gregexcompileflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",49,{"inputs":[{"name":"self"},{"name":"gregexcompileflags"}],"output":{"name":"gregexcompileflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",49,{"inputs":[{"name":"self"},{"name":"gregexcompileflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",49,{"inputs":[{"name":"self"},{"name":"gregexcompileflags"}],"output":{"name":"gregexcompileflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",49,{"inputs":[{"name":"self"},{"name":"gregexcompileflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",49,{"inputs":[{"name":"self"},{"name":"gregexcompileflags"}],"output":{"name":"gregexcompileflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",49,{"inputs":[{"name":"self"},{"name":"gregexcompileflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",49,{"inputs":[{"name":"self"}],"output":{"name":"gregexcompileflags"}}],[11,"extend","","",49,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",49,{"inputs":[{"name":"t"}],"output":{"name":"gregexcompileflags"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"gregexmatchflags"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"self"},{"name":"gregexmatchflags"}],"output":{"name":"bool"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"gregexmatchflags"}}],[11,"partial_cmp","","",50,{"inputs":[{"name":"self"},{"name":"gregexmatchflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",50,{"inputs":[{"name":"self"},{"name":"gregexmatchflags"}],"output":{"name":"bool"}}],[11,"le","","",50,{"inputs":[{"name":"self"},{"name":"gregexmatchflags"}],"output":{"name":"bool"}}],[11,"gt","","",50,{"inputs":[{"name":"self"},{"name":"gregexmatchflags"}],"output":{"name":"bool"}}],[11,"ge","","",50,{"inputs":[{"name":"self"},{"name":"gregexmatchflags"}],"output":{"name":"bool"}}],[11,"cmp","","",50,{"inputs":[{"name":"self"},{"name":"gregexmatchflags"}],"output":{"name":"ordering"}}],[11,"hash","","",50,null],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"ANCHORED","","",50,null],[18,"NOTBOL","","",50,null],[18,"NOTEOL","","",50,null],[18,"NOTEMPTY","","",50,null],[18,"PARTIAL","","",50,null],[18,"NEWLINE_CR","","",50,null],[18,"NEWLINE_LF","","",50,null],[18,"NEWLINE_CRLF","","",50,null],[18,"NEWLINE_ANY","","",50,null],[18,"NEWLINE_ANYCRLF","","",50,null],[18,"BSR_ANYCRLF","","",50,null],[18,"BSR_ANY","","",50,null],[18,"PARTIAL_SOFT","","",50,null],[18,"PARTIAL_HARD","","",50,null],[18,"NOTEMPTY_ATSTART","","",50,null],[11,"empty","","Returns an empty set of flags.",50,{"inputs":[],"output":{"name":"gregexmatchflags"}}],[11,"all","","Returns the set containing all flags.",50,{"inputs":[],"output":{"name":"gregexmatchflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",50,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",50,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gregexmatchflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",50,{"inputs":[{"name":"c_uint"}],"output":{"name":"gregexmatchflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",50,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",50,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",50,{"inputs":[{"name":"self"},{"name":"gregexmatchflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",50,{"inputs":[{"name":"self"},{"name":"gregexmatchflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",50,{"inputs":[{"name":"self"},{"name":"gregexmatchflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",50,{"inputs":[{"name":"self"},{"name":"gregexmatchflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",50,{"inputs":[{"name":"self"},{"name":"gregexmatchflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",50,{"inputs":[{"name":"self"},{"name":"gregexmatchflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",50,{"inputs":[{"name":"self"},{"name":"gregexmatchflags"}],"output":{"name":"gregexmatchflags"}}],[11,"bitor_assign","","Adds the set of flags.",50,{"inputs":[{"name":"self"},{"name":"gregexmatchflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",50,{"inputs":[{"name":"self"},{"name":"gregexmatchflags"}],"output":{"name":"gregexmatchflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",50,{"inputs":[{"name":"self"},{"name":"gregexmatchflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",50,{"inputs":[{"name":"self"},{"name":"gregexmatchflags"}],"output":{"name":"gregexmatchflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",50,{"inputs":[{"name":"self"},{"name":"gregexmatchflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",50,{"inputs":[{"name":"self"},{"name":"gregexmatchflags"}],"output":{"name":"gregexmatchflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",50,{"inputs":[{"name":"self"},{"name":"gregexmatchflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",50,{"inputs":[{"name":"self"}],"output":{"name":"gregexmatchflags"}}],[11,"extend","","",50,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",50,{"inputs":[{"name":"t"}],"output":{"name":"gregexmatchflags"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"gspawnflags"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"gspawnflags"}],"output":{"name":"bool"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"gspawnflags"}}],[11,"partial_cmp","","",51,{"inputs":[{"name":"self"},{"name":"gspawnflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",51,{"inputs":[{"name":"self"},{"name":"gspawnflags"}],"output":{"name":"bool"}}],[11,"le","","",51,{"inputs":[{"name":"self"},{"name":"gspawnflags"}],"output":{"name":"bool"}}],[11,"gt","","",51,{"inputs":[{"name":"self"},{"name":"gspawnflags"}],"output":{"name":"bool"}}],[11,"ge","","",51,{"inputs":[{"name":"self"},{"name":"gspawnflags"}],"output":{"name":"bool"}}],[11,"cmp","","",51,{"inputs":[{"name":"self"},{"name":"gspawnflags"}],"output":{"name":"ordering"}}],[11,"hash","","",51,null],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"DEFAULT","","",51,null],[18,"LEAVE_DESCRIPTORS_OPEN","","",51,null],[18,"DO_NOT_REAP_CHILD","","",51,null],[18,"SEARCH_PATH","","",51,null],[18,"STDOUT_TO_DEV_NULL","","",51,null],[18,"STDERR_TO_DEV_NULL","","",51,null],[18,"CHILD_INHERITS_STDIN","","",51,null],[18,"FILE_AND_ARGV_ZERO","","",51,null],[18,"SEARCH_PATH_FROM_ENVP","","",51,null],[18,"CLOEXEC_PIPES","","",51,null],[11,"empty","","Returns an empty set of flags.",51,{"inputs":[],"output":{"name":"gspawnflags"}}],[11,"all","","Returns the set containing all flags.",51,{"inputs":[],"output":{"name":"gspawnflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",51,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",51,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gspawnflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",51,{"inputs":[{"name":"c_uint"}],"output":{"name":"gspawnflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",51,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",51,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",51,{"inputs":[{"name":"self"},{"name":"gspawnflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",51,{"inputs":[{"name":"self"},{"name":"gspawnflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",51,{"inputs":[{"name":"self"},{"name":"gspawnflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",51,{"inputs":[{"name":"self"},{"name":"gspawnflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",51,{"inputs":[{"name":"self"},{"name":"gspawnflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",51,{"inputs":[{"name":"self"},{"name":"gspawnflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",51,{"inputs":[{"name":"self"},{"name":"gspawnflags"}],"output":{"name":"gspawnflags"}}],[11,"bitor_assign","","Adds the set of flags.",51,{"inputs":[{"name":"self"},{"name":"gspawnflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",51,{"inputs":[{"name":"self"},{"name":"gspawnflags"}],"output":{"name":"gspawnflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",51,{"inputs":[{"name":"self"},{"name":"gspawnflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",51,{"inputs":[{"name":"self"},{"name":"gspawnflags"}],"output":{"name":"gspawnflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",51,{"inputs":[{"name":"self"},{"name":"gspawnflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",51,{"inputs":[{"name":"self"},{"name":"gspawnflags"}],"output":{"name":"gspawnflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",51,{"inputs":[{"name":"self"},{"name":"gspawnflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",51,{"inputs":[{"name":"self"}],"output":{"name":"gspawnflags"}}],[11,"extend","","",51,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",51,{"inputs":[{"name":"t"}],"output":{"name":"gspawnflags"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"gtestsubprocessflags"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"gtestsubprocessflags"}],"output":{"name":"bool"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"gtestsubprocessflags"}}],[11,"partial_cmp","","",52,{"inputs":[{"name":"self"},{"name":"gtestsubprocessflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",52,{"inputs":[{"name":"self"},{"name":"gtestsubprocessflags"}],"output":{"name":"bool"}}],[11,"le","","",52,{"inputs":[{"name":"self"},{"name":"gtestsubprocessflags"}],"output":{"name":"bool"}}],[11,"gt","","",52,{"inputs":[{"name":"self"},{"name":"gtestsubprocessflags"}],"output":{"name":"bool"}}],[11,"ge","","",52,{"inputs":[{"name":"self"},{"name":"gtestsubprocessflags"}],"output":{"name":"bool"}}],[11,"cmp","","",52,{"inputs":[{"name":"self"},{"name":"gtestsubprocessflags"}],"output":{"name":"ordering"}}],[11,"hash","","",52,null],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"STDIN","","",52,null],[18,"STDOUT","","",52,null],[18,"STDERR","","",52,null],[11,"empty","","Returns an empty set of flags.",52,{"inputs":[],"output":{"name":"gtestsubprocessflags"}}],[11,"all","","Returns the set containing all flags.",52,{"inputs":[],"output":{"name":"gtestsubprocessflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",52,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",52,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gtestsubprocessflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",52,{"inputs":[{"name":"c_uint"}],"output":{"name":"gtestsubprocessflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",52,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",52,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",52,{"inputs":[{"name":"self"},{"name":"gtestsubprocessflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",52,{"inputs":[{"name":"self"},{"name":"gtestsubprocessflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",52,{"inputs":[{"name":"self"},{"name":"gtestsubprocessflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",52,{"inputs":[{"name":"self"},{"name":"gtestsubprocessflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",52,{"inputs":[{"name":"self"},{"name":"gtestsubprocessflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",52,{"inputs":[{"name":"self"},{"name":"gtestsubprocessflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",52,{"inputs":[{"name":"self"},{"name":"gtestsubprocessflags"}],"output":{"name":"gtestsubprocessflags"}}],[11,"bitor_assign","","Adds the set of flags.",52,{"inputs":[{"name":"self"},{"name":"gtestsubprocessflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",52,{"inputs":[{"name":"self"},{"name":"gtestsubprocessflags"}],"output":{"name":"gtestsubprocessflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",52,{"inputs":[{"name":"self"},{"name":"gtestsubprocessflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",52,{"inputs":[{"name":"self"},{"name":"gtestsubprocessflags"}],"output":{"name":"gtestsubprocessflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",52,{"inputs":[{"name":"self"},{"name":"gtestsubprocessflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",52,{"inputs":[{"name":"self"},{"name":"gtestsubprocessflags"}],"output":{"name":"gtestsubprocessflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",52,{"inputs":[{"name":"self"},{"name":"gtestsubprocessflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",52,{"inputs":[{"name":"self"}],"output":{"name":"gtestsubprocessflags"}}],[11,"extend","","",52,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",52,{"inputs":[{"name":"t"}],"output":{"name":"gtestsubprocessflags"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"gtesttrapflags"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"self"},{"name":"gtesttrapflags"}],"output":{"name":"bool"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"gtesttrapflags"}}],[11,"partial_cmp","","",53,{"inputs":[{"name":"self"},{"name":"gtesttrapflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",53,{"inputs":[{"name":"self"},{"name":"gtesttrapflags"}],"output":{"name":"bool"}}],[11,"le","","",53,{"inputs":[{"name":"self"},{"name":"gtesttrapflags"}],"output":{"name":"bool"}}],[11,"gt","","",53,{"inputs":[{"name":"self"},{"name":"gtesttrapflags"}],"output":{"name":"bool"}}],[11,"ge","","",53,{"inputs":[{"name":"self"},{"name":"gtesttrapflags"}],"output":{"name":"bool"}}],[11,"cmp","","",53,{"inputs":[{"name":"self"},{"name":"gtesttrapflags"}],"output":{"name":"ordering"}}],[11,"hash","","",53,null],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"SILENCE_STDOUT","","",53,null],[18,"SILENCE_STDERR","","",53,null],[18,"INHERIT_STDIN","","",53,null],[11,"empty","","Returns an empty set of flags.",53,{"inputs":[],"output":{"name":"gtesttrapflags"}}],[11,"all","","Returns the set containing all flags.",53,{"inputs":[],"output":{"name":"gtesttrapflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",53,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",53,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gtesttrapflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",53,{"inputs":[{"name":"c_uint"}],"output":{"name":"gtesttrapflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",53,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",53,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",53,{"inputs":[{"name":"self"},{"name":"gtesttrapflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",53,{"inputs":[{"name":"self"},{"name":"gtesttrapflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",53,{"inputs":[{"name":"self"},{"name":"gtesttrapflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",53,{"inputs":[{"name":"self"},{"name":"gtesttrapflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",53,{"inputs":[{"name":"self"},{"name":"gtesttrapflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",53,{"inputs":[{"name":"self"},{"name":"gtesttrapflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",53,{"inputs":[{"name":"self"},{"name":"gtesttrapflags"}],"output":{"name":"gtesttrapflags"}}],[11,"bitor_assign","","Adds the set of flags.",53,{"inputs":[{"name":"self"},{"name":"gtesttrapflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",53,{"inputs":[{"name":"self"},{"name":"gtesttrapflags"}],"output":{"name":"gtesttrapflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",53,{"inputs":[{"name":"self"},{"name":"gtesttrapflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",53,{"inputs":[{"name":"self"},{"name":"gtesttrapflags"}],"output":{"name":"gtesttrapflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",53,{"inputs":[{"name":"self"},{"name":"gtesttrapflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",53,{"inputs":[{"name":"self"},{"name":"gtesttrapflags"}],"output":{"name":"gtesttrapflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",53,{"inputs":[{"name":"self"},{"name":"gtesttrapflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",53,{"inputs":[{"name":"self"}],"output":{"name":"gtesttrapflags"}}],[11,"extend","","",53,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",53,{"inputs":[{"name":"t"}],"output":{"name":"gtesttrapflags"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"gtraverseflags"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"self"},{"name":"gtraverseflags"}],"output":{"name":"bool"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"gtraverseflags"}}],[11,"partial_cmp","","",54,{"inputs":[{"name":"self"},{"name":"gtraverseflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",54,{"inputs":[{"name":"self"},{"name":"gtraverseflags"}],"output":{"name":"bool"}}],[11,"le","","",54,{"inputs":[{"name":"self"},{"name":"gtraverseflags"}],"output":{"name":"bool"}}],[11,"gt","","",54,{"inputs":[{"name":"self"},{"name":"gtraverseflags"}],"output":{"name":"bool"}}],[11,"ge","","",54,{"inputs":[{"name":"self"},{"name":"gtraverseflags"}],"output":{"name":"bool"}}],[11,"cmp","","",54,{"inputs":[{"name":"self"},{"name":"gtraverseflags"}],"output":{"name":"ordering"}}],[11,"hash","","",54,null],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"LEAVES","","",54,null],[18,"NON_LEAVES","","",54,null],[18,"ALL","","",54,null],[18,"MASK","","",54,null],[18,"LEAFS","","",54,null],[18,"NON_LEAFS","","",54,null],[11,"empty","","Returns an empty set of flags.",54,{"inputs":[],"output":{"name":"gtraverseflags"}}],[11,"all","","Returns the set containing all flags.",54,{"inputs":[],"output":{"name":"gtraverseflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",54,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",54,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gtraverseflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",54,{"inputs":[{"name":"c_uint"}],"output":{"name":"gtraverseflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",54,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",54,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",54,{"inputs":[{"name":"self"},{"name":"gtraverseflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",54,{"inputs":[{"name":"self"},{"name":"gtraverseflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",54,{"inputs":[{"name":"self"},{"name":"gtraverseflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",54,{"inputs":[{"name":"self"},{"name":"gtraverseflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",54,{"inputs":[{"name":"self"},{"name":"gtraverseflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",54,{"inputs":[{"name":"self"},{"name":"gtraverseflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",54,{"inputs":[{"name":"self"},{"name":"gtraverseflags"}],"output":{"name":"gtraverseflags"}}],[11,"bitor_assign","","Adds the set of flags.",54,{"inputs":[{"name":"self"},{"name":"gtraverseflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",54,{"inputs":[{"name":"self"},{"name":"gtraverseflags"}],"output":{"name":"gtraverseflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",54,{"inputs":[{"name":"self"},{"name":"gtraverseflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",54,{"inputs":[{"name":"self"},{"name":"gtraverseflags"}],"output":{"name":"gtraverseflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",54,{"inputs":[{"name":"self"},{"name":"gtraverseflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",54,{"inputs":[{"name":"self"},{"name":"gtraverseflags"}],"output":{"name":"gtraverseflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",54,{"inputs":[{"name":"self"},{"name":"gtraverseflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",54,{"inputs":[{"name":"self"}],"output":{"name":"gtraverseflags"}}],[11,"extend","","",54,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",54,{"inputs":[{"name":"t"}],"output":{"name":"gtraverseflags"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"GArray"],[3,"GByteArray"],[3,"GCond"],[3,"GDebugKey"],[3,"GError"],[3,"GHashTableIter"],[3,"GHook"],[3,"GHookList"],[3,"GIOChannel"],[3,"GIOFuncs"],[3,"GList"],[3,"GLogField"],[3,"GMarkupParser"],[3,"GMemVTable"],[3,"GNode"],[3,"GOnce"],[3,"GOptionEntry"],[3,"GPollFD"],[3,"GPrivate"],[3,"GPtrArray"],[3,"GQueue"],[3,"GRWLock"],[3,"GRecMutex"],[3,"GSList"],[3,"GScanner"],[3,"GScannerConfig"],[3,"GSource"],[3,"GSourceCallbackFuncs"],[3,"GSourceFuncs"],[3,"GString"],[3,"GTestConfig"],[3,"GTestLogBuffer"],[3,"GTestLogMsg"],[3,"GThreadPool"],[3,"GTimeVal"],[3,"GTrashStack"],[3,"GVariantIter"],[3,"Volatile"],[3,"GAsciiType"],[3,"GFileTest"],[3,"GFormatSizeFlags"],[3,"GHookFlagMask"],[3,"GIOCondition"],[3,"GIOFlags"],[3,"GKeyFileFlags"],[3,"GLogLevelFlags"],[3,"GMarkupCollectType"],[3,"GMarkupParseFlags"],[3,"GOptionFlags"],[3,"GRegexCompileFlags"],[3,"GRegexMatchFlags"],[3,"GSpawnFlags"],[3,"GTestSubprocessFlags"],[3,"GTestTrapFlags"],[3,"GTraverseFlags"],[3,"GMutex"],[3,"GAsyncQueue"],[3,"GBookmarkFile"],[3,"GBytes"],[3,"GChecksum"],[3,"GData"],[3,"GDate"],[3,"GDateTime"],[3,"GDir"],[3,"GHashTable"],[3,"GHmac"],[3,"GIConv"],[3,"GKeyFile"],[3,"GMainContext"],[3,"GMainLoop"],[3,"GMappedFile"],[3,"GMarkupParseContext"],[3,"GMatchInfo"],[3,"GOptionContext"],[3,"GOptionGroup"],[3,"GPatternSpec"],[3,"GRand"],[3,"GRegex"],[3,"GSequence"],[3,"GSequenceIter"],[3,"GSourcePrivate"],[3,"GStatBuf"],[3,"GStringChunk"],[3,"GTestCase"],[3,"GTestSuite"],[3,"GThread"],[3,"GTimeZone"],[3,"GTimer"],[3,"GTree"],[3,"GVariant"],[3,"GVariantBuilder"],[3,"GVariantDict"],[3,"GVariantType"]]};
searchIndex["gobject_sys"] = {"doc":"","items":[[3,"GBindingFlags","gobject_sys","",null,null],[3,"GConnectFlags","","",null,null],[3,"GParamFlags","","",null,null],[3,"GSignalFlags","","",null,null],[3,"GSignalMatchType","","",null,null],[3,"GTypeDebugFlags","","",null,null],[3,"GTypeFlags","","",null,null],[3,"GTypeFundamentalFlags","","",null,null],[3,"GCClosure","","",null,null],[12,"closure","","",0,null],[12,"callback","","",0,null],[3,"GClosure","","",null,null],[3,"GClosureNotifyData","","",null,null],[12,"data","","",1,null],[12,"notify","","",1,null],[3,"GEnumClass","","",null,null],[12,"g_type_class","","",2,null],[12,"minimum","","",2,null],[12,"maximum","","",2,null],[12,"n_values","","",2,null],[12,"values","","",2,null],[3,"GEnumValue","","",null,null],[12,"value","","",3,null],[12,"value_name","","",3,null],[12,"value_nick","","",3,null],[3,"GFlagsClass","","",null,null],[12,"g_type_class","","",4,null],[12,"mask","","",4,null],[12,"n_values","","",4,null],[12,"values","","",4,null],[3,"GFlagsValue","","",null,null],[12,"value","","",5,null],[12,"value_name","","",5,null],[12,"value_nick","","",5,null],[3,"GInitiallyUnownedClass","","",null,null],[12,"g_type_class","","",6,null],[12,"construct_properties","","",6,null],[12,"constructor","","",6,null],[12,"set_property","","",6,null],[12,"get_property","","",6,null],[12,"dispose","","",6,null],[12,"finalize","","",6,null],[12,"dispatch_properties_changed","","",6,null],[12,"notify","","",6,null],[12,"constructed","","",6,null],[12,"flags","","",6,null],[12,"pdummy","","",6,null],[3,"GInterfaceInfo","","",null,null],[12,"interface_init","","",7,null],[12,"interface_finalize","","",7,null],[12,"interface_data","","",7,null],[3,"GObjectClass","","",null,null],[12,"g_type_class","","",8,null],[12,"construct_properties","","",8,null],[12,"constructor","","",8,null],[12,"set_property","","",8,null],[12,"get_property","","",8,null],[12,"dispose","","",8,null],[12,"finalize","","",8,null],[12,"dispatch_properties_changed","","",8,null],[12,"notify","","",8,null],[12,"constructed","","",8,null],[12,"flags","","",8,null],[12,"pdummy","","",8,null],[3,"GObjectConstructParam","","",null,null],[12,"pspec","","",9,null],[12,"value","","",9,null],[3,"GParamSpecClass","","",null,null],[12,"g_type_class","","",10,null],[12,"value_type","","",10,null],[12,"finalize","","",10,null],[12,"value_set_default","","",10,null],[12,"value_validate","","",10,null],[12,"values_cmp","","",10,null],[12,"dummy","","",10,null],[3,"GParamSpecPool","","",null,null],[3,"GParamSpecTypeInfo","","",null,null],[12,"instance_size","","",11,null],[12,"n_preallocs","","",11,null],[12,"instance_init","","",11,null],[12,"value_type","","",11,null],[12,"finalize","","",11,null],[12,"value_set_default","","",11,null],[12,"value_validate","","",11,null],[12,"values_cmp","","",11,null],[3,"GParameter","","",null,null],[12,"name","","",12,null],[12,"value","","",12,null],[3,"GSignalInvocationHint","","",null,null],[12,"signal_id","","",13,null],[12,"detail","","",13,null],[12,"run_type","","",13,null],[3,"GSignalQuery","","",null,null],[12,"signal_id","","",14,null],[12,"signal_name","","",14,null],[12,"itype","","",14,null],[12,"signal_flags","","",14,null],[12,"return_type","","",14,null],[12,"n_params","","",14,null],[12,"param_types","","",14,null],[3,"GTypeClass","","",null,null],[12,"g_type","","",15,null],[3,"GTypeFundamentalInfo","","",null,null],[12,"type_flags","","",16,null],[3,"GTypeInfo","","",null,null],[12,"class_size","","",17,null],[12,"base_init","","",17,null],[12,"base_finalize","","",17,null],[12,"class_init","","",17,null],[12,"class_finalize","","",17,null],[12,"class_data","","",17,null],[12,"instance_size","","",17,null],[12,"n_preallocs","","",17,null],[12,"instance_init","","",17,null],[12,"value_table","","",17,null],[3,"GTypeInstance","","",null,null],[12,"g_class","","",18,null],[3,"GTypeInterface","","",null,null],[12,"g_type","","",19,null],[12,"g_instance_type","","",19,null],[3,"GTypeModuleClass","","",null,null],[12,"parent_class","","",20,null],[12,"load","","",20,null],[12,"unload","","",20,null],[12,"reserved1","","",20,null],[12,"reserved2","","",20,null],[12,"reserved3","","",20,null],[12,"reserved4","","",20,null],[3,"GTypePluginClass","","",null,null],[12,"base_iface","","",21,null],[12,"use_plugin","","",21,null],[12,"unuse_plugin","","",21,null],[12,"complete_type_info","","",21,null],[12,"complete_interface_info","","",21,null],[3,"GTypeQuery","","",null,null],[12,"type_","","",22,null],[12,"type_name","","",22,null],[12,"class_size","","",22,null],[12,"instance_size","","",22,null],[3,"GTypeValueTable","","",null,null],[12,"value_init","","",23,null],[12,"value_free","","",23,null],[12,"value_copy","","",23,null],[12,"value_peek_pointer","","",23,null],[12,"collect_format","","",23,null],[12,"collect_value","","",23,null],[12,"lcopy_format","","",23,null],[12,"lcopy_value","","",23,null],[3,"GValue","","",null,null],[12,"g_type","","",24,null],[12,"data","","",24,null],[3,"GValueArray","","",null,null],[12,"n_values","","",25,null],[12,"values","","",25,null],[12,"n_prealloced","","",25,null],[3,"GWeakRef","","",null,null],[12,"priv_","","",26,null],[3,"GBinding","","",null,null],[3,"GInitiallyUnowned","","",null,null],[12,"g_type_instance","","",27,null],[12,"ref_count","","",27,null],[12,"qdata","","",27,null],[3,"GObject","","",null,null],[12,"g_type_instance","","",28,null],[12,"ref_count","","",28,null],[12,"qdata","","",28,null],[3,"GParamSpec","","",null,null],[12,"g_type_instance","","",29,null],[12,"name","","",29,null],[12,"flags","","",29,null],[12,"value_type","","",29,null],[12,"owner_type","","",29,null],[12,"_nick","","",29,null],[12,"_blurb","","",29,null],[12,"qdata","","",29,null],[12,"ref_count","","",29,null],[12,"param_id","","",29,null],[3,"GParamSpecBoolean","","",null,null],[12,"parent_instance","","",30,null],[12,"default_value","","",30,null],[3,"GParamSpecBoxed","","",null,null],[12,"parent_instance","","",31,null],[3,"GParamSpecChar","","",null,null],[12,"parent_instance","","",32,null],[12,"minimum","","",32,null],[12,"maximum","","",32,null],[12,"default_value","","",32,null],[3,"GParamSpecDouble","","",null,null],[12,"parent_instance","","",33,null],[12,"minimum","","",33,null],[12,"maximum","","",33,null],[12,"default_value","","",33,null],[12,"epsilon","","",33,null],[3,"GParamSpecEnum","","",null,null],[12,"parent_instance","","",34,null],[12,"enum_class","","",34,null],[12,"default_value","","",34,null],[3,"GParamSpecFlags","","",null,null],[12,"parent_instance","","",35,null],[12,"flags_class","","",35,null],[12,"default_value","","",35,null],[3,"GParamSpecFloat","","",null,null],[12,"parent_instance","","",36,null],[12,"minimum","","",36,null],[12,"maximum","","",36,null],[12,"default_value","","",36,null],[12,"epsilon","","",36,null],[3,"GParamSpecGType","","",null,null],[12,"parent_instance","","",37,null],[12,"is_a_type","","",37,null],[3,"GParamSpecInt","","",null,null],[12,"parent_instance","","",38,null],[12,"minimum","","",38,null],[12,"maximum","","",38,null],[12,"default_value","","",38,null],[3,"GParamSpecInt64","","",null,null],[12,"parent_instance","","",39,null],[12,"minimum","","",39,null],[12,"maximum","","",39,null],[12,"default_value","","",39,null],[3,"GParamSpecLong","","",null,null],[12,"parent_instance","","",40,null],[12,"minimum","","",40,null],[12,"maximum","","",40,null],[12,"default_value","","",40,null],[3,"GParamSpecObject","","",null,null],[12,"parent_instance","","",41,null],[3,"GParamSpecOverride","","",null,null],[12,"parent_instance","","",42,null],[12,"overridden","","",42,null],[3,"GParamSpecParam","","",null,null],[12,"parent_instance","","",43,null],[3,"GParamSpecPointer","","",null,null],[12,"parent_instance","","",44,null],[3,"GParamSpecString","","",null,null],[12,"parent_instance","","",45,null],[12,"default_value","","",45,null],[12,"cset_first","","",45,null],[12,"cset_nth","","",45,null],[12,"substitutor","","",45,null],[3,"GParamSpecUChar","","",null,null],[12,"parent_instance","","",46,null],[12,"minimum","","",46,null],[12,"maximum","","",46,null],[12,"default_value","","",46,null],[3,"GParamSpecUInt","","",null,null],[12,"parent_instance","","",47,null],[12,"minimum","","",47,null],[12,"maximum","","",47,null],[12,"default_value","","",47,null],[3,"GParamSpecUInt64","","",null,null],[12,"parent_instance","","",48,null],[12,"minimum","","",48,null],[12,"maximum","","",48,null],[12,"default_value","","",48,null],[3,"GParamSpecULong","","",null,null],[12,"parent_instance","","",49,null],[12,"minimum","","",49,null],[12,"maximum","","",49,null],[12,"default_value","","",49,null],[3,"GParamSpecUnichar","","",null,null],[12,"parent_instance","","",50,null],[12,"default_value","","",50,null],[3,"GParamSpecValueArray","","",null,null],[12,"parent_instance","","",51,null],[12,"element_spec","","",51,null],[12,"fixed_n_elements","","",51,null],[3,"GParamSpecVariant","","",null,null],[12,"parent_instance","","",52,null],[12,"type_","","",52,null],[12,"default_value","","",52,null],[12,"padding","","",52,null],[3,"GTypeModule","","",null,null],[12,"parent_instance","","",53,null],[12,"use_count","","",53,null],[12,"type_infos","","",53,null],[12,"interface_infos","","",53,null],[12,"name","","",53,null],[3,"GTypePlugin","","",null,null],[5,"g_binding_flags_get_type","","",null,null],[5,"g_cclosure_marshal_BOOLEAN__BOXED_BOXED","","",null,null],[5,"g_cclosure_marshal_BOOLEAN__FLAGS","","",null,null],[5,"g_cclosure_marshal_STRING__OBJECT_POINTER","","",null,null],[5,"g_cclosure_marshal_VOID__BOOLEAN","","",null,null],[5,"g_cclosure_marshal_VOID__BOXED","","",null,null],[5,"g_cclosure_marshal_VOID__CHAR","","",null,null],[5,"g_cclosure_marshal_VOID__DOUBLE","","",null,null],[5,"g_cclosure_marshal_VOID__ENUM","","",null,null],[5,"g_cclosure_marshal_VOID__FLAGS","","",null,null],[5,"g_cclosure_marshal_VOID__FLOAT","","",null,null],[5,"g_cclosure_marshal_VOID__INT","","",null,null],[5,"g_cclosure_marshal_VOID__LONG","","",null,null],[5,"g_cclosure_marshal_VOID__OBJECT","","",null,null],[5,"g_cclosure_marshal_VOID__PARAM","","",null,null],[5,"g_cclosure_marshal_VOID__POINTER","","",null,null],[5,"g_cclosure_marshal_VOID__STRING","","",null,null],[5,"g_cclosure_marshal_VOID__UCHAR","","",null,null],[5,"g_cclosure_marshal_VOID__UINT","","",null,null],[5,"g_cclosure_marshal_VOID__UINT_POINTER","","",null,null],[5,"g_cclosure_marshal_VOID__ULONG","","",null,null],[5,"g_cclosure_marshal_VOID__VARIANT","","",null,null],[5,"g_cclosure_marshal_VOID__VOID","","",null,null],[5,"g_cclosure_marshal_generic","","",null,null],[5,"g_cclosure_new","","",null,null],[5,"g_cclosure_new_object","","",null,null],[5,"g_cclosure_new_object_swap","","",null,null],[5,"g_cclosure_new_swap","","",null,null],[5,"g_closure_get_type","","",null,null],[5,"g_closure_new_object","","",null,null],[5,"g_closure_new_simple","","",null,null],[5,"g_closure_add_finalize_notifier","","",null,null],[5,"g_closure_add_invalidate_notifier","","",null,null],[5,"g_closure_add_marshal_guards","","",null,null],[5,"g_closure_invalidate","","",null,null],[5,"g_closure_invoke","","",null,null],[5,"g_closure_ref","","",null,null],[5,"g_closure_remove_finalize_notifier","","",null,null],[5,"g_closure_remove_invalidate_notifier","","",null,null],[5,"g_closure_set_marshal","","",null,null],[5,"g_closure_set_meta_marshal","","",null,null],[5,"g_closure_sink","","",null,null],[5,"g_closure_unref","","",null,null],[5,"g_object_class_find_property","","",null,null],[5,"g_object_class_install_properties","","",null,null],[5,"g_object_class_install_property","","",null,null],[5,"g_object_class_list_properties","","",null,null],[5,"g_object_class_override_property","","",null,null],[5,"g_param_spec_pool_insert","","",null,null],[5,"g_param_spec_pool_list","","",null,null],[5,"g_param_spec_pool_list_owned","","",null,null],[5,"g_param_spec_pool_lookup","","",null,null],[5,"g_param_spec_pool_remove","","",null,null],[5,"g_param_spec_pool_new","","",null,null],[5,"g_type_class_add_private","","",null,null],[5,"g_type_class_get_instance_private_offset","","",null,null],[5,"g_type_class_get_private","","",null,null],[5,"g_type_class_peek_parent","","",null,null],[5,"g_type_class_unref","","",null,null],[5,"g_type_class_unref_uncached","","",null,null],[5,"g_type_class_adjust_private_offset","","",null,null],[5,"g_type_class_peek","","",null,null],[5,"g_type_class_peek_static","","",null,null],[5,"g_type_class_ref","","",null,null],[5,"g_type_instance_get_private","","",null,null],[5,"g_type_interface_peek_parent","","",null,null],[5,"g_type_interface_add_prerequisite","","",null,null],[5,"g_type_interface_get_plugin","","",null,null],[5,"g_type_interface_peek","","",null,null],[5,"g_type_interface_prerequisites","","",null,null],[5,"g_type_value_table_peek","","",null,null],[5,"g_value_get_type","","",null,null],[5,"g_value_copy","","",null,null],[5,"g_value_dup_boxed","","",null,null],[5,"g_value_dup_object","","",null,null],[5,"g_value_dup_param","","",null,null],[5,"g_value_dup_string","","",null,null],[5,"g_value_dup_variant","","",null,null],[5,"g_value_fits_pointer","","",null,null],[5,"g_value_get_boolean","","",null,null],[5,"g_value_get_boxed","","",null,null],[5,"g_value_get_char","","",null,null],[5,"g_value_get_double","","",null,null],[5,"g_value_get_enum","","",null,null],[5,"g_value_get_flags","","",null,null],[5,"g_value_get_float","","",null,null],[5,"g_value_get_gtype","","",null,null],[5,"g_value_get_int","","",null,null],[5,"g_value_get_int64","","",null,null],[5,"g_value_get_long","","",null,null],[5,"g_value_get_object","","",null,null],[5,"g_value_get_param","","",null,null],[5,"g_value_get_pointer","","",null,null],[5,"g_value_get_schar","","",null,null],[5,"g_value_get_string","","",null,null],[5,"g_value_get_uchar","","",null,null],[5,"g_value_get_uint","","",null,null],[5,"g_value_get_uint64","","",null,null],[5,"g_value_get_ulong","","",null,null],[5,"g_value_get_variant","","",null,null],[5,"g_value_init","","",null,null],[5,"g_value_init_from_instance","","",null,null],[5,"g_value_peek_pointer","","",null,null],[5,"g_value_reset","","",null,null],[5,"g_value_set_boolean","","",null,null],[5,"g_value_set_boxed","","",null,null],[5,"g_value_set_boxed_take_ownership","","",null,null],[5,"g_value_set_char","","",null,null],[5,"g_value_set_double","","",null,null],[5,"g_value_set_enum","","",null,null],[5,"g_value_set_flags","","",null,null],[5,"g_value_set_float","","",null,null],[5,"g_value_set_gtype","","",null,null],[5,"g_value_set_instance","","",null,null],[5,"g_value_set_int","","",null,null],[5,"g_value_set_int64","","",null,null],[5,"g_value_set_long","","",null,null],[5,"g_value_set_object","","",null,null],[5,"g_value_set_object_take_ownership","","",null,null],[5,"g_value_set_param","","",null,null],[5,"g_value_set_param_take_ownership","","",null,null],[5,"g_value_set_pointer","","",null,null],[5,"g_value_set_schar","","",null,null],[5,"g_value_set_static_boxed","","",null,null],[5,"g_value_set_static_string","","",null,null],[5,"g_value_set_string","","",null,null],[5,"g_value_set_string_take_ownership","","",null,null],[5,"g_value_set_uchar","","",null,null],[5,"g_value_set_uint","","",null,null],[5,"g_value_set_uint64","","",null,null],[5,"g_value_set_ulong","","",null,null],[5,"g_value_set_variant","","",null,null],[5,"g_value_take_boxed","","",null,null],[5,"g_value_take_object","","",null,null],[5,"g_value_take_param","","",null,null],[5,"g_value_take_string","","",null,null],[5,"g_value_take_variant","","",null,null],[5,"g_value_transform","","",null,null],[5,"g_value_unset","","",null,null],[5,"g_value_register_transform_func","","",null,null],[5,"g_value_type_compatible","","",null,null],[5,"g_value_type_transformable","","",null,null],[5,"g_value_array_get_type","","",null,null],[5,"g_value_array_new","","",null,null],[5,"g_value_array_append","","",null,null],[5,"g_value_array_copy","","",null,null],[5,"g_value_array_free","","",null,null],[5,"g_value_array_get_nth","","",null,null],[5,"g_value_array_insert","","",null,null],[5,"g_value_array_prepend","","",null,null],[5,"g_value_array_remove","","",null,null],[5,"g_value_array_sort","","",null,null],[5,"g_value_array_sort_with_data","","",null,null],[5,"g_weak_ref_clear","","",null,null],[5,"g_weak_ref_get","","",null,null],[5,"g_weak_ref_init","","",null,null],[5,"g_weak_ref_set","","",null,null],[5,"g_binding_get_type","","",null,null],[5,"g_binding_get_flags","","",null,null],[5,"g_binding_get_source","","",null,null],[5,"g_binding_get_source_property","","",null,null],[5,"g_binding_get_target","","",null,null],[5,"g_binding_get_target_property","","",null,null],[5,"g_binding_unbind","","",null,null],[5,"g_initially_unowned_get_type","","",null,null],[5,"g_object_get_type","","",null,null],[5,"g_object_new","","",null,null],[5,"g_object_new_with_properties","","",null,null],[5,"g_object_newv","","",null,null],[5,"g_object_compat_control","","",null,null],[5,"g_object_interface_find_property","","",null,null],[5,"g_object_interface_install_property","","",null,null],[5,"g_object_interface_list_properties","","",null,null],[5,"g_object_add_toggle_ref","","",null,null],[5,"g_object_add_weak_pointer","","",null,null],[5,"g_object_bind_property","","",null,null],[5,"g_object_bind_property_full","","",null,null],[5,"g_object_bind_property_with_closures","","",null,null],[5,"g_object_connect","","",null,null],[5,"g_object_disconnect","","",null,null],[5,"g_object_dup_data","","",null,null],[5,"g_object_dup_qdata","","",null,null],[5,"g_object_force_floating","","",null,null],[5,"g_object_freeze_notify","","",null,null],[5,"g_object_get","","",null,null],[5,"g_object_get_data","","",null,null],[5,"g_object_get_property","","",null,null],[5,"g_object_get_qdata","","",null,null],[5,"g_object_getv","","",null,null],[5,"g_object_is_floating","","",null,null],[5,"g_object_notify","","",null,null],[5,"g_object_notify_by_pspec","","",null,null],[5,"g_object_ref","","",null,null],[5,"g_object_ref_sink","","",null,null],[5,"g_object_remove_toggle_ref","","",null,null],[5,"g_object_remove_weak_pointer","","",null,null],[5,"g_object_replace_data","","",null,null],[5,"g_object_replace_qdata","","",null,null],[5,"g_object_run_dispose","","",null,null],[5,"g_object_set","","",null,null],[5,"g_object_set_data","","",null,null],[5,"g_object_set_data_full","","",null,null],[5,"g_object_set_property","","",null,null],[5,"g_object_set_qdata","","",null,null],[5,"g_object_set_qdata_full","","",null,null],[5,"g_object_setv","","",null,null],[5,"g_object_steal_data","","",null,null],[5,"g_object_steal_qdata","","",null,null],[5,"g_object_thaw_notify","","",null,null],[5,"g_object_unref","","",null,null],[5,"g_object_watch_closure","","",null,null],[5,"g_object_weak_ref","","",null,null],[5,"g_object_weak_unref","","",null,null],[5,"g_param_spec_internal","","",null,null],[5,"g_param_spec_get_blurb","","",null,null],[5,"g_param_spec_get_default_value","","",null,null],[5,"g_param_spec_get_name","","",null,null],[5,"g_param_spec_get_name_quark","","",null,null],[5,"g_param_spec_get_nick","","",null,null],[5,"g_param_spec_get_qdata","","",null,null],[5,"g_param_spec_get_redirect_target","","",null,null],[5,"g_param_spec_ref","","",null,null],[5,"g_param_spec_ref_sink","","",null,null],[5,"g_param_spec_set_qdata","","",null,null],[5,"g_param_spec_set_qdata_full","","",null,null],[5,"g_param_spec_sink","","",null,null],[5,"g_param_spec_steal_qdata","","",null,null],[5,"g_param_spec_unref","","",null,null],[5,"g_type_module_get_type","","",null,null],[5,"g_type_module_add_interface","","",null,null],[5,"g_type_module_register_enum","","",null,null],[5,"g_type_module_register_flags","","",null,null],[5,"g_type_module_register_type","","",null,null],[5,"g_type_module_set_name","","",null,null],[5,"g_type_module_unuse","","",null,null],[5,"g_type_module_use","","",null,null],[5,"g_type_plugin_get_type","","",null,null],[5,"g_type_plugin_complete_interface_info","","",null,null],[5,"g_type_plugin_complete_type_info","","",null,null],[5,"g_type_plugin_unuse","","",null,null],[5,"g_type_plugin_use","","",null,null],[5,"g_boxed_copy","","",null,null],[5,"g_boxed_free","","",null,null],[5,"g_boxed_type_register_static","","",null,null],[5,"g_clear_object","","",null,null],[5,"g_enum_complete_type_info","","",null,null],[5,"g_enum_get_value","","",null,null],[5,"g_enum_get_value_by_name","","",null,null],[5,"g_enum_get_value_by_nick","","",null,null],[5,"g_enum_register_static","","",null,null],[5,"g_enum_to_string","","",null,null],[5,"g_flags_complete_type_info","","",null,null],[5,"g_flags_get_first_value","","",null,null],[5,"g_flags_get_value_by_name","","",null,null],[5,"g_flags_get_value_by_nick","","",null,null],[5,"g_flags_register_static","","",null,null],[5,"g_flags_to_string","","",null,null],[5,"g_gtype_get_type","","",null,null],[5,"g_param_spec_boolean","","",null,null],[5,"g_param_spec_boxed","","",null,null],[5,"g_param_spec_char","","",null,null],[5,"g_param_spec_double","","",null,null],[5,"g_param_spec_enum","","",null,null],[5,"g_param_spec_flags","","",null,null],[5,"g_param_spec_float","","",null,null],[5,"g_param_spec_gtype","","",null,null],[5,"g_param_spec_int","","",null,null],[5,"g_param_spec_int64","","",null,null],[5,"g_param_spec_long","","",null,null],[5,"g_param_spec_object","","",null,null],[5,"g_param_spec_override","","",null,null],[5,"g_param_spec_param","","",null,null],[5,"g_param_spec_pointer","","",null,null],[5,"g_param_spec_string","","",null,null],[5,"g_param_spec_uchar","","",null,null],[5,"g_param_spec_uint","","",null,null],[5,"g_param_spec_uint64","","",null,null],[5,"g_param_spec_ulong","","",null,null],[5,"g_param_spec_unichar","","",null,null],[5,"g_param_spec_value_array","","",null,null],[5,"g_param_spec_variant","","",null,null],[5,"g_param_type_register_static","","",null,null],[5,"g_param_value_convert","","",null,null],[5,"g_param_value_defaults","","",null,null],[5,"g_param_value_set_default","","",null,null],[5,"g_param_value_validate","","",null,null],[5,"g_param_values_cmp","","",null,null],[5,"g_pointer_type_register_static","","",null,null],[5,"g_signal_accumulator_first_wins","","",null,null],[5,"g_signal_accumulator_true_handled","","",null,null],[5,"g_signal_add_emission_hook","","",null,null],[5,"g_signal_chain_from_overridden","","",null,null],[5,"g_signal_chain_from_overridden_handler","","",null,null],[5,"g_signal_connect_closure","","",null,null],[5,"g_signal_connect_closure_by_id","","",null,null],[5,"g_signal_connect_data","","",null,null],[5,"g_signal_connect_object","","",null,null],[5,"g_signal_emit","","",null,null],[5,"g_signal_emit_by_name","","",null,null],[5,"g_signal_emitv","","",null,null],[5,"g_signal_get_invocation_hint","","",null,null],[5,"g_signal_handler_block","","",null,null],[5,"g_signal_handler_disconnect","","",null,null],[5,"g_signal_handler_find","","",null,null],[5,"g_signal_handler_is_connected","","",null,null],[5,"g_signal_handler_unblock","","",null,null],[5,"g_signal_handlers_block_matched","","",null,null],[5,"g_signal_handlers_destroy","","",null,null],[5,"g_signal_handlers_disconnect_matched","","",null,null],[5,"g_signal_handlers_unblock_matched","","",null,null],[5,"g_signal_has_handler_pending","","",null,null],[5,"g_signal_list_ids","","",null,null],[5,"g_signal_lookup","","",null,null],[5,"g_signal_name","","",null,null],[5,"g_signal_new","","",null,null],[5,"g_signal_new_class_handler","","",null,null],[5,"g_signal_newv","","",null,null],[5,"g_signal_override_class_closure","","",null,null],[5,"g_signal_override_class_handler","","",null,null],[5,"g_signal_parse_name","","",null,null],[5,"g_signal_query","","",null,null],[5,"g_signal_remove_emission_hook","","",null,null],[5,"g_signal_stop_emission","","",null,null],[5,"g_signal_stop_emission_by_name","","",null,null],[5,"g_signal_type_cclosure_new","","",null,null],[5,"g_source_set_closure","","",null,null],[5,"g_source_set_dummy_callback","","",null,null],[5,"g_strdup_value_contents","","",null,null],[5,"g_type_add_class_cache_func","","",null,null],[5,"g_type_add_class_private","","",null,null],[5,"g_type_add_instance_private","","",null,null],[5,"g_type_add_interface_check","","",null,null],[5,"g_type_add_interface_dynamic","","",null,null],[5,"g_type_add_interface_static","","",null,null],[5,"g_type_check_class_cast","","",null,null],[5,"g_type_check_class_is_a","","",null,null],[5,"g_type_check_instance","","",null,null],[5,"g_type_check_instance_cast","","",null,null],[5,"g_type_check_instance_is_a","","",null,null],[5,"g_type_check_instance_is_fundamentally_a","","",null,null],[5,"g_type_check_is_value_type","","",null,null],[5,"g_type_check_value","","",null,null],[5,"g_type_check_value_holds","","",null,null],[5,"g_type_children","","",null,null],[5,"g_type_create_instance","","",null,null],[5,"g_type_default_interface_peek","","",null,null],[5,"g_type_default_interface_ref","","",null,null],[5,"g_type_default_interface_unref","","",null,null],[5,"g_type_depth","","",null,null],[5,"g_type_ensure","","",null,null],[5,"g_type_free_instance","","",null,null],[5,"g_type_from_name","","",null,null],[5,"g_type_fundamental","","",null,null],[5,"g_type_fundamental_next","","",null,null],[5,"g_type_get_instance_count","","",null,null],[5,"g_type_get_plugin","","",null,null],[5,"g_type_get_qdata","","",null,null],[5,"g_type_get_type_registration_serial","","",null,null],[5,"g_type_init","","",null,null],[5,"g_type_init_with_debug_flags","","",null,null],[5,"g_type_interfaces","","",null,null],[5,"g_type_is_a","","",null,null],[5,"g_type_name","","",null,null],[5,"g_type_name_from_class","","",null,null],[5,"g_type_name_from_instance","","",null,null],[5,"g_type_next_base","","",null,null],[5,"g_type_parent","","",null,null],[5,"g_type_qname","","",null,null],[5,"g_type_query","","",null,null],[5,"g_type_register_dynamic","","",null,null],[5,"g_type_register_fundamental","","",null,null],[5,"g_type_register_static","","",null,null],[5,"g_type_register_static_simple","","",null,null],[5,"g_type_remove_class_cache_func","","",null,null],[5,"g_type_remove_interface_check","","",null,null],[5,"g_type_set_qdata","","",null,null],[5,"g_type_test_flags","","",null,null],[6,"GSignalCMarshaller","","",null,null],[6,"GTypeCValue","","",null,null],[6,"GValue_data","","",null,null],[6,"GBaseFinalizeFunc","","",null,null],[6,"GBaseInitFunc","","",null,null],[6,"GBindingTransformFunc","","",null,null],[6,"GBoxedCopyFunc","","",null,null],[6,"GBoxedFreeFunc","","",null,null],[6,"GCallback","","",null,null],[6,"GClassFinalizeFunc","","",null,null],[6,"GClassInitFunc","","",null,null],[6,"GClosureMarshal","","",null,null],[6,"GClosureNotify","","",null,null],[6,"GInstanceInitFunc","","",null,null],[6,"GInterfaceFinalizeFunc","","",null,null],[6,"GInterfaceInitFunc","","",null,null],[6,"GObjectFinalizeFunc","","",null,null],[6,"GObjectGetPropertyFunc","","",null,null],[6,"GObjectSetPropertyFunc","","",null,null],[6,"GSignalAccumulator","","",null,null],[6,"GSignalEmissionHook","","",null,null],[6,"GToggleNotify","","",null,null],[6,"GTypeClassCacheFunc","","",null,null],[6,"GTypeInterfaceCheckFunc","","",null,null],[6,"GTypePluginCompleteInterfaceInfo","","",null,null],[6,"GTypePluginCompleteTypeInfo","","",null,null],[6,"GTypePluginUnuse","","",null,null],[6,"GTypePluginUse","","",null,null],[6,"GValueTransform","","",null,null],[6,"GWeakNotify","","",null,null],[17,"G_TYPE_INVALID","","",null,null],[17,"G_TYPE_NONE","","",null,null],[17,"G_TYPE_INTERFACE","","",null,null],[17,"G_TYPE_CHAR","","",null,null],[17,"G_TYPE_UCHAR","","",null,null],[17,"G_TYPE_BOOLEAN","","",null,null],[17,"G_TYPE_INT","","",null,null],[17,"G_TYPE_UINT","","",null,null],[17,"G_TYPE_LONG","","",null,null],[17,"G_TYPE_ULONG","","",null,null],[17,"G_TYPE_INT64","","",null,null],[17,"G_TYPE_UINT64","","",null,null],[17,"G_TYPE_ENUM","","",null,null],[17,"G_TYPE_FLAGS","","",null,null],[17,"G_TYPE_FLOAT","","",null,null],[17,"G_TYPE_DOUBLE","","",null,null],[17,"G_TYPE_STRING","","",null,null],[17,"G_TYPE_POINTER","","",null,null],[17,"G_TYPE_BOXED","","",null,null],[17,"G_TYPE_PARAM","","",null,null],[17,"G_TYPE_OBJECT","","",null,null],[17,"G_TYPE_VARIANT","","",null,null],[17,"G_PARAM_MASK","","",null,null],[17,"G_PARAM_STATIC_STRINGS","","",null,null],[17,"G_PARAM_USER_SHIFT","","",null,null],[17,"G_SIGNAL_FLAGS_MASK","","",null,null],[17,"G_SIGNAL_MATCH_MASK","","",null,null],[17,"G_TYPE_FLAG_RESERVED_ID_BIT","","",null,null],[17,"G_TYPE_FUNDAMENTAL_MAX","","",null,null],[17,"G_TYPE_FUNDAMENTAL_SHIFT","","",null,null],[17,"G_TYPE_RESERVED_BSE_FIRST","","",null,null],[17,"G_TYPE_RESERVED_BSE_LAST","","",null,null],[17,"G_TYPE_RESERVED_GLIB_FIRST","","",null,null],[17,"G_TYPE_RESERVED_GLIB_LAST","","",null,null],[17,"G_TYPE_RESERVED_USER_FIRST","","",null,null],[17,"G_VALUE_COLLECT_FORMAT_MAX_LENGTH","","",null,null],[17,"G_VALUE_NOCOPY_CONTENTS","","",null,null],[17,"G_BINDING_DEFAULT","","",null,null],[17,"G_BINDING_BIDIRECTIONAL","","",null,null],[17,"G_BINDING_SYNC_CREATE","","",null,null],[17,"G_BINDING_INVERT_BOOLEAN","","",null,null],[17,"G_CONNECT_AFTER","","",null,null],[17,"G_CONNECT_SWAPPED","","",null,null],[17,"G_PARAM_READABLE","","",null,null],[17,"G_PARAM_WRITABLE","","",null,null],[17,"G_PARAM_READWRITE","","",null,null],[17,"G_PARAM_CONSTRUCT","","",null,null],[17,"G_PARAM_CONSTRUCT_ONLY","","",null,null],[17,"G_PARAM_LAX_VALIDATION","","",null,null],[17,"G_PARAM_STATIC_NAME","","",null,null],[17,"G_PARAM_PRIVATE","","",null,null],[17,"G_PARAM_STATIC_NICK","","",null,null],[17,"G_PARAM_STATIC_BLURB","","",null,null],[17,"G_PARAM_EXPLICIT_NOTIFY","","",null,null],[17,"G_PARAM_DEPRECATED","","",null,null],[17,"G_SIGNAL_RUN_FIRST","","",null,null],[17,"G_SIGNAL_RUN_LAST","","",null,null],[17,"G_SIGNAL_RUN_CLEANUP","","",null,null],[17,"G_SIGNAL_NO_RECURSE","","",null,null],[17,"G_SIGNAL_DETAILED","","",null,null],[17,"G_SIGNAL_ACTION","","",null,null],[17,"G_SIGNAL_NO_HOOKS","","",null,null],[17,"G_SIGNAL_MUST_COLLECT","","",null,null],[17,"G_SIGNAL_DEPRECATED","","",null,null],[17,"G_SIGNAL_MATCH_ID","","",null,null],[17,"G_SIGNAL_MATCH_DETAIL","","",null,null],[17,"G_SIGNAL_MATCH_CLOSURE","","",null,null],[17,"G_SIGNAL_MATCH_FUNC","","",null,null],[17,"G_SIGNAL_MATCH_DATA","","",null,null],[17,"G_SIGNAL_MATCH_UNBLOCKED","","",null,null],[17,"G_TYPE_DEBUG_NONE","","",null,null],[17,"G_TYPE_DEBUG_OBJECTS","","",null,null],[17,"G_TYPE_DEBUG_SIGNALS","","",null,null],[17,"G_TYPE_DEBUG_INSTANCE_COUNT","","",null,null],[17,"G_TYPE_DEBUG_MASK","","",null,null],[17,"G_TYPE_FLAG_ABSTRACT","","",null,null],[17,"G_TYPE_FLAG_VALUE_ABSTRACT","","",null,null],[17,"G_TYPE_FLAG_CLASSED","","",null,null],[17,"G_TYPE_FLAG_INSTANTIATABLE","","",null,null],[17,"G_TYPE_FLAG_DERIVABLE","","",null,null],[17,"G_TYPE_FLAG_DEEP_DERIVABLE","","",null,null],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"gbindingflags"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"self"},{"name":"gbindingflags"}],"output":{"name":"bool"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"gbindingflags"}}],[11,"partial_cmp","","",54,{"inputs":[{"name":"self"},{"name":"gbindingflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",54,{"inputs":[{"name":"self"},{"name":"gbindingflags"}],"output":{"name":"bool"}}],[11,"le","","",54,{"inputs":[{"name":"self"},{"name":"gbindingflags"}],"output":{"name":"bool"}}],[11,"gt","","",54,{"inputs":[{"name":"self"},{"name":"gbindingflags"}],"output":{"name":"bool"}}],[11,"ge","","",54,{"inputs":[{"name":"self"},{"name":"gbindingflags"}],"output":{"name":"bool"}}],[11,"cmp","","",54,{"inputs":[{"name":"self"},{"name":"gbindingflags"}],"output":{"name":"ordering"}}],[11,"hash","","",54,null],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"DEFAULT","","",54,null],[18,"BIDIRECTIONAL","","",54,null],[18,"SYNC_CREATE","","",54,null],[18,"INVERT_BOOLEAN","","",54,null],[11,"empty","","Returns an empty set of flags.",54,{"inputs":[],"output":{"name":"gbindingflags"}}],[11,"all","","Returns the set containing all flags.",54,{"inputs":[],"output":{"name":"gbindingflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",54,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",54,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gbindingflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",54,{"inputs":[{"name":"c_uint"}],"output":{"name":"gbindingflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",54,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",54,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",54,{"inputs":[{"name":"self"},{"name":"gbindingflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",54,{"inputs":[{"name":"self"},{"name":"gbindingflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",54,{"inputs":[{"name":"self"},{"name":"gbindingflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",54,{"inputs":[{"name":"self"},{"name":"gbindingflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",54,{"inputs":[{"name":"self"},{"name":"gbindingflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",54,{"inputs":[{"name":"self"},{"name":"gbindingflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",54,{"inputs":[{"name":"self"},{"name":"gbindingflags"}],"output":{"name":"gbindingflags"}}],[11,"bitor_assign","","Adds the set of flags.",54,{"inputs":[{"name":"self"},{"name":"gbindingflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",54,{"inputs":[{"name":"self"},{"name":"gbindingflags"}],"output":{"name":"gbindingflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",54,{"inputs":[{"name":"self"},{"name":"gbindingflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",54,{"inputs":[{"name":"self"},{"name":"gbindingflags"}],"output":{"name":"gbindingflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",54,{"inputs":[{"name":"self"},{"name":"gbindingflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",54,{"inputs":[{"name":"self"},{"name":"gbindingflags"}],"output":{"name":"gbindingflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",54,{"inputs":[{"name":"self"},{"name":"gbindingflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",54,{"inputs":[{"name":"self"}],"output":{"name":"gbindingflags"}}],[11,"extend","","",54,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",54,{"inputs":[{"name":"t"}],"output":{"name":"gbindingflags"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"gconnectflags"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"gconnectflags"}],"output":{"name":"bool"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"gconnectflags"}}],[11,"partial_cmp","","",55,{"inputs":[{"name":"self"},{"name":"gconnectflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",55,{"inputs":[{"name":"self"},{"name":"gconnectflags"}],"output":{"name":"bool"}}],[11,"le","","",55,{"inputs":[{"name":"self"},{"name":"gconnectflags"}],"output":{"name":"bool"}}],[11,"gt","","",55,{"inputs":[{"name":"self"},{"name":"gconnectflags"}],"output":{"name":"bool"}}],[11,"ge","","",55,{"inputs":[{"name":"self"},{"name":"gconnectflags"}],"output":{"name":"bool"}}],[11,"cmp","","",55,{"inputs":[{"name":"self"},{"name":"gconnectflags"}],"output":{"name":"ordering"}}],[11,"hash","","",55,null],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"AFTER","","",55,null],[18,"SWAPPED","","",55,null],[11,"empty","","Returns an empty set of flags.",55,{"inputs":[],"output":{"name":"gconnectflags"}}],[11,"all","","Returns the set containing all flags.",55,{"inputs":[],"output":{"name":"gconnectflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",55,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",55,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gconnectflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",55,{"inputs":[{"name":"c_uint"}],"output":{"name":"gconnectflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",55,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",55,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",55,{"inputs":[{"name":"self"},{"name":"gconnectflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",55,{"inputs":[{"name":"self"},{"name":"gconnectflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",55,{"inputs":[{"name":"self"},{"name":"gconnectflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",55,{"inputs":[{"name":"self"},{"name":"gconnectflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",55,{"inputs":[{"name":"self"},{"name":"gconnectflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",55,{"inputs":[{"name":"self"},{"name":"gconnectflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",55,{"inputs":[{"name":"self"},{"name":"gconnectflags"}],"output":{"name":"gconnectflags"}}],[11,"bitor_assign","","Adds the set of flags.",55,{"inputs":[{"name":"self"},{"name":"gconnectflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",55,{"inputs":[{"name":"self"},{"name":"gconnectflags"}],"output":{"name":"gconnectflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",55,{"inputs":[{"name":"self"},{"name":"gconnectflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",55,{"inputs":[{"name":"self"},{"name":"gconnectflags"}],"output":{"name":"gconnectflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",55,{"inputs":[{"name":"self"},{"name":"gconnectflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",55,{"inputs":[{"name":"self"},{"name":"gconnectflags"}],"output":{"name":"gconnectflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",55,{"inputs":[{"name":"self"},{"name":"gconnectflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",55,{"inputs":[{"name":"self"}],"output":{"name":"gconnectflags"}}],[11,"extend","","",55,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",55,{"inputs":[{"name":"t"}],"output":{"name":"gconnectflags"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"gparamflags"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"self"},{"name":"gparamflags"}],"output":{"name":"bool"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"gparamflags"}}],[11,"partial_cmp","","",56,{"inputs":[{"name":"self"},{"name":"gparamflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",56,{"inputs":[{"name":"self"},{"name":"gparamflags"}],"output":{"name":"bool"}}],[11,"le","","",56,{"inputs":[{"name":"self"},{"name":"gparamflags"}],"output":{"name":"bool"}}],[11,"gt","","",56,{"inputs":[{"name":"self"},{"name":"gparamflags"}],"output":{"name":"bool"}}],[11,"ge","","",56,{"inputs":[{"name":"self"},{"name":"gparamflags"}],"output":{"name":"bool"}}],[11,"cmp","","",56,{"inputs":[{"name":"self"},{"name":"gparamflags"}],"output":{"name":"ordering"}}],[11,"hash","","",56,null],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"READABLE","","",56,null],[18,"WRITABLE","","",56,null],[18,"READWRITE","","",56,null],[18,"CONSTRUCT","","",56,null],[18,"CONSTRUCT_ONLY","","",56,null],[18,"LAX_VALIDATION","","",56,null],[18,"STATIC_NAME","","",56,null],[18,"PRIVATE","","",56,null],[18,"STATIC_NICK","","",56,null],[18,"STATIC_BLURB","","",56,null],[18,"EXPLICIT_NOTIFY","","",56,null],[18,"DEPRECATED","","",56,null],[11,"empty","","Returns an empty set of flags.",56,{"inputs":[],"output":{"name":"gparamflags"}}],[11,"all","","Returns the set containing all flags.",56,{"inputs":[],"output":{"name":"gparamflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",56,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",56,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gparamflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",56,{"inputs":[{"name":"c_uint"}],"output":{"name":"gparamflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",56,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",56,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",56,{"inputs":[{"name":"self"},{"name":"gparamflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",56,{"inputs":[{"name":"self"},{"name":"gparamflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",56,{"inputs":[{"name":"self"},{"name":"gparamflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",56,{"inputs":[{"name":"self"},{"name":"gparamflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",56,{"inputs":[{"name":"self"},{"name":"gparamflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",56,{"inputs":[{"name":"self"},{"name":"gparamflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",56,{"inputs":[{"name":"self"},{"name":"gparamflags"}],"output":{"name":"gparamflags"}}],[11,"bitor_assign","","Adds the set of flags.",56,{"inputs":[{"name":"self"},{"name":"gparamflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",56,{"inputs":[{"name":"self"},{"name":"gparamflags"}],"output":{"name":"gparamflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",56,{"inputs":[{"name":"self"},{"name":"gparamflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",56,{"inputs":[{"name":"self"},{"name":"gparamflags"}],"output":{"name":"gparamflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",56,{"inputs":[{"name":"self"},{"name":"gparamflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",56,{"inputs":[{"name":"self"},{"name":"gparamflags"}],"output":{"name":"gparamflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",56,{"inputs":[{"name":"self"},{"name":"gparamflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",56,{"inputs":[{"name":"self"}],"output":{"name":"gparamflags"}}],[11,"extend","","",56,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",56,{"inputs":[{"name":"t"}],"output":{"name":"gparamflags"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"gsignalflags"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"self"},{"name":"gsignalflags"}],"output":{"name":"bool"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"gsignalflags"}}],[11,"partial_cmp","","",57,{"inputs":[{"name":"self"},{"name":"gsignalflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",57,{"inputs":[{"name":"self"},{"name":"gsignalflags"}],"output":{"name":"bool"}}],[11,"le","","",57,{"inputs":[{"name":"self"},{"name":"gsignalflags"}],"output":{"name":"bool"}}],[11,"gt","","",57,{"inputs":[{"name":"self"},{"name":"gsignalflags"}],"output":{"name":"bool"}}],[11,"ge","","",57,{"inputs":[{"name":"self"},{"name":"gsignalflags"}],"output":{"name":"bool"}}],[11,"cmp","","",57,{"inputs":[{"name":"self"},{"name":"gsignalflags"}],"output":{"name":"ordering"}}],[11,"hash","","",57,null],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"RUN_FIRST","","",57,null],[18,"RUN_LAST","","",57,null],[18,"RUN_CLEANUP","","",57,null],[18,"NO_RECURSE","","",57,null],[18,"DETAILED","","",57,null],[18,"ACTION","","",57,null],[18,"NO_HOOKS","","",57,null],[18,"MUST_COLLECT","","",57,null],[18,"DEPRECATED","","",57,null],[11,"empty","","Returns an empty set of flags.",57,{"inputs":[],"output":{"name":"gsignalflags"}}],[11,"all","","Returns the set containing all flags.",57,{"inputs":[],"output":{"name":"gsignalflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",57,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",57,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gsignalflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",57,{"inputs":[{"name":"c_uint"}],"output":{"name":"gsignalflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",57,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",57,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",57,{"inputs":[{"name":"self"},{"name":"gsignalflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",57,{"inputs":[{"name":"self"},{"name":"gsignalflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",57,{"inputs":[{"name":"self"},{"name":"gsignalflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",57,{"inputs":[{"name":"self"},{"name":"gsignalflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",57,{"inputs":[{"name":"self"},{"name":"gsignalflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",57,{"inputs":[{"name":"self"},{"name":"gsignalflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",57,{"inputs":[{"name":"self"},{"name":"gsignalflags"}],"output":{"name":"gsignalflags"}}],[11,"bitor_assign","","Adds the set of flags.",57,{"inputs":[{"name":"self"},{"name":"gsignalflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",57,{"inputs":[{"name":"self"},{"name":"gsignalflags"}],"output":{"name":"gsignalflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",57,{"inputs":[{"name":"self"},{"name":"gsignalflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",57,{"inputs":[{"name":"self"},{"name":"gsignalflags"}],"output":{"name":"gsignalflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",57,{"inputs":[{"name":"self"},{"name":"gsignalflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",57,{"inputs":[{"name":"self"},{"name":"gsignalflags"}],"output":{"name":"gsignalflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",57,{"inputs":[{"name":"self"},{"name":"gsignalflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",57,{"inputs":[{"name":"self"}],"output":{"name":"gsignalflags"}}],[11,"extend","","",57,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",57,{"inputs":[{"name":"t"}],"output":{"name":"gsignalflags"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"gsignalmatchtype"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"self"},{"name":"gsignalmatchtype"}],"output":{"name":"bool"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"gsignalmatchtype"}}],[11,"partial_cmp","","",58,{"inputs":[{"name":"self"},{"name":"gsignalmatchtype"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",58,{"inputs":[{"name":"self"},{"name":"gsignalmatchtype"}],"output":{"name":"bool"}}],[11,"le","","",58,{"inputs":[{"name":"self"},{"name":"gsignalmatchtype"}],"output":{"name":"bool"}}],[11,"gt","","",58,{"inputs":[{"name":"self"},{"name":"gsignalmatchtype"}],"output":{"name":"bool"}}],[11,"ge","","",58,{"inputs":[{"name":"self"},{"name":"gsignalmatchtype"}],"output":{"name":"bool"}}],[11,"cmp","","",58,{"inputs":[{"name":"self"},{"name":"gsignalmatchtype"}],"output":{"name":"ordering"}}],[11,"hash","","",58,null],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"ID","","",58,null],[18,"DETAIL","","",58,null],[18,"CLOSURE","","",58,null],[18,"FUNC","","",58,null],[18,"DATA","","",58,null],[18,"UNBLOCKED","","",58,null],[11,"empty","","Returns an empty set of flags.",58,{"inputs":[],"output":{"name":"gsignalmatchtype"}}],[11,"all","","Returns the set containing all flags.",58,{"inputs":[],"output":{"name":"gsignalmatchtype"}}],[11,"bits","","Returns the raw value of the flags currently stored.",58,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",58,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gsignalmatchtype"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",58,{"inputs":[{"name":"c_uint"}],"output":{"name":"gsignalmatchtype"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",58,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",58,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",58,{"inputs":[{"name":"self"},{"name":"gsignalmatchtype"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",58,{"inputs":[{"name":"self"},{"name":"gsignalmatchtype"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",58,{"inputs":[{"name":"self"},{"name":"gsignalmatchtype"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",58,{"inputs":[{"name":"self"},{"name":"gsignalmatchtype"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",58,{"inputs":[{"name":"self"},{"name":"gsignalmatchtype"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",58,{"inputs":[{"name":"self"},{"name":"gsignalmatchtype"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",58,{"inputs":[{"name":"self"},{"name":"gsignalmatchtype"}],"output":{"name":"gsignalmatchtype"}}],[11,"bitor_assign","","Adds the set of flags.",58,{"inputs":[{"name":"self"},{"name":"gsignalmatchtype"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",58,{"inputs":[{"name":"self"},{"name":"gsignalmatchtype"}],"output":{"name":"gsignalmatchtype"}}],[11,"bitxor_assign","","Toggles the set of flags.",58,{"inputs":[{"name":"self"},{"name":"gsignalmatchtype"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",58,{"inputs":[{"name":"self"},{"name":"gsignalmatchtype"}],"output":{"name":"gsignalmatchtype"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",58,{"inputs":[{"name":"self"},{"name":"gsignalmatchtype"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",58,{"inputs":[{"name":"self"},{"name":"gsignalmatchtype"}],"output":{"name":"gsignalmatchtype"}}],[11,"sub_assign","","Disables all flags enabled in the set.",58,{"inputs":[{"name":"self"},{"name":"gsignalmatchtype"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",58,{"inputs":[{"name":"self"}],"output":{"name":"gsignalmatchtype"}}],[11,"extend","","",58,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",58,{"inputs":[{"name":"t"}],"output":{"name":"gsignalmatchtype"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"gtypedebugflags"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"self"},{"name":"gtypedebugflags"}],"output":{"name":"bool"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"gtypedebugflags"}}],[11,"partial_cmp","","",59,{"inputs":[{"name":"self"},{"name":"gtypedebugflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",59,{"inputs":[{"name":"self"},{"name":"gtypedebugflags"}],"output":{"name":"bool"}}],[11,"le","","",59,{"inputs":[{"name":"self"},{"name":"gtypedebugflags"}],"output":{"name":"bool"}}],[11,"gt","","",59,{"inputs":[{"name":"self"},{"name":"gtypedebugflags"}],"output":{"name":"bool"}}],[11,"ge","","",59,{"inputs":[{"name":"self"},{"name":"gtypedebugflags"}],"output":{"name":"bool"}}],[11,"cmp","","",59,{"inputs":[{"name":"self"},{"name":"gtypedebugflags"}],"output":{"name":"ordering"}}],[11,"hash","","",59,null],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",59,null],[18,"OBJECTS","","",59,null],[18,"SIGNALS","","",59,null],[18,"INSTANCE_COUNT","","",59,null],[18,"MASK","","",59,null],[11,"empty","","Returns an empty set of flags.",59,{"inputs":[],"output":{"name":"gtypedebugflags"}}],[11,"all","","Returns the set containing all flags.",59,{"inputs":[],"output":{"name":"gtypedebugflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",59,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",59,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gtypedebugflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",59,{"inputs":[{"name":"c_uint"}],"output":{"name":"gtypedebugflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",59,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",59,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",59,{"inputs":[{"name":"self"},{"name":"gtypedebugflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",59,{"inputs":[{"name":"self"},{"name":"gtypedebugflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",59,{"inputs":[{"name":"self"},{"name":"gtypedebugflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",59,{"inputs":[{"name":"self"},{"name":"gtypedebugflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",59,{"inputs":[{"name":"self"},{"name":"gtypedebugflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",59,{"inputs":[{"name":"self"},{"name":"gtypedebugflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",59,{"inputs":[{"name":"self"},{"name":"gtypedebugflags"}],"output":{"name":"gtypedebugflags"}}],[11,"bitor_assign","","Adds the set of flags.",59,{"inputs":[{"name":"self"},{"name":"gtypedebugflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",59,{"inputs":[{"name":"self"},{"name":"gtypedebugflags"}],"output":{"name":"gtypedebugflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",59,{"inputs":[{"name":"self"},{"name":"gtypedebugflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",59,{"inputs":[{"name":"self"},{"name":"gtypedebugflags"}],"output":{"name":"gtypedebugflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",59,{"inputs":[{"name":"self"},{"name":"gtypedebugflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",59,{"inputs":[{"name":"self"},{"name":"gtypedebugflags"}],"output":{"name":"gtypedebugflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",59,{"inputs":[{"name":"self"},{"name":"gtypedebugflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",59,{"inputs":[{"name":"self"}],"output":{"name":"gtypedebugflags"}}],[11,"extend","","",59,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",59,{"inputs":[{"name":"t"}],"output":{"name":"gtypedebugflags"}}],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"gtypeflags"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"self"},{"name":"gtypeflags"}],"output":{"name":"bool"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"gtypeflags"}}],[11,"partial_cmp","","",60,{"inputs":[{"name":"self"},{"name":"gtypeflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",60,{"inputs":[{"name":"self"},{"name":"gtypeflags"}],"output":{"name":"bool"}}],[11,"le","","",60,{"inputs":[{"name":"self"},{"name":"gtypeflags"}],"output":{"name":"bool"}}],[11,"gt","","",60,{"inputs":[{"name":"self"},{"name":"gtypeflags"}],"output":{"name":"bool"}}],[11,"ge","","",60,{"inputs":[{"name":"self"},{"name":"gtypeflags"}],"output":{"name":"bool"}}],[11,"cmp","","",60,{"inputs":[{"name":"self"},{"name":"gtypeflags"}],"output":{"name":"ordering"}}],[11,"hash","","",60,null],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"ABSTRACT","","",60,null],[18,"VALUE_ABSTRACT","","",60,null],[11,"empty","","Returns an empty set of flags.",60,{"inputs":[],"output":{"name":"gtypeflags"}}],[11,"all","","Returns the set containing all flags.",60,{"inputs":[],"output":{"name":"gtypeflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",60,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",60,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gtypeflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",60,{"inputs":[{"name":"c_uint"}],"output":{"name":"gtypeflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",60,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",60,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",60,{"inputs":[{"name":"self"},{"name":"gtypeflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",60,{"inputs":[{"name":"self"},{"name":"gtypeflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",60,{"inputs":[{"name":"self"},{"name":"gtypeflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",60,{"inputs":[{"name":"self"},{"name":"gtypeflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",60,{"inputs":[{"name":"self"},{"name":"gtypeflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",60,{"inputs":[{"name":"self"},{"name":"gtypeflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",60,{"inputs":[{"name":"self"},{"name":"gtypeflags"}],"output":{"name":"gtypeflags"}}],[11,"bitor_assign","","Adds the set of flags.",60,{"inputs":[{"name":"self"},{"name":"gtypeflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",60,{"inputs":[{"name":"self"},{"name":"gtypeflags"}],"output":{"name":"gtypeflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",60,{"inputs":[{"name":"self"},{"name":"gtypeflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",60,{"inputs":[{"name":"self"},{"name":"gtypeflags"}],"output":{"name":"gtypeflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",60,{"inputs":[{"name":"self"},{"name":"gtypeflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",60,{"inputs":[{"name":"self"},{"name":"gtypeflags"}],"output":{"name":"gtypeflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",60,{"inputs":[{"name":"self"},{"name":"gtypeflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",60,{"inputs":[{"name":"self"}],"output":{"name":"gtypeflags"}}],[11,"extend","","",60,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",60,{"inputs":[{"name":"t"}],"output":{"name":"gtypeflags"}}],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"gtypefundamentalflags"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"self"},{"name":"gtypefundamentalflags"}],"output":{"name":"bool"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"gtypefundamentalflags"}}],[11,"partial_cmp","","",61,{"inputs":[{"name":"self"},{"name":"gtypefundamentalflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",61,{"inputs":[{"name":"self"},{"name":"gtypefundamentalflags"}],"output":{"name":"bool"}}],[11,"le","","",61,{"inputs":[{"name":"self"},{"name":"gtypefundamentalflags"}],"output":{"name":"bool"}}],[11,"gt","","",61,{"inputs":[{"name":"self"},{"name":"gtypefundamentalflags"}],"output":{"name":"bool"}}],[11,"ge","","",61,{"inputs":[{"name":"self"},{"name":"gtypefundamentalflags"}],"output":{"name":"bool"}}],[11,"cmp","","",61,{"inputs":[{"name":"self"},{"name":"gtypefundamentalflags"}],"output":{"name":"ordering"}}],[11,"hash","","",61,null],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"CLASSED","","",61,null],[18,"INSTANTIATABLE","","",61,null],[18,"DERIVABLE","","",61,null],[18,"DEEP_DERIVABLE","","",61,null],[11,"empty","","Returns an empty set of flags.",61,{"inputs":[],"output":{"name":"gtypefundamentalflags"}}],[11,"all","","Returns the set containing all flags.",61,{"inputs":[],"output":{"name":"gtypefundamentalflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",61,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",61,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gtypefundamentalflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",61,{"inputs":[{"name":"c_uint"}],"output":{"name":"gtypefundamentalflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",61,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",61,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",61,{"inputs":[{"name":"self"},{"name":"gtypefundamentalflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",61,{"inputs":[{"name":"self"},{"name":"gtypefundamentalflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",61,{"inputs":[{"name":"self"},{"name":"gtypefundamentalflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",61,{"inputs":[{"name":"self"},{"name":"gtypefundamentalflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",61,{"inputs":[{"name":"self"},{"name":"gtypefundamentalflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",61,{"inputs":[{"name":"self"},{"name":"gtypefundamentalflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",61,{"inputs":[{"name":"self"},{"name":"gtypefundamentalflags"}],"output":{"name":"gtypefundamentalflags"}}],[11,"bitor_assign","","Adds the set of flags.",61,{"inputs":[{"name":"self"},{"name":"gtypefundamentalflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",61,{"inputs":[{"name":"self"},{"name":"gtypefundamentalflags"}],"output":{"name":"gtypefundamentalflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",61,{"inputs":[{"name":"self"},{"name":"gtypefundamentalflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",61,{"inputs":[{"name":"self"},{"name":"gtypefundamentalflags"}],"output":{"name":"gtypefundamentalflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",61,{"inputs":[{"name":"self"},{"name":"gtypefundamentalflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",61,{"inputs":[{"name":"self"},{"name":"gtypefundamentalflags"}],"output":{"name":"gtypefundamentalflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",61,{"inputs":[{"name":"self"},{"name":"gtypefundamentalflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",61,{"inputs":[{"name":"self"}],"output":{"name":"gtypefundamentalflags"}}],[11,"extend","","",61,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",61,{"inputs":[{"name":"t"}],"output":{"name":"gtypefundamentalflags"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"GCClosure"],[3,"GClosureNotifyData"],[3,"GEnumClass"],[3,"GEnumValue"],[3,"GFlagsClass"],[3,"GFlagsValue"],[3,"GInitiallyUnownedClass"],[3,"GInterfaceInfo"],[3,"GObjectClass"],[3,"GObjectConstructParam"],[3,"GParamSpecClass"],[3,"GParamSpecTypeInfo"],[3,"GParameter"],[3,"GSignalInvocationHint"],[3,"GSignalQuery"],[3,"GTypeClass"],[3,"GTypeFundamentalInfo"],[3,"GTypeInfo"],[3,"GTypeInstance"],[3,"GTypeInterface"],[3,"GTypeModuleClass"],[3,"GTypePluginClass"],[3,"GTypeQuery"],[3,"GTypeValueTable"],[3,"GValue"],[3,"GValueArray"],[3,"GWeakRef"],[3,"GInitiallyUnowned"],[3,"GObject"],[3,"GParamSpec"],[3,"GParamSpecBoolean"],[3,"GParamSpecBoxed"],[3,"GParamSpecChar"],[3,"GParamSpecDouble"],[3,"GParamSpecEnum"],[3,"GParamSpecFlags"],[3,"GParamSpecFloat"],[3,"GParamSpecGType"],[3,"GParamSpecInt"],[3,"GParamSpecInt64"],[3,"GParamSpecLong"],[3,"GParamSpecObject"],[3,"GParamSpecOverride"],[3,"GParamSpecParam"],[3,"GParamSpecPointer"],[3,"GParamSpecString"],[3,"GParamSpecUChar"],[3,"GParamSpecUInt"],[3,"GParamSpecUInt64"],[3,"GParamSpecULong"],[3,"GParamSpecUnichar"],[3,"GParamSpecValueArray"],[3,"GParamSpecVariant"],[3,"GTypeModule"],[3,"GBindingFlags"],[3,"GConnectFlags"],[3,"GParamFlags"],[3,"GSignalFlags"],[3,"GSignalMatchType"],[3,"GTypeDebugFlags"],[3,"GTypeFlags"],[3,"GTypeFundamentalFlags"],[3,"GClosure"],[3,"GParamSpecPool"],[3,"GBinding"],[3,"GTypePlugin"]]};
searchIndex["gstreamer"] = {"doc":"","items":[[8,"Cast","gstreamer","Upcasting and downcasting support.",null,null],[11,"upcast","","Upcasts an object to a superclass or interface `T`.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"downcast","","Tries to downcast to a subclass or interface implementor `T`.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"is","","Returns `true` if the object is an instance of (can be cast to) `T`.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"dynamic_cast","","Tries to cast to an object of type `T`. This handles upcasting, downcasting and casting between interface and interface implementors. All checks are performed at runtime, while `downcast` and `upcast` will do many checks at compile-time already.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[3,"Continue","","Continue calling the closure in the future iterations or drop it.",null,null],[12,"0","","",1,null],[3,"Error","","A generic error capable of representing various error domains (types).",null,null],[8,"IsA","","Declares the \"is a\" relationship.",null,null],[8,"StaticType","","Types that are supported by GLib dynamic typing.",null,null],[10,"static_type","","Returns the type identifier of `Self`.",2,{"inputs":[],"output":{"name":"type"}}],[8,"ToValue","","Converts to `Value`.",null,null],[10,"to_value","","Returns a `Value` clone of `self`.",3,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[10,"to_value_type","","Returns the type identifer of `self`.",3,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[4,"Type","","A GLib or GLib-based library type",null,null],[13,"Invalid","","An invalid `Type` used as error return value in some functions",4,null],[13,"Unit","","The fundamental type corresponding to the unit type `()`",4,null],[13,"I8","","The fundamental type corresponding to `i8`",4,null],[13,"U8","","The fundamental type corresponding to `u8`",4,null],[13,"Bool","","The fundamental type corresponding to `bool`",4,null],[13,"I32","","The fundamental type corresponding to `i32`",4,null],[13,"U32","","The fundamental type corresponding to `u32`",4,null],[13,"ILong","","The fundamental type corresponding to C `long`",4,null],[13,"ULong","","The fundamental type corresponding to C `unsigned long`",4,null],[13,"I64","","The fundamental type corresponding to `i64`",4,null],[13,"U64","","The fundamental type corresponding to `u64`",4,null],[13,"F32","","The fundamental type corresponding to `f32`",4,null],[13,"F64","","The fundamental type corresponding to `f64`",4,null],[13,"String","","The fundamental type corresponding to `String`",4,null],[13,"Pointer","","The fundamental type corresponding to a pointer",4,null],[13,"Variant","","The fundamental type of GVariant",4,null],[13,"BaseInterface","","The fundamental type from which all interfaces are derived",4,null],[13,"BaseEnum","","The fundamental type from which all enumeration types are derived",4,null],[13,"BaseFlags","","The fundamental type from which all flags types are derived",4,null],[13,"BaseBoxed","","The fundamental type from which all boxed types are derived",4,null],[13,"BaseParamSpec","","The fundamental type from which all `GParamSpec` types are derived",4,null],[13,"BaseObject","","The fundamental type from which all objects are derived",4,null],[13,"Other","","A non-fundamental type identified by value of type `usize`",4,null],[3,"TypedValue","","A statically typed `Value`.",null,null],[3,"Value","","A generic value capable of carrying various types.",null,null],[3,"Bin","","`Bin` is an element that can contain other `Element`, allowing them to be managed as a group. Pads from the child elements can be ghosted to the bin, see `GhostPad`. This makes the bin look like any other elements and enables creation of higher-level abstraction elements.",null,null],[3,"Bus","","The `Bus` is an object responsible for delivering `Message` packets in a first-in first-out way from the streaming threads (see `Task`) to the application.",null,null],[3,"ChildProxy","","This interface abstracts handling of property sets for elements with children. Imagine elements such as mixers or polyphonic generators. They all have multiple `Pad` or some kind of voice objects. Another use case are container elements like `Bin`. The element implementing the interface acts as a parent for those child objects.",null,null],[3,"Clock","","GStreamer uses a global clock to synchronize the plugins in a pipeline. Different clock implementations are possible by implementing this abstract base class or, more conveniently, by subclassing `SystemClock`.",null,null],[3,"Device","","`Device` are objects representing a device, they contain relevant metadata about the device, such as its class and the `Caps` representing the media types it can produce or handle.",null,null],[3,"DeviceMonitor","","Applications should create a `DeviceMonitor` when they want to probe, list and monitor devices of a specific type. The `DeviceMonitor` will create the appropriate `DeviceProvider` objects and manage them. It will then post messages on its `Bus` for devices that have been added and removed.",null,null],[3,"DeviceProvider","","A `DeviceProvider` subclass is provided by a plugin that handles devices if there is a way to programatically list connected devices. It can also optionally provide updates to the list of connected devices.",null,null],[3,"DeviceProviderFactory","","`DeviceProviderFactory` is used to create instances of device providers. A GstDeviceProviderfactory can be added to a `Plugin` as it is also a `PluginFeature`.",null,null],[3,"Element","","GstElement is the abstract base class needed to construct an element that can be used in a GStreamer pipeline. Please refer to the plugin writers guide for more information on creating `Element` subclasses.",null,null],[3,"ElementFactory","","`ElementFactory` is used to create instances of elements. A GstElementFactory can be added to a `Plugin` as it is also a `PluginFeature`.",null,null],[3,"GhostPad","","GhostPads are useful when organizing pipelines with `Bin` like elements. The idea here is to create hierarchical element graphs. The bin element contains a sub-graph. Now one would like to treat the bin-element like any other `Element`. This is where GhostPads come into play. A GhostPad acts as a proxy for another pad. Thus the bin can have sink and source ghost-pads that are associated with sink and source pads of the child elements.",null,null],[3,"Object","","`Object` provides a root for the object hierarchy tree filed in by the GStreamer library. It is currently a thin wrapper on top of `gobject::InitiallyUnowned`. It is an abstract class that is not very usable on its own.",null,null],[3,"Pad","","A `Element` is linked to other elements via \"pads\", which are extremely light-weight generic link points.",null,null],[3,"PadTemplate","","Padtemplates describe the possible media types a pad or an elementfactory can handle. This allows for both inspection of handled types before loading the element plugin as well as identifying pads on elements that are not yet created (request or sometimes pads).",null,null],[3,"Pipeline","","A `Pipeline` is a special `Bin` used as the toplevel container for the filter graph. The `Pipeline` will manage the selection and distribution of a global `Clock` as well as provide a `Bus` to the application.",null,null],[3,"Plugin","","GStreamer is extensible, so `Element` instances can be loaded at runtime. A plugin system can provide one or more of the basic `<application>`GStreamer`</application>` `PluginFeature` subclasses.",null,null],[3,"PluginFeature","","This is a base class for anything that can be added to a `Plugin`.",null,null],[3,"Preset","","This interface offers methods to query and manipulate parameter preset sets. A preset is a bunch of property settings, together with meta data and a name. The name of a preset serves as key for subsequent method calls to manipulate single presets. All instances of one type will share the list of presets. The list is created on demand, if presets are not used, the list is not created.",null,null],[3,"ProxyPad","","Implements",null,null],[3,"Registry","","One registry holds the metadata of a set of plugins.",null,null],[3,"Stream","","A high-level object representing a single stream. It might be backed, or not, by an actual flow of data in a pipeline (`Pad`).",null,null],[3,"StreamCollection","","A collection of `Stream` that are available.",null,null],[3,"SystemClock","","The GStreamer core provides a GstSystemClock based on the system time. Asynchronous callbacks are scheduled from an internal thread.",null,null],[3,"TagSetter","","Element interface that allows setting of media metadata.",null,null],[3,"TocSetter","","Element interface that allows setting of the TOC.",null,null],[3,"TypeFindFactory","","These functions allow querying informations about registered typefind functions. How to create and register these functions is described in the section  \"Writing typefind functions\"`</link>`.",null,null],[3,"URIHandler","","The `URIHandler` is an interface that is implemented by Source and Sink `Element` to unify handling of URI.",null,null],[3,"DateTime","","Struct to store date, time and timezone information altogether. `DateTime` is refcounted and immutable.",null,null],[3,"BufferCopyFlags","","",null,null],[3,"BufferFlags","","",null,null],[3,"DebugColorFlags","","",null,null],[3,"DebugGraphDetails","","",null,null],[3,"ElementFlags","","",null,null],[3,"PadLinkCheck","","",null,null],[3,"PadProbeType","","",null,null],[3,"ParseFlags","","",null,null],[3,"PluginDependencyFlags","","",null,null],[3,"SchedulingFlags","","",null,null],[3,"SeekFlags","","",null,null],[3,"SegmentFlags","","",null,null],[3,"StackTraceFlags","","",null,null],[3,"StreamFlags","","",null,null],[3,"StreamType","","",null,null],[3,"DebugCategory","","",null,null],[3,"ErrorMessage","","",null,null],[3,"StaticCaps","","Datastructure to initialize `Caps` from a string description usually used in conjunction with GST_STATIC_CAPS() and `StaticCaps::get` to instantiate a `Caps`.",null,null],[3,"StaticPadTemplate","","Structure describing the `StaticPadTemplate`.",null,null],[3,"NotifyWatchId","","",null,null],[3,"ELEMENT_METADATA_AUTHOR","","",null,null],[3,"ELEMENT_METADATA_DESCRIPTION","","",null,null],[3,"ELEMENT_METADATA_DOC_URI","","",null,null],[3,"ELEMENT_METADATA_ICON_NAME","","",null,null],[3,"ELEMENT_METADATA_KLASS","","",null,null],[3,"ELEMENT_METADATA_LONGNAME","","",null,null],[3,"PadProbeId","","",null,null],[3,"PadProbeInfo","","",null,null],[12,"mask","","",5,null],[12,"id","","",5,null],[12,"offset","","",5,null],[12,"size","","",5,null],[12,"data","","",5,null],[3,"Iterator","","",null,null],[3,"ParseContext","","Opaque structure.",null,null],[3,"BusStream","","",null,null],[3,"PadLinkSuccess","","",null,null],[3,"StateChangeError","","",null,null],[3,"ClockTime","","",null,null],[12,"0","","",6,null],[3,"TypeFind","","",null,null],[3,"SliceTypeFind","","",null,null],[12,"probability","","",7,null],[12,"caps","","",7,null],[3,"Fraction","","",null,null],[12,"0","","",8,null],[3,"IntRange","","",null,null],[3,"FractionRange","","",null,null],[3,"Bitmask","","",null,null],[12,"0","","",9,null],[3,"Array","","",null,null],[3,"List","","",null,null],[3,"FormattedSegment","","",null,null],[3,"ClockId","","",null,null],[4,"BufferingMode","","The different types of buffering methods.",null,null],[13,"Stream","","",10,null],[13,"Download","","",10,null],[13,"Timeshift","","",10,null],[13,"Live","","",10,null],[4,"BusSyncReply","","The result values for a GstBusSyncHandler.",null,null],[13,"Drop","","",11,null],[13,"Pass","","",11,null],[13,"Async","","",11,null],[4,"CapsIntersectMode","","Modes of caps intersection",null,null],[13,"ZigZag","","",12,null],[13,"First","","",12,null],[4,"ClockReturn","","The return value of a clock operation.",null,null],[13,"Ok","","",13,null],[13,"Early","","",13,null],[13,"Unscheduled","","",13,null],[13,"Busy","","",13,null],[13,"Badtime","","",13,null],[13,"Error","","",13,null],[13,"Unsupported","","",13,null],[13,"Done","","",13,null],[4,"ClockType","","The different kind of clocks.",null,null],[13,"Realtime","","",14,null],[13,"Monotonic","","",14,null],[13,"Other","","",14,null],[4,"CoreError","","Core errors are errors inside the core GStreamer library.",null,null],[13,"Failed","","",15,null],[13,"TooLazy","","",15,null],[13,"NotImplemented","","",15,null],[13,"StateChange","","",15,null],[13,"Pad","","",15,null],[13,"Thread","","",15,null],[13,"Negotiation","","",15,null],[13,"Event","","",15,null],[13,"Seek","","",15,null],[13,"Caps","","",15,null],[13,"Tag","","",15,null],[13,"MissingPlugin","","",15,null],[13,"Clock","","",15,null],[13,"Disabled","","",15,null],[13,"NumErrors","","",15,null],[4,"DebugLevel","","The level defines the importance of a debugging message. The more important a message is, the greater the probability that the debugging system outputs it.",null,null],[13,"None","","",16,null],[13,"Error","","",16,null],[13,"Warning","","",16,null],[13,"Fixme","","",16,null],[13,"Info","","",16,null],[13,"Debug","","",16,null],[13,"Log","","",16,null],[13,"Trace","","",16,null],[13,"Memdump","","",16,null],[13,"Count","","",16,null],[4,"EventType","","`EventType` lists the standard event types that can be sent in a pipeline.",null,null],[13,"Unknown","","",17,null],[13,"FlushStart","","",17,null],[13,"FlushStop","","",17,null],[13,"StreamStart","","",17,null],[13,"Caps","","",17,null],[13,"Segment","","",17,null],[13,"StreamCollection","","",17,null],[13,"Tag","","",17,null],[13,"Buffersize","","",17,null],[13,"SinkMessage","","",17,null],[13,"StreamGroupDone","","",17,null],[13,"Eos","","",17,null],[13,"Toc","","",17,null],[13,"Protection","","",17,null],[13,"SegmentDone","","",17,null],[13,"Gap","","",17,null],[13,"Qos","","",17,null],[13,"Seek","","",17,null],[13,"Navigation","","",17,null],[13,"Latency","","",17,null],[13,"Step","","",17,null],[13,"Reconfigure","","",17,null],[13,"TocSelect","","",17,null],[13,"SelectStreams","","",17,null],[13,"CustomUpstream","","",17,null],[13,"CustomDownstream","","",17,null],[13,"CustomDownstreamOob","","",17,null],[13,"CustomDownstreamSticky","","",17,null],[13,"CustomBoth","","",17,null],[13,"CustomBothOob","","",17,null],[4,"FlowReturn","","The result of passing data to a pad.",null,null],[13,"CustomSuccess2","","",18,null],[13,"CustomSuccess1","","",18,null],[13,"CustomSuccess","","",18,null],[13,"Ok","","",18,null],[13,"NotLinked","","",18,null],[13,"Flushing","","",18,null],[13,"Eos","","",18,null],[13,"NotNegotiated","","",18,null],[13,"Error","","",18,null],[13,"NotSupported","","",18,null],[13,"CustomError","","",18,null],[13,"CustomError1","","",18,null],[13,"CustomError2","","",18,null],[4,"Format","","Standard predefined formats",null,null],[13,"Undefined","","",19,null],[13,"Default","","",19,null],[13,"Bytes","","",19,null],[13,"Time","","",19,null],[13,"Buffers","","",19,null],[13,"Percent","","",19,null],[4,"LibraryError","","Library errors are for errors from the library being used by elements (initializing, finalizing, settings, ...)",null,null],[13,"Failed","","",20,null],[13,"TooLazy","","",20,null],[13,"Init","","",20,null],[13,"Shutdown","","",20,null],[13,"Settings","","",20,null],[13,"Encode","","",20,null],[13,"NumErrors","","",20,null],[4,"PadDirection","","The direction of a pad.",null,null],[13,"Unknown","","",21,null],[13,"Src","","",21,null],[13,"Sink","","",21,null],[4,"PadLinkReturn","","Result values from gst_pad_link and friends.",null,null],[13,"Ok","","",22,null],[13,"WrongHierarchy","","",22,null],[13,"WasLinked","","",22,null],[13,"WrongDirection","","",22,null],[13,"Noformat","","",22,null],[13,"Nosched","","",22,null],[13,"Refused","","",22,null],[4,"PadMode","","The status of a GstPad. After activating a pad, which usually happens when the parent element goes from READY to PAUSED, the GstPadMode defines if the pad operates in push or pull mode.",null,null],[13,"None","","",23,null],[13,"Push","","",23,null],[13,"Pull","","",23,null],[4,"PadPresence","","Indicates when this pad will become available.",null,null],[13,"Always","","",24,null],[13,"Sometimes","","",24,null],[13,"Request","","",24,null],[4,"PadProbeReturn","","Different return values for the `GstPadProbeCallback`.",null,null],[13,"Drop","","",25,null],[13,"Ok","","",25,null],[13,"Remove","","",25,null],[13,"Pass","","",25,null],[13,"Handled","","",25,null],[4,"ParseError","","The different parsing errors that can occur.",null,null],[13,"Syntax","","",26,null],[13,"NoSuchElement","","",26,null],[13,"NoSuchProperty","","",26,null],[13,"Link","","",26,null],[13,"CouldNotSetProperty","","",26,null],[13,"EmptyBin","","",26,null],[13,"Empty","","",26,null],[13,"DelayedLink","","",26,null],[4,"PluginError","","The plugin loading errors",null,null],[13,"Module","","",27,null],[13,"Dependencies","","",27,null],[13,"NameMismatch","","",27,null],[4,"ProgressType","","The type of a `MessageType::Progress`. The progress messages inform the application of the status of asynchronous tasks.",null,null],[13,"Start","","",28,null],[13,"Continue","","",28,null],[13,"Complete","","",28,null],[13,"Canceled","","",28,null],[13,"Error","","",28,null],[4,"QOSType","","The different types of QoS events that can be given to the `Event::new_qos` method.",null,null],[13,"Overflow","","",29,null],[13,"Underflow","","",29,null],[13,"Throttle","","",29,null],[4,"Rank","","Element priority ranks. Defines the order in which the autoplugger (or similar rank-picking mechanisms, such as e.g. `Element::make_from_uri`) will choose this element over an alternative one with the same function.",null,null],[13,"None","","",30,null],[13,"Marginal","","",30,null],[13,"Secondary","","",30,null],[13,"Primary","","",30,null],[4,"ResourceError","","Resource errors are for any resource used by an element: memory, files, network connections, process space, ... They're typically used by source and sink elements.",null,null],[13,"Failed","","",31,null],[13,"TooLazy","","",31,null],[13,"NotFound","","",31,null],[13,"Busy","","",31,null],[13,"OpenRead","","",31,null],[13,"OpenWrite","","",31,null],[13,"OpenReadWrite","","",31,null],[13,"Close","","",31,null],[13,"Read","","",31,null],[13,"Write","","",31,null],[13,"Seek","","",31,null],[13,"Sync","","",31,null],[13,"Settings","","",31,null],[13,"NoSpaceLeft","","",31,null],[13,"NotAuthorized","","",31,null],[13,"NumErrors","","",31,null],[4,"SeekType","","The different types of seek events. When constructing a seek event with `Event::new_seek` or when doing gst_segment_do_seek ().",null,null],[13,"None","","",32,null],[13,"Set","","",32,null],[13,"End","","",32,null],[4,"State","","The possible states an element can be in. States can be changed using `ElementExt::set_state` and checked using `ElementExt::get_state`.",null,null],[13,"VoidPending","","",33,null],[13,"Null","","",33,null],[13,"Ready","","",33,null],[13,"Paused","","",33,null],[13,"Playing","","",33,null],[4,"StateChange","","These are the different state changes an element goes through. `State::Null` ⇒ `State::Playing` is called an upwards state change and `State::Playing` ⇒ `State::Null` a downwards state change.",null,null],[13,"NullToReady","","",34,null],[13,"ReadyToPaused","","",34,null],[13,"PausedToPlaying","","",34,null],[13,"PlayingToPaused","","",34,null],[13,"PausedToReady","","",34,null],[13,"ReadyToNull","","",34,null],[4,"StateChangeReturn","","The possible return values from a state change function such as `ElementExt::set_state`. Only `StateChangeReturn::Failure` is a real failure.",null,null],[13,"Failure","","",35,null],[13,"Success","","",35,null],[13,"Async","","",35,null],[13,"NoPreroll","","",35,null],[4,"StreamError","","Stream errors are for anything related to the stream being processed: format errors, media type errors, ... They're typically used by decoders, demuxers, converters, ...",null,null],[13,"Failed","","",36,null],[13,"TooLazy","","",36,null],[13,"NotImplemented","","",36,null],[13,"TypeNotFound","","",36,null],[13,"WrongType","","",36,null],[13,"CodecNotFound","","",36,null],[13,"Decode","","",36,null],[13,"Encode","","",36,null],[13,"Demux","","",36,null],[13,"Mux","","",36,null],[13,"Format","","",36,null],[13,"Decrypt","","",36,null],[13,"DecryptNokey","","",36,null],[13,"NumErrors","","",36,null],[4,"StreamStatusType","","The type of a `MessageType::StreamStatus`. The stream status messages inform the application of new streaming threads and their status.",null,null],[13,"Create","","",37,null],[13,"Enter","","",37,null],[13,"Leave","","",37,null],[13,"Destroy","","",37,null],[13,"Start","","",37,null],[13,"Pause","","",37,null],[13,"Stop","","",37,null],[4,"StructureChangeType","","The type of a `MessageType::StructureChange`.",null,null],[13,"Link","","",38,null],[13,"Unlink","","",38,null],[4,"TagMergeMode","","The different tag merging modes are basically replace, overwrite and append, but they can be seen from two directions. Given two taglists: (A) the tags already in the element and (B) the ones that are supplied to the element ( e.g. via `TagSetter::merge_tags` / `TagSetter::add_tags` or a `EventType::Tag`), how are these tags merged? In the table below this is shown for the cases that a tag exists in the list (A) or does not exists (!A) and combinations thereof.",null,null],[13,"Undefined","","",39,null],[13,"ReplaceAll","","",39,null],[13,"Replace","","",39,null],[13,"Append","","",39,null],[13,"Prepend","","",39,null],[13,"Keep","","",39,null],[13,"KeepAll","","",39,null],[13,"Count","","",39,null],[4,"TaskState","","The different states a task can be in",null,null],[13,"Started","","",40,null],[13,"Stopped","","",40,null],[13,"Paused","","",40,null],[4,"TocEntryType","","The different types of TOC entries (see `TocEntry`).",null,null],[13,"Angle","","",41,null],[13,"Version","","",41,null],[13,"Edition","","",41,null],[13,"Invalid","","",41,null],[13,"Title","","",41,null],[13,"Track","","",41,null],[13,"Chapter","","",41,null],[4,"TocLoopType","","How a `TocEntry` should be repeated. By default, entries are played a single time.",null,null],[13,"None","","",42,null],[13,"Forward","","",42,null],[13,"Reverse","","",42,null],[13,"PingPong","","",42,null],[4,"TocScope","","The scope of a TOC.",null,null],[13,"Global","","",43,null],[13,"Current","","",43,null],[4,"TypeFindProbability","","The probability of the typefind function. Higher values have more certainty in doing a reliable typefind.",null,null],[13,"None","","",44,null],[13,"Minimum","","",44,null],[13,"Possible","","",44,null],[13,"Likely","","",44,null],[13,"NearlyCertain","","",44,null],[13,"Maximum","","",44,null],[4,"URIError","","Different URI-related errors that can occur.",null,null],[13,"UnsupportedProtocol","","",45,null],[13,"BadUri","","",45,null],[13,"BadState","","",45,null],[13,"BadReference","","",45,null],[4,"URIType","","The different types of URI direction.",null,null],[13,"Unknown","","",46,null],[13,"Sink","","",46,null],[13,"Src","","",46,null],[4,"ElementMessageType","","",null,null],[13,"Error","","",47,null],[13,"Warning","","",47,null],[13,"Info","","",47,null],[4,"PadProbeData","","",null,null],[13,"Buffer","","",48,null],[13,"BufferList","","",48,null],[13,"Query","","",48,null],[13,"Event","","",48,null],[13,"Unknown","","",48,null],[4,"IteratorError","","",null,null],[13,"Resync","","",49,null],[13,"Error","","",49,null],[4,"ClockError","","",null,null],[13,"Early","","",50,null],[13,"Unscheduled","","",50,null],[13,"Busy","","",50,null],[13,"Badtime","","",50,null],[13,"Error","","",50,null],[13,"Unsupported","","",50,null],[4,"ClockSuccess","","",null,null],[13,"Ok","","",51,null],[13,"Done","","",51,null],[4,"FlowError","","",null,null],[13,"NotLinked","","",52,null],[13,"Flushing","","",52,null],[13,"Eos","","",52,null],[13,"NotNegotiated","","",52,null],[13,"Error","","",52,null],[13,"NotSupported","","",52,null],[13,"CustomError","","",52,null],[13,"CustomError1","","",52,null],[13,"CustomError2","","",52,null],[4,"FlowSuccess","","",null,null],[13,"CustomSuccess2","","",53,null],[13,"CustomSuccess1","","",53,null],[13,"CustomSuccess","","",53,null],[13,"Ok","","",53,null],[4,"PadLinkError","","",null,null],[13,"WrongHierarchy","","",54,null],[13,"WasLinked","","",54,null],[13,"WrongDirection","","",54,null],[13,"Noformat","","",54,null],[13,"Nosched","","",54,null],[13,"Refused","","",54,null],[4,"StateChangeSuccess","","",null,null],[13,"Success","","",55,null],[13,"Async","","",55,null],[13,"NoPreroll","","",55,null],[4,"ValueOrder","","",null,null],[13,"LessThan","","",56,null],[13,"Equal","","",56,null],[13,"GreaterThan","","",56,null],[13,"Unordered","","",56,null],[5,"debug_bin_to_dot_data","","",null,{"inputs":[{"name":"p"},{"name":"debuggraphdetails"}],"output":{"name":"string"}}],[5,"debug_bin_to_dot_file","","",null,{"inputs":[{"name":"p"},{"name":"debuggraphdetails"},{"name":"q"}],"output":null}],[5,"debug_bin_to_dot_file_with_ts","","",null,{"inputs":[{"name":"p"},{"name":"debuggraphdetails"},{"name":"q"}],"output":null}],[5,"debug_get_default_threshold","","",null,{"inputs":[],"output":{"name":"debuglevel"}}],[5,"debug_get_stack_trace","","",null,{"inputs":[{"name":"stacktraceflags"}],"output":{"generics":["string"],"name":"option"}}],[5,"debug_is_active","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"debug_is_colored","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"debug_print_stack_trace","","",null,{"inputs":[],"output":null}],[5,"debug_set_active","","",null,{"inputs":[{"name":"bool"}],"output":null}],[5,"debug_set_colored","","",null,{"inputs":[{"name":"bool"}],"output":null}],[5,"debug_set_default_threshold","","",null,{"inputs":[{"name":"debuglevel"}],"output":null}],[5,"debug_set_threshold_for_name","","",null,{"inputs":[{"name":"str"},{"name":"debuglevel"}],"output":null}],[5,"debug_set_threshold_from_string","","",null,{"inputs":[{"name":"str"},{"name":"bool"}],"output":null}],[5,"debug_unset_threshold_for_name","","",null,{"inputs":[{"name":"str"}],"output":null}],[5,"parse_bin_from_description","","",null,{"inputs":[{"name":"str"},{"name":"bool"}],"output":{"generics":["bin","error"],"name":"result"}}],[5,"parse_launch","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["element","error"],"name":"result"}}],[5,"parse_launchv","","",null,null],[5,"update_registry","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"util_get_timestamp","","",null,{"inputs":[],"output":{"name":"clocktime"}}],[5,"version","","",null,null],[5,"version_string","","",null,{"inputs":[],"output":{"name":"string"}}],[5,"init","","",null,{"inputs":[],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"bin"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",57,null],[11,"static_type","","",57,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new bin with the given name. ## `name` the name of the new bin",57,{"inputs":[{"name":"p"}],"output":{"name":"bin"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"bus"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",58,null],[11,"static_type","","",58,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `Bus` instance.",58,{"inputs":[],"output":{"name":"bus"}}],[11,"add_signal_watch","","Adds a bus signal watch to the default main context with the default priority (`G_PRIORITY_DEFAULT`). It is also possible to use a non-default main context set up using `glib::MainContext::push_thread_default` (before one had to create a bus watch source and attach it to the desired main context 'manually').",58,{"inputs":[{"name":"self"}],"output":null}],[11,"disable_sync_message_emission","","Instructs GStreamer to stop emitting the \"sync-message\" signal for this bus. See `Bus::enable_sync_message_emission` for more information.",58,{"inputs":[{"name":"self"}],"output":null}],[11,"enable_sync_message_emission","","Instructs GStreamer to emit the \"sync-message\" signal after running the bus's sync handler. This function is here so that code can ensure that they can synchronously receive messages without having to affect what the bin's sync handler is.",58,{"inputs":[{"name":"self"}],"output":null}],[11,"have_pending","","Check if there are pending messages on the bus that should be handled.",58,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"peek","","Peek the message on the top of the bus' queue. The message will remain on the bus' message queue. A reference is returned, and needs to be unreffed by the caller.",58,{"inputs":[{"name":"self"}],"output":{"generics":["message"],"name":"option"}}],[11,"pop","","Get a message from the bus.",58,{"inputs":[{"name":"self"}],"output":{"generics":["message"],"name":"option"}}],[11,"post","","Post a message on the given bus. Ownership of the message is taken by the bus. ## `message` the `Message` to post",58,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"generics":["boolerror"],"name":"result"}}],[11,"remove_signal_watch","","Removes a signal watch previously added with `Bus::add_signal_watch`.",58,{"inputs":[{"name":"self"}],"output":null}],[11,"set_flushing","","If `flushing`, flush out and unref any messages queued in the bus. Releases references to the message origin objects. Will flush future messages until `Bus::set_flushing` sets `flushing` to `false`.",58,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"timed_pop","","Get a message from the bus, waiting up to the specified timeout.",58,{"inputs":[{"name":"self"},{"name":"clocktime"}],"output":{"generics":["message"],"name":"option"}}],[11,"connect_message","","",58,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_sync_message","","",58,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_property_enable_async_notify","","",58,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"default","","",58,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"childproxy"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",59,null],[11,"static_type","","",59,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"clock"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",60,null],[11,"static_type","","",60,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"device"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",61,null],[11,"static_type","","",61,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"devicemonitor"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",62,null],[11,"static_type","","",62,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Create a new `DeviceMonitor`",62,{"inputs":[],"output":{"name":"devicemonitor"}}],[11,"default","","",62,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"deviceprovider"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",63,null],[11,"static_type","","",63,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",63,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"register","","Create a new device providerfactory capable of instantiating objects of the `type_` and add the factory to `plugin`. ## `plugin` `Plugin` to register the device provider with, or `None` for  a static device provider. ## `name` name of device providers of this type ## `rank` rank of device provider (higher rank means more importance when autoplugging) ## `type_` GType of device provider to register",63,{"inputs":[{"name":"p"},{"name":"str"},{"name":"u32"},{"name":"type"}],"output":{"name":"bool"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"deviceproviderfactory"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",64,null],[11,"static_type","","",64,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",64,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"get","","Returns the device provider of the type defined by the given device providerfactory.",64,{"inputs":[{"name":"self"}],"output":{"generics":["deviceprovider"],"name":"option"}}],[11,"get_device_provider_type","","Get the `glib::Type` for device providers managed by this factory. The type can only be retrieved if the device provider factory is loaded, which can be assured with `PluginFeatureExt::load`.",64,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"get_metadata","","Get the metadata on `self` with `key`. ## `key` a key",64,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[11,"get_metadata_keys","","Get the available keys for the metadata on `self`.",64,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[11,"has_classes","","Check if `self` matches all of the given `classes` ## `classes` a \"/\" separate list of classes to match, only match  if all classes are matched",64,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"has_classesv","","Check if `self` matches all of the given classes ## `classes` a `None` terminated array  of classes to match, only match if all classes are matched",64,null],[11,"find","","Search for an device provider factory of the given name. Refs the returned device provider factory; caller is responsible for unreffing. ## `name` name of factory to find",64,{"inputs":[{"name":"str"}],"output":{"generics":["deviceproviderfactory"],"name":"option"}}],[11,"get_by_name","","Returns the device provider of the type defined by the given device provider factory. ## `factoryname` a named factory to instantiate",64,{"inputs":[{"name":"str"}],"output":{"generics":["deviceprovider"],"name":"option"}}],[11,"list_get_device_providers","","Get a list of factories with a rank greater or equal to `minrank`. The list of factories is returned by decreasing rank. ## `minrank` Minimum rank",64,{"inputs":[{"name":"rank"}],"output":{"generics":["deviceproviderfactory"],"name":"vec"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"element"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",65,null],[11,"static_type","","",65,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"make_from_uri","","Creates an element for handling the given URI. ## `type_` Whether to create a source or a sink ## `uri` URI to create an element for ## `elementname` Name of created element, can be `None`.",65,{"inputs":[{"name":"uritype"},{"name":"str"},{"name":"p"}],"output":{"generics":["element","error"],"name":"result"}}],[11,"register","","",65,{"inputs":[{"name":"p"},{"name":"str"},{"name":"u32"},{"name":"type"}],"output":{"name":"bool"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"elementfactory"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",66,null],[11,"static_type","","",66,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"can_sink_all_caps","","Checks if the factory can sink all possible capabilities. ## `caps` the caps to check",66,{"inputs":[{"name":"self"},{"name":"caps"}],"output":{"name":"bool"}}],[11,"can_sink_any_caps","","Checks if the factory can sink any possible capability. ## `caps` the caps to check",66,{"inputs":[{"name":"self"},{"name":"caps"}],"output":{"name":"bool"}}],[11,"can_src_all_caps","","Checks if the factory can src all possible capabilities. ## `caps` the caps to check",66,{"inputs":[{"name":"self"},{"name":"caps"}],"output":{"name":"bool"}}],[11,"can_src_any_caps","","Checks if the factory can src any possible capability. ## `caps` the caps to check",66,{"inputs":[{"name":"self"},{"name":"caps"}],"output":{"name":"bool"}}],[11,"create","","Create a new element of the type defined by the given elementfactory. It will be given the name supplied, since all elements require a name as their first argument. ## `name` name of new element, or `None` to automatically create  a unique name",66,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["element"],"name":"option"}}],[11,"get_element_type","","Get the `glib::Type` for elements managed by this factory. The type can only be retrieved if the element factory is loaded, which can be assured with `PluginFeatureExt::load`.",66,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"get_metadata","","Get the metadata on `self` with `key`. ## `key` a key",66,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[11,"get_metadata_keys","","Get the available keys for the metadata on `self`.",66,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[11,"get_num_pad_templates","","Gets the number of pad_templates in this factory.",66,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_static_pad_templates","","Gets the `glib::List` of `StaticPadTemplate` for this factory.",66,{"inputs":[{"name":"self"}],"output":{"generics":["staticpadtemplate"],"name":"vec"}}],[11,"get_uri_protocols","","Gets a `None`-terminated array of protocols this element supports or `None` if no protocols are supported. You may not change the contents of the returned array, as it is still owned by the element factory. Use `g_strdupv` to make a copy of the protocol string array if you need to.",66,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[11,"get_uri_type","","Gets the type of URIs the element supports or `URIType::Unknown` if none.",66,{"inputs":[{"name":"self"}],"output":{"name":"uritype"}}],[11,"has_interface","","Check if `self` implements the interface with name `interfacename`. ## `interfacename` an interface name",66,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"list_is_type","","Check if `self` is of the given types. ## `type_` a `ElementFactoryListType`",66,{"inputs":[{"name":"self"},{"name":"elementfactorylisttype"}],"output":{"name":"bool"}}],[11,"find","","Search for an element factory of the given name. Refs the returned element factory; caller is responsible for unreffing. ## `name` name of factory to find",66,{"inputs":[{"name":"str"}],"output":{"generics":["elementfactory"],"name":"option"}}],[11,"list_filter","","Filter out all the elementfactories in `list` that can handle `caps` in the given direction.",66,null],[11,"list_get_elements","","Get a list of factories that match the given `type_`. Only elements with a rank greater or equal to `minrank` will be returned. The list of factories is returned by decreasing rank. ## `type_` a `ElementFactoryListType` ## `minrank` Minimum rank",66,{"inputs":[{"name":"elementfactorylisttype"},{"name":"rank"}],"output":{"generics":["elementfactory"],"name":"vec"}}],[11,"make","","Create a new element of the type defined by the given element factory. If name is `None`, then the element will receive a guaranteed unique name, consisting of the element factory name and a number. If name is given, it will be given the name supplied. ## `factoryname` a named factory to instantiate ## `name` name of new element, or `None` to automatically create  a unique name",66,{"inputs":[{"name":"str"},{"name":"p"}],"output":{"generics":["element"],"name":"option"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"ghostpad"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",67,null],[11,"static_type","","",67,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",67,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new_no_target","","Create a new ghostpad without a target with the given direction. A target can be set on the ghostpad later with the `GhostPadExt::set_target` function.",67,{"inputs":[{"name":"p"},{"name":"paddirection"}],"output":{"name":"ghostpad"}}],[11,"new_no_target_from_template","","Create a new ghostpad based on `templ`, without setting a target. The direction will be taken from the `templ`. ## `name` the name of the new pad, or `None` to assign a default name ## `templ` the `PadTemplate` to create the ghostpad from.",67,{"inputs":[{"name":"p"},{"name":"padtemplate"}],"output":{"name":"ghostpad"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"object"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",68,null],[11,"static_type","","",68,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"check_uniqueness","","Checks to see if there is any object named `name` in `list`. This function does not do any locking of any kind. You might want to protect the provided list with the lock of the owner of the list. This function will lock each `Object` in the list to compare the name, so be careful when passing a list with a locked object. ## `list` a list of `Object` to  check through ## `name` the name to search for",68,null],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"pad"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",69,null],[11,"static_type","","",69,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",69,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new pad with the given name in the given direction. If name is `None`, a guaranteed unique name (across all pads) will be assigned. This function makes a copy of the name so you can safely free the name. ## `name` the name of the new pad. ## `direction` the `PadDirection` of the pad.",69,{"inputs":[{"name":"p"},{"name":"paddirection"}],"output":{"name":"pad"}}],[11,"new_from_template","","Creates a new pad with the given name from the given template. If name is `None`, a guaranteed unique name (across all pads) will be assigned. This function makes a copy of the name so you can safely free the name. ## `templ` the pad template to use ## `name` the name of the pad",69,{"inputs":[{"name":"padtemplate"},{"name":"p"}],"output":{"name":"pad"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"padtemplate"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",70,null],[11,"static_type","","",70,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",70,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new pad template with a name according to the given template and with the given arguments. ## `name_template` the name template. ## `direction` the `PadDirection` of the template. ## `presence` the `PadPresence` of the pad. ## `caps` a `Caps` set for the template.",70,{"inputs":[{"name":"str"},{"name":"paddirection"},{"name":"padpresence"},{"name":"caps"}],"output":{"name":"padtemplate"}}],[11,"get_caps","","Gets the capabilities of the pad template.",70,{"inputs":[{"name":"self"}],"output":{"generics":["caps"],"name":"option"}}],[11,"pad_created","","Emit the pad-created signal for this template when created by this pad. ## `pad` the `Pad` that created it",70,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[11,"get_property_direction","","",70,{"inputs":[{"name":"self"}],"output":{"name":"paddirection"}}],[11,"get_property_name_template","","",70,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"get_property_presence","","",70,{"inputs":[{"name":"self"}],"output":{"name":"padpresence"}}],[11,"connect_pad_created","","",70,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_property_caps_notify","","",70,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_property_direction_notify","","",70,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_property_name_template_notify","","",70,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_property_presence_notify","","",70,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"pipeline"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",71,null],[11,"static_type","","",71,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",71,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Create a new pipeline with the given name. ## `name` name of new pipeline",71,{"inputs":[{"name":"p"}],"output":{"name":"pipeline"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"plugin"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",72,null],[11,"static_type","","",72,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",72,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"add_dependency","","Make GStreamer aware of external dependencies which affect the feature set of this plugin (ie. the elements or typefinders associated with it).",72,null],[11,"add_dependency_simple","","Make GStreamer aware of external dependencies which affect the feature set of this plugin (ie. the elements or typefinders associated with it).",72,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"},{"name":"r"},{"name":"plugindependencyflags"}],"output":null}],[11,"get_description","","Get the long descriptive name of the plugin",72,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_filename","","get the filename of the plugin",72,{"inputs":[{"name":"self"}],"output":{"generics":["pathbuf"],"name":"option"}}],[11,"get_license","","get the license of the plugin",72,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_origin","","get the URL where the plugin comes from",72,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_package","","get the package the plugin belongs to.",72,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_release_date_string","","Get the release date (and possibly time) in form of a string, if available.",72,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"get_source","","get the source module the plugin belongs to.",72,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_version","","get the version of the plugin",72,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"is_loaded","","queries if the plugin is loaded into memory",72,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"load","","Loads `self`. Note that the return value is the loaded plugin; `self` is untouched. The normal use pattern of this function goes like this:",72,{"inputs":[{"name":"self"}],"output":{"generics":["plugin"],"name":"option"}}],[11,"load_by_name","","Load the named plugin. Refs the plugin. ## `name` name of plugin to load",72,{"inputs":[{"name":"str"}],"output":{"generics":["plugin"],"name":"option"}}],[11,"load_file","","Loads the given plugin and refs it. Caller needs to unref after use. ## `filename` the plugin filename to load",72,{"inputs":[{"name":"p"}],"output":{"generics":["plugin","error"],"name":"result"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"pluginfeature"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",73,null],[11,"static_type","","",73,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",73,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"preset"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",74,null],[11,"static_type","","",74,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",74,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"get_app_dir","","Gets the directory for application specific presets if set by the application.",74,{"inputs":[],"output":{"generics":["string"],"name":"option"}}],[11,"set_app_dir","","Sets an extra directory as an absolute path that should be considered when looking for presets. Any presets in the application dir will shadow the system presets. ## `app_dir` the application specific preset dir",74,{"inputs":[{"name":"str"}],"output":{"generics":["boolerror"],"name":"result"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"proxypad"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",75,null],[11,"static_type","","",75,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",75,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"registry"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",76,null],[11,"static_type","","",76,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",76,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"add_feature","","Add the feature to the registry. The feature-added signal will be emitted. This function sinks `feature`. ## `feature` the feature to add",76,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["boolerror"],"name":"result"}}],[11,"add_plugin","","Add the plugin to the registry. The plugin-added signal will be emitted. This function will sink `plugin`. ## `plugin` the plugin to add",76,{"inputs":[{"name":"self"},{"name":"plugin"}],"output":{"generics":["boolerror"],"name":"result"}}],[11,"check_feature_version","","Checks whether a plugin feature by the given name exists in `self` and whether its version is at least the version required. ## `feature_name` the name of the feature (e.g. \"oggdemux\") ## `min_major` the minimum major version number ## `min_minor` the minimum minor version number ## `min_micro` the minimum micro version number",76,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"find_feature","","Find the pluginfeature with the given name and type in the registry. ## `name` the pluginfeature name to find ## `type_` the pluginfeature type to find",76,{"inputs":[{"name":"self"},{"name":"str"},{"name":"type"}],"output":{"generics":["pluginfeature"],"name":"option"}}],[11,"find_plugin","","Find the plugin with the given name in the registry. The plugin will be reffed; caller is responsible for unreffing. ## `name` the plugin name to find",76,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["plugin"],"name":"option"}}],[11,"get_feature_list","","Retrieves a `glib::List` of `PluginFeature` of `type_`. ## `type_` a `glib::Type`.",76,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"generics":["pluginfeature"],"name":"vec"}}],[11,"get_feature_list_by_plugin","","Retrieves a `glib::List` of features of the plugin with name `name`. ## `name` a plugin name.",76,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["pluginfeature"],"name":"vec"}}],[11,"get_feature_list_cookie","","Returns the registry's feature list cookie. This changes every time a feature is added or removed from the registry.",76,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_plugin_list","","Get a copy of all plugins registered in the given registry. The refcount of each element in the list in incremented.",76,{"inputs":[{"name":"self"}],"output":{"generics":["plugin"],"name":"vec"}}],[11,"lookup","","Look up a plugin in the given registry with the given filename. If found, plugin is reffed. ## `filename` the name of the file to look up",76,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["plugin"],"name":"option"}}],[11,"lookup_feature","","Find a `PluginFeature` with `name` in `self`. ## `name` a `PluginFeature` name",76,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["pluginfeature"],"name":"option"}}],[11,"remove_feature","","Remove the feature from the registry.",76,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[11,"remove_plugin","","Remove the plugin from the registry.",76,{"inputs":[{"name":"self"},{"name":"plugin"}],"output":null}],[11,"scan_path","","Scan the given path for plugins to add to the registry. The syntax of the path is specific to the registry. ## `path` the path to scan",76,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"get","","Retrieves the singleton plugin registry. The caller does not own a reference on the registry, as it is alive as long as GStreamer is initialized.",76,{"inputs":[],"output":{"name":"registry"}}],[11,"connect_feature_added","","",76,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_plugin_added","","",76,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"stream"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",77,null],[11,"static_type","","",77,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",77,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Create a new `Stream` for the given `stream_id`, `caps`, `type_` and `flags`",77,{"inputs":[{"name":"p"},{"name":"q"},{"name":"streamtype"},{"name":"streamflags"}],"output":{"name":"stream"}}],[11,"get_caps","","Retrieve the caps for `self`, if any",77,{"inputs":[{"name":"self"}],"output":{"generics":["caps"],"name":"option"}}],[11,"get_stream_flags","","Retrieve the current stream flags for `self`",77,{"inputs":[{"name":"self"}],"output":{"name":"streamflags"}}],[11,"get_stream_id","","Returns the stream ID of `self`.",77,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"get_stream_type","","Retrieve the stream type for `self`",77,{"inputs":[{"name":"self"}],"output":{"name":"streamtype"}}],[11,"get_tags","","Retrieve the tags for `self`, if any",77,{"inputs":[{"name":"self"}],"output":{"generics":["taglist"],"name":"option"}}],[11,"set_caps","","Set the caps for the `Stream`",77,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[11,"set_stream_flags","","Set the `flags` for the `self`.",77,{"inputs":[{"name":"self"},{"name":"streamflags"}],"output":null}],[11,"set_stream_type","","Set the stream type of `self`",77,{"inputs":[{"name":"self"},{"name":"streamtype"}],"output":null}],[11,"set_tags","","Set the tags for the `Stream`",77,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[11,"get_property_caps","","",77,{"inputs":[{"name":"self"}],"output":{"generics":["caps"],"name":"option"}}],[11,"set_property_caps","","",77,{"inputs":[{"name":"self"},{"generics":["caps"],"name":"option"}],"output":null}],[11,"get_property_stream_flags","","",77,{"inputs":[{"name":"self"}],"output":{"name":"streamflags"}}],[11,"set_property_stream_flags","","",77,{"inputs":[{"name":"self"},{"name":"streamflags"}],"output":null}],[11,"get_property_stream_id","","",77,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"get_property_stream_type","","",77,{"inputs":[{"name":"self"}],"output":{"name":"streamtype"}}],[11,"set_property_stream_type","","",77,{"inputs":[{"name":"self"},{"name":"streamtype"}],"output":null}],[11,"get_property_tags","","",77,{"inputs":[{"name":"self"}],"output":{"generics":["taglist"],"name":"option"}}],[11,"set_property_tags","","",77,{"inputs":[{"name":"self"},{"generics":["taglist"],"name":"option"}],"output":null}],[11,"connect_property_caps_notify","","",77,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_property_stream_flags_notify","","",77,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_property_stream_id_notify","","",77,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_property_stream_type_notify","","",77,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_property_tags_notify","","",77,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"streamcollection"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",78,null],[11,"static_type","","",78,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",78,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Create a new `StreamCollection`.",78,{"inputs":[{"name":"p"}],"output":{"name":"streamcollection"}}],[11,"add_stream","","Add the given `stream` to the `self`.",78,{"inputs":[{"name":"self"},{"name":"stream"}],"output":{"name":"bool"}}],[11,"get_size","","Get the number of streams this collection contains",78,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_stream","","Retrieve the `Stream` with index `index` from the collection.",78,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["stream"],"name":"option"}}],[11,"get_upstream_id","","Returns the upstream id of the `self`.",78,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"get_property_upstream_id","","",78,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"set_property_upstream_id","","",78,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[11,"connect_property_upstream_id_notify","","",78,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"systemclock"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",79,null],[11,"static_type","","",79,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",79,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"obtain","","Get a handle to the default system clock. The refcount of the clock will be increased so you need to unref the clock after usage.",79,{"inputs":[],"output":{"name":"clock"}}],[11,"set_default","","Sets the default system clock that can be obtained with `SystemClock::obtain`.",79,{"inputs":[{"name":"q"}],"output":null}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"tagsetter"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",80,null],[11,"static_type","","",80,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",80,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"tocsetter"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",81,null],[11,"static_type","","",81,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",81,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"typefindfactory"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",82,null],[11,"static_type","","",82,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",82,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"get_caps","","Gets the `Caps` associated with a typefind factory.",82,{"inputs":[{"name":"self"}],"output":{"generics":["caps"],"name":"option"}}],[11,"get_extensions","","Gets the extensions associated with a `TypeFindFactory`. The returned array should not be changed. If you need to change stuff in it, you should copy it using `g_strdupv`. This function may return `None` to indicate a 0-length list.",82,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[11,"has_function","","Check whether the factory has a typefind function. Typefind factories without typefind functions are a last-effort fallback mechanism to e.g. assume a certain media type based on the file extension.",82,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_list","","Gets the list of all registered typefind factories. You must free the list using `PluginFeature::list_free`.",82,{"inputs":[],"output":{"generics":["typefindfactory"],"name":"vec"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"urihandler"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",83,null],[11,"static_type","","",83,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",83,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"datetime"}}],[11,"static_type","","",84,{"inputs":[],"output":{"name":"type"}}],[11,"new","","Creates a new `DateTime` using the date and times in the gregorian calendar in the supplied timezone.",84,{"inputs":[{"name":"f32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"f64"}],"output":{"name":"datetime"}}],[11,"new_from_g_date_time","","Creates a new `DateTime` from a `glib::DateTime` object.",84,{"inputs":[{"name":"datetime"}],"output":{"name":"datetime"}}],[11,"new_from_iso8601_string","","Tries to parse common variants of ISO-8601 datetime strings into a `DateTime`. Possible input formats are (for example): 2012-06-30T22:46:43Z, 2012, 2012-06, 2012-06-30, 2012-06-30T22:46:43-0430, 2012-06-30T22:46Z, 2012-06-30T22:46-0430, 2012-06-30 22:46, 2012-06-30 22:46:43, 2012-06-00, 2012-00-00, 2012-00-30, 22:46:43Z, 22:46Z, 22:46:43-0430, 22:46-0430, 22:46:30, 22:46 If no date is provided, it is assumed to be \"today\" in the timezone provided (if any), otherwise UTC.",84,{"inputs":[{"name":"str"}],"output":{"name":"datetime"}}],[11,"new_from_unix_epoch_local_time","","Creates a new `DateTime` using the time since Jan 1, 1970 specified by `secs`. The `DateTime` is in the local timezone.",84,{"inputs":[{"name":"i64"}],"output":{"name":"datetime"}}],[11,"new_from_unix_epoch_utc","","Creates a new `DateTime` using the time since Jan 1, 1970 specified by `secs`. The `DateTime` is in the UTC timezone.",84,{"inputs":[{"name":"i64"}],"output":{"name":"datetime"}}],[11,"new_local_time","","Creates a new `DateTime` using the date and times in the gregorian calendar in the local timezone.",84,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"f64"}],"output":{"name":"datetime"}}],[11,"new_now_local_time","","Creates a new `DateTime` representing the current date and time.",84,{"inputs":[],"output":{"name":"datetime"}}],[11,"new_now_utc","","Creates a new `DateTime` that represents the current instant at Universal coordinated time.",84,{"inputs":[],"output":{"name":"datetime"}}],[11,"new_y","","Creates a new `DateTime` using the date and times in the gregorian calendar in the local timezone.",84,{"inputs":[{"name":"i32"}],"output":{"name":"datetime"}}],[11,"new_ym","","Creates a new `DateTime` using the date and times in the gregorian calendar in the local timezone.",84,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"datetime"}}],[11,"new_ymd","","Creates a new `DateTime` using the date and times in the gregorian calendar in the local timezone.",84,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"datetime"}}],[11,"get_day","","Returns the day of the month of this `DateTime`. Call gst_date_time_has_day before, to avoid warnings.",84,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_hour","","Retrieves the hour of the day represented by `self` in the gregorian calendar. The return is in the range of 0 to 23. Call gst_date_time_has_haur before, to avoid warnings.",84,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_microsecond","","Retrieves the fractional part of the seconds in microseconds represented by `self` in the gregorian calendar.",84,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_minute","","Retrieves the minute of the hour represented by `self` in the gregorian calendar. Call gst_date_time_has_minute before, to avoid warnings.",84,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_month","","Returns the month of this `DateTime`. January is 1, February is 2, etc.. Call gst_date_time_has_month before, to avoid warnings.",84,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_second","","Retrieves the second of the minute represented by `self` in the gregorian calendar. Call gst_date_time_has_second before, to avoid warnings.",84,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_time_zone_offset","","Retrieves the offset from UTC in hours that the timezone specified by `self` represents. Timezones ahead (to the east) of UTC have positive values, timezones before (to the west) of UTC have negative values. If `self` represents UTC time, then the offset is zero.",84,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"get_year","","Returns the year of this `DateTime` Call gst_date_time_has_year before, to avoid warnings.",84,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"has_day","","Returns",84,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_month","","Returns",84,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_second","","Returns",84,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_time","","Returns",84,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_year","","Returns",84,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_g_date_time","","Creates a new `glib::DateTime` from a fully defined `DateTime` object.",84,{"inputs":[{"name":"self"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"to_iso8601_string","","Create a minimal string compatible with ISO-8601. Possible output formats are (for example): 2012, 2012-06, 2012-06-23, 2012-06-23T23:30Z, 2012-06-23T23:30+0100, 2012-06-23T23:30:59Z, 2012-06-23T23:30:59+0100",84,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bufferingmode"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"bufferingmode"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"bufferingmode"}],"output":{"name":"bool"}}],[11,"hash","","",10,null],[11,"static_type","","",10,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",10,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",10,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",10,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bussyncreply"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"bussyncreply"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"bussyncreply"}],"output":{"name":"bool"}}],[11,"hash","","",11,null],[11,"static_type","","",11,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",11,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",11,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",11,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"capsintersectmode"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"capsintersectmode"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"capsintersectmode"}],"output":{"name":"bool"}}],[11,"hash","","",12,null],[11,"static_type","","",12,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",12,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",12,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",12,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"clockreturn"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"clockreturn"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"clockreturn"}],"output":{"name":"bool"}}],[11,"hash","","",13,null],[11,"static_type","","",13,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",13,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",13,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",13,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"clocktype"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"clocktype"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"clocktype"}],"output":{"name":"bool"}}],[11,"hash","","",14,null],[11,"static_type","","",14,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",14,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",14,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",14,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"coreerror"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"coreerror"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"coreerror"}],"output":{"name":"bool"}}],[11,"hash","","",15,null],[11,"domain","","",15,{"inputs":[],"output":{"name":"gquark"}}],[11,"code","","",15,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from","","",15,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"static_type","","",15,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",15,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",15,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",15,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"debuglevel"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"debuglevel"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"debuglevel"}],"output":{"name":"bool"}}],[11,"hash","","",16,null],[11,"static_type","","",16,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",16,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",16,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",16,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"eventtype"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"eventtype"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"eventtype"}],"output":{"name":"bool"}}],[11,"hash","","",17,null],[11,"static_type","","",17,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",17,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",17,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",17,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"flowreturn"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"flowreturn"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"flowreturn"}],"output":{"name":"bool"}}],[11,"hash","","",18,null],[11,"static_type","","",18,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",18,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",18,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",18,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"format"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"format"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"format"}],"output":{"name":"bool"}}],[11,"hash","","",19,null],[11,"static_type","","",19,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",19,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",19,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",19,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"libraryerror"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"libraryerror"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"libraryerror"}],"output":{"name":"bool"}}],[11,"hash","","",20,null],[11,"domain","","",20,{"inputs":[],"output":{"name":"gquark"}}],[11,"code","","",20,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from","","",20,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"static_type","","",20,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",20,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",20,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",20,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"paddirection"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"paddirection"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"paddirection"}],"output":{"name":"bool"}}],[11,"hash","","",21,null],[11,"static_type","","",21,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",21,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",21,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",21,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"padlinkreturn"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"padlinkreturn"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"padlinkreturn"}],"output":{"name":"bool"}}],[11,"hash","","",22,null],[11,"static_type","","",22,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",22,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",22,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",22,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"padmode"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"padmode"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"padmode"}],"output":{"name":"bool"}}],[11,"hash","","",23,null],[11,"static_type","","",23,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",23,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",23,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",23,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"padpresence"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"padpresence"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"padpresence"}],"output":{"name":"bool"}}],[11,"hash","","",24,null],[11,"static_type","","",24,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",24,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",24,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",24,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"padprobereturn"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"padprobereturn"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"padprobereturn"}],"output":{"name":"bool"}}],[11,"hash","","",25,null],[11,"static_type","","",25,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",25,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",25,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",25,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"hash","","",26,null],[11,"domain","","",26,{"inputs":[],"output":{"name":"gquark"}}],[11,"code","","",26,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from","","",26,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"static_type","","",26,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",26,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",26,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",26,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"pluginerror"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"pluginerror"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"pluginerror"}],"output":{"name":"bool"}}],[11,"hash","","",27,null],[11,"domain","","",27,{"inputs":[],"output":{"name":"gquark"}}],[11,"code","","",27,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from","","",27,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"static_type","","",27,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",27,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",27,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",27,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"progresstype"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"progresstype"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"progresstype"}],"output":{"name":"bool"}}],[11,"hash","","",28,null],[11,"static_type","","",28,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",28,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",28,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",28,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"qostype"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"qostype"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"qostype"}],"output":{"name":"bool"}}],[11,"hash","","",29,null],[11,"static_type","","",29,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",29,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",29,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",29,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"rank"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"rank"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"rank"}],"output":{"name":"bool"}}],[11,"hash","","",30,null],[11,"static_type","","",30,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",30,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",30,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",30,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"resourceerror"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"resourceerror"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"resourceerror"}],"output":{"name":"bool"}}],[11,"hash","","",31,null],[11,"domain","","",31,{"inputs":[],"output":{"name":"gquark"}}],[11,"code","","",31,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from","","",31,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"static_type","","",31,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",31,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",31,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",31,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"seektype"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"seektype"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"seektype"}],"output":{"name":"bool"}}],[11,"hash","","",32,null],[11,"static_type","","",32,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",32,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",32,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",32,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"hash","","",33,null],[11,"static_type","","",33,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",33,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",33,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",33,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"statechange"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"statechange"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"statechange"}],"output":{"name":"bool"}}],[11,"hash","","",34,null],[11,"static_type","","",34,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",34,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",34,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",34,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"statechangereturn"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"statechangereturn"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"statechangereturn"}],"output":{"name":"bool"}}],[11,"hash","","",35,null],[11,"static_type","","",35,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",35,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",35,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",35,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"streamerror"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"streamerror"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"streamerror"}],"output":{"name":"bool"}}],[11,"hash","","",36,null],[11,"domain","","",36,{"inputs":[],"output":{"name":"gquark"}}],[11,"code","","",36,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from","","",36,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"static_type","","",36,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",36,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",36,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",36,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"streamstatustype"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"streamstatustype"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"streamstatustype"}],"output":{"name":"bool"}}],[11,"hash","","",37,null],[11,"static_type","","",37,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",37,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",37,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",37,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"structurechangetype"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"structurechangetype"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"structurechangetype"}],"output":{"name":"bool"}}],[11,"hash","","",38,null],[11,"static_type","","",38,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",38,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",38,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",38,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"tagmergemode"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"tagmergemode"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"tagmergemode"}],"output":{"name":"bool"}}],[11,"hash","","",39,null],[11,"static_type","","",39,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",39,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",39,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",39,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"taskstate"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"taskstate"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"taskstate"}],"output":{"name":"bool"}}],[11,"hash","","",40,null],[11,"static_type","","",40,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",40,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",40,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",40,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"tocentrytype"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"tocentrytype"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"tocentrytype"}],"output":{"name":"bool"}}],[11,"hash","","",41,null],[11,"static_type","","",41,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",41,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",41,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",41,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"toclooptype"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"toclooptype"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"self"},{"name":"toclooptype"}],"output":{"name":"bool"}}],[11,"hash","","",42,null],[11,"static_type","","",42,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",42,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",42,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",42,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"tocscope"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"tocscope"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"tocscope"}],"output":{"name":"bool"}}],[11,"hash","","",43,null],[11,"static_type","","",43,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",43,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",43,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",43,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"typefindprobability"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"typefindprobability"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"typefindprobability"}],"output":{"name":"bool"}}],[11,"hash","","",44,null],[11,"static_type","","",44,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",44,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",44,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",44,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"urierror"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"urierror"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"urierror"}],"output":{"name":"bool"}}],[11,"hash","","",45,null],[11,"domain","","",45,{"inputs":[],"output":{"name":"gquark"}}],[11,"code","","",45,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from","","",45,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"static_type","","",45,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",45,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",45,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",45,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"uritype"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"uritype"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"uritype"}],"output":{"name":"bool"}}],[11,"hash","","",46,null],[11,"static_type","","",46,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",46,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",46,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",46,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",85,{"inputs":[{"name":"self"},{"name":"buffercopyflags"}],"output":{"name":"bool"}}],[11,"ne","","",85,{"inputs":[{"name":"self"},{"name":"buffercopyflags"}],"output":{"name":"bool"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"buffercopyflags"}}],[11,"partial_cmp","","",85,{"inputs":[{"name":"self"},{"name":"buffercopyflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",85,{"inputs":[{"name":"self"},{"name":"buffercopyflags"}],"output":{"name":"bool"}}],[11,"le","","",85,{"inputs":[{"name":"self"},{"name":"buffercopyflags"}],"output":{"name":"bool"}}],[11,"gt","","",85,{"inputs":[{"name":"self"},{"name":"buffercopyflags"}],"output":{"name":"bool"}}],[11,"ge","","",85,{"inputs":[{"name":"self"},{"name":"buffercopyflags"}],"output":{"name":"bool"}}],[11,"cmp","","",85,{"inputs":[{"name":"self"},{"name":"buffercopyflags"}],"output":{"name":"ordering"}}],[11,"hash","","",85,null],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",85,null],[18,"FLAGS","","",85,null],[18,"TIMESTAMPS","","",85,null],[18,"META","","",85,null],[18,"MEMORY","","",85,null],[18,"MERGE","","",85,null],[18,"DEEP","","",85,null],[11,"empty","","Returns an empty set of flags.",85,{"inputs":[],"output":{"name":"buffercopyflags"}}],[11,"all","","Returns the set containing all flags.",85,{"inputs":[],"output":{"name":"buffercopyflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",85,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",85,{"inputs":[{"name":"u32"}],"output":{"generics":["buffercopyflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",85,{"inputs":[{"name":"u32"}],"output":{"name":"buffercopyflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",85,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",85,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",85,{"inputs":[{"name":"self"},{"name":"buffercopyflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",85,{"inputs":[{"name":"self"},{"name":"buffercopyflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",85,{"inputs":[{"name":"self"},{"name":"buffercopyflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",85,{"inputs":[{"name":"self"},{"name":"buffercopyflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",85,{"inputs":[{"name":"self"},{"name":"buffercopyflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",85,{"inputs":[{"name":"self"},{"name":"buffercopyflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",85,{"inputs":[{"name":"self"},{"name":"buffercopyflags"}],"output":{"name":"buffercopyflags"}}],[11,"bitor_assign","","Adds the set of flags.",85,{"inputs":[{"name":"self"},{"name":"buffercopyflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",85,{"inputs":[{"name":"self"},{"name":"buffercopyflags"}],"output":{"name":"buffercopyflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",85,{"inputs":[{"name":"self"},{"name":"buffercopyflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",85,{"inputs":[{"name":"self"},{"name":"buffercopyflags"}],"output":{"name":"buffercopyflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",85,{"inputs":[{"name":"self"},{"name":"buffercopyflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",85,{"inputs":[{"name":"self"},{"name":"buffercopyflags"}],"output":{"name":"buffercopyflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",85,{"inputs":[{"name":"self"},{"name":"buffercopyflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",85,{"inputs":[{"name":"self"}],"output":{"name":"buffercopyflags"}}],[11,"extend","","",85,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",85,{"inputs":[{"name":"t"}],"output":{"name":"buffercopyflags"}}],[11,"static_type","","",85,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",85,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",85,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",85,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",86,{"inputs":[{"name":"self"},{"name":"bufferflags"}],"output":{"name":"bool"}}],[11,"ne","","",86,{"inputs":[{"name":"self"},{"name":"bufferflags"}],"output":{"name":"bool"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"bufferflags"}}],[11,"partial_cmp","","",86,{"inputs":[{"name":"self"},{"name":"bufferflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",86,{"inputs":[{"name":"self"},{"name":"bufferflags"}],"output":{"name":"bool"}}],[11,"le","","",86,{"inputs":[{"name":"self"},{"name":"bufferflags"}],"output":{"name":"bool"}}],[11,"gt","","",86,{"inputs":[{"name":"self"},{"name":"bufferflags"}],"output":{"name":"bool"}}],[11,"ge","","",86,{"inputs":[{"name":"self"},{"name":"bufferflags"}],"output":{"name":"bool"}}],[11,"cmp","","",86,{"inputs":[{"name":"self"},{"name":"bufferflags"}],"output":{"name":"ordering"}}],[11,"hash","","",86,null],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"LIVE","","",86,null],[18,"DECODE_ONLY","","",86,null],[18,"DISCONT","","",86,null],[18,"RESYNC","","",86,null],[18,"CORRUPTED","","",86,null],[18,"MARKER","","",86,null],[18,"HEADER","","",86,null],[18,"GAP","","",86,null],[18,"DROPPABLE","","",86,null],[18,"DELTA_UNIT","","",86,null],[18,"TAG_MEMORY","","",86,null],[18,"SYNC_AFTER","","",86,null],[18,"LAST","","",86,null],[11,"empty","","Returns an empty set of flags.",86,{"inputs":[],"output":{"name":"bufferflags"}}],[11,"all","","Returns the set containing all flags.",86,{"inputs":[],"output":{"name":"bufferflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",86,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",86,{"inputs":[{"name":"u32"}],"output":{"generics":["bufferflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",86,{"inputs":[{"name":"u32"}],"output":{"name":"bufferflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",86,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",86,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",86,{"inputs":[{"name":"self"},{"name":"bufferflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",86,{"inputs":[{"name":"self"},{"name":"bufferflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",86,{"inputs":[{"name":"self"},{"name":"bufferflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",86,{"inputs":[{"name":"self"},{"name":"bufferflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",86,{"inputs":[{"name":"self"},{"name":"bufferflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",86,{"inputs":[{"name":"self"},{"name":"bufferflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",86,{"inputs":[{"name":"self"},{"name":"bufferflags"}],"output":{"name":"bufferflags"}}],[11,"bitor_assign","","Adds the set of flags.",86,{"inputs":[{"name":"self"},{"name":"bufferflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",86,{"inputs":[{"name":"self"},{"name":"bufferflags"}],"output":{"name":"bufferflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",86,{"inputs":[{"name":"self"},{"name":"bufferflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",86,{"inputs":[{"name":"self"},{"name":"bufferflags"}],"output":{"name":"bufferflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",86,{"inputs":[{"name":"self"},{"name":"bufferflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",86,{"inputs":[{"name":"self"},{"name":"bufferflags"}],"output":{"name":"bufferflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",86,{"inputs":[{"name":"self"},{"name":"bufferflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",86,{"inputs":[{"name":"self"}],"output":{"name":"bufferflags"}}],[11,"extend","","",86,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",86,{"inputs":[{"name":"t"}],"output":{"name":"bufferflags"}}],[11,"static_type","","",86,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",86,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",86,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",86,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",87,{"inputs":[{"name":"self"},{"name":"debugcolorflags"}],"output":{"name":"bool"}}],[11,"ne","","",87,{"inputs":[{"name":"self"},{"name":"debugcolorflags"}],"output":{"name":"bool"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"debugcolorflags"}}],[11,"partial_cmp","","",87,{"inputs":[{"name":"self"},{"name":"debugcolorflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",87,{"inputs":[{"name":"self"},{"name":"debugcolorflags"}],"output":{"name":"bool"}}],[11,"le","","",87,{"inputs":[{"name":"self"},{"name":"debugcolorflags"}],"output":{"name":"bool"}}],[11,"gt","","",87,{"inputs":[{"name":"self"},{"name":"debugcolorflags"}],"output":{"name":"bool"}}],[11,"ge","","",87,{"inputs":[{"name":"self"},{"name":"debugcolorflags"}],"output":{"name":"bool"}}],[11,"cmp","","",87,{"inputs":[{"name":"self"},{"name":"debugcolorflags"}],"output":{"name":"ordering"}}],[11,"hash","","",87,null],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"FG_BLACK","","",87,null],[18,"FG_RED","","",87,null],[18,"FG_GREEN","","",87,null],[18,"FG_YELLOW","","",87,null],[18,"FG_BLUE","","",87,null],[18,"FG_MAGENTA","","",87,null],[18,"FG_CYAN","","",87,null],[18,"FG_WHITE","","",87,null],[18,"BG_BLACK","","",87,null],[18,"BG_RED","","",87,null],[18,"BG_GREEN","","",87,null],[18,"BG_YELLOW","","",87,null],[18,"BG_BLUE","","",87,null],[18,"BG_MAGENTA","","",87,null],[18,"BG_CYAN","","",87,null],[18,"BG_WHITE","","",87,null],[18,"BOLD","","",87,null],[18,"UNDERLINE","","",87,null],[11,"empty","","Returns an empty set of flags.",87,{"inputs":[],"output":{"name":"debugcolorflags"}}],[11,"all","","Returns the set containing all flags.",87,{"inputs":[],"output":{"name":"debugcolorflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",87,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",87,{"inputs":[{"name":"u32"}],"output":{"generics":["debugcolorflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",87,{"inputs":[{"name":"u32"}],"output":{"name":"debugcolorflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",87,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",87,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",87,{"inputs":[{"name":"self"},{"name":"debugcolorflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",87,{"inputs":[{"name":"self"},{"name":"debugcolorflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",87,{"inputs":[{"name":"self"},{"name":"debugcolorflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",87,{"inputs":[{"name":"self"},{"name":"debugcolorflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",87,{"inputs":[{"name":"self"},{"name":"debugcolorflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",87,{"inputs":[{"name":"self"},{"name":"debugcolorflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",87,{"inputs":[{"name":"self"},{"name":"debugcolorflags"}],"output":{"name":"debugcolorflags"}}],[11,"bitor_assign","","Adds the set of flags.",87,{"inputs":[{"name":"self"},{"name":"debugcolorflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",87,{"inputs":[{"name":"self"},{"name":"debugcolorflags"}],"output":{"name":"debugcolorflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",87,{"inputs":[{"name":"self"},{"name":"debugcolorflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",87,{"inputs":[{"name":"self"},{"name":"debugcolorflags"}],"output":{"name":"debugcolorflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",87,{"inputs":[{"name":"self"},{"name":"debugcolorflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",87,{"inputs":[{"name":"self"},{"name":"debugcolorflags"}],"output":{"name":"debugcolorflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",87,{"inputs":[{"name":"self"},{"name":"debugcolorflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",87,{"inputs":[{"name":"self"}],"output":{"name":"debugcolorflags"}}],[11,"extend","","",87,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",87,{"inputs":[{"name":"t"}],"output":{"name":"debugcolorflags"}}],[11,"static_type","","",87,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",87,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",87,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",87,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",88,{"inputs":[{"name":"self"},{"name":"debuggraphdetails"}],"output":{"name":"bool"}}],[11,"ne","","",88,{"inputs":[{"name":"self"},{"name":"debuggraphdetails"}],"output":{"name":"bool"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"debuggraphdetails"}}],[11,"partial_cmp","","",88,{"inputs":[{"name":"self"},{"name":"debuggraphdetails"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",88,{"inputs":[{"name":"self"},{"name":"debuggraphdetails"}],"output":{"name":"bool"}}],[11,"le","","",88,{"inputs":[{"name":"self"},{"name":"debuggraphdetails"}],"output":{"name":"bool"}}],[11,"gt","","",88,{"inputs":[{"name":"self"},{"name":"debuggraphdetails"}],"output":{"name":"bool"}}],[11,"ge","","",88,{"inputs":[{"name":"self"},{"name":"debuggraphdetails"}],"output":{"name":"bool"}}],[11,"cmp","","",88,{"inputs":[{"name":"self"},{"name":"debuggraphdetails"}],"output":{"name":"ordering"}}],[11,"hash","","",88,null],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"MEDIA_TYPE","","",88,null],[18,"CAPS_DETAILS","","",88,null],[18,"NON_DEFAULT_PARAMS","","",88,null],[18,"STATES","","",88,null],[18,"FULL_PARAMS","","",88,null],[18,"ALL","","",88,null],[18,"VERBOSE","","",88,null],[11,"empty","","Returns an empty set of flags.",88,{"inputs":[],"output":{"name":"debuggraphdetails"}}],[11,"all","","Returns the set containing all flags.",88,{"inputs":[],"output":{"name":"debuggraphdetails"}}],[11,"bits","","Returns the raw value of the flags currently stored.",88,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",88,{"inputs":[{"name":"u32"}],"output":{"generics":["debuggraphdetails"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",88,{"inputs":[{"name":"u32"}],"output":{"name":"debuggraphdetails"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",88,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",88,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",88,{"inputs":[{"name":"self"},{"name":"debuggraphdetails"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",88,{"inputs":[{"name":"self"},{"name":"debuggraphdetails"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",88,{"inputs":[{"name":"self"},{"name":"debuggraphdetails"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",88,{"inputs":[{"name":"self"},{"name":"debuggraphdetails"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",88,{"inputs":[{"name":"self"},{"name":"debuggraphdetails"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",88,{"inputs":[{"name":"self"},{"name":"debuggraphdetails"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",88,{"inputs":[{"name":"self"},{"name":"debuggraphdetails"}],"output":{"name":"debuggraphdetails"}}],[11,"bitor_assign","","Adds the set of flags.",88,{"inputs":[{"name":"self"},{"name":"debuggraphdetails"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",88,{"inputs":[{"name":"self"},{"name":"debuggraphdetails"}],"output":{"name":"debuggraphdetails"}}],[11,"bitxor_assign","","Toggles the set of flags.",88,{"inputs":[{"name":"self"},{"name":"debuggraphdetails"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",88,{"inputs":[{"name":"self"},{"name":"debuggraphdetails"}],"output":{"name":"debuggraphdetails"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",88,{"inputs":[{"name":"self"},{"name":"debuggraphdetails"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",88,{"inputs":[{"name":"self"},{"name":"debuggraphdetails"}],"output":{"name":"debuggraphdetails"}}],[11,"sub_assign","","Disables all flags enabled in the set.",88,{"inputs":[{"name":"self"},{"name":"debuggraphdetails"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",88,{"inputs":[{"name":"self"}],"output":{"name":"debuggraphdetails"}}],[11,"extend","","",88,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",88,{"inputs":[{"name":"t"}],"output":{"name":"debuggraphdetails"}}],[11,"static_type","","",88,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",88,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",88,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",88,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",89,{"inputs":[{"name":"self"},{"name":"elementflags"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"self"},{"name":"elementflags"}],"output":{"name":"bool"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"elementflags"}}],[11,"partial_cmp","","",89,{"inputs":[{"name":"self"},{"name":"elementflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",89,{"inputs":[{"name":"self"},{"name":"elementflags"}],"output":{"name":"bool"}}],[11,"le","","",89,{"inputs":[{"name":"self"},{"name":"elementflags"}],"output":{"name":"bool"}}],[11,"gt","","",89,{"inputs":[{"name":"self"},{"name":"elementflags"}],"output":{"name":"bool"}}],[11,"ge","","",89,{"inputs":[{"name":"self"},{"name":"elementflags"}],"output":{"name":"bool"}}],[11,"cmp","","",89,{"inputs":[{"name":"self"},{"name":"elementflags"}],"output":{"name":"ordering"}}],[11,"hash","","",89,null],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"LOCKED_STATE","","",89,null],[18,"SINK","","",89,null],[18,"SOURCE","","",89,null],[18,"PROVIDE_CLOCK","","",89,null],[18,"REQUIRE_CLOCK","","",89,null],[18,"INDEXABLE","","",89,null],[18,"LAST","","",89,null],[11,"empty","","Returns an empty set of flags.",89,{"inputs":[],"output":{"name":"elementflags"}}],[11,"all","","Returns the set containing all flags.",89,{"inputs":[],"output":{"name":"elementflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",89,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",89,{"inputs":[{"name":"u32"}],"output":{"generics":["elementflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",89,{"inputs":[{"name":"u32"}],"output":{"name":"elementflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",89,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",89,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",89,{"inputs":[{"name":"self"},{"name":"elementflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",89,{"inputs":[{"name":"self"},{"name":"elementflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",89,{"inputs":[{"name":"self"},{"name":"elementflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",89,{"inputs":[{"name":"self"},{"name":"elementflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",89,{"inputs":[{"name":"self"},{"name":"elementflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",89,{"inputs":[{"name":"self"},{"name":"elementflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",89,{"inputs":[{"name":"self"},{"name":"elementflags"}],"output":{"name":"elementflags"}}],[11,"bitor_assign","","Adds the set of flags.",89,{"inputs":[{"name":"self"},{"name":"elementflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",89,{"inputs":[{"name":"self"},{"name":"elementflags"}],"output":{"name":"elementflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",89,{"inputs":[{"name":"self"},{"name":"elementflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",89,{"inputs":[{"name":"self"},{"name":"elementflags"}],"output":{"name":"elementflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",89,{"inputs":[{"name":"self"},{"name":"elementflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",89,{"inputs":[{"name":"self"},{"name":"elementflags"}],"output":{"name":"elementflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",89,{"inputs":[{"name":"self"},{"name":"elementflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",89,{"inputs":[{"name":"self"}],"output":{"name":"elementflags"}}],[11,"extend","","",89,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",89,{"inputs":[{"name":"t"}],"output":{"name":"elementflags"}}],[11,"static_type","","",89,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",89,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",89,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",89,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",90,{"inputs":[{"name":"self"},{"name":"padlinkcheck"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"self"},{"name":"padlinkcheck"}],"output":{"name":"bool"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"padlinkcheck"}}],[11,"partial_cmp","","",90,{"inputs":[{"name":"self"},{"name":"padlinkcheck"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",90,{"inputs":[{"name":"self"},{"name":"padlinkcheck"}],"output":{"name":"bool"}}],[11,"le","","",90,{"inputs":[{"name":"self"},{"name":"padlinkcheck"}],"output":{"name":"bool"}}],[11,"gt","","",90,{"inputs":[{"name":"self"},{"name":"padlinkcheck"}],"output":{"name":"bool"}}],[11,"ge","","",90,{"inputs":[{"name":"self"},{"name":"padlinkcheck"}],"output":{"name":"bool"}}],[11,"cmp","","",90,{"inputs":[{"name":"self"},{"name":"padlinkcheck"}],"output":{"name":"ordering"}}],[11,"hash","","",90,null],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NOTHING","","",90,null],[18,"HIERARCHY","","",90,null],[18,"TEMPLATE_CAPS","","",90,null],[18,"CAPS","","",90,null],[18,"NO_RECONFIGURE","","",90,null],[18,"DEFAULT","","",90,null],[11,"empty","","Returns an empty set of flags.",90,{"inputs":[],"output":{"name":"padlinkcheck"}}],[11,"all","","Returns the set containing all flags.",90,{"inputs":[],"output":{"name":"padlinkcheck"}}],[11,"bits","","Returns the raw value of the flags currently stored.",90,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",90,{"inputs":[{"name":"u32"}],"output":{"generics":["padlinkcheck"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",90,{"inputs":[{"name":"u32"}],"output":{"name":"padlinkcheck"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",90,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",90,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",90,{"inputs":[{"name":"self"},{"name":"padlinkcheck"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",90,{"inputs":[{"name":"self"},{"name":"padlinkcheck"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",90,{"inputs":[{"name":"self"},{"name":"padlinkcheck"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",90,{"inputs":[{"name":"self"},{"name":"padlinkcheck"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",90,{"inputs":[{"name":"self"},{"name":"padlinkcheck"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",90,{"inputs":[{"name":"self"},{"name":"padlinkcheck"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",90,{"inputs":[{"name":"self"},{"name":"padlinkcheck"}],"output":{"name":"padlinkcheck"}}],[11,"bitor_assign","","Adds the set of flags.",90,{"inputs":[{"name":"self"},{"name":"padlinkcheck"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",90,{"inputs":[{"name":"self"},{"name":"padlinkcheck"}],"output":{"name":"padlinkcheck"}}],[11,"bitxor_assign","","Toggles the set of flags.",90,{"inputs":[{"name":"self"},{"name":"padlinkcheck"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",90,{"inputs":[{"name":"self"},{"name":"padlinkcheck"}],"output":{"name":"padlinkcheck"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",90,{"inputs":[{"name":"self"},{"name":"padlinkcheck"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",90,{"inputs":[{"name":"self"},{"name":"padlinkcheck"}],"output":{"name":"padlinkcheck"}}],[11,"sub_assign","","Disables all flags enabled in the set.",90,{"inputs":[{"name":"self"},{"name":"padlinkcheck"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",90,{"inputs":[{"name":"self"}],"output":{"name":"padlinkcheck"}}],[11,"extend","","",90,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",90,{"inputs":[{"name":"t"}],"output":{"name":"padlinkcheck"}}],[11,"static_type","","",90,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",90,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",90,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",90,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",91,{"inputs":[{"name":"self"},{"name":"padprobetype"}],"output":{"name":"bool"}}],[11,"ne","","",91,{"inputs":[{"name":"self"},{"name":"padprobetype"}],"output":{"name":"bool"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"padprobetype"}}],[11,"partial_cmp","","",91,{"inputs":[{"name":"self"},{"name":"padprobetype"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",91,{"inputs":[{"name":"self"},{"name":"padprobetype"}],"output":{"name":"bool"}}],[11,"le","","",91,{"inputs":[{"name":"self"},{"name":"padprobetype"}],"output":{"name":"bool"}}],[11,"gt","","",91,{"inputs":[{"name":"self"},{"name":"padprobetype"}],"output":{"name":"bool"}}],[11,"ge","","",91,{"inputs":[{"name":"self"},{"name":"padprobetype"}],"output":{"name":"bool"}}],[11,"cmp","","",91,{"inputs":[{"name":"self"},{"name":"padprobetype"}],"output":{"name":"ordering"}}],[11,"hash","","",91,null],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"INVALID","","",91,null],[18,"IDLE","","",91,null],[18,"BLOCK","","",91,null],[18,"BUFFER","","",91,null],[18,"BUFFER_LIST","","",91,null],[18,"EVENT_DOWNSTREAM","","",91,null],[18,"EVENT_UPSTREAM","","",91,null],[18,"EVENT_FLUSH","","",91,null],[18,"QUERY_DOWNSTREAM","","",91,null],[18,"QUERY_UPSTREAM","","",91,null],[18,"PUSH","","",91,null],[18,"PULL","","",91,null],[18,"BLOCKING","","",91,null],[18,"DATA_DOWNSTREAM","","",91,null],[18,"DATA_UPSTREAM","","",91,null],[18,"DATA_BOTH","","",91,null],[18,"BLOCK_DOWNSTREAM","","",91,null],[18,"BLOCK_UPSTREAM","","",91,null],[18,"EVENT_BOTH","","",91,null],[18,"QUERY_BOTH","","",91,null],[18,"ALL_BOTH","","",91,null],[18,"SCHEDULING","","",91,null],[11,"empty","","Returns an empty set of flags.",91,{"inputs":[],"output":{"name":"padprobetype"}}],[11,"all","","Returns the set containing all flags.",91,{"inputs":[],"output":{"name":"padprobetype"}}],[11,"bits","","Returns the raw value of the flags currently stored.",91,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",91,{"inputs":[{"name":"u32"}],"output":{"generics":["padprobetype"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",91,{"inputs":[{"name":"u32"}],"output":{"name":"padprobetype"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",91,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",91,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",91,{"inputs":[{"name":"self"},{"name":"padprobetype"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",91,{"inputs":[{"name":"self"},{"name":"padprobetype"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",91,{"inputs":[{"name":"self"},{"name":"padprobetype"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",91,{"inputs":[{"name":"self"},{"name":"padprobetype"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",91,{"inputs":[{"name":"self"},{"name":"padprobetype"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",91,{"inputs":[{"name":"self"},{"name":"padprobetype"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",91,{"inputs":[{"name":"self"},{"name":"padprobetype"}],"output":{"name":"padprobetype"}}],[11,"bitor_assign","","Adds the set of flags.",91,{"inputs":[{"name":"self"},{"name":"padprobetype"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",91,{"inputs":[{"name":"self"},{"name":"padprobetype"}],"output":{"name":"padprobetype"}}],[11,"bitxor_assign","","Toggles the set of flags.",91,{"inputs":[{"name":"self"},{"name":"padprobetype"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",91,{"inputs":[{"name":"self"},{"name":"padprobetype"}],"output":{"name":"padprobetype"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",91,{"inputs":[{"name":"self"},{"name":"padprobetype"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",91,{"inputs":[{"name":"self"},{"name":"padprobetype"}],"output":{"name":"padprobetype"}}],[11,"sub_assign","","Disables all flags enabled in the set.",91,{"inputs":[{"name":"self"},{"name":"padprobetype"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",91,{"inputs":[{"name":"self"}],"output":{"name":"padprobetype"}}],[11,"extend","","",91,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",91,{"inputs":[{"name":"t"}],"output":{"name":"padprobetype"}}],[11,"static_type","","",91,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",91,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",91,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",91,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",92,{"inputs":[{"name":"self"},{"name":"parseflags"}],"output":{"name":"bool"}}],[11,"ne","","",92,{"inputs":[{"name":"self"},{"name":"parseflags"}],"output":{"name":"bool"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"parseflags"}}],[11,"partial_cmp","","",92,{"inputs":[{"name":"self"},{"name":"parseflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",92,{"inputs":[{"name":"self"},{"name":"parseflags"}],"output":{"name":"bool"}}],[11,"le","","",92,{"inputs":[{"name":"self"},{"name":"parseflags"}],"output":{"name":"bool"}}],[11,"gt","","",92,{"inputs":[{"name":"self"},{"name":"parseflags"}],"output":{"name":"bool"}}],[11,"ge","","",92,{"inputs":[{"name":"self"},{"name":"parseflags"}],"output":{"name":"bool"}}],[11,"cmp","","",92,{"inputs":[{"name":"self"},{"name":"parseflags"}],"output":{"name":"ordering"}}],[11,"hash","","",92,null],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",92,null],[18,"FATAL_ERRORS","","",92,null],[18,"NO_SINGLE_ELEMENT_BINS","","",92,null],[18,"PLACE_IN_BIN","","",92,null],[11,"empty","","Returns an empty set of flags.",92,{"inputs":[],"output":{"name":"parseflags"}}],[11,"all","","Returns the set containing all flags.",92,{"inputs":[],"output":{"name":"parseflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",92,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",92,{"inputs":[{"name":"u32"}],"output":{"generics":["parseflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",92,{"inputs":[{"name":"u32"}],"output":{"name":"parseflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",92,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",92,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",92,{"inputs":[{"name":"self"},{"name":"parseflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",92,{"inputs":[{"name":"self"},{"name":"parseflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",92,{"inputs":[{"name":"self"},{"name":"parseflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",92,{"inputs":[{"name":"self"},{"name":"parseflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",92,{"inputs":[{"name":"self"},{"name":"parseflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",92,{"inputs":[{"name":"self"},{"name":"parseflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",92,{"inputs":[{"name":"self"},{"name":"parseflags"}],"output":{"name":"parseflags"}}],[11,"bitor_assign","","Adds the set of flags.",92,{"inputs":[{"name":"self"},{"name":"parseflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",92,{"inputs":[{"name":"self"},{"name":"parseflags"}],"output":{"name":"parseflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",92,{"inputs":[{"name":"self"},{"name":"parseflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",92,{"inputs":[{"name":"self"},{"name":"parseflags"}],"output":{"name":"parseflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",92,{"inputs":[{"name":"self"},{"name":"parseflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",92,{"inputs":[{"name":"self"},{"name":"parseflags"}],"output":{"name":"parseflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",92,{"inputs":[{"name":"self"},{"name":"parseflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",92,{"inputs":[{"name":"self"}],"output":{"name":"parseflags"}}],[11,"extend","","",92,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",92,{"inputs":[{"name":"t"}],"output":{"name":"parseflags"}}],[11,"static_type","","",92,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",92,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",92,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",92,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",93,{"inputs":[{"name":"self"},{"name":"plugindependencyflags"}],"output":{"name":"bool"}}],[11,"ne","","",93,{"inputs":[{"name":"self"},{"name":"plugindependencyflags"}],"output":{"name":"bool"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"plugindependencyflags"}}],[11,"partial_cmp","","",93,{"inputs":[{"name":"self"},{"name":"plugindependencyflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",93,{"inputs":[{"name":"self"},{"name":"plugindependencyflags"}],"output":{"name":"bool"}}],[11,"le","","",93,{"inputs":[{"name":"self"},{"name":"plugindependencyflags"}],"output":{"name":"bool"}}],[11,"gt","","",93,{"inputs":[{"name":"self"},{"name":"plugindependencyflags"}],"output":{"name":"bool"}}],[11,"ge","","",93,{"inputs":[{"name":"self"},{"name":"plugindependencyflags"}],"output":{"name":"bool"}}],[11,"cmp","","",93,{"inputs":[{"name":"self"},{"name":"plugindependencyflags"}],"output":{"name":"ordering"}}],[11,"hash","","",93,null],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",93,null],[18,"RECURSE","","",93,null],[18,"PATHS_ARE_DEFAULT_ONLY","","",93,null],[18,"FILE_NAME_IS_SUFFIX","","",93,null],[18,"FILE_NAME_IS_PREFIX","","",93,null],[11,"empty","","Returns an empty set of flags.",93,{"inputs":[],"output":{"name":"plugindependencyflags"}}],[11,"all","","Returns the set containing all flags.",93,{"inputs":[],"output":{"name":"plugindependencyflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",93,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",93,{"inputs":[{"name":"u32"}],"output":{"generics":["plugindependencyflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",93,{"inputs":[{"name":"u32"}],"output":{"name":"plugindependencyflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",93,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",93,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",93,{"inputs":[{"name":"self"},{"name":"plugindependencyflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",93,{"inputs":[{"name":"self"},{"name":"plugindependencyflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",93,{"inputs":[{"name":"self"},{"name":"plugindependencyflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",93,{"inputs":[{"name":"self"},{"name":"plugindependencyflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",93,{"inputs":[{"name":"self"},{"name":"plugindependencyflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",93,{"inputs":[{"name":"self"},{"name":"plugindependencyflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",93,{"inputs":[{"name":"self"},{"name":"plugindependencyflags"}],"output":{"name":"plugindependencyflags"}}],[11,"bitor_assign","","Adds the set of flags.",93,{"inputs":[{"name":"self"},{"name":"plugindependencyflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",93,{"inputs":[{"name":"self"},{"name":"plugindependencyflags"}],"output":{"name":"plugindependencyflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",93,{"inputs":[{"name":"self"},{"name":"plugindependencyflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",93,{"inputs":[{"name":"self"},{"name":"plugindependencyflags"}],"output":{"name":"plugindependencyflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",93,{"inputs":[{"name":"self"},{"name":"plugindependencyflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",93,{"inputs":[{"name":"self"},{"name":"plugindependencyflags"}],"output":{"name":"plugindependencyflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",93,{"inputs":[{"name":"self"},{"name":"plugindependencyflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",93,{"inputs":[{"name":"self"}],"output":{"name":"plugindependencyflags"}}],[11,"extend","","",93,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",93,{"inputs":[{"name":"t"}],"output":{"name":"plugindependencyflags"}}],[11,"static_type","","",93,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",93,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",93,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",93,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",94,{"inputs":[{"name":"self"},{"name":"schedulingflags"}],"output":{"name":"bool"}}],[11,"ne","","",94,{"inputs":[{"name":"self"},{"name":"schedulingflags"}],"output":{"name":"bool"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"schedulingflags"}}],[11,"partial_cmp","","",94,{"inputs":[{"name":"self"},{"name":"schedulingflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",94,{"inputs":[{"name":"self"},{"name":"schedulingflags"}],"output":{"name":"bool"}}],[11,"le","","",94,{"inputs":[{"name":"self"},{"name":"schedulingflags"}],"output":{"name":"bool"}}],[11,"gt","","",94,{"inputs":[{"name":"self"},{"name":"schedulingflags"}],"output":{"name":"bool"}}],[11,"ge","","",94,{"inputs":[{"name":"self"},{"name":"schedulingflags"}],"output":{"name":"bool"}}],[11,"cmp","","",94,{"inputs":[{"name":"self"},{"name":"schedulingflags"}],"output":{"name":"ordering"}}],[11,"hash","","",94,null],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"SEEKABLE","","",94,null],[18,"SEQUENTIAL","","",94,null],[18,"BANDWIDTH_LIMITED","","",94,null],[11,"empty","","Returns an empty set of flags.",94,{"inputs":[],"output":{"name":"schedulingflags"}}],[11,"all","","Returns the set containing all flags.",94,{"inputs":[],"output":{"name":"schedulingflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",94,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",94,{"inputs":[{"name":"u32"}],"output":{"generics":["schedulingflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",94,{"inputs":[{"name":"u32"}],"output":{"name":"schedulingflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",94,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",94,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",94,{"inputs":[{"name":"self"},{"name":"schedulingflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",94,{"inputs":[{"name":"self"},{"name":"schedulingflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",94,{"inputs":[{"name":"self"},{"name":"schedulingflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",94,{"inputs":[{"name":"self"},{"name":"schedulingflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",94,{"inputs":[{"name":"self"},{"name":"schedulingflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",94,{"inputs":[{"name":"self"},{"name":"schedulingflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",94,{"inputs":[{"name":"self"},{"name":"schedulingflags"}],"output":{"name":"schedulingflags"}}],[11,"bitor_assign","","Adds the set of flags.",94,{"inputs":[{"name":"self"},{"name":"schedulingflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",94,{"inputs":[{"name":"self"},{"name":"schedulingflags"}],"output":{"name":"schedulingflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",94,{"inputs":[{"name":"self"},{"name":"schedulingflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",94,{"inputs":[{"name":"self"},{"name":"schedulingflags"}],"output":{"name":"schedulingflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",94,{"inputs":[{"name":"self"},{"name":"schedulingflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",94,{"inputs":[{"name":"self"},{"name":"schedulingflags"}],"output":{"name":"schedulingflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",94,{"inputs":[{"name":"self"},{"name":"schedulingflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",94,{"inputs":[{"name":"self"}],"output":{"name":"schedulingflags"}}],[11,"extend","","",94,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",94,{"inputs":[{"name":"t"}],"output":{"name":"schedulingflags"}}],[11,"static_type","","",94,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",94,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",94,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",94,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",95,{"inputs":[{"name":"self"},{"name":"seekflags"}],"output":{"name":"bool"}}],[11,"ne","","",95,{"inputs":[{"name":"self"},{"name":"seekflags"}],"output":{"name":"bool"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"seekflags"}}],[11,"partial_cmp","","",95,{"inputs":[{"name":"self"},{"name":"seekflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",95,{"inputs":[{"name":"self"},{"name":"seekflags"}],"output":{"name":"bool"}}],[11,"le","","",95,{"inputs":[{"name":"self"},{"name":"seekflags"}],"output":{"name":"bool"}}],[11,"gt","","",95,{"inputs":[{"name":"self"},{"name":"seekflags"}],"output":{"name":"bool"}}],[11,"ge","","",95,{"inputs":[{"name":"self"},{"name":"seekflags"}],"output":{"name":"bool"}}],[11,"cmp","","",95,{"inputs":[{"name":"self"},{"name":"seekflags"}],"output":{"name":"ordering"}}],[11,"hash","","",95,null],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",95,null],[18,"FLUSH","","",95,null],[18,"ACCURATE","","",95,null],[18,"KEY_UNIT","","",95,null],[18,"SEGMENT","","",95,null],[18,"TRICKMODE","","",95,null],[18,"SKIP","","",95,null],[18,"SNAP_BEFORE","","",95,null],[18,"SNAP_AFTER","","",95,null],[18,"SNAP_NEAREST","","",95,null],[18,"TRICKMODE_KEY_UNITS","","",95,null],[18,"TRICKMODE_NO_AUDIO","","",95,null],[11,"empty","","Returns an empty set of flags.",95,{"inputs":[],"output":{"name":"seekflags"}}],[11,"all","","Returns the set containing all flags.",95,{"inputs":[],"output":{"name":"seekflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",95,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",95,{"inputs":[{"name":"u32"}],"output":{"generics":["seekflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",95,{"inputs":[{"name":"u32"}],"output":{"name":"seekflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",95,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",95,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",95,{"inputs":[{"name":"self"},{"name":"seekflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",95,{"inputs":[{"name":"self"},{"name":"seekflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",95,{"inputs":[{"name":"self"},{"name":"seekflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",95,{"inputs":[{"name":"self"},{"name":"seekflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",95,{"inputs":[{"name":"self"},{"name":"seekflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",95,{"inputs":[{"name":"self"},{"name":"seekflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",95,{"inputs":[{"name":"self"},{"name":"seekflags"}],"output":{"name":"seekflags"}}],[11,"bitor_assign","","Adds the set of flags.",95,{"inputs":[{"name":"self"},{"name":"seekflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",95,{"inputs":[{"name":"self"},{"name":"seekflags"}],"output":{"name":"seekflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",95,{"inputs":[{"name":"self"},{"name":"seekflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",95,{"inputs":[{"name":"self"},{"name":"seekflags"}],"output":{"name":"seekflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",95,{"inputs":[{"name":"self"},{"name":"seekflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",95,{"inputs":[{"name":"self"},{"name":"seekflags"}],"output":{"name":"seekflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",95,{"inputs":[{"name":"self"},{"name":"seekflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",95,{"inputs":[{"name":"self"}],"output":{"name":"seekflags"}}],[11,"extend","","",95,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",95,{"inputs":[{"name":"t"}],"output":{"name":"seekflags"}}],[11,"static_type","","",95,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",95,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",95,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",95,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",96,{"inputs":[{"name":"self"},{"name":"segmentflags"}],"output":{"name":"bool"}}],[11,"ne","","",96,{"inputs":[{"name":"self"},{"name":"segmentflags"}],"output":{"name":"bool"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"segmentflags"}}],[11,"partial_cmp","","",96,{"inputs":[{"name":"self"},{"name":"segmentflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",96,{"inputs":[{"name":"self"},{"name":"segmentflags"}],"output":{"name":"bool"}}],[11,"le","","",96,{"inputs":[{"name":"self"},{"name":"segmentflags"}],"output":{"name":"bool"}}],[11,"gt","","",96,{"inputs":[{"name":"self"},{"name":"segmentflags"}],"output":{"name":"bool"}}],[11,"ge","","",96,{"inputs":[{"name":"self"},{"name":"segmentflags"}],"output":{"name":"bool"}}],[11,"cmp","","",96,{"inputs":[{"name":"self"},{"name":"segmentflags"}],"output":{"name":"ordering"}}],[11,"hash","","",96,null],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",96,null],[18,"RESET","","",96,null],[18,"TRICKMODE","","",96,null],[18,"SKIP","","",96,null],[18,"SEGMENT","","",96,null],[18,"TRICKMODE_KEY_UNITS","","",96,null],[18,"TRICKMODE_NO_AUDIO","","",96,null],[11,"empty","","Returns an empty set of flags.",96,{"inputs":[],"output":{"name":"segmentflags"}}],[11,"all","","Returns the set containing all flags.",96,{"inputs":[],"output":{"name":"segmentflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",96,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",96,{"inputs":[{"name":"u32"}],"output":{"generics":["segmentflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",96,{"inputs":[{"name":"u32"}],"output":{"name":"segmentflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",96,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",96,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",96,{"inputs":[{"name":"self"},{"name":"segmentflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",96,{"inputs":[{"name":"self"},{"name":"segmentflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",96,{"inputs":[{"name":"self"},{"name":"segmentflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",96,{"inputs":[{"name":"self"},{"name":"segmentflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",96,{"inputs":[{"name":"self"},{"name":"segmentflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",96,{"inputs":[{"name":"self"},{"name":"segmentflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",96,{"inputs":[{"name":"self"},{"name":"segmentflags"}],"output":{"name":"segmentflags"}}],[11,"bitor_assign","","Adds the set of flags.",96,{"inputs":[{"name":"self"},{"name":"segmentflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",96,{"inputs":[{"name":"self"},{"name":"segmentflags"}],"output":{"name":"segmentflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",96,{"inputs":[{"name":"self"},{"name":"segmentflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",96,{"inputs":[{"name":"self"},{"name":"segmentflags"}],"output":{"name":"segmentflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",96,{"inputs":[{"name":"self"},{"name":"segmentflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",96,{"inputs":[{"name":"self"},{"name":"segmentflags"}],"output":{"name":"segmentflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",96,{"inputs":[{"name":"self"},{"name":"segmentflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",96,{"inputs":[{"name":"self"}],"output":{"name":"segmentflags"}}],[11,"extend","","",96,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",96,{"inputs":[{"name":"t"}],"output":{"name":"segmentflags"}}],[11,"static_type","","",96,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",96,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",96,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",96,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",97,{"inputs":[{"name":"self"},{"name":"stacktraceflags"}],"output":{"name":"bool"}}],[11,"ne","","",97,{"inputs":[{"name":"self"},{"name":"stacktraceflags"}],"output":{"name":"bool"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"stacktraceflags"}}],[11,"partial_cmp","","",97,{"inputs":[{"name":"self"},{"name":"stacktraceflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",97,{"inputs":[{"name":"self"},{"name":"stacktraceflags"}],"output":{"name":"bool"}}],[11,"le","","",97,{"inputs":[{"name":"self"},{"name":"stacktraceflags"}],"output":{"name":"bool"}}],[11,"gt","","",97,{"inputs":[{"name":"self"},{"name":"stacktraceflags"}],"output":{"name":"bool"}}],[11,"ge","","",97,{"inputs":[{"name":"self"},{"name":"stacktraceflags"}],"output":{"name":"bool"}}],[11,"cmp","","",97,{"inputs":[{"name":"self"},{"name":"stacktraceflags"}],"output":{"name":"ordering"}}],[11,"hash","","",97,null],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"FULL","","",97,null],[11,"empty","","Returns an empty set of flags.",97,{"inputs":[],"output":{"name":"stacktraceflags"}}],[11,"all","","Returns the set containing all flags.",97,{"inputs":[],"output":{"name":"stacktraceflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",97,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",97,{"inputs":[{"name":"u32"}],"output":{"generics":["stacktraceflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",97,{"inputs":[{"name":"u32"}],"output":{"name":"stacktraceflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",97,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",97,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",97,{"inputs":[{"name":"self"},{"name":"stacktraceflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",97,{"inputs":[{"name":"self"},{"name":"stacktraceflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",97,{"inputs":[{"name":"self"},{"name":"stacktraceflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",97,{"inputs":[{"name":"self"},{"name":"stacktraceflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",97,{"inputs":[{"name":"self"},{"name":"stacktraceflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",97,{"inputs":[{"name":"self"},{"name":"stacktraceflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",97,{"inputs":[{"name":"self"},{"name":"stacktraceflags"}],"output":{"name":"stacktraceflags"}}],[11,"bitor_assign","","Adds the set of flags.",97,{"inputs":[{"name":"self"},{"name":"stacktraceflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",97,{"inputs":[{"name":"self"},{"name":"stacktraceflags"}],"output":{"name":"stacktraceflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",97,{"inputs":[{"name":"self"},{"name":"stacktraceflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",97,{"inputs":[{"name":"self"},{"name":"stacktraceflags"}],"output":{"name":"stacktraceflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",97,{"inputs":[{"name":"self"},{"name":"stacktraceflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",97,{"inputs":[{"name":"self"},{"name":"stacktraceflags"}],"output":{"name":"stacktraceflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",97,{"inputs":[{"name":"self"},{"name":"stacktraceflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",97,{"inputs":[{"name":"self"}],"output":{"name":"stacktraceflags"}}],[11,"extend","","",97,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",97,{"inputs":[{"name":"t"}],"output":{"name":"stacktraceflags"}}],[11,"static_type","","",97,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",97,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",97,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",97,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",98,{"inputs":[{"name":"self"},{"name":"streamflags"}],"output":{"name":"bool"}}],[11,"ne","","",98,{"inputs":[{"name":"self"},{"name":"streamflags"}],"output":{"name":"bool"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"streamflags"}}],[11,"partial_cmp","","",98,{"inputs":[{"name":"self"},{"name":"streamflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",98,{"inputs":[{"name":"self"},{"name":"streamflags"}],"output":{"name":"bool"}}],[11,"le","","",98,{"inputs":[{"name":"self"},{"name":"streamflags"}],"output":{"name":"bool"}}],[11,"gt","","",98,{"inputs":[{"name":"self"},{"name":"streamflags"}],"output":{"name":"bool"}}],[11,"ge","","",98,{"inputs":[{"name":"self"},{"name":"streamflags"}],"output":{"name":"bool"}}],[11,"cmp","","",98,{"inputs":[{"name":"self"},{"name":"streamflags"}],"output":{"name":"ordering"}}],[11,"hash","","",98,null],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",98,null],[18,"SPARSE","","",98,null],[18,"SELECT","","",98,null],[18,"UNSELECT","","",98,null],[11,"empty","","Returns an empty set of flags.",98,{"inputs":[],"output":{"name":"streamflags"}}],[11,"all","","Returns the set containing all flags.",98,{"inputs":[],"output":{"name":"streamflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",98,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",98,{"inputs":[{"name":"u32"}],"output":{"generics":["streamflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",98,{"inputs":[{"name":"u32"}],"output":{"name":"streamflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",98,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",98,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",98,{"inputs":[{"name":"self"},{"name":"streamflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",98,{"inputs":[{"name":"self"},{"name":"streamflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",98,{"inputs":[{"name":"self"},{"name":"streamflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",98,{"inputs":[{"name":"self"},{"name":"streamflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",98,{"inputs":[{"name":"self"},{"name":"streamflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",98,{"inputs":[{"name":"self"},{"name":"streamflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",98,{"inputs":[{"name":"self"},{"name":"streamflags"}],"output":{"name":"streamflags"}}],[11,"bitor_assign","","Adds the set of flags.",98,{"inputs":[{"name":"self"},{"name":"streamflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",98,{"inputs":[{"name":"self"},{"name":"streamflags"}],"output":{"name":"streamflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",98,{"inputs":[{"name":"self"},{"name":"streamflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",98,{"inputs":[{"name":"self"},{"name":"streamflags"}],"output":{"name":"streamflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",98,{"inputs":[{"name":"self"},{"name":"streamflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",98,{"inputs":[{"name":"self"},{"name":"streamflags"}],"output":{"name":"streamflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",98,{"inputs":[{"name":"self"},{"name":"streamflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",98,{"inputs":[{"name":"self"}],"output":{"name":"streamflags"}}],[11,"extend","","",98,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",98,{"inputs":[{"name":"t"}],"output":{"name":"streamflags"}}],[11,"static_type","","",98,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",98,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",98,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",98,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",99,{"inputs":[{"name":"self"},{"name":"streamtype"}],"output":{"name":"bool"}}],[11,"ne","","",99,{"inputs":[{"name":"self"},{"name":"streamtype"}],"output":{"name":"bool"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"streamtype"}}],[11,"partial_cmp","","",99,{"inputs":[{"name":"self"},{"name":"streamtype"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",99,{"inputs":[{"name":"self"},{"name":"streamtype"}],"output":{"name":"bool"}}],[11,"le","","",99,{"inputs":[{"name":"self"},{"name":"streamtype"}],"output":{"name":"bool"}}],[11,"gt","","",99,{"inputs":[{"name":"self"},{"name":"streamtype"}],"output":{"name":"bool"}}],[11,"ge","","",99,{"inputs":[{"name":"self"},{"name":"streamtype"}],"output":{"name":"bool"}}],[11,"cmp","","",99,{"inputs":[{"name":"self"},{"name":"streamtype"}],"output":{"name":"ordering"}}],[11,"hash","","",99,null],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"UNKNOWN","","",99,null],[18,"AUDIO","","",99,null],[18,"VIDEO","","",99,null],[18,"CONTAINER","","",99,null],[18,"TEXT","","",99,null],[11,"empty","","Returns an empty set of flags.",99,{"inputs":[],"output":{"name":"streamtype"}}],[11,"all","","Returns the set containing all flags.",99,{"inputs":[],"output":{"name":"streamtype"}}],[11,"bits","","Returns the raw value of the flags currently stored.",99,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",99,{"inputs":[{"name":"u32"}],"output":{"generics":["streamtype"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",99,{"inputs":[{"name":"u32"}],"output":{"name":"streamtype"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",99,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",99,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",99,{"inputs":[{"name":"self"},{"name":"streamtype"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",99,{"inputs":[{"name":"self"},{"name":"streamtype"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",99,{"inputs":[{"name":"self"},{"name":"streamtype"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",99,{"inputs":[{"name":"self"},{"name":"streamtype"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",99,{"inputs":[{"name":"self"},{"name":"streamtype"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",99,{"inputs":[{"name":"self"},{"name":"streamtype"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",99,{"inputs":[{"name":"self"},{"name":"streamtype"}],"output":{"name":"streamtype"}}],[11,"bitor_assign","","Adds the set of flags.",99,{"inputs":[{"name":"self"},{"name":"streamtype"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",99,{"inputs":[{"name":"self"},{"name":"streamtype"}],"output":{"name":"streamtype"}}],[11,"bitxor_assign","","Toggles the set of flags.",99,{"inputs":[{"name":"self"},{"name":"streamtype"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",99,{"inputs":[{"name":"self"},{"name":"streamtype"}],"output":{"name":"streamtype"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",99,{"inputs":[{"name":"self"},{"name":"streamtype"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",99,{"inputs":[{"name":"self"},{"name":"streamtype"}],"output":{"name":"streamtype"}}],[11,"sub_assign","","Disables all flags enabled in the set.",99,{"inputs":[{"name":"self"},{"name":"streamtype"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",99,{"inputs":[{"name":"self"}],"output":{"name":"streamtype"}}],[11,"extend","","",99,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",99,{"inputs":[{"name":"t"}],"output":{"name":"streamtype"}}],[11,"static_type","","",99,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",99,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",99,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",99,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[0,"functions","","",null,null],[5,"debug_bin_to_dot_data","gstreamer::functions","",null,{"inputs":[{"name":"p"},{"name":"debuggraphdetails"}],"output":{"name":"string"}}],[5,"debug_bin_to_dot_file","","",null,{"inputs":[{"name":"p"},{"name":"debuggraphdetails"},{"name":"q"}],"output":null}],[5,"debug_bin_to_dot_file_with_ts","","",null,{"inputs":[{"name":"p"},{"name":"debuggraphdetails"},{"name":"q"}],"output":null}],[5,"debug_get_default_threshold","","",null,{"inputs":[],"output":{"name":"debuglevel"}}],[5,"debug_get_stack_trace","","",null,{"inputs":[{"name":"stacktraceflags"}],"output":{"generics":["string"],"name":"option"}}],[5,"debug_is_active","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"debug_is_colored","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"debug_print_stack_trace","","",null,{"inputs":[],"output":null}],[5,"debug_set_active","","",null,{"inputs":[{"name":"bool"}],"output":null}],[5,"debug_set_colored","","",null,{"inputs":[{"name":"bool"}],"output":null}],[5,"debug_set_default_threshold","","",null,{"inputs":[{"name":"debuglevel"}],"output":null}],[5,"debug_set_threshold_for_name","","",null,{"inputs":[{"name":"str"},{"name":"debuglevel"}],"output":null}],[5,"debug_set_threshold_from_string","","",null,{"inputs":[{"name":"str"},{"name":"bool"}],"output":null}],[5,"debug_unset_threshold_for_name","","",null,{"inputs":[{"name":"str"}],"output":null}],[5,"parse_bin_from_description","","",null,{"inputs":[{"name":"str"},{"name":"bool"}],"output":{"generics":["bin","error"],"name":"result"}}],[5,"parse_launch","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["element","error"],"name":"result"}}],[5,"parse_launchv","","",null,null],[5,"update_registry","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"util_get_timestamp","","",null,{"inputs":[],"output":{"name":"clocktime"}}],[5,"version","","",null,null],[5,"version_string","","",null,{"inputs":[],"output":{"name":"string"}}],[11,"eq","gstreamer","",100,{"inputs":[{"name":"self"},{"name":"debugcategory"}],"output":{"name":"bool"}}],[11,"ne","","",100,{"inputs":[{"name":"self"},{"name":"debugcategory"}],"output":{"name":"bool"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"debugcategory"}}],[11,"new","","",100,{"inputs":[{"name":"str"},{"name":"debugcolorflags"},{"name":"p"}],"output":{"name":"debugcategory"}}],[11,"get","","",100,{"inputs":[{"name":"str"}],"output":{"generics":["debugcategory"],"name":"option"}}],[11,"get_threshold","","",100,{"inputs":[{"name":"self"}],"output":{"name":"debuglevel"}}],[11,"set_threshold","","",100,{"inputs":[{"name":"self"},{"name":"debuglevel"}],"output":null}],[11,"reset_threshold","","",100,{"inputs":[{"name":"self"}],"output":null}],[11,"get_color","","",100,{"inputs":[{"name":"self"}],"output":{"name":"debugcolorflags"}}],[11,"get_name","","",100,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"get_description","","",100,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"log","","",100,{"inputs":[{"name":"self"},{"name":"option"},{"name":"debuglevel"},{"name":"str"},{"name":"str"},{"name":"u32"},{"name":"arguments"}],"output":null}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"errormessage"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",101,{"inputs":[{"name":"self"},{"name":"errormessage"}],"output":{"name":"bool"}}],[11,"ne","","",101,{"inputs":[{"name":"self"},{"name":"errormessage"}],"output":{"name":"bool"}}],[11,"new","","",101,{"inputs":[{"name":"t"},{"name":"u"},{"name":"v"},{"name":"str"},{"name":"str"},{"name":"u32"}],"output":{"name":"errormessage"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"description","","",101,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[0,"miniobject","","",null,null],[3,"GstRc","gstreamer::miniobject","",null,null],[8,"MiniObject","","",null,null],[16,"GstType","","",102,null],[11,"as_ptr","","",102,null],[11,"as_mut_ptr","","",102,null],[11,"from_ptr","","",102,null],[11,"from_mut_ptr","","",102,null],[11,"copy","","",102,{"inputs":[{"name":"self"}],"output":{"name":"gstrc"}}],[11,"from_glib_none","","",103,null],[11,"from_glib_full","","",103,null],[11,"from_glib_borrow","","",103,null],[11,"make_mut","","",103,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","",103,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_writable","","",103,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_ptr","","",103,null],[11,"deref","","",103,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","","",103,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"borrow","","",103,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"gstrc"}}],[11,"drop","","",103,{"inputs":[{"name":"self"}],"output":null}],[11,"eq","","",103,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_glib_none","","",103,{"inputs":[{"name":"self"}],"output":{"name":"stash"}}],[11,"to_glib_full","","",103,null],[11,"to_glib_none","","",103,{"inputs":[{"name":"self"}],"output":{"name":"stash"}}],[11,"to_glib_full","","",103,null],[11,"to_glib_none_mut","","",103,{"inputs":[{"name":"self"}],"output":{"name":"stashmut"}}],[11,"to_glib_none_from_slice","","",103,null],[11,"to_glib_container_from_slice","","",103,null],[11,"to_glib_full_from_slice","","",103,null],[11,"to_glib_none_from_slice","","",103,null],[11,"to_glib_container_from_slice","","",103,null],[11,"to_glib_full_from_slice","","",103,null],[11,"from_glib_none","","",103,null],[11,"from_glib_none","","",103,null],[11,"from_glib_full","","",103,null],[11,"from_glib_full","","",103,null],[11,"from_glib_borrow","","",103,null],[11,"from_glib_borrow","","",103,null],[11,"from_glib_none_num_as_vec","","",103,null],[11,"from_glib_container_num_as_vec","","",103,null],[11,"from_glib_full_num_as_vec","","",103,null],[11,"from_glib_none_as_vec","","",103,null],[11,"from_glib_container_as_vec","","",103,null],[11,"from_glib_full_as_vec","","",103,null],[11,"from_glib_none_num_as_vec","","",103,null],[11,"from_glib_container_num_as_vec","","",103,null],[11,"from_glib_full_num_as_vec","","",103,null],[11,"from_glib_none_as_vec","","",103,null],[11,"from_glib_container_as_vec","","",103,null],[11,"from_glib_full_as_vec","","",103,null],[11,"static_type","","",103,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",103,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"set_value","","",103,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"set_value_optional","","",103,{"inputs":[{"name":"value"},{"name":"option"}],"output":null}],[0,"message","gstreamer","",null,null],[3,"MessageRef","gstreamer::message","",null,null],[3,"Eos","","",null,null],[3,"Error","","",null,null],[3,"Warning","","",null,null],[3,"Info","","",null,null],[3,"Tag","","",null,null],[3,"Buffering","","",null,null],[3,"StateChanged","","",null,null],[3,"StateDirty","","",null,null],[3,"StepDone","","",null,null],[3,"ClockProvide","","",null,null],[3,"ClockLost","","",null,null],[3,"NewClock","","",null,null],[3,"StructureChange","","",null,null],[3,"StreamStatus","","",null,null],[3,"Application","","",null,null],[3,"Element","","",null,null],[3,"SegmentStart","","",null,null],[3,"SegmentDone","","",null,null],[3,"DurationChanged","","",null,null],[3,"Latency","","",null,null],[3,"AsyncStart","","",null,null],[3,"AsyncDone","","",null,null],[3,"RequestState","","",null,null],[3,"StepStart","","",null,null],[3,"Qos","","",null,null],[3,"Progress","","",null,null],[3,"Toc","","",null,null],[3,"ResetTime","","",null,null],[3,"StreamStart","","",null,null],[3,"NeedContext","","",null,null],[3,"HaveContext","","",null,null],[3,"DeviceAdded","","",null,null],[3,"DeviceRemoved","","",null,null],[3,"PropertyNotify","","",null,null],[3,"StreamCollection","","",null,null],[3,"StreamsSelected","","",null,null],[3,"Redirect","","",null,null],[3,"EosBuilder","","",null,null],[3,"ErrorBuilder","","",null,null],[3,"WarningBuilder","","",null,null],[3,"InfoBuilder","","",null,null],[3,"TagBuilder","","",null,null],[3,"BufferingBuilder","","",null,null],[3,"StateChangedBuilder","","",null,null],[3,"StateDirtyBuilder","","",null,null],[3,"StepDoneBuilder","","",null,null],[3,"ClockProvideBuilder","","",null,null],[3,"ClockLostBuilder","","",null,null],[3,"NewClockBuilder","","",null,null],[3,"StructureChangeBuilder","","",null,null],[3,"StreamStatusBuilder","","",null,null],[3,"ApplicationBuilder","","",null,null],[3,"ElementBuilder","","",null,null],[3,"SegmentStartBuilder","","",null,null],[3,"SegmentDoneBuilder","","",null,null],[3,"DurationChangedBuilder","","",null,null],[3,"LatencyBuilder","","",null,null],[3,"AsyncStartBuilder","","",null,null],[3,"AsyncDoneBuilder","","",null,null],[3,"RequestStateBuilder","","",null,null],[3,"StepStartBuilder","","",null,null],[3,"QosBuilder","","",null,null],[3,"ProgressBuilder","","",null,null],[3,"TocBuilder","","",null,null],[3,"ResetTimeBuilder","","",null,null],[3,"StreamStartBuilder","","",null,null],[3,"NeedContextBuilder","","",null,null],[3,"HaveContextBuilder","","",null,null],[3,"DeviceAddedBuilder","","",null,null],[3,"DeviceRemovedBuilder","","",null,null],[3,"PropertyNotifyBuilder","","",null,null],[3,"StreamCollectionBuilder","","",null,null],[3,"StreamsSelectedBuilder","","",null,null],[3,"RedirectBuilder","","",null,null],[4,"MessageView","","",null,null],[13,"Eos","","",104,null],[13,"Error","","",104,null],[13,"Warning","","",104,null],[13,"Info","","",104,null],[13,"Tag","","",104,null],[13,"Buffering","","",104,null],[13,"StateChanged","","",104,null],[13,"StateDirty","","",104,null],[13,"StepDone","","",104,null],[13,"ClockProvide","","",104,null],[13,"ClockLost","","",104,null],[13,"NewClock","","",104,null],[13,"StructureChange","","",104,null],[13,"StreamStatus","","",104,null],[13,"Application","","",104,null],[13,"Element","","",104,null],[13,"SegmentStart","","",104,null],[13,"SegmentDone","","",104,null],[13,"DurationChanged","","",104,null],[13,"Latency","","",104,null],[13,"AsyncStart","","",104,null],[13,"AsyncDone","","",104,null],[13,"RequestState","","",104,null],[13,"StepStart","","",104,null],[13,"Qos","","",104,null],[13,"Progress","","",104,null],[13,"Toc","","",104,null],[13,"ResetTime","","",104,null],[13,"StreamStart","","",104,null],[13,"NeedContext","","",104,null],[13,"HaveContext","","",104,null],[13,"DeviceAdded","","",104,null],[13,"DeviceRemoved","","",104,null],[13,"PropertyNotify","","",104,null],[13,"StreamCollection","","",104,null],[13,"StreamsSelected","","",104,null],[13,"Redirect","","",104,null],[13,"Other","","",104,null],[13,"__NonExhaustive","","",104,null],[6,"Message","","",null,null],[8,"MessageErrorDomain","","",null,null],[11,"get_src","","",105,{"inputs":[{"name":"self"}],"output":{"generics":["object"],"name":"option"}}],[11,"get_seqnum","","",105,{"inputs":[{"name":"self"}],"output":{"name":"seqnum"}}],[11,"get_structure","","",105,{"inputs":[{"name":"self"}],"output":{"generics":["structureref"],"name":"option"}}],[11,"view","","",105,{"inputs":[{"name":"self"}],"output":{"name":"messageview"}}],[11,"new_eos","gstreamer::miniobject","",103,{"inputs":[],"output":{"name":"eosbuilder"}}],[11,"new_error","","",103,{"inputs":[{"name":"t"},{"name":"str"}],"output":{"name":"errorbuilder"}}],[11,"new_warning","","",103,{"inputs":[{"name":"t"},{"name":"str"}],"output":{"name":"warningbuilder"}}],[11,"new_info","","",103,{"inputs":[{"name":"t"},{"name":"str"}],"output":{"name":"infobuilder"}}],[11,"new_tag","","",103,{"inputs":[{"name":"taglist"}],"output":{"name":"tagbuilder"}}],[11,"new_buffering","","",103,{"inputs":[{"name":"i32"}],"output":{"name":"bufferingbuilder"}}],[11,"new_state_changed","","",103,{"inputs":[{"name":"state"},{"name":"state"},{"name":"state"}],"output":{"name":"statechangedbuilder"}}],[11,"new_state_dirty","","",103,{"inputs":[],"output":{"name":"statedirtybuilder"}}],[11,"new_step_done","","",103,{"inputs":[{"name":"v"},{"name":"f64"},{"name":"bool"},{"name":"bool"},{"name":"v"},{"name":"bool"}],"output":{"name":"stepdonebuilder"}}],[11,"new_clock_provide","","",103,{"inputs":[{"name":"clock"},{"name":"bool"}],"output":{"name":"clockprovidebuilder"}}],[11,"new_clock_lost","","",103,{"inputs":[{"name":"clock"}],"output":{"name":"clocklostbuilder"}}],[11,"new_new_clock","","",103,{"inputs":[{"name":"clock"}],"output":{"name":"newclockbuilder"}}],[11,"new_structure_change","","",103,{"inputs":[{"name":"structurechangetype"},{"name":"element"},{"name":"bool"}],"output":{"name":"structurechangebuilder"}}],[11,"new_stream_status","","",103,{"inputs":[{"name":"streamstatustype"},{"name":"element"}],"output":{"name":"streamstatusbuilder"}}],[11,"new_application","","",103,{"inputs":[{"name":"structure"}],"output":{"name":"applicationbuilder"}}],[11,"new_element","","",103,{"inputs":[{"name":"structure"}],"output":{"name":"elementbuilder"}}],[11,"new_segment_start","","",103,{"inputs":[{"name":"v"}],"output":{"name":"segmentstartbuilder"}}],[11,"new_segment_done","","",103,{"inputs":[{"name":"v"}],"output":{"name":"segmentdonebuilder"}}],[11,"new_duration_changed","","",103,{"inputs":[],"output":{"name":"durationchangedbuilder"}}],[11,"new_latency","","",103,{"inputs":[],"output":{"name":"latencybuilder"}}],[11,"new_async_start","","",103,{"inputs":[],"output":{"name":"asyncstartbuilder"}}],[11,"new_async_done","","",103,{"inputs":[{"name":"clocktime"}],"output":{"name":"asyncdonebuilder"}}],[11,"new_request_state","","",103,{"inputs":[{"name":"state"}],"output":{"name":"requeststatebuilder"}}],[11,"new_step_start","","",103,{"inputs":[{"name":"bool"},{"name":"v"},{"name":"f64"},{"name":"bool"},{"name":"bool"}],"output":{"name":"stepstartbuilder"}}],[11,"new_qos_builder","","",103,{"inputs":[{"name":"bool"},{"name":"clocktime"},{"name":"clocktime"},{"name":"clocktime"},{"name":"clocktime"}],"output":{"name":"qosbuilder"}}],[11,"new_progress","","",103,{"inputs":[{"name":"progresstype"},{"name":"str"},{"name":"str"}],"output":{"name":"progressbuilder"}}],[11,"new_toc","","",103,{"inputs":[{"name":"toc"},{"name":"bool"}],"output":{"name":"tocbuilder"}}],[11,"new_reset_time","","",103,{"inputs":[{"name":"clocktime"}],"output":{"name":"resettimebuilder"}}],[11,"new_stream_start","","",103,{"inputs":[],"output":{"name":"streamstartbuilder"}}],[11,"new_need_context","","",103,{"inputs":[{"name":"str"}],"output":{"name":"needcontextbuilder"}}],[11,"new_have_context","","",103,{"inputs":[{"name":"context"}],"output":{"name":"havecontextbuilder"}}],[11,"new_device_added","","",103,{"inputs":[{"name":"device"}],"output":{"name":"deviceaddedbuilder"}}],[11,"new_device_removed","","",103,{"inputs":[{"name":"device"}],"output":{"name":"deviceremovedbuilder"}}],[11,"new_property_notify","","",103,{"inputs":[{"name":"str"}],"output":{"name":"propertynotifybuilder"}}],[11,"new_stream_collection","","",103,{"inputs":[{"name":"streamcollection"}],"output":{"name":"streamcollectionbuilder"}}],[11,"new_streams_selected","","",103,{"inputs":[{"name":"streamcollection"}],"output":{"name":"streamsselectedbuilder"}}],[11,"new_redirect","","",103,{"inputs":[{"name":"str"}],"output":{"name":"redirectbuilder"}}],[11,"static_type","gstreamer::message","",105,{"inputs":[],"output":{"name":"type"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_owned","","",105,{"inputs":[{"name":"self"}],"output":{"generics":["messageref"],"name":"gstrc"}}],[11,"get_error","","",106,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"get_debug","","",106,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"get_details","","",106,{"inputs":[{"name":"self"}],"output":{"generics":["structureref"],"name":"option"}}],[11,"get_error","","",107,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"get_debug","","",107,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"get_details","","",107,{"inputs":[{"name":"self"}],"output":{"generics":["structureref"],"name":"option"}}],[11,"get_error","","",108,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"get_debug","","",108,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"get_details","","",108,{"inputs":[{"name":"self"}],"output":{"generics":["structureref"],"name":"option"}}],[11,"get_tags","","",109,{"inputs":[{"name":"self"}],"output":{"name":"taglist"}}],[11,"get_percent","","",110,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_buffering_stats","","",110,null],[11,"get_old","","",111,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"get_current","","",111,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"get_pending","","",111,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"get","","",112,null],[11,"get_clock","","",113,{"inputs":[{"name":"self"}],"output":{"generics":["clock"],"name":"option"}}],[11,"get_ready","","",113,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_clock","","",114,{"inputs":[{"name":"self"}],"output":{"generics":["clock"],"name":"option"}}],[11,"get_clock","","",115,{"inputs":[{"name":"self"}],"output":{"generics":["clock"],"name":"option"}}],[11,"get","","",116,null],[11,"get","","",117,null],[11,"get_stream_status_object","","",117,{"inputs":[{"name":"self"}],"output":{"generics":["value"],"name":"option"}}],[11,"get","","",118,{"inputs":[{"name":"self"}],"output":{"name":"genericformattedvalue"}}],[11,"get","","",119,{"inputs":[{"name":"self"}],"output":{"name":"genericformattedvalue"}}],[11,"get_running_time","","",120,{"inputs":[{"name":"self"}],"output":{"name":"clocktime"}}],[11,"get_requested_state","","",121,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"get","","",122,null],[11,"get","","",123,null],[11,"get_values","","",123,null],[11,"get_stats","","",123,null],[11,"get","","",124,null],[11,"get_toc","","",125,null],[11,"get_running_time","","",126,{"inputs":[{"name":"self"}],"output":{"name":"clocktime"}}],[11,"get_group_id","","",127,{"inputs":[{"name":"self"}],"output":{"generics":["groupid"],"name":"option"}}],[11,"get_context_type","","",128,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"get_context","","",129,{"inputs":[{"name":"self"}],"output":{"name":"context"}}],[11,"get_device","","",130,{"inputs":[{"name":"self"}],"output":{"name":"device"}}],[11,"get_device","","",131,{"inputs":[{"name":"self"}],"output":{"name":"device"}}],[11,"get","","",132,null],[11,"get_stream_collection","","",133,{"inputs":[{"name":"self"}],"output":{"name":"streamcollection"}}],[11,"get_stream_collection","","",134,{"inputs":[{"name":"self"}],"output":{"name":"streamcollection"}}],[11,"get_streams","","",134,{"inputs":[{"name":"self"}],"output":{"generics":["stream"],"name":"vec"}}],[11,"get_entries","","",135,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"src","","",136,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"seqnum","","",136,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"self"}}],[11,"other_fields","","",136,null],[11,"build","","",136,{"inputs":[{"name":"self"}],"output":{"name":"message"}}],[11,"debug","","",137,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"details","","",137,{"inputs":[{"name":"self"},{"name":"structure"}],"output":{"name":"self"}}],[11,"src","","",137,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"seqnum","","",137,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"self"}}],[11,"other_fields","","",137,null],[11,"build","","",137,{"inputs":[{"name":"self"}],"output":{"name":"message"}}],[11,"debug","","",138,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"details","","",138,{"inputs":[{"name":"self"},{"name":"structure"}],"output":{"name":"self"}}],[11,"src","","",138,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"seqnum","","",138,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"self"}}],[11,"other_fields","","",138,null],[11,"build","","",138,{"inputs":[{"name":"self"}],"output":{"name":"message"}}],[11,"debug","","",139,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"details","","",139,{"inputs":[{"name":"self"},{"name":"structure"}],"output":{"name":"self"}}],[11,"src","","",139,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"seqnum","","",139,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"self"}}],[11,"other_fields","","",139,null],[11,"build","","",139,{"inputs":[{"name":"self"}],"output":{"name":"message"}}],[11,"src","","",140,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"seqnum","","",140,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"self"}}],[11,"other_fields","","",140,null],[11,"build","","",140,{"inputs":[{"name":"self"}],"output":{"name":"message"}}],[11,"stats","","",141,{"inputs":[{"name":"self"},{"name":"bufferingmode"},{"name":"i32"},{"name":"i32"},{"name":"i64"}],"output":{"name":"self"}}],[11,"src","","",141,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"seqnum","","",141,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"self"}}],[11,"other_fields","","",141,null],[11,"build","","",141,{"inputs":[{"name":"self"}],"output":{"name":"message"}}],[11,"src","","",142,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"seqnum","","",142,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"self"}}],[11,"other_fields","","",142,null],[11,"build","","",142,{"inputs":[{"name":"self"}],"output":{"name":"message"}}],[11,"src","","",143,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"seqnum","","",143,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"self"}}],[11,"other_fields","","",143,null],[11,"build","","",143,{"inputs":[{"name":"self"}],"output":{"name":"message"}}],[11,"src","","",144,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"seqnum","","",144,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"self"}}],[11,"other_fields","","",144,null],[11,"build","","",144,{"inputs":[{"name":"self"}],"output":{"name":"message"}}],[11,"src","","",145,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"seqnum","","",145,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"self"}}],[11,"other_fields","","",145,null],[11,"build","","",145,{"inputs":[{"name":"self"}],"output":{"name":"message"}}],[11,"src","","",146,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"seqnum","","",146,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"self"}}],[11,"other_fields","","",146,null],[11,"build","","",146,{"inputs":[{"name":"self"}],"output":{"name":"message"}}],[11,"src","","",147,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"seqnum","","",147,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"self"}}],[11,"other_fields","","",147,null],[11,"build","","",147,{"inputs":[{"name":"self"}],"output":{"name":"message"}}],[11,"src","","",148,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"seqnum","","",148,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"self"}}],[11,"other_fields","","",148,null],[11,"build","","",148,{"inputs":[{"name":"self"}],"output":{"name":"message"}}],[11,"status_object","","",149,{"inputs":[{"name":"self"},{"name":"tosendvalue"}],"output":{"name":"self"}}],[11,"src","","",149,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"seqnum","","",149,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"self"}}],[11,"other_fields","","",149,null],[11,"build","","",149,{"inputs":[{"name":"self"}],"output":{"name":"message"}}],[11,"src","","",150,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"seqnum","","",150,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"self"}}],[11,"other_fields","","",150,null],[11,"build","","",150,{"inputs":[{"name":"self"}],"output":{"name":"message"}}],[11,"src","","",151,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"seqnum","","",151,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"self"}}],[11,"other_fields","","",151,null],[11,"build","","",151,{"inputs":[{"name":"self"}],"output":{"name":"message"}}],[11,"src","","",152,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"seqnum","","",152,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"self"}}],[11,"other_fields","","",152,null],[11,"build","","",152,{"inputs":[{"name":"self"}],"output":{"name":"message"}}],[11,"src","","",153,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"seqnum","","",153,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"self"}}],[11,"other_fields","","",153,null],[11,"build","","",153,{"inputs":[{"name":"self"}],"output":{"name":"message"}}],[11,"src","","",154,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"seqnum","","",154,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"self"}}],[11,"other_fields","","",154,null],[11,"build","","",154,{"inputs":[{"name":"self"}],"output":{"name":"message"}}],[11,"src","","",155,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"seqnum","","",155,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"self"}}],[11,"other_fields","","",155,null],[11,"build","","",155,{"inputs":[{"name":"self"}],"output":{"name":"message"}}],[11,"src","","",156,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"seqnum","","",156,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"self"}}],[11,"other_fields","","",156,null],[11,"build","","",156,{"inputs":[{"name":"self"}],"output":{"name":"message"}}],[11,"src","","",157,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"seqnum","","",157,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"self"}}],[11,"other_fields","","",157,null],[11,"build","","",157,{"inputs":[{"name":"self"}],"output":{"name":"message"}}],[11,"src","","",158,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"seqnum","","",158,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"self"}}],[11,"other_fields","","",158,null],[11,"build","","",158,{"inputs":[{"name":"self"}],"output":{"name":"message"}}],[11,"src","","",159,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"seqnum","","",159,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"self"}}],[11,"other_fields","","",159,null],[11,"build","","",159,{"inputs":[{"name":"self"}],"output":{"name":"message"}}],[11,"values","","",160,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"f64"},{"name":"i32"}],"output":{"name":"self"}}],[11,"stats","","",160,{"inputs":[{"name":"self"},{"name":"v"},{"name":"v"}],"output":{"name":"self"}}],[11,"src","","",160,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"seqnum","","",160,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"self"}}],[11,"other_fields","","",160,null],[11,"build","","",160,{"inputs":[{"name":"self"}],"output":{"name":"message"}}],[11,"src","","",161,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"seqnum","","",161,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"self"}}],[11,"other_fields","","",161,null],[11,"build","","",161,{"inputs":[{"name":"self"}],"output":{"name":"message"}}],[11,"src","","",162,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"seqnum","","",162,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"self"}}],[11,"other_fields","","",162,null],[11,"build","","",162,{"inputs":[{"name":"self"}],"output":{"name":"message"}}],[11,"src","","",163,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"seqnum","","",163,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"self"}}],[11,"other_fields","","",163,null],[11,"build","","",163,{"inputs":[{"name":"self"}],"output":{"name":"message"}}],[11,"group_id","","",164,{"inputs":[{"name":"self"},{"name":"groupid"}],"output":{"name":"self"}}],[11,"src","","",164,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"seqnum","","",164,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"self"}}],[11,"other_fields","","",164,null],[11,"build","","",164,{"inputs":[{"name":"self"}],"output":{"name":"message"}}],[11,"src","","",165,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"seqnum","","",165,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"self"}}],[11,"other_fields","","",165,null],[11,"build","","",165,{"inputs":[{"name":"self"}],"output":{"name":"message"}}],[11,"src","","",166,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"seqnum","","",166,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"self"}}],[11,"other_fields","","",166,null],[11,"build","","",166,{"inputs":[{"name":"self"}],"output":{"name":"message"}}],[11,"src","","",167,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"seqnum","","",167,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"self"}}],[11,"other_fields","","",167,null],[11,"build","","",167,{"inputs":[{"name":"self"}],"output":{"name":"message"}}],[11,"src","","",168,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"seqnum","","",168,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"self"}}],[11,"other_fields","","",168,null],[11,"build","","",168,{"inputs":[{"name":"self"}],"output":{"name":"message"}}],[11,"value","","",169,{"inputs":[{"name":"self"},{"name":"tosendvalue"}],"output":{"name":"self"}}],[11,"src","","",169,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"seqnum","","",169,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"self"}}],[11,"other_fields","","",169,null],[11,"build","","",169,{"inputs":[{"name":"self"}],"output":{"name":"message"}}],[11,"src","","",170,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"seqnum","","",170,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"self"}}],[11,"other_fields","","",170,null],[11,"build","","",170,{"inputs":[{"name":"self"}],"output":{"name":"message"}}],[11,"streams","","",171,null],[11,"src","","",171,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"seqnum","","",171,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"self"}}],[11,"other_fields","","",171,null],[11,"build","","",171,{"inputs":[{"name":"self"}],"output":{"name":"message"}}],[11,"tag_list","","",172,{"inputs":[{"name":"self"},{"name":"taglist"}],"output":{"name":"self"}}],[11,"entry_struct","","",172,{"inputs":[{"name":"self"},{"name":"structure"}],"output":{"name":"self"}}],[11,"entries","","",172,null],[11,"src","","",172,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"seqnum","","",172,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"self"}}],[11,"other_fields","","",172,null],[11,"build","","",172,{"inputs":[{"name":"self"}],"output":{"name":"message"}}],[0,"structure","gstreamer","",null,null],[3,"Structure","gstreamer::structure","A `Structure` is a collection of key/value pairs. The keys are expressed as GQuarks and the values can be of any GType.",null,null],[3,"StructureRef","","",null,null],[3,"FieldIterator","","",null,null],[3,"Iter","","",null,null],[3,"Builder","","",null,null],[11,"builder","","",173,{"inputs":[{"name":"str"}],"output":{"name":"builder"}}],[11,"new_empty","","Creates a new, empty `Structure` with the given `name`.",173,{"inputs":[{"name":"str"}],"output":{"name":"structure"}}],[11,"new","","Creates a new `Structure` with the given name. Parses the list of variable arguments and sets fields to the values listed. Variable arguments should be passed as field name, field type, and value. Last variable argument should be `None`.",173,null],[11,"from_string","","Creates a `Structure` from a string representation. If end is not `None`, a pointer to the place inside the given string where parsing ended will be returned.",173,{"inputs":[{"name":"str"}],"output":{"generics":["structure"],"name":"option"}}],[11,"into_ptr","","",173,null],[11,"deref","","",173,{"inputs":[{"name":"self"}],"output":{"name":"structureref"}}],[11,"deref_mut","","",173,{"inputs":[{"name":"self"}],"output":{"name":"structureref"}}],[11,"as_ref","","",173,{"inputs":[{"name":"self"}],"output":{"name":"structureref"}}],[11,"as_mut","","",173,{"inputs":[{"name":"self"}],"output":{"name":"structureref"}}],[11,"clone","","",173,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drop","","",173,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",173,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",173,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",173,{"inputs":[{"name":"self"},{"name":"structure"}],"output":{"name":"bool"}}],[11,"eq","","",173,{"inputs":[{"name":"self"},{"name":"structureref"}],"output":{"name":"bool"}}],[11,"from_str","","",173,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"borrow","","",173,{"inputs":[{"name":"self"}],"output":{"name":"structureref"}}],[11,"borrow_mut","","",173,{"inputs":[{"name":"self"}],"output":{"name":"structureref"}}],[11,"to_owned","","",174,{"inputs":[{"name":"self"}],"output":{"name":"structure"}}],[11,"static_type","","",173,{"inputs":[],"output":{"name":"type"}}],[11,"to_glib_none","","",173,{"inputs":[{"name":"self"}],"output":{"name":"stash"}}],[11,"to_glib_full","","",173,null],[11,"to_glib_none","","",173,{"inputs":[{"name":"self"}],"output":{"name":"stash"}}],[11,"to_glib_full","","",173,null],[11,"to_glib_none_mut","","",173,{"inputs":[{"name":"self"}],"output":{"name":"stashmut"}}],[11,"from_glib_none","","",173,null],[11,"from_glib_none","","",173,null],[11,"from_glib_full","","",173,null],[11,"from_glib_full","","",173,null],[11,"from_value_optional","","",173,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"set_value","","",173,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"set_value_optional","","",173,{"inputs":[{"name":"value"},{"name":"option"}],"output":null}],[11,"from_glib_borrow","","",174,null],[11,"from_glib_borrow_mut","","",174,null],[11,"as_ptr","","",174,null],[11,"as_mut_ptr","","",174,null],[11,"to_string","","",174,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get","","",174,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_value","","",174,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["sendvalue"],"name":"option"}}],[11,"set","","",174,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":null}],[11,"set_value","","",174,{"inputs":[{"name":"self"},{"name":"str"},{"name":"sendvalue"}],"output":null}],[11,"get_name","","",174,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"set_name","","",174,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"has_field","","",174,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"has_field_with_type","","",174,{"inputs":[{"name":"self"},{"name":"str"},{"name":"type"}],"output":{"name":"bool"}}],[11,"remove_field","","",174,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"remove_fields","","",174,null],[11,"remove_all_fields","","",174,{"inputs":[{"name":"self"}],"output":null}],[11,"fields","","",174,{"inputs":[{"name":"self"}],"output":{"name":"fielditerator"}}],[11,"iter","","",174,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"get_nth_field_name","","",174,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["str"],"name":"option"}}],[11,"n_fields","","",174,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"can_intersect","","",174,{"inputs":[{"name":"self"},{"name":"structureref"}],"output":{"name":"bool"}}],[11,"intersect","","",174,{"inputs":[{"name":"self"},{"name":"structureref"}],"output":{"generics":["structure"],"name":"option"}}],[11,"is_subset","","",174,{"inputs":[{"name":"self"},{"name":"structureref"}],"output":{"name":"bool"}}],[11,"fixate","","",174,{"inputs":[{"name":"self"}],"output":null}],[11,"fixate_field","","",174,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"fixate_field_bool","","",174,{"inputs":[{"name":"self"},{"name":"str"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"fixate_field_str","","",174,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"bool"}}],[11,"fixate_field_nearest_double","","",174,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f64"}],"output":{"name":"bool"}}],[11,"fixate_field_nearest_fraction","","",174,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"bool"}}],[11,"fixate_field_nearest_int","","",174,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"fmt","","",174,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",174,{"inputs":[{"name":"self"},{"name":"structureref"}],"output":{"name":"bool"}}],[11,"next","","",175,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"size_hint","","",175,null],[11,"next_back","","",175,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",176,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",176,null],[11,"next_back","","",176,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"field","","",177,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"self"}}],[11,"build","","",177,{"inputs":[{"name":"self"}],"output":{"name":"structure"}}],[0,"caps","gstreamer","",null,null],[3,"CapsRef","gstreamer::caps","",null,null],[3,"Iter","","",null,null],[3,"IterMut","","",null,null],[3,"Builder","","",null,null],[6,"Caps","","",null,null],[11,"builder","gstreamer::miniobject","",103,{"inputs":[{"name":"str"}],"output":{"name":"builder"}}],[11,"new_empty","","",103,{"inputs":[],"output":{"name":"self"}}],[11,"new_any","","",103,{"inputs":[],"output":{"name":"self"}}],[11,"new_simple","","",103,null],[11,"from_string","","",103,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"fixate","","",103,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"merge","","",103,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"merge_structure","","",103,{"inputs":[{"name":"self"},{"name":"structure"}],"output":{"name":"self"}}],[11,"normalize","","",103,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"simplify","","",103,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"subtract","","",103,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"truncate","","",103,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"from_str","gstreamer::caps","",178,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"set_simple","","",179,null],[11,"to_string","","",179,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_structure","","",179,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["structureref"],"name":"option"}}],[11,"get_mut_structure","","",179,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["structureref"],"name":"option"}}],[11,"get_size","","",179,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"iter","","",179,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","",179,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"append_structure","","",179,{"inputs":[{"name":"self"},{"name":"structure"}],"output":null}],[11,"remove_structure","","",179,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"append","","",179,{"inputs":[{"name":"self"},{"name":"caps"}],"output":null}],[11,"can_intersect","","",179,{"inputs":[{"name":"self"},{"name":"caps"}],"output":{"name":"bool"}}],[11,"intersect","","",179,{"inputs":[{"name":"self"},{"name":"caps"}],"output":{"name":"caps"}}],[11,"intersect_with_mode","","",179,{"inputs":[{"name":"self"},{"name":"caps"},{"name":"capsintersectmode"}],"output":{"name":"caps"}}],[11,"is_always_compatible","","",179,{"inputs":[{"name":"self"},{"name":"caps"}],"output":{"name":"bool"}}],[11,"is_any","","",179,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","",179,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_fixed","","",179,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_equal_fixed","","",179,{"inputs":[{"name":"self"},{"name":"caps"}],"output":{"name":"bool"}}],[11,"is_strictly_equal","","",179,{"inputs":[{"name":"self"},{"name":"caps"}],"output":{"name":"bool"}}],[11,"is_subset","","",179,{"inputs":[{"name":"self"},{"name":"caps"}],"output":{"name":"bool"}}],[11,"is_subset_structure","","",179,{"inputs":[{"name":"self"},{"name":"structureref"}],"output":{"name":"bool"}}],[11,"static_type","","",179,{"inputs":[],"output":{"name":"type"}}],[11,"next","","",180,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",180,null],[11,"next_back","","",180,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",181,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",181,null],[11,"next_back","","",181,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",179,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",179,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",179,{"inputs":[{"name":"self"},{"name":"capsref"}],"output":{"name":"bool"}}],[11,"to_owned","","",179,{"inputs":[{"name":"self"}],"output":{"generics":["capsref"],"name":"gstrc"}}],[11,"field","","",182,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"self"}}],[11,"build","","",182,{"inputs":[{"name":"self"}],"output":{"name":"caps"}}],[0,"tags","gstreamer","",null,null],[3,"Title","gstreamer::tags","",null,null],[3,"TitleSortname","","",null,null],[3,"Artist","","",null,null],[3,"ArtistSortname","","",null,null],[3,"Album","","",null,null],[3,"AlbumSortname","","",null,null],[3,"AlbumArtist","","",null,null],[3,"AlbumArtistSortname","","",null,null],[3,"Date","","",null,null],[3,"DateTime","","",null,null],[3,"Genre","","",null,null],[3,"Comment","","",null,null],[3,"ExtendedComment","","",null,null],[3,"TrackNumber","","",null,null],[3,"TrackCount","","",null,null],[3,"AlbumVolumeNumber","","",null,null],[3,"AlbumVolumeCount","","",null,null],[3,"Location","","",null,null],[3,"Homepage","","",null,null],[3,"Description","","",null,null],[3,"Version","","",null,null],[3,"ISRC","","",null,null],[3,"Organization","","",null,null],[3,"Copyright","","",null,null],[3,"CopyrightUri","","",null,null],[3,"EncodedBy","","",null,null],[3,"Composer","","",null,null],[3,"Conductor","","",null,null],[3,"Contact","","",null,null],[3,"License","","",null,null],[3,"LicenseUri","","",null,null],[3,"Performer","","",null,null],[3,"Duration","","",null,null],[3,"Codec","","",null,null],[3,"VideoCodec","","",null,null],[3,"AudioCodec","","",null,null],[3,"SubtitleCodec","","",null,null],[3,"ContainerFormat","","",null,null],[3,"Bitrate","","",null,null],[3,"NominalBitrate","","",null,null],[3,"MinimumBitrate","","",null,null],[3,"MaximumBitrate","","",null,null],[3,"Serial","","",null,null],[3,"Encoder","","",null,null],[3,"EncoderVersion","","",null,null],[3,"TrackGain","","",null,null],[3,"TrackPeak","","",null,null],[3,"AlbumGain","","",null,null],[3,"AlbumPeak","","",null,null],[3,"ReferenceLevel","","",null,null],[3,"LanguageCode","","",null,null],[3,"LanguageName","","",null,null],[3,"Image","","",null,null],[3,"PreviewImage","","",null,null],[3,"Attachment","","",null,null],[3,"BeatsPerMinute","","",null,null],[3,"Keywords","","",null,null],[3,"GeoLocationName","","",null,null],[3,"GeoLocationLatitude","","",null,null],[3,"GeoLocationLongitute","","",null,null],[3,"GeoLocationElevation","","",null,null],[3,"GeoLocationCity","","",null,null],[3,"GeoLocationCountry","","",null,null],[3,"GeoLocationSublocation","","",null,null],[3,"GeoLocationHorizontalError","","",null,null],[3,"GeoLocationMovementDirection","","",null,null],[3,"GeoLocationMovementSpeed","","",null,null],[3,"GeoLocationCaptureDirection","","",null,null],[3,"ShowName","","",null,null],[3,"ShowSortname","","",null,null],[3,"ShowEpisodeNumber","","",null,null],[3,"ShowSeasonNumber","","",null,null],[3,"Lyrics","","",null,null],[3,"ComposerSortname","","",null,null],[3,"Grouping","","",null,null],[3,"UserRating","","",null,null],[3,"DeviceManufacturer","","",null,null],[3,"DeviceModel","","",null,null],[3,"ApplicationName","","",null,null],[3,"ApplicationData","","",null,null],[3,"ImageOrientation","","",null,null],[3,"Publisher","","",null,null],[3,"InterpretedBy","","",null,null],[3,"MidiBaseNote","","",null,null],[3,"PrivateData","","",null,null],[3,"TagListRef","","",null,null],[3,"TagIterator","","",null,null],[6,"TagList","","",null,null],[8,"Tag","","",null,null],[16,"TagType","","",183,null],[10,"tag_name","","",183,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",184,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",185,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",186,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",187,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",188,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",189,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",190,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",191,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",192,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",193,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",194,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",195,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",196,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",197,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",198,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",199,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",200,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",201,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",202,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",203,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",204,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",205,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",206,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",207,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",208,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",209,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",210,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",211,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",212,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",213,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",214,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",215,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",216,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",217,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",218,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",219,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",220,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",221,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",222,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",223,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",224,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",225,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",226,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",227,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",228,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",229,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",230,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",231,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",232,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",233,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",234,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",235,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",236,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",237,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",238,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",239,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",240,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",241,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",242,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",243,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",244,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",245,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",246,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",247,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",248,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",249,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",250,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",251,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",252,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",253,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",254,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",255,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",256,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",257,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",258,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",259,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",260,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",261,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",262,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",263,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",264,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",265,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",266,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",267,{"inputs":[],"output":{"name":"str"}}],[11,"tag_name","","",268,{"inputs":[],"output":{"name":"str"}}],[11,"new","gstreamer::miniobject","",103,{"inputs":[],"output":{"name":"self"}}],[11,"default","","",103,{"inputs":[],"output":{"name":"self"}}],[11,"add","gstreamer::tags","",269,null],[11,"get","","",269,{"inputs":[{"name":"self"}],"output":{"generics":["typedvalue"],"name":"option"}}],[11,"get_index","","",269,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["typedvalue"],"name":"option"}}],[11,"get_size","","",269,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"iter_tag","","",269,{"inputs":[{"name":"self"}],"output":{"name":"tagiterator"}}],[11,"to_string","","",269,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"insert","","",269,{"inputs":[{"name":"self"},{"name":"taglistref"},{"name":"tagmergemode"}],"output":null}],[11,"merge","","",269,{"inputs":[{"name":"self"},{"name":"taglistref"},{"name":"tagmergemode"}],"output":{"name":"taglist"}}],[11,"fmt","","",269,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",269,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",269,{"inputs":[{"name":"self"},{"name":"taglistref"}],"output":{"name":"bool"}}],[11,"to_owned","","",269,{"inputs":[{"name":"self"}],"output":{"generics":["taglistref"],"name":"gstrc"}}],[11,"static_type","","",269,{"inputs":[],"output":{"name":"type"}}],[11,"next","","",270,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",270,null],[11,"next_back","","",270,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"buffer","gstreamer","",null,null],[3,"Readable","gstreamer::buffer","",null,null],[3,"Writable","","",null,null],[3,"BufferRef","","",null,null],[3,"BufferMap","","",null,null],[3,"MappedBuffer","","",null,null],[3,"BUFFER_COPY_METADATA","","",null,null],[3,"BUFFER_COPY_ALL","","",null,null],[6,"Buffer","","",null,null],[11,"new","gstreamer::miniobject","",103,{"inputs":[],"output":{"name":"self"}}],[11,"with_size","","",103,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_mut_slice","","",103,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"from_slice","","",103,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"into_mapped_buffer_readable","","",103,{"inputs":[{"name":"self"}],"output":{"generics":["mappedbuffer"],"name":"result"}}],[11,"into_mapped_buffer_writable","","",103,{"inputs":[{"name":"self"}],"output":{"generics":["mappedbuffer"],"name":"result"}}],[11,"append","","",103,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",103,{"inputs":[],"output":{"name":"self"}}],[11,"map_readable","gstreamer::buffer","",271,{"inputs":[{"name":"self"}],"output":{"generics":["buffermap"],"name":"option"}}],[11,"map_writable","","",271,{"inputs":[{"name":"self"}],"output":{"generics":["buffermap"],"name":"option"}}],[11,"copy_region","","",271,{"inputs":[{"name":"self"},{"name":"buffercopyflags"},{"name":"usize"},{"generics":["usize"],"name":"option"}],"output":{"generics":["buffer"],"name":"option"}}],[11,"copy_into","","",271,{"inputs":[{"name":"self"},{"name":"bufferref"},{"name":"buffercopyflags"},{"name":"usize"},{"generics":["usize"],"name":"option"}],"output":{"generics":["boolerror"],"name":"result"}}],[11,"copy_from_slice","","",271,null],[11,"copy_to_slice","","",271,null],[11,"copy_deep","","",271,{"inputs":[{"name":"self"}],"output":{"generics":["buffer"],"name":"option"}}],[11,"get_size","","",271,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_maxsize","","",271,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_size","","",271,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"get_offset","","",271,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"set_offset","","",271,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"get_offset_end","","",271,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"set_offset_end","","",271,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"get_pts","","",271,{"inputs":[{"name":"self"}],"output":{"name":"clocktime"}}],[11,"set_pts","","",271,{"inputs":[{"name":"self"},{"name":"clocktime"}],"output":null}],[11,"get_dts","","",271,{"inputs":[{"name":"self"}],"output":{"name":"clocktime"}}],[11,"set_dts","","",271,{"inputs":[{"name":"self"},{"name":"clocktime"}],"output":null}],[11,"get_dts_or_pts","","",271,{"inputs":[{"name":"self"}],"output":{"name":"clocktime"}}],[11,"get_duration","","",271,{"inputs":[{"name":"self"}],"output":{"name":"clocktime"}}],[11,"set_duration","","",271,{"inputs":[{"name":"self"},{"name":"clocktime"}],"output":null}],[11,"get_flags","","",271,{"inputs":[{"name":"self"}],"output":{"name":"bufferflags"}}],[11,"set_flags","","",271,{"inputs":[{"name":"self"},{"name":"bufferflags"}],"output":null}],[11,"static_type","","",271,{"inputs":[],"output":{"name":"type"}}],[11,"to_owned","","",271,{"inputs":[{"name":"self"}],"output":{"generics":["bufferref"],"name":"gstrc"}}],[11,"fmt","","",271,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",271,{"inputs":[{"name":"self"},{"name":"bufferref"}],"output":{"name":"bool"}}],[11,"get_size","","",272,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_buffer","","",272,{"inputs":[{"name":"self"}],"output":{"name":"bufferref"}}],[11,"as_slice","","",272,null],[11,"as_mut_slice","","",272,null],[11,"as_ref","","",272,null],[11,"as_mut","","",272,null],[11,"deref","","",272,null],[11,"deref_mut","","",272,null],[11,"fmt","","",272,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",272,{"inputs":[{"name":"self"},{"name":"buffermap"}],"output":{"name":"bool"}}],[11,"drop","","",272,{"inputs":[{"name":"self"}],"output":null}],[11,"as_slice","","",273,null],[11,"get_size","","",273,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_buffer","","",273,{"inputs":[{"name":"self"}],"output":{"name":"bufferref"}}],[11,"into_buffer","","",273,{"inputs":[{"name":"self"}],"output":{"name":"buffer"}}],[11,"as_mut_slice","","",273,null],[11,"as_ref","","",273,null],[11,"as_mut","","",273,null],[11,"deref","","",273,null],[11,"deref_mut","","",273,null],[11,"drop","","",273,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",273,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",273,{"inputs":[{"name":"self"},{"name":"mappedbuffer"}],"output":{"name":"bool"}}],[11,"deref","","",274,{"inputs":[{"name":"self"}],"output":{"name":"buffercopyflags"}}],[11,"initialize","","",274,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",275,{"inputs":[{"name":"self"}],"output":{"name":"buffercopyflags"}}],[11,"initialize","","",275,{"inputs":[{"name":"self"}],"output":null}],[0,"sample","gstreamer","",null,null],[3,"SampleRef","gstreamer::sample","",null,null],[6,"Sample","","",null,null],[11,"new","gstreamer::miniobject","",103,{"inputs":[{"generics":["buffer"],"name":"option"},{"generics":["caps"],"name":"option"},{"generics":["formattedsegment"],"name":"option"},{"generics":["structureref"],"name":"option"}],"output":{"name":"self"}}],[11,"with_buffer_list","","",103,{"inputs":[{"generics":["bufferlist"],"name":"option"},{"generics":["caps"],"name":"option"},{"generics":["formattedsegment"],"name":"option"},{"generics":["structureref"],"name":"option"}],"output":{"name":"self"}}],[11,"get_buffer","gstreamer::sample","",276,{"inputs":[{"name":"self"}],"output":{"generics":["buffer"],"name":"option"}}],[11,"get_buffer_list","","",276,{"inputs":[{"name":"self"}],"output":{"generics":["bufferlist"],"name":"option"}}],[11,"get_caps","","",276,{"inputs":[{"name":"self"}],"output":{"generics":["caps"],"name":"option"}}],[11,"get_segment","","",276,{"inputs":[{"name":"self"}],"output":{"generics":["segment"],"name":"option"}}],[11,"get_info","","",276,{"inputs":[{"name":"self"}],"output":{"generics":["structureref"],"name":"option"}}],[11,"get_structure","","",276,{"inputs":[{"name":"self"}],"output":{"generics":["structureref"],"name":"option"}}],[11,"static_type","","",276,{"inputs":[],"output":{"name":"type"}}],[11,"to_owned","","",276,{"inputs":[{"name":"self"}],"output":{"generics":["sampleref"],"name":"gstrc"}}],[11,"fmt","","",276,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"bufferlist","gstreamer","",null,null],[3,"BufferListRef","gstreamer::bufferlist","",null,null],[3,"Iter","","",null,null],[6,"BufferList","","",null,null],[11,"new","gstreamer::miniobject","",103,{"inputs":[],"output":{"name":"self"}}],[11,"new_sized","","",103,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"insert","gstreamer::bufferlist","",277,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"buffer"}],"output":null}],[11,"add","","",277,{"inputs":[{"name":"self"},{"name":"buffer"}],"output":null}],[11,"copy_deep","","",277,{"inputs":[{"name":"self"}],"output":{"name":"bufferlist"}}],[11,"remove","","",277,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":null}],[11,"get","","",277,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["bufferref"],"name":"option"}}],[11,"len","","",277,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",277,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"iter","","",277,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"default","gstreamer::miniobject","",103,{"inputs":[],"output":{"name":"self"}}],[11,"to_owned","gstreamer::bufferlist","",277,{"inputs":[{"name":"self"}],"output":{"generics":["bufferlistref"],"name":"gstrc"}}],[11,"fmt","","",277,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"static_type","","",277,{"inputs":[],"output":{"name":"type"}}],[11,"next","","",278,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",278,null],[11,"next_back","","",278,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"query","gstreamer","",null,null],[3,"QueryRef","gstreamer::query","",null,null],[3,"Position","","",null,null],[3,"Duration","","",null,null],[3,"Latency","","",null,null],[3,"Jitter","","",null,null],[3,"Rate","","",null,null],[3,"Seeking","","",null,null],[3,"Segment","","",null,null],[3,"Convert","","",null,null],[3,"Formats","","",null,null],[3,"Buffering","","",null,null],[3,"Custom","","",null,null],[3,"Uri","","",null,null],[3,"Allocation","","",null,null],[3,"Scheduling","","",null,null],[3,"AcceptCaps","","",null,null],[3,"Caps","","",null,null],[3,"Drain","","",null,null],[3,"Context","","`Context` is a container object used to store contexts like a device context, a display server connection and similar concepts that should be shared between multiple elements.",null,null],[3,"Other","","",null,null],[4,"QueryView","","",null,null],[13,"Position","","",279,null],[13,"Duration","","",279,null],[13,"Latency","","",279,null],[13,"Jitter","","",279,null],[13,"Rate","","",279,null],[13,"Seeking","","",279,null],[13,"Segment","","",279,null],[13,"Convert","","",279,null],[13,"Formats","","",279,null],[13,"Buffering","","",279,null],[13,"Custom","","",279,null],[13,"Uri","","",279,null],[13,"Allocation","","",279,null],[13,"Scheduling","","",279,null],[13,"AcceptCaps","","",279,null],[13,"Caps","","",279,null],[13,"Drain","","",279,null],[13,"Context","","",279,null],[13,"Other","","",279,null],[13,"__NonExhaustive","","",279,null],[6,"Query","","",null,null],[11,"new_position","gstreamer::miniobject","",103,{"inputs":[{"name":"format"}],"output":{"name":"self"}}],[11,"new_duration","","",103,{"inputs":[{"name":"format"}],"output":{"name":"self"}}],[11,"new_latency","","",103,{"inputs":[],"output":{"name":"self"}}],[11,"new_seeking","","",103,{"inputs":[{"name":"format"}],"output":{"name":"self"}}],[11,"new_segment","","",103,{"inputs":[{"name":"format"}],"output":{"name":"self"}}],[11,"new_convert","","",103,{"inputs":[{"name":"v"},{"name":"format"}],"output":{"name":"self"}}],[11,"new_formats","","",103,{"inputs":[],"output":{"name":"self"}}],[11,"new_buffering","","",103,{"inputs":[{"name":"format"}],"output":{"name":"self"}}],[11,"new_custom","","",103,{"inputs":[{"name":"structure"}],"output":{"name":"self"}}],[11,"new_uri","","",103,{"inputs":[],"output":{"name":"self"}}],[11,"new_scheduling","","",103,{"inputs":[],"output":{"name":"self"}}],[11,"new_accept_caps","","",103,{"inputs":[{"name":"caps"}],"output":{"name":"self"}}],[11,"new_caps","","",103,{"inputs":[{"name":"p"}],"output":{"name":"self"}}],[11,"new_drain","","",103,{"inputs":[],"output":{"name":"self"}}],[11,"new_context","","",103,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"get_structure","gstreamer::query","",280,{"inputs":[{"name":"self"}],"output":{"generics":["structureref"],"name":"option"}}],[11,"get_mut_structure","","",280,{"inputs":[{"name":"self"}],"output":{"name":"structureref"}}],[11,"is_downstream","","",280,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_upstream","","",280,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_serialized","","",280,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"view","","",280,{"inputs":[{"name":"self"}],"output":{"name":"queryview"}}],[11,"view_mut","","",280,{"inputs":[{"name":"self"}],"output":{"name":"queryview"}}],[11,"static_type","","",280,{"inputs":[],"output":{"name":"type"}}],[11,"fmt","","",280,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_owned","","",280,{"inputs":[{"name":"self"}],"output":{"generics":["queryref"],"name":"gstrc"}}],[11,"get_result","","",281,{"inputs":[{"name":"self"}],"output":{"name":"genericformattedvalue"}}],[11,"get_format","","",281,{"inputs":[{"name":"self"}],"output":{"name":"format"}}],[11,"get_query","","",281,{"inputs":[{"name":"self"}],"output":{"name":"queryref"}}],[11,"set","","",281,{"inputs":[{"name":"self"},{"name":"v"}],"output":null}],[11,"get_mut_query","","",281,{"inputs":[{"name":"self"}],"output":{"name":"queryref"}}],[11,"get_result","","",282,{"inputs":[{"name":"self"}],"output":{"name":"genericformattedvalue"}}],[11,"get_format","","",282,{"inputs":[{"name":"self"}],"output":{"name":"format"}}],[11,"get_query","","",282,{"inputs":[{"name":"self"}],"output":{"name":"queryref"}}],[11,"set","","",282,{"inputs":[{"name":"self"},{"name":"v"}],"output":null}],[11,"get_mut_query","","",282,{"inputs":[{"name":"self"}],"output":{"name":"queryref"}}],[11,"get_result","","",283,null],[11,"get_query","","",283,{"inputs":[{"name":"self"}],"output":{"name":"queryref"}}],[11,"set","","",283,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"clocktime"},{"name":"clocktime"}],"output":null}],[11,"get_mut_query","","",283,{"inputs":[{"name":"self"}],"output":{"name":"queryref"}}],[11,"get_query","","",284,{"inputs":[{"name":"self"}],"output":{"name":"queryref"}}],[11,"get_mut_query","","",284,{"inputs":[{"name":"self"}],"output":{"name":"queryref"}}],[11,"get_query","","",285,{"inputs":[{"name":"self"}],"output":{"name":"queryref"}}],[11,"get_mut_query","","",285,{"inputs":[{"name":"self"}],"output":{"name":"queryref"}}],[11,"get_result","","",286,null],[11,"get_format","","",286,{"inputs":[{"name":"self"}],"output":{"name":"format"}}],[11,"get_query","","",286,{"inputs":[{"name":"self"}],"output":{"name":"queryref"}}],[11,"set","","",286,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"v"},{"name":"v"}],"output":null}],[11,"get_mut_query","","",286,{"inputs":[{"name":"self"}],"output":{"name":"queryref"}}],[11,"get_result","","",287,null],[11,"get_format","","",287,{"inputs":[{"name":"self"}],"output":{"name":"format"}}],[11,"get_query","","",287,{"inputs":[{"name":"self"}],"output":{"name":"queryref"}}],[11,"set","","",287,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"v"},{"name":"v"}],"output":null}],[11,"get_mut_query","","",287,{"inputs":[{"name":"self"}],"output":{"name":"queryref"}}],[11,"get_result","","",288,null],[11,"get","","",288,null],[11,"get_query","","",288,{"inputs":[{"name":"self"}],"output":{"name":"queryref"}}],[11,"set","","",288,{"inputs":[{"name":"self"},{"name":"v"},{"name":"v"}],"output":null}],[11,"get_mut_query","","",288,{"inputs":[{"name":"self"}],"output":{"name":"queryref"}}],[11,"get_result","","",289,{"inputs":[{"name":"self"}],"output":{"generics":["format"],"name":"vec"}}],[11,"get_query","","",289,{"inputs":[{"name":"self"}],"output":{"name":"queryref"}}],[11,"set","","",289,null],[11,"get_mut_query","","",289,{"inputs":[{"name":"self"}],"output":{"name":"queryref"}}],[11,"get_format","","",290,{"inputs":[{"name":"self"}],"output":{"name":"format"}}],[11,"get_percent","","",290,null],[11,"get_range","","",290,null],[11,"get_stats","","",290,null],[11,"get_ranges","","",290,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_query","","",290,{"inputs":[{"name":"self"}],"output":{"name":"queryref"}}],[11,"set_percent","","",290,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"i32"}],"output":null}],[11,"set_range","","",290,{"inputs":[{"name":"self"},{"name":"v"},{"name":"v"},{"name":"i64"}],"output":null}],[11,"set_stats","","",290,{"inputs":[{"name":"self"},{"name":"bufferingmode"},{"name":"i32"},{"name":"i32"},{"name":"i64"}],"output":null}],[11,"add_buffering_ranges","","",290,null],[11,"get_mut_query","","",290,{"inputs":[{"name":"self"}],"output":{"name":"queryref"}}],[11,"get_query","","",291,{"inputs":[{"name":"self"}],"output":{"name":"queryref"}}],[11,"get_mut_query","","",291,{"inputs":[{"name":"self"}],"output":{"name":"queryref"}}],[11,"get_uri","","",292,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"get_redirection","","",292,null],[11,"get_query","","",292,{"inputs":[{"name":"self"}],"output":{"name":"queryref"}}],[11,"set_uri","","",292,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"set_redirection","","",292,{"inputs":[{"name":"self"},{"name":"t"},{"name":"bool"}],"output":null}],[11,"get_mut_query","","",292,{"inputs":[{"name":"self"}],"output":{"name":"queryref"}}],[11,"get_query","","",293,{"inputs":[{"name":"self"}],"output":{"name":"queryref"}}],[11,"get_mut_query","","",293,{"inputs":[{"name":"self"}],"output":{"name":"queryref"}}],[11,"has_scheduling_mode","","",294,{"inputs":[{"name":"self"},{"name":"padmode"}],"output":{"name":"bool"}}],[11,"has_scheduling_mode_with_flags","","",294,{"inputs":[{"name":"self"},{"name":"padmode"},{"name":"schedulingflags"}],"output":{"name":"bool"}}],[11,"get_scheduling_modes","","",294,{"inputs":[{"name":"self"}],"output":{"generics":["padmode"],"name":"vec"}}],[11,"get_result","","",294,null],[11,"get_query","","",294,{"inputs":[{"name":"self"}],"output":{"name":"queryref"}}],[11,"add_scheduling_modes","","",294,null],[11,"set","","",294,{"inputs":[{"name":"self"},{"name":"schedulingflags"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":null}],[11,"get_mut_query","","",294,{"inputs":[{"name":"self"}],"output":{"name":"queryref"}}],[11,"get_caps","","",295,{"inputs":[{"name":"self"}],"output":{"name":"capsref"}}],[11,"get_result","","",295,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_query","","",295,{"inputs":[{"name":"self"}],"output":{"name":"queryref"}}],[11,"set_result","","",295,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_mut_query","","",295,{"inputs":[{"name":"self"}],"output":{"name":"queryref"}}],[11,"get_filter","","",296,{"inputs":[{"name":"self"}],"output":{"generics":["capsref"],"name":"option"}}],[11,"get_result","","",296,{"inputs":[{"name":"self"}],"output":{"generics":["capsref"],"name":"option"}}],[11,"get_query","","",296,{"inputs":[{"name":"self"}],"output":{"name":"queryref"}}],[11,"set_result","","",296,{"inputs":[{"name":"self"},{"name":"caps"}],"output":null}],[11,"get_mut_query","","",296,{"inputs":[{"name":"self"}],"output":{"name":"queryref"}}],[11,"get_query","","",297,{"inputs":[{"name":"self"}],"output":{"name":"queryref"}}],[11,"get_mut_query","","",297,{"inputs":[{"name":"self"}],"output":{"name":"queryref"}}],[11,"get_context","","",298,{"inputs":[{"name":"self"}],"output":{"generics":["contextref"],"name":"option"}}],[11,"get_context_type","","",298,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"get_query","","",298,{"inputs":[{"name":"self"}],"output":{"name":"queryref"}}],[11,"set_context","","",298,{"inputs":[{"name":"self"},{"name":"context"}],"output":null}],[11,"get_mut_query","","",298,{"inputs":[{"name":"self"}],"output":{"name":"queryref"}}],[11,"get_query","","",299,{"inputs":[{"name":"self"}],"output":{"name":"queryref"}}],[11,"get_mut_query","","",299,{"inputs":[{"name":"self"}],"output":{"name":"queryref"}}],[11,"deref","","",281,null],[11,"deref","","",282,null],[11,"deref","","",283,null],[11,"deref","","",284,null],[11,"deref","","",285,null],[11,"deref","","",286,null],[11,"deref","","",287,null],[11,"deref","","",288,null],[11,"deref","","",289,null],[11,"deref","","",290,null],[11,"deref","","",291,null],[11,"deref","","",292,null],[11,"deref","","",293,null],[11,"deref","","",294,null],[11,"deref","","",295,null],[11,"deref","","",296,null],[11,"deref","","",297,null],[11,"deref","","",298,null],[11,"deref","","",299,null],[0,"event","gstreamer","",null,null],[3,"Seqnum","gstreamer::event","",null,null],[12,"0","","",300,null],[3,"GroupId","","",null,null],[12,"0","","",301,null],[3,"EventRef","","",null,null],[3,"FlushStart","","",null,null],[3,"FlushStop","","",null,null],[3,"StreamStart","","",null,null],[3,"Caps","","Caps (capabilities) are lightweight refcounted objects describing media types. They are composed of an array of `Structure`.",null,null],[3,"Segment","","This helper structure holds the relevant values for tracking the region of interest in a media file, called a segment.",null,null],[3,"StreamCollection","","",null,null],[3,"Tag","","",null,null],[3,"BufferSize","","",null,null],[3,"SinkMessage","","",null,null],[3,"StreamGroupDone","","",null,null],[3,"Eos","","",null,null],[3,"Toc","","`Toc` functions are used to create/free `Toc` and `TocEntry` structures. Also they are used to convert `Toc` into `Structure` and vice versa.",null,null],[3,"Protection","","",null,null],[3,"SegmentDone","","",null,null],[3,"Gap","","",null,null],[3,"Qos","","",null,null],[3,"Seek","","",null,null],[3,"Navigation","","",null,null],[3,"Latency","","",null,null],[3,"Step","","",null,null],[3,"Reconfigure","","",null,null],[3,"TocSelect","","",null,null],[3,"SelectStreams","","",null,null],[3,"CustomUpstream","","",null,null],[3,"CustomDownstream","","",null,null],[3,"CustomDownstreamOob","","",null,null],[3,"CustomDownstreamSticky","","",null,null],[3,"CustomBoth","","",null,null],[3,"CustomBothOob","","",null,null],[3,"FlushStartBuilder","","",null,null],[3,"FlushStopBuilder","","",null,null],[3,"StreamStartBuilder","","",null,null],[3,"CapsBuilder","","",null,null],[3,"SegmentBuilder","","",null,null],[3,"StreamCollectionBuilder","","",null,null],[3,"TagBuilder","","",null,null],[3,"BufferSizeBuilder","","",null,null],[3,"SinkMessageBuilder","","",null,null],[3,"StreamGroupDoneBuilder","","",null,null],[3,"EosBuilder","","",null,null],[3,"TocBuilder","","",null,null],[3,"ProtectionBuilder","","",null,null],[3,"SegmentDoneBuilder","","",null,null],[3,"GapBuilder","","",null,null],[3,"QosBuilder","","",null,null],[3,"SeekBuilder","","",null,null],[3,"NavigationBuilder","","",null,null],[3,"LatencyBuilder","","",null,null],[3,"StepBuilder","","",null,null],[3,"ReconfigureBuilder","","",null,null],[3,"TocSelectBuilder","","",null,null],[3,"SelectStreamsBuilder","","",null,null],[3,"CustomUpstreamBuilder","","",null,null],[3,"CustomDownstreamBuilder","","",null,null],[3,"CustomDownstreamOobBuilder","","",null,null],[3,"CustomDownstreamStickyBuilder","","",null,null],[3,"CustomBothBuilder","","",null,null],[3,"CustomBothOobBuilder","","",null,null],[4,"EventView","","",null,null],[13,"FlushStart","","",302,null],[13,"FlushStop","","",302,null],[13,"StreamStart","","",302,null],[13,"Caps","","",302,null],[13,"Segment","","",302,null],[13,"StreamCollection","","",302,null],[13,"Tag","","",302,null],[13,"BufferSize","","",302,null],[13,"SinkMessage","","",302,null],[13,"StreamGroupDone","","",302,null],[13,"Eos","","",302,null],[13,"Toc","","",302,null],[13,"Protection","","",302,null],[13,"SegmentDone","","",302,null],[13,"Gap","","",302,null],[13,"Qos","","",302,null],[13,"Seek","","",302,null],[13,"Navigation","","",302,null],[13,"Latency","","",302,null],[13,"Step","","",302,null],[13,"Reconfigure","","",302,null],[13,"TocSelect","","",302,null],[13,"SelectStreams","","",302,null],[13,"CustomUpstream","","",302,null],[13,"CustomDownstream","","",302,null],[13,"CustomDownstreamOob","","",302,null],[13,"CustomDownstreamSticky","","",302,null],[13,"CustomBoth","","",302,null],[13,"CustomBothOob","","",302,null],[13,"Other","","",302,null],[13,"__NonExhaustive","","",302,null],[6,"Event","","",null,null],[17,"SEQNUM_INVALID","","",null,null],[17,"GROUP_ID_INVALID","","",null,null],[11,"fmt","","",300,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",300,{"inputs":[{"name":"self"}],"output":{"name":"seqnum"}}],[11,"default","","",300,{"inputs":[],"output":{"name":"seqnum"}}],[11,"eq","","",300,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"bool"}}],[11,"ne","","",300,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"bool"}}],[11,"to_glib","","",300,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_glib","","",300,{"inputs":[{"name":"u32"}],"output":{"name":"seqnum"}}],[11,"into","","",300,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from","","",300,{"inputs":[{"name":"u32"}],"output":{"name":"seqnum"}}],[11,"fmt","","",301,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",301,{"inputs":[{"name":"self"}],"output":{"name":"groupid"}}],[11,"default","","",301,{"inputs":[],"output":{"name":"groupid"}}],[11,"eq","","",301,{"inputs":[{"name":"self"},{"name":"groupid"}],"output":{"name":"bool"}}],[11,"ne","","",301,{"inputs":[{"name":"self"},{"name":"groupid"}],"output":{"name":"bool"}}],[11,"to_glib","","",301,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",301,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from","","",301,{"inputs":[{"name":"u32"}],"output":{"name":"groupid"}}],[11,"from_glib","","",301,{"inputs":[{"name":"u32"}],"output":{"name":"groupid"}}],[11,"is_upstream","gstreamer","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_downstream","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_serialized","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_sticky","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_sticky_multi","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",17,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"get_seqnum","gstreamer::event","",303,{"inputs":[{"name":"self"}],"output":{"name":"seqnum"}}],[11,"get_running_time_offset","","",303,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"set_running_time_offset","","",303,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"get_structure","","",303,{"inputs":[{"name":"self"}],"output":{"generics":["structureref"],"name":"option"}}],[11,"is_upstream","","",303,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_downstream","","",303,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_serialized","","",303,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_sticky","","",303,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_sticky_multi","","",303,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_type","","",303,{"inputs":[{"name":"self"}],"output":{"name":"eventtype"}}],[11,"view","","",303,{"inputs":[{"name":"self"}],"output":{"name":"eventview"}}],[11,"new_flush_start","gstreamer::miniobject","",103,{"inputs":[],"output":{"name":"flushstartbuilder"}}],[11,"new_flush_stop","","",103,{"inputs":[{"name":"bool"}],"output":{"name":"flushstopbuilder"}}],[11,"new_stream_start","","",103,{"inputs":[{"name":"str"}],"output":{"name":"streamstartbuilder"}}],[11,"new_caps","","",103,{"inputs":[{"name":"caps"}],"output":{"name":"capsbuilder"}}],[11,"new_segment","","",103,{"inputs":[{"name":"formattedsegment"}],"output":{"name":"segmentbuilder"}}],[11,"new_stream_collection","","",103,{"inputs":[{"name":"streamcollection"}],"output":{"name":"streamcollectionbuilder"}}],[11,"new_tag","","",103,{"inputs":[{"name":"taglist"}],"output":{"name":"tagbuilder"}}],[11,"new_buffer_size","","",103,{"inputs":[{"name":"v"},{"name":"v"},{"name":"bool"}],"output":{"name":"buffersizebuilder"}}],[11,"new_sink_message","","",103,{"inputs":[{"name":"str"},{"name":"message"}],"output":{"name":"sinkmessagebuilder"}}],[11,"new_stream_group_done","","",103,{"inputs":[{"name":"groupid"}],"output":{"name":"streamgroupdonebuilder"}}],[11,"new_eos","","",103,{"inputs":[],"output":{"name":"eosbuilder"}}],[11,"new_toc","","",103,{"inputs":[{"name":"toc"},{"name":"bool"}],"output":{"name":"tocbuilder"}}],[11,"new_protection","","",103,{"inputs":[{"name":"str"},{"name":"buffer"}],"output":{"name":"protectionbuilder"}}],[11,"new_segment_done","","",103,{"inputs":[{"name":"v"}],"output":{"name":"segmentdonebuilder"}}],[11,"new_gap","","",103,{"inputs":[{"name":"clocktime"},{"name":"clocktime"}],"output":{"name":"gapbuilder"}}],[11,"new_qos","","",103,{"inputs":[{"name":"qostype"},{"name":"f64"},{"name":"i64"},{"name":"clocktime"}],"output":{"name":"qosbuilder"}}],[11,"new_seek","","",103,{"inputs":[{"name":"f64"},{"name":"seekflags"},{"name":"seektype"},{"name":"v"},{"name":"seektype"},{"name":"v"}],"output":{"name":"seekbuilder"}}],[11,"new_navigation","","",103,{"inputs":[{"name":"structure"}],"output":{"name":"navigationbuilder"}}],[11,"new_latency","","",103,{"inputs":[{"name":"clocktime"}],"output":{"name":"latencybuilder"}}],[11,"new_step","","",103,{"inputs":[{"name":"v"},{"name":"f64"},{"name":"bool"},{"name":"bool"}],"output":{"name":"stepbuilder"}}],[11,"new_reconfigure","","",103,{"inputs":[],"output":{"name":"reconfigurebuilder"}}],[11,"new_toc_select","","",103,{"inputs":[{"name":"str"}],"output":{"name":"tocselectbuilder"}}],[11,"new_select_streams","","",103,null],[11,"new_custom_upstream","","",103,{"inputs":[{"name":"structure"}],"output":{"name":"customupstreambuilder"}}],[11,"new_custom_downstream","","",103,{"inputs":[{"name":"structure"}],"output":{"name":"customdownstreambuilder"}}],[11,"new_custom_downstream_oob","","",103,{"inputs":[{"name":"structure"}],"output":{"name":"customdownstreamoobbuilder"}}],[11,"new_custom_downstream_sticky","","",103,{"inputs":[{"name":"structure"}],"output":{"name":"customdownstreamstickybuilder"}}],[11,"new_custom_both","","",103,{"inputs":[{"name":"structure"}],"output":{"name":"custombothbuilder"}}],[11,"new_custom_both_oob","","",103,{"inputs":[{"name":"structure"}],"output":{"name":"custombothoobbuilder"}}],[11,"static_type","gstreamer::event","",303,{"inputs":[],"output":{"name":"type"}}],[11,"fmt","","",303,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_owned","","",303,{"inputs":[{"name":"self"}],"output":{"generics":["eventref"],"name":"gstrc"}}],[11,"get_reset_time","","",304,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_stream_id","","",305,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"get_stream_flags","","",305,{"inputs":[{"name":"self"}],"output":{"name":"streamflags"}}],[11,"get_group_id","","",305,{"inputs":[{"name":"self"}],"output":{"name":"groupid"}}],[11,"get_caps","","",306,{"inputs":[{"name":"self"}],"output":{"name":"capsref"}}],[11,"get_segment","","",307,{"inputs":[{"name":"self"}],"output":{"name":"segment"}}],[11,"get_stream_collection","","",308,{"inputs":[{"name":"self"}],"output":{"name":"streamcollection"}}],[11,"get_tag","","",309,{"inputs":[{"name":"self"}],"output":{"name":"taglistref"}}],[11,"get","","",310,null],[11,"get_message","","",311,{"inputs":[{"name":"self"}],"output":{"name":"message"}}],[11,"get_group_id","","",312,{"inputs":[{"name":"self"}],"output":{"name":"groupid"}}],[11,"get_toc","","",313,null],[11,"get","","",314,null],[11,"get","","",315,{"inputs":[{"name":"self"}],"output":{"name":"genericformattedvalue"}}],[11,"get","","",316,null],[11,"get","","",317,null],[11,"get","","",318,null],[11,"get_latency","","",319,{"inputs":[{"name":"self"}],"output":{"name":"clocktime"}}],[11,"get","","",320,null],[11,"get_uid","","",321,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"get_streams","","",322,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[11,"seqnum","","",323,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"self"}}],[11,"running_time_offset","","",323,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"self"}}],[11,"other_fields","","",323,null],[11,"build","","",323,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"seqnum","","",324,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"self"}}],[11,"running_time_offset","","",324,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"self"}}],[11,"other_fields","","",324,null],[11,"build","","",324,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"flags","","",325,{"inputs":[{"name":"self"},{"name":"streamflags"}],"output":{"name":"self"}}],[11,"group_id","","",325,{"inputs":[{"name":"self"},{"name":"groupid"}],"output":{"name":"self"}}],[11,"seqnum","","",325,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"self"}}],[11,"running_time_offset","","",325,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"self"}}],[11,"other_fields","","",325,null],[11,"build","","",325,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"seqnum","","",326,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"self"}}],[11,"running_time_offset","","",326,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"self"}}],[11,"other_fields","","",326,null],[11,"build","","",326,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"seqnum","","",327,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"self"}}],[11,"running_time_offset","","",327,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"self"}}],[11,"other_fields","","",327,null],[11,"build","","",327,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"seqnum","","",328,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"self"}}],[11,"running_time_offset","","",328,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"self"}}],[11,"other_fields","","",328,null],[11,"build","","",328,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"seqnum","","",329,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"self"}}],[11,"running_time_offset","","",329,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"self"}}],[11,"other_fields","","",329,null],[11,"build","","",329,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"seqnum","","",330,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"self"}}],[11,"running_time_offset","","",330,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"self"}}],[11,"other_fields","","",330,null],[11,"build","","",330,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"seqnum","","",331,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"self"}}],[11,"running_time_offset","","",331,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"self"}}],[11,"other_fields","","",331,null],[11,"build","","",331,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"seqnum","","",332,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"self"}}],[11,"running_time_offset","","",332,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"self"}}],[11,"other_fields","","",332,null],[11,"build","","",332,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"seqnum","","",333,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"self"}}],[11,"running_time_offset","","",333,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"self"}}],[11,"other_fields","","",333,null],[11,"build","","",333,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"seqnum","","",334,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"self"}}],[11,"running_time_offset","","",334,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"self"}}],[11,"other_fields","","",334,null],[11,"build","","",334,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"origin","","",335,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"seqnum","","",335,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"self"}}],[11,"running_time_offset","","",335,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"self"}}],[11,"other_fields","","",335,null],[11,"build","","",335,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"seqnum","","",336,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"self"}}],[11,"running_time_offset","","",336,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"self"}}],[11,"other_fields","","",336,null],[11,"build","","",336,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"seqnum","","",337,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"self"}}],[11,"running_time_offset","","",337,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"self"}}],[11,"other_fields","","",337,null],[11,"build","","",337,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"seqnum","","",338,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"self"}}],[11,"running_time_offset","","",338,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"self"}}],[11,"other_fields","","",338,null],[11,"build","","",338,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"seqnum","","",339,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"self"}}],[11,"running_time_offset","","",339,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"self"}}],[11,"other_fields","","",339,null],[11,"build","","",339,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"seqnum","","",340,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"self"}}],[11,"running_time_offset","","",340,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"self"}}],[11,"other_fields","","",340,null],[11,"build","","",340,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"seqnum","","",341,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"self"}}],[11,"running_time_offset","","",341,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"self"}}],[11,"other_fields","","",341,null],[11,"build","","",341,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"seqnum","","",342,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"self"}}],[11,"running_time_offset","","",342,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"self"}}],[11,"other_fields","","",342,null],[11,"build","","",342,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"seqnum","","",343,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"self"}}],[11,"running_time_offset","","",343,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"self"}}],[11,"other_fields","","",343,null],[11,"build","","",343,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"seqnum","","",344,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"self"}}],[11,"running_time_offset","","",344,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"self"}}],[11,"other_fields","","",344,null],[11,"build","","",344,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"seqnum","","",345,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"self"}}],[11,"running_time_offset","","",345,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"self"}}],[11,"other_fields","","",345,null],[11,"build","","",345,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"seqnum","","",346,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"self"}}],[11,"running_time_offset","","",346,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"self"}}],[11,"other_fields","","",346,null],[11,"build","","",346,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"seqnum","","",347,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"self"}}],[11,"running_time_offset","","",347,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"self"}}],[11,"other_fields","","",347,null],[11,"build","","",347,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"seqnum","","",348,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"self"}}],[11,"running_time_offset","","",348,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"self"}}],[11,"other_fields","","",348,null],[11,"build","","",348,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"seqnum","","",349,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"self"}}],[11,"running_time_offset","","",349,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"self"}}],[11,"other_fields","","",349,null],[11,"build","","",349,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"seqnum","","",350,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"self"}}],[11,"running_time_offset","","",350,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"self"}}],[11,"other_fields","","",350,null],[11,"build","","",350,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"seqnum","","",351,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"self"}}],[11,"running_time_offset","","",351,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"self"}}],[11,"other_fields","","",351,null],[11,"build","","",351,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[0,"context","gstreamer","",null,null],[3,"ContextRef","gstreamer::context","",null,null],[6,"Context","","",null,null],[11,"new","gstreamer::miniobject","",103,{"inputs":[{"name":"str"},{"name":"bool"}],"output":{"name":"self"}}],[11,"get_context_type","gstreamer::context","",352,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"has_context_type","","",352,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_persistent","","",352,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_structure","","",352,{"inputs":[{"name":"self"}],"output":{"name":"structureref"}}],[11,"get_mut_structure","","",352,{"inputs":[{"name":"self"}],"output":{"name":"structureref"}}],[11,"static_type","","",352,{"inputs":[],"output":{"name":"type"}}],[11,"fmt","","",352,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_owned","","",352,{"inputs":[{"name":"self"}],"output":{"generics":["contextref"],"name":"gstrc"}}],[11,"get","gstreamer","Converts a `StaticCaps` to a `Caps`.",353,{"inputs":[{"name":"self"}],"output":{"name":"caps"}}],[11,"static_type","","",353,{"inputs":[],"output":{"name":"type"}}],[11,"get","","Converts a `StaticPadTemplate` into a `PadTemplate`.",354,{"inputs":[{"name":"self"}],"output":{"name":"padtemplate"}}],[11,"get_caps","","Gets the capabilities of the static pad template.",354,{"inputs":[{"name":"self"}],"output":{"name":"caps"}}],[11,"name_template","","",354,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"direction","","",354,{"inputs":[{"name":"self"}],"output":{"name":"paddirection"}}],[11,"presence","","",354,{"inputs":[{"name":"self"}],"output":{"name":"padpresence"}}],[11,"static_type","","",354,{"inputs":[],"output":{"name":"type"}}],[11,"link_many","","",65,null],[11,"unlink_many","","",65,null],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"elementmessagetype"}],"output":{"name":"bool"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"elementmessagetype"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",47,null],[11,"fmt","","",355,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",355,{"inputs":[],"output":{"name":"notifywatchid"}}],[11,"eq","","",355,{"inputs":[{"name":"self"},{"name":"notifywatchid"}],"output":{"name":"bool"}}],[11,"ne","","",355,{"inputs":[{"name":"self"},{"name":"notifywatchid"}],"output":{"name":"bool"}}],[11,"to_glib","","",355,{"inputs":[{"name":"self"}],"output":{"name":"c_ulong"}}],[11,"from_glib","","",355,{"inputs":[{"name":"c_ulong"}],"output":{"name":"notifywatchid"}}],[11,"deref","","",356,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",356,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",357,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",357,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",358,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",358,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",359,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",359,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",360,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",360,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",361,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",361,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",362,{"inputs":[{"name":"bus"}],"output":{"name":"self"}}],[11,"drop","","",362,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",362,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"add_signal_watch_full","","Adds a bus signal watch to the default main context with the given `priority` (e.g. `G_PRIORITY_DEFAULT`). It is also possible to use a non-default main context set up using `glib::MainContext::push_thread_default` (before one had to create a bus watch source and attach it to the desired main context 'manually').",58,{"inputs":[{"name":"self"},{"name":"priority"}],"output":null}],[11,"create_watch","","Create watch for this bus. The GSource will be dispatched whenever a message is on the bus. After the GSource is dispatched, the message is popped off the bus and unreffed.",58,{"inputs":[{"name":"self"},{"name":"n"},{"name":"priority"},{"name":"f"}],"output":{"generics":["source"],"name":"option"}}],[11,"add_watch","","",58,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"sourceid"}}],[11,"set_sync_handler","","",58,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"unset_sync_handler","","",58,{"inputs":[{"name":"self"}],"output":null}],[11,"new_from_static_template","","Creates a new pad with the given name from the given static template. If name is `None`, a guaranteed unique name (across all pads) will be assigned. This function makes a copy of the name so you can safely free the name. ## `templ` the `StaticPadTemplate` to use ## `name` the name of the pad",69,{"inputs":[{"name":"staticpadtemplate"},{"name":"p"}],"output":{"name":"pad"}}],[11,"fmt","","",363,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",363,{"inputs":[],"output":{"name":"padprobeid"}}],[11,"eq","","",363,{"inputs":[{"name":"self"},{"name":"padprobeid"}],"output":{"name":"bool"}}],[11,"ne","","",363,{"inputs":[{"name":"self"},{"name":"padprobeid"}],"output":{"name":"bool"}}],[11,"to_glib","","",363,{"inputs":[{"name":"self"}],"output":{"name":"c_ulong"}}],[11,"from_glib","","",363,{"inputs":[{"name":"c_ulong"}],"output":{"name":"padprobeid"}}],[11,"chain_default","","Invoke the default chain function of the proxy pad. ## `pad` a sink `Pad`, returns GST_FLOW_ERROR if not. ## `parent` the parent of `pad` or `None` ## `buffer` the `Buffer` to send, return GST_FLOW_ERROR  if not.",75,{"inputs":[{"name":"p"},{"name":"r"},{"name":"buffer"}],"output":{"name":"flowreturn"}}],[11,"chain_list_default","","Invoke the default chain list function of the proxy pad. ## `pad` a sink `Pad`, returns GST_FLOW_ERROR if not. ## `parent` the parent of `pad` or `None` ## `list` the `BufferList` to send, return GST_FLOW_ERROR  if not.",75,{"inputs":[{"name":"p"},{"name":"r"},{"name":"bufferlist"}],"output":{"name":"flowreturn"}}],[11,"getrange_default","","Invoke the default getrange function of the proxy pad. ## `pad` a src `Pad`, returns `FlowReturn::Error` if not. ## `parent` the parent of `pad` ## `offset` The start offset of the buffer ## `size` The length of the buffer ## `buffer` a pointer to hold the `Buffer`,  returns `FlowReturn::Error` if `None`.",75,{"inputs":[{"name":"p"},{"name":"q"},{"name":"u64"},{"name":"u32"}],"output":{"generics":["buffer","flowreturn"],"name":"result"}}],[11,"iterate_internal_links_default","","",75,{"inputs":[{"name":"p"},{"name":"r"}],"output":{"generics":["iterator"],"name":"option"}}],[11,"new","","Create a new ghostpad with `target` as the target. The direction will be taken from the target pad. `target` must be unlinked.",67,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"generics":["ghostpad"],"name":"option"}}],[11,"new_from_template","","Create a new ghostpad with `target` as the target. The direction will be taken from the target pad. The template used on the ghostpad will be `template`.",67,{"inputs":[{"name":"p"},{"name":"q"},{"name":"padtemplate"}],"output":{"generics":["ghostpad"],"name":"option"}}],[11,"activate_mode_default","","Invoke the default activate mode function of a ghost pad. ## `pad` the `Pad` to activate or deactivate. ## `parent` the parent of `pad` or `None` ## `mode` the requested activation mode ## `active` whether the pad should be active or not.",67,{"inputs":[{"name":"p"},{"name":"r"},{"name":"padmode"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"internal_activate_mode_default","","Invoke the default activate mode function of a proxy pad that is owned by a ghost pad. ## `pad` the `Pad` to activate or deactivate. ## `parent` the parent of `pad` or `None` ## `mode` the requested activation mode ## `active` whether the pad should be active or not.",67,{"inputs":[{"name":"p"},{"name":"r"},{"name":"padmode"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"iteratorerror"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"iteratorerror"}],"output":{"name":"bool"}}],[11,"hash","","",49,null],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",49,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"resync","","",364,{"inputs":[{"name":"self"}],"output":null}],[11,"filter","","",364,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"find_simple","","",364,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"foreach","","",364,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["iteratorerror"],"name":"result"}}],[11,"fold_with_early_exit","","",364,{"inputs":[{"name":"self"},{"name":"u"},{"name":"f"}],"output":{"generics":["iteratorerror"],"name":"result"}}],[11,"new","","",364,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"from_vec","","",364,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"next","","",364,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"clone","","",364,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drop","","",364,{"inputs":[{"name":"self"}],"output":null}],[11,"static_type","","",364,{"inputs":[],"output":{"name":"type"}}],[11,"clone","","",365,{"inputs":[{"name":"self"}],"output":{"name":"parsecontext"}}],[11,"fmt","","",365,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"static_type","","",365,{"inputs":[],"output":{"name":"type"}}],[11,"new","","Allocates a parse context for use with `gst_parse_launch_full` or `gst_parse_launchv_full`.",365,{"inputs":[],"output":{"name":"self"}}],[11,"get_missing_elements","","Retrieve missing elements from a previous run of `gst_parse_launch_full` or `gst_parse_launchv_full`. Will only return results if an error code of `ParseError::NoSuchElement` was returned.",365,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[11,"default","","",365,{"inputs":[],"output":{"name":"self"}}],[11,"into_result","","",35,{"inputs":[{"name":"self"}],"output":{"generics":["statechangesuccess","statechangeerror"],"name":"result"}}],[11,"from_error","","",35,{"inputs":[{"name":"statechangeerror"}],"output":{"name":"self"}}],[11,"from_ok","","",35,{"inputs":[{"name":"statechangesuccess"}],"output":{"name":"self"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"statechangesuccess"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"statechangesuccess"}],"output":{"name":"bool"}}],[11,"hash","","",55,null],[11,"clone","","",366,{"inputs":[{"name":"self"}],"output":{"name":"statechangeerror"}}],[11,"fmt","","",366,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",366,{"inputs":[{"name":"self"},{"name":"statechangeerror"}],"output":{"name":"bool"}}],[11,"hash","","",366,null],[11,"fmt","","",366,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",366,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into_result","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["flowsuccess","flowerror"],"name":"result"}}],[11,"from_error","","",18,{"inputs":[{"name":"flowerror"}],"output":{"name":"self"}}],[11,"from_ok","","",18,{"inputs":[{"name":"flowsuccess"}],"output":{"name":"self"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"flowsuccess"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"flowsuccess"}],"output":{"name":"bool"}}],[11,"hash","","",53,null],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"flowerror"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"flowerror"}],"output":{"name":"bool"}}],[11,"hash","","",52,null],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",52,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into_result","","",22,{"inputs":[{"name":"self"}],"output":{"generics":["padlinksuccess","padlinkerror"],"name":"result"}}],[11,"from_error","","",22,{"inputs":[{"name":"padlinkerror"}],"output":{"name":"self"}}],[11,"from_ok","","",22,{"inputs":[{"name":"padlinksuccess"}],"output":{"name":"self"}}],[11,"clone","","",367,{"inputs":[{"name":"self"}],"output":{"name":"padlinksuccess"}}],[11,"fmt","","",367,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",367,{"inputs":[{"name":"self"},{"name":"padlinksuccess"}],"output":{"name":"bool"}}],[11,"hash","","",367,null],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"padlinkerror"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"padlinkerror"}],"output":{"name":"bool"}}],[11,"hash","","",54,null],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",54,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into_result","","",13,{"inputs":[{"name":"self"}],"output":{"generics":["clocksuccess","clockerror"],"name":"result"}}],[11,"from_error","","",13,{"inputs":[{"name":"clockerror"}],"output":{"name":"self"}}],[11,"from_ok","","",13,{"inputs":[{"name":"clocksuccess"}],"output":{"name":"self"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"clocksuccess"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"clocksuccess"}],"output":{"name":"bool"}}],[11,"hash","","",51,null],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"clockerror"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"clockerror"}],"output":{"name":"bool"}}],[11,"hash","","",50,null],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",50,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"partial_cmp","","",44,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",44,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",30,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",30,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"clocktime"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"clocktime"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"self"},{"name":"clocktime"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"self"},{"name":"clocktime"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"self"},{"name":"clocktime"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"self"},{"name":"clocktime"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"self"},{"name":"clocktime"}],"output":{"name":"bool"}}],[11,"cmp","","",6,{"inputs":[{"name":"self"},{"name":"clocktime"}],"output":{"name":"ordering"}}],[11,"hash","","",6,null],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"clocktime"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"clocktime"}}],[11,"hours","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"minutes","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"seconds","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"mseconds","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"useconds","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"nseconds","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"nanoseconds","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"from_seconds","","",6,{"inputs":[{"name":"u64"}],"output":{"name":"clocktime"}}],[11,"from_mseconds","","",6,{"inputs":[{"name":"u64"}],"output":{"name":"clocktime"}}],[11,"from_useconds","","",6,{"inputs":[{"name":"u64"}],"output":{"name":"clocktime"}}],[11,"from_nseconds","","",6,{"inputs":[{"name":"u64"}],"output":{"name":"clocktime"}}],[11,"none","","",6,{"inputs":[],"output":{"name":"clocktime"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_cache_data","","Gets the plugin specific data cache. If it is `None` there is no cached data stored. This is the case when the registry is getting rebuilt.",72,{"inputs":[{"name":"self"}],"output":{"generics":["structureref"],"name":"option"}}],[11,"set_cache_data","","Adds plugin specific data to cache. Passes the ownership of the structure to the `self`.",72,{"inputs":[{"name":"self"},{"name":"structure"}],"output":null}],[0,"stream_collection","","",null,null],[3,"Iter","gstreamer::stream_collection","",null,null],[11,"next","","",368,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",368,null],[11,"next_back","","",368,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"iter","gstreamer","",78,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"len","","",78,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",78,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"register","","",369,{"inputs":[{"name":"p"},{"name":"str"},{"name":"u32"},{"name":"r"},{"name":"s"},{"name":"f"}],"output":{"name":"bool"}}],[11,"peek","","",369,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"u32"}],"output":{"name":"option"}}],[11,"suggest","","",369,{"inputs":[{"name":"self"},{"name":"typefindprobability"},{"name":"caps"}],"output":null}],[11,"call_function","","Calls the `GstTypeFindFunction` associated with this factory. ## `find` a properly setup `TypeFind` entry. The get_data  and suggest_type members must be set.",82,{"inputs":[{"name":"self"},{"name":"typefindimpl"}],"output":null}],[11,"new","","",7,{"inputs":[{"name":"t"}],"output":{"name":"slicetypefind"}}],[11,"run","","",7,{"inputs":[{"name":"self"}],"output":null}],[11,"type_find","","",7,null],[11,"peek","","",7,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"u32"}],"output":{"name":"option"}}],[11,"suggest","","",7,{"inputs":[{"name":"self"},{"name":"typefindprobability"},{"name":"caps"}],"output":null}],[11,"get_length","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[0,"format","","",null,null],[3,"Default","gstreamer::format","",null,null],[12,"0","","",370,null],[3,"Bytes","","",null,null],[12,"0","","",371,null],[3,"Buffers","","",null,null],[12,"0","","",372,null],[4,"GenericFormattedValue","","",null,null],[13,"Undefined","","",373,null],[13,"Default","","",373,null],[13,"Bytes","","",373,null],[13,"Time","","",373,null],[13,"Buffers","","",373,null],[13,"Percent","","",373,null],[13,"Other","","",373,null],[6,"Time","","",null,null],[8,"FormattedValue","","",null,null],[10,"get_default_format","","",374,{"inputs":[],"output":{"name":"format"}}],[10,"try_from","","",374,{"inputs":[{"name":"genericformattedvalue"}],"output":{"name":"option"}}],[10,"get_format","","",374,{"inputs":[{"name":"self"}],"output":{"name":"format"}}],[10,"from_raw","","",374,{"inputs":[{"name":"format"},{"name":"i64"}],"output":{"name":"self"}}],[10,"to_raw_value","","",374,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[8,"SpecificFormattedValue","","",null,null],[11,"eq","","",373,{"inputs":[{"name":"self"},{"name":"genericformattedvalue"}],"output":{"name":"bool"}}],[11,"ne","","",373,{"inputs":[{"name":"self"},{"name":"genericformattedvalue"}],"output":{"name":"bool"}}],[11,"hash","","",373,null],[11,"clone","","",373,{"inputs":[{"name":"self"}],"output":{"name":"genericformattedvalue"}}],[11,"fmt","","",373,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",370,{"inputs":[{"name":"self"},{"name":"default"}],"output":{"name":"bool"}}],[11,"ne","","",370,{"inputs":[{"name":"self"},{"name":"default"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",370,{"inputs":[{"name":"self"},{"name":"default"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",370,{"inputs":[{"name":"self"},{"name":"default"}],"output":{"name":"bool"}}],[11,"le","","",370,{"inputs":[{"name":"self"},{"name":"default"}],"output":{"name":"bool"}}],[11,"gt","","",370,{"inputs":[{"name":"self"},{"name":"default"}],"output":{"name":"bool"}}],[11,"ge","","",370,{"inputs":[{"name":"self"},{"name":"default"}],"output":{"name":"bool"}}],[11,"cmp","","",370,{"inputs":[{"name":"self"},{"name":"default"}],"output":{"name":"ordering"}}],[11,"hash","","",370,null],[11,"clone","","",370,{"inputs":[{"name":"self"}],"output":{"name":"default"}}],[11,"fmt","","",370,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",370,{"inputs":[],"output":{"name":"default"}}],[11,"eq","","",371,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"ne","","",371,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",371,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",371,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"le","","",371,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"gt","","",371,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"ge","","",371,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"cmp","","",371,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"ordering"}}],[11,"hash","","",371,null],[11,"clone","","",371,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"fmt","","",371,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",371,{"inputs":[],"output":{"name":"bytes"}}],[11,"eq","","",372,{"inputs":[{"name":"self"},{"name":"buffers"}],"output":{"name":"bool"}}],[11,"ne","","",372,{"inputs":[{"name":"self"},{"name":"buffers"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",372,{"inputs":[{"name":"self"},{"name":"buffers"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",372,{"inputs":[{"name":"self"},{"name":"buffers"}],"output":{"name":"bool"}}],[11,"le","","",372,{"inputs":[{"name":"self"},{"name":"buffers"}],"output":{"name":"bool"}}],[11,"gt","","",372,{"inputs":[{"name":"self"},{"name":"buffers"}],"output":{"name":"bool"}}],[11,"ge","","",372,{"inputs":[{"name":"self"},{"name":"buffers"}],"output":{"name":"bool"}}],[11,"cmp","","",372,{"inputs":[{"name":"self"},{"name":"buffers"}],"output":{"name":"ordering"}}],[11,"hash","","",372,null],[11,"clone","","",372,{"inputs":[{"name":"self"}],"output":{"name":"buffers"}}],[11,"fmt","","",372,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",372,{"inputs":[],"output":{"name":"buffers"}}],[11,"get_default_format","","",373,{"inputs":[],"output":{"name":"format"}}],[11,"try_from","","",373,{"inputs":[{"name":"genericformattedvalue"}],"output":{"name":"option"}}],[11,"get_format","","",373,{"inputs":[{"name":"self"}],"output":{"name":"format"}}],[11,"from_raw","","",373,{"inputs":[{"name":"format"},{"name":"i64"}],"output":{"name":"self"}}],[11,"to_raw_value","","",373,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"new","","",373,{"inputs":[{"name":"format"},{"name":"i64"}],"output":{"name":"self"}}],[11,"from_undefined","","",373,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from_default","","",373,{"inputs":[{"name":"v"}],"output":{"name":"self"}}],[11,"from_bytes","","",373,{"inputs":[{"name":"v"}],"output":{"name":"self"}}],[11,"from_time","","",373,{"inputs":[{"name":"v"}],"output":{"name":"self"}}],[11,"from_buffers","","",373,{"inputs":[{"name":"v"}],"output":{"name":"self"}}],[11,"from_percent","","",373,{"inputs":[{"name":"v"}],"output":{"name":"self"}}],[11,"from_other","","",373,{"inputs":[{"name":"format"},{"name":"i64"}],"output":{"name":"self"}}],[11,"get_format","","",373,{"inputs":[{"name":"self"}],"output":{"name":"format"}}],[11,"get_value","","",373,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"try_into","","",373,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"try_into_undefined","","",373,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"result"}}],[11,"try_into_default","","",373,{"inputs":[{"name":"self"}],"output":{"generics":["default"],"name":"result"}}],[11,"try_into_bytes","","",373,{"inputs":[{"name":"self"}],"output":{"generics":["bytes"],"name":"result"}}],[11,"try_into_time","","",373,{"inputs":[{"name":"self"}],"output":{"generics":["clocktime"],"name":"result"}}],[11,"try_into_buffers","","",373,{"inputs":[{"name":"self"}],"output":{"generics":["buffers"],"name":"result"}}],[11,"try_into_percent","","",373,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"try_into_other","","",373,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from","","",373,{"inputs":[{"name":"default"}],"output":{"name":"genericformattedvalue"}}],[11,"get_default_format","","",370,{"inputs":[],"output":{"name":"format"}}],[11,"try_from","","",370,{"inputs":[{"name":"genericformattedvalue"}],"output":{"name":"option"}}],[11,"get_format","","",370,{"inputs":[{"name":"self"}],"output":{"name":"format"}}],[11,"from_raw","","",370,{"inputs":[{"name":"format"},{"name":"i64"}],"output":{"name":"self"}}],[11,"to_raw_value","","",370,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"from","","",370,{"inputs":[{"name":"u64"}],"output":{"name":"default"}}],[11,"from","","",370,{"inputs":[{"generics":["u64"],"name":"option"}],"output":{"name":"default"}}],[11,"into","","",370,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"deref","","",370,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"deref_mut","","",370,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_ref","","",370,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_mut","","",370,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"add","","",370,{"inputs":[{"name":"self"},{"name":"default"}],"output":{"name":"default"}}],[11,"add","","",370,{"inputs":[{"name":"self"},{"name":"default"}],"output":{"name":"default"}}],[11,"add_assign","","",370,{"inputs":[{"name":"self"},{"name":"default"}],"output":null}],[11,"add_assign","","",370,{"inputs":[{"name":"self"},{"name":"default"}],"output":null}],[11,"sub","","",370,{"inputs":[{"name":"self"},{"name":"default"}],"output":{"name":"default"}}],[11,"sub","","",370,{"inputs":[{"name":"self"},{"name":"default"}],"output":{"name":"default"}}],[11,"sub_assign","","",370,{"inputs":[{"name":"self"},{"name":"default"}],"output":null}],[11,"sub_assign","","",370,{"inputs":[{"name":"self"},{"name":"default"}],"output":null}],[11,"mul","","",370,{"inputs":[{"name":"self"},{"name":"default"}],"output":{"name":"default"}}],[11,"mul","","",370,{"inputs":[{"name":"self"},{"name":"default"}],"output":{"name":"default"}}],[11,"mul_assign","","",370,{"inputs":[{"name":"self"},{"name":"default"}],"output":null}],[11,"mul_assign","","",370,{"inputs":[{"name":"self"},{"name":"default"}],"output":null}],[11,"div","","",370,{"inputs":[{"name":"self"},{"name":"default"}],"output":{"name":"default"}}],[11,"div","","",370,{"inputs":[{"name":"self"},{"name":"default"}],"output":{"name":"default"}}],[11,"div_assign","","",370,{"inputs":[{"name":"self"},{"name":"default"}],"output":null}],[11,"div_assign","","",370,{"inputs":[{"name":"self"},{"name":"default"}],"output":null}],[11,"rem","","",370,{"inputs":[{"name":"self"},{"name":"default"}],"output":{"name":"default"}}],[11,"rem","","",370,{"inputs":[{"name":"self"},{"name":"default"}],"output":{"name":"default"}}],[11,"rem_assign","","",370,{"inputs":[{"name":"self"},{"name":"default"}],"output":null}],[11,"rem_assign","","",370,{"inputs":[{"name":"self"},{"name":"default"}],"output":null}],[11,"mul","","",370,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"default"}}],[11,"mul","","",370,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"default"}}],[11,"mul_assign","","",370,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"mul_assign","","",370,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"div","","",370,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"default"}}],[11,"div","","",370,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"default"}}],[11,"div_assign","","",370,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"div_assign","","",370,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"rem","","",370,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"default"}}],[11,"rem","","",370,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"default"}}],[11,"rem_assign","","",370,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"rem_assign","","",370,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"mul_div_floor","","",370,{"inputs":[{"name":"self"},{"name":"default"},{"name":"default"}],"output":{"name":"option"}}],[11,"mul_div_round","","",370,{"inputs":[{"name":"self"},{"name":"default"},{"name":"default"}],"output":{"name":"option"}}],[11,"mul_div_ceil","","",370,{"inputs":[{"name":"self"},{"name":"default"},{"name":"default"}],"output":{"name":"option"}}],[11,"mul_div_floor","","",370,{"inputs":[{"name":"self"},{"name":"default"},{"name":"default"}],"output":{"name":"option"}}],[11,"mul_div_round","","",370,{"inputs":[{"name":"self"},{"name":"default"},{"name":"default"}],"output":{"name":"option"}}],[11,"mul_div_ceil","","",370,{"inputs":[{"name":"self"},{"name":"default"},{"name":"default"}],"output":{"name":"option"}}],[11,"mul_div_floor","","",370,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"}],"output":{"name":"option"}}],[11,"mul_div_round","","",370,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"}],"output":{"name":"option"}}],[11,"mul_div_ceil","","",370,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"}],"output":{"name":"option"}}],[11,"mul_div_floor","","",370,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"}],"output":{"name":"option"}}],[11,"mul_div_round","","",370,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"}],"output":{"name":"option"}}],[11,"mul_div_ceil","","",370,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from","","",373,{"inputs":[{"name":"bytes"}],"output":{"name":"genericformattedvalue"}}],[11,"get_default_format","","",371,{"inputs":[],"output":{"name":"format"}}],[11,"try_from","","",371,{"inputs":[{"name":"genericformattedvalue"}],"output":{"name":"option"}}],[11,"get_format","","",371,{"inputs":[{"name":"self"}],"output":{"name":"format"}}],[11,"from_raw","","",371,{"inputs":[{"name":"format"},{"name":"i64"}],"output":{"name":"self"}}],[11,"to_raw_value","","",371,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"from","","",371,{"inputs":[{"name":"u64"}],"output":{"name":"bytes"}}],[11,"from","","",371,{"inputs":[{"generics":["u64"],"name":"option"}],"output":{"name":"bytes"}}],[11,"into","","",371,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"deref","","",371,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"deref_mut","","",371,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_ref","","",371,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_mut","","",371,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"add","","",371,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"add","","",371,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"add_assign","","",371,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":null}],[11,"add_assign","","",371,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":null}],[11,"sub","","",371,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"sub","","",371,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"sub_assign","","",371,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":null}],[11,"sub_assign","","",371,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":null}],[11,"mul","","",371,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"mul","","",371,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"mul_assign","","",371,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":null}],[11,"mul_assign","","",371,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":null}],[11,"div","","",371,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"div","","",371,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"div_assign","","",371,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":null}],[11,"div_assign","","",371,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":null}],[11,"rem","","",371,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"rem","","",371,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"rem_assign","","",371,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":null}],[11,"rem_assign","","",371,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":null}],[11,"mul","","",371,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bytes"}}],[11,"mul","","",371,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bytes"}}],[11,"mul_assign","","",371,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"mul_assign","","",371,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"div","","",371,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bytes"}}],[11,"div","","",371,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bytes"}}],[11,"div_assign","","",371,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"div_assign","","",371,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"rem","","",371,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bytes"}}],[11,"rem","","",371,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bytes"}}],[11,"rem_assign","","",371,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"rem_assign","","",371,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"mul_div_floor","","",371,{"inputs":[{"name":"self"},{"name":"bytes"},{"name":"bytes"}],"output":{"name":"option"}}],[11,"mul_div_round","","",371,{"inputs":[{"name":"self"},{"name":"bytes"},{"name":"bytes"}],"output":{"name":"option"}}],[11,"mul_div_ceil","","",371,{"inputs":[{"name":"self"},{"name":"bytes"},{"name":"bytes"}],"output":{"name":"option"}}],[11,"mul_div_floor","","",371,{"inputs":[{"name":"self"},{"name":"bytes"},{"name":"bytes"}],"output":{"name":"option"}}],[11,"mul_div_round","","",371,{"inputs":[{"name":"self"},{"name":"bytes"},{"name":"bytes"}],"output":{"name":"option"}}],[11,"mul_div_ceil","","",371,{"inputs":[{"name":"self"},{"name":"bytes"},{"name":"bytes"}],"output":{"name":"option"}}],[11,"mul_div_floor","","",371,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"}],"output":{"name":"option"}}],[11,"mul_div_round","","",371,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"}],"output":{"name":"option"}}],[11,"mul_div_ceil","","",371,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"}],"output":{"name":"option"}}],[11,"mul_div_floor","","",371,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"}],"output":{"name":"option"}}],[11,"mul_div_round","","",371,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"}],"output":{"name":"option"}}],[11,"mul_div_ceil","","",371,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from","","",373,{"inputs":[{"name":"clocktime"}],"output":{"name":"genericformattedvalue"}}],[11,"get_default_format","gstreamer","",6,{"inputs":[],"output":{"name":"format"}}],[11,"try_from","","",6,{"inputs":[{"name":"genericformattedvalue"}],"output":{"name":"option"}}],[11,"get_format","","",6,{"inputs":[{"name":"self"}],"output":{"name":"format"}}],[11,"from_raw","","",6,{"inputs":[{"name":"format"},{"name":"i64"}],"output":{"name":"self"}}],[11,"to_raw_value","","",6,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"from","","",6,{"inputs":[{"name":"u64"}],"output":{"name":"clocktime"}}],[11,"from","","",6,{"inputs":[{"generics":["u64"],"name":"option"}],"output":{"name":"clocktime"}}],[11,"into","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"deref","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"deref_mut","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_ref","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_mut","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"add","","",6,{"inputs":[{"name":"self"},{"name":"clocktime"}],"output":{"name":"clocktime"}}],[11,"add","","",6,{"inputs":[{"name":"self"},{"name":"clocktime"}],"output":{"name":"clocktime"}}],[11,"add_assign","","",6,{"inputs":[{"name":"self"},{"name":"clocktime"}],"output":null}],[11,"add_assign","","",6,{"inputs":[{"name":"self"},{"name":"clocktime"}],"output":null}],[11,"sub","","",6,{"inputs":[{"name":"self"},{"name":"clocktime"}],"output":{"name":"clocktime"}}],[11,"sub","","",6,{"inputs":[{"name":"self"},{"name":"clocktime"}],"output":{"name":"clocktime"}}],[11,"sub_assign","","",6,{"inputs":[{"name":"self"},{"name":"clocktime"}],"output":null}],[11,"sub_assign","","",6,{"inputs":[{"name":"self"},{"name":"clocktime"}],"output":null}],[11,"mul","","",6,{"inputs":[{"name":"self"},{"name":"clocktime"}],"output":{"name":"clocktime"}}],[11,"mul","","",6,{"inputs":[{"name":"self"},{"name":"clocktime"}],"output":{"name":"clocktime"}}],[11,"mul_assign","","",6,{"inputs":[{"name":"self"},{"name":"clocktime"}],"output":null}],[11,"mul_assign","","",6,{"inputs":[{"name":"self"},{"name":"clocktime"}],"output":null}],[11,"div","","",6,{"inputs":[{"name":"self"},{"name":"clocktime"}],"output":{"name":"clocktime"}}],[11,"div","","",6,{"inputs":[{"name":"self"},{"name":"clocktime"}],"output":{"name":"clocktime"}}],[11,"div_assign","","",6,{"inputs":[{"name":"self"},{"name":"clocktime"}],"output":null}],[11,"div_assign","","",6,{"inputs":[{"name":"self"},{"name":"clocktime"}],"output":null}],[11,"rem","","",6,{"inputs":[{"name":"self"},{"name":"clocktime"}],"output":{"name":"clocktime"}}],[11,"rem","","",6,{"inputs":[{"name":"self"},{"name":"clocktime"}],"output":{"name":"clocktime"}}],[11,"rem_assign","","",6,{"inputs":[{"name":"self"},{"name":"clocktime"}],"output":null}],[11,"rem_assign","","",6,{"inputs":[{"name":"self"},{"name":"clocktime"}],"output":null}],[11,"mul","","",6,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"clocktime"}}],[11,"mul","","",6,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"clocktime"}}],[11,"mul_assign","","",6,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"mul_assign","","",6,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"div","","",6,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"clocktime"}}],[11,"div","","",6,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"clocktime"}}],[11,"div_assign","","",6,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"div_assign","","",6,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"rem","","",6,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"clocktime"}}],[11,"rem","","",6,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"clocktime"}}],[11,"rem_assign","","",6,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"rem_assign","","",6,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"mul_div_floor","","",6,{"inputs":[{"name":"self"},{"name":"clocktime"},{"name":"clocktime"}],"output":{"name":"option"}}],[11,"mul_div_round","","",6,{"inputs":[{"name":"self"},{"name":"clocktime"},{"name":"clocktime"}],"output":{"name":"option"}}],[11,"mul_div_ceil","","",6,{"inputs":[{"name":"self"},{"name":"clocktime"},{"name":"clocktime"}],"output":{"name":"option"}}],[11,"mul_div_floor","","",6,{"inputs":[{"name":"self"},{"name":"clocktime"},{"name":"clocktime"}],"output":{"name":"option"}}],[11,"mul_div_round","","",6,{"inputs":[{"name":"self"},{"name":"clocktime"},{"name":"clocktime"}],"output":{"name":"option"}}],[11,"mul_div_ceil","","",6,{"inputs":[{"name":"self"},{"name":"clocktime"},{"name":"clocktime"}],"output":{"name":"option"}}],[11,"mul_div_floor","","",6,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"}],"output":{"name":"option"}}],[11,"mul_div_round","","",6,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"}],"output":{"name":"option"}}],[11,"mul_div_ceil","","",6,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"}],"output":{"name":"option"}}],[11,"mul_div_floor","","",6,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"}],"output":{"name":"option"}}],[11,"mul_div_round","","",6,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"}],"output":{"name":"option"}}],[11,"mul_div_ceil","","",6,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from","gstreamer::format","",373,{"inputs":[{"name":"buffers"}],"output":{"name":"genericformattedvalue"}}],[11,"get_default_format","","",372,{"inputs":[],"output":{"name":"format"}}],[11,"try_from","","",372,{"inputs":[{"name":"genericformattedvalue"}],"output":{"name":"option"}}],[11,"get_format","","",372,{"inputs":[{"name":"self"}],"output":{"name":"format"}}],[11,"from_raw","","",372,{"inputs":[{"name":"format"},{"name":"i64"}],"output":{"name":"self"}}],[11,"to_raw_value","","",372,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"from","","",372,{"inputs":[{"name":"u64"}],"output":{"name":"buffers"}}],[11,"from","","",372,{"inputs":[{"generics":["u64"],"name":"option"}],"output":{"name":"buffers"}}],[11,"into","","",372,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"deref","","",372,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"deref_mut","","",372,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_ref","","",372,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_mut","","",372,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"add","","",372,{"inputs":[{"name":"self"},{"name":"buffers"}],"output":{"name":"buffers"}}],[11,"add","","",372,{"inputs":[{"name":"self"},{"name":"buffers"}],"output":{"name":"buffers"}}],[11,"add_assign","","",372,{"inputs":[{"name":"self"},{"name":"buffers"}],"output":null}],[11,"add_assign","","",372,{"inputs":[{"name":"self"},{"name":"buffers"}],"output":null}],[11,"sub","","",372,{"inputs":[{"name":"self"},{"name":"buffers"}],"output":{"name":"buffers"}}],[11,"sub","","",372,{"inputs":[{"name":"self"},{"name":"buffers"}],"output":{"name":"buffers"}}],[11,"sub_assign","","",372,{"inputs":[{"name":"self"},{"name":"buffers"}],"output":null}],[11,"sub_assign","","",372,{"inputs":[{"name":"self"},{"name":"buffers"}],"output":null}],[11,"mul","","",372,{"inputs":[{"name":"self"},{"name":"buffers"}],"output":{"name":"buffers"}}],[11,"mul","","",372,{"inputs":[{"name":"self"},{"name":"buffers"}],"output":{"name":"buffers"}}],[11,"mul_assign","","",372,{"inputs":[{"name":"self"},{"name":"buffers"}],"output":null}],[11,"mul_assign","","",372,{"inputs":[{"name":"self"},{"name":"buffers"}],"output":null}],[11,"div","","",372,{"inputs":[{"name":"self"},{"name":"buffers"}],"output":{"name":"buffers"}}],[11,"div","","",372,{"inputs":[{"name":"self"},{"name":"buffers"}],"output":{"name":"buffers"}}],[11,"div_assign","","",372,{"inputs":[{"name":"self"},{"name":"buffers"}],"output":null}],[11,"div_assign","","",372,{"inputs":[{"name":"self"},{"name":"buffers"}],"output":null}],[11,"rem","","",372,{"inputs":[{"name":"self"},{"name":"buffers"}],"output":{"name":"buffers"}}],[11,"rem","","",372,{"inputs":[{"name":"self"},{"name":"buffers"}],"output":{"name":"buffers"}}],[11,"rem_assign","","",372,{"inputs":[{"name":"self"},{"name":"buffers"}],"output":null}],[11,"rem_assign","","",372,{"inputs":[{"name":"self"},{"name":"buffers"}],"output":null}],[11,"mul","","",372,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"buffers"}}],[11,"mul","","",372,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"buffers"}}],[11,"mul_assign","","",372,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"mul_assign","","",372,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"div","","",372,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"buffers"}}],[11,"div","","",372,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"buffers"}}],[11,"div_assign","","",372,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"div_assign","","",372,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"rem","","",372,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"buffers"}}],[11,"rem","","",372,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"buffers"}}],[11,"rem_assign","","",372,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"rem_assign","","",372,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"mul_div_floor","","",372,{"inputs":[{"name":"self"},{"name":"buffers"},{"name":"buffers"}],"output":{"name":"option"}}],[11,"mul_div_round","","",372,{"inputs":[{"name":"self"},{"name":"buffers"},{"name":"buffers"}],"output":{"name":"option"}}],[11,"mul_div_ceil","","",372,{"inputs":[{"name":"self"},{"name":"buffers"},{"name":"buffers"}],"output":{"name":"option"}}],[11,"mul_div_floor","","",372,{"inputs":[{"name":"self"},{"name":"buffers"},{"name":"buffers"}],"output":{"name":"option"}}],[11,"mul_div_round","","",372,{"inputs":[{"name":"self"},{"name":"buffers"},{"name":"buffers"}],"output":{"name":"option"}}],[11,"mul_div_ceil","","",372,{"inputs":[{"name":"self"},{"name":"buffers"},{"name":"buffers"}],"output":{"name":"option"}}],[11,"mul_div_floor","","",372,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"}],"output":{"name":"option"}}],[11,"mul_div_round","","",372,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"}],"output":{"name":"option"}}],[11,"mul_div_ceil","","",372,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"}],"output":{"name":"option"}}],[11,"mul_div_floor","","",372,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"}],"output":{"name":"option"}}],[11,"mul_div_round","","",372,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"}],"output":{"name":"option"}}],[11,"mul_div_ceil","","",372,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"}],"output":{"name":"option"}}],[11,"clone","gstreamer","",8,{"inputs":[{"name":"self"}],"output":{"name":"fraction"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",8,{"inputs":[{"name":"self"},{"name":"fraction"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"self"},{"name":"fraction"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",8,{"inputs":[{"name":"self"},{"name":"fraction"}],"output":{"name":"bool"}}],[11,"le","","",8,{"inputs":[{"name":"self"},{"name":"fraction"}],"output":{"name":"bool"}}],[11,"gt","","",8,{"inputs":[{"name":"self"},{"name":"fraction"}],"output":{"name":"bool"}}],[11,"ge","","",8,{"inputs":[{"name":"self"},{"name":"fraction"}],"output":{"name":"bool"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"fraction"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"fraction"}],"output":{"name":"bool"}}],[11,"hash","","",8,null],[11,"new","","",8,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"fraction"}}],[11,"approximate_f32","","",8,{"inputs":[{"name":"f32"}],"output":{"generics":["fraction"],"name":"option"}}],[11,"approximate_f64","","",8,{"inputs":[{"name":"f64"}],"output":{"generics":["fraction"],"name":"option"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",8,{"inputs":[{"name":"self"}],"output":{"name":"rational32"}}],[11,"deref_mut","","",8,{"inputs":[{"name":"self"}],"output":{"name":"rational32"}}],[11,"as_ref","","",8,{"inputs":[{"name":"self"}],"output":{"name":"rational32"}}],[11,"mul","","",8,{"inputs":[{"name":"self"},{"name":"fraction"}],"output":{"name":"fraction"}}],[11,"mul","","",8,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"fraction"}}],[11,"div","","",8,{"inputs":[{"name":"self"},{"name":"fraction"}],"output":{"name":"fraction"}}],[11,"div","","",8,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"fraction"}}],[11,"add","","",8,{"inputs":[{"name":"self"},{"name":"fraction"}],"output":{"name":"fraction"}}],[11,"add","","",8,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"fraction"}}],[11,"sub","","",8,{"inputs":[{"name":"self"},{"name":"fraction"}],"output":{"name":"fraction"}}],[11,"sub","","",8,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"fraction"}}],[11,"rem","","",8,{"inputs":[{"name":"self"},{"name":"fraction"}],"output":{"name":"fraction"}}],[11,"rem","","",8,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"fraction"}}],[11,"neg","","",8,{"inputs":[{"name":"self"}],"output":{"name":"fraction"}}],[11,"from","","",8,{"inputs":[{"name":"i32"}],"output":{"name":"fraction"}}],[11,"from","","",8,null],[11,"into","","",8,null],[11,"from","","",8,{"inputs":[{"name":"rational32"}],"output":{"name":"fraction"}}],[11,"static_type","","",8,{"inputs":[],"output":{"name":"type"}}],[11,"from_value","","",8,{"inputs":[{"name":"value"}],"output":{"name":"fraction"}}],[11,"from_value_optional","","",8,{"inputs":[{"name":"value"}],"output":{"generics":["fraction"],"name":"option"}}],[11,"set_value","","",8,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",375,{"inputs":[{"name":"self"}],"output":{"name":"intrange"}}],[11,"fmt","","",375,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",375,{"inputs":[{"name":"self"},{"name":"intrange"}],"output":{"name":"bool"}}],[11,"ne","","",375,{"inputs":[{"name":"self"},{"name":"intrange"}],"output":{"name":"bool"}}],[11,"hash","","",375,null],[11,"min","","",375,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"max","","",375,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"step","","",375,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"new","","",375,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"self"}}],[11,"new_with_step","","",375,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"self"}}],[11,"new","","",375,{"inputs":[{"name":"i64"},{"name":"i64"}],"output":{"name":"self"}}],[11,"new_with_step","","",375,{"inputs":[{"name":"i64"},{"name":"i64"},{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",375,null],[11,"from","","",375,null],[11,"from","","",375,null],[11,"from","","",375,null],[11,"static_type","","",375,{"inputs":[],"output":{"name":"type"}}],[11,"from_value","","",375,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"from_value_optional","","",375,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"set_value","","",375,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"static_type","","",375,{"inputs":[],"output":{"name":"type"}}],[11,"from_value","","",375,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"from_value_optional","","",375,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"set_value","","",375,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",376,{"inputs":[{"name":"self"}],"output":{"name":"fractionrange"}}],[11,"fmt","","",376,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",376,{"inputs":[{"name":"self"},{"name":"fractionrange"}],"output":{"name":"bool"}}],[11,"ne","","",376,{"inputs":[{"name":"self"},{"name":"fractionrange"}],"output":{"name":"bool"}}],[11,"hash","","",376,null],[11,"new","","",376,{"inputs":[{"name":"t"},{"name":"u"}],"output":{"name":"self"}}],[11,"min","","",376,{"inputs":[{"name":"self"}],"output":{"name":"fraction"}}],[11,"max","","",376,{"inputs":[{"name":"self"}],"output":{"name":"fraction"}}],[11,"from","","",376,null],[11,"static_type","","",376,{"inputs":[],"output":{"name":"type"}}],[11,"from_value","","",376,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"from_value_optional","","",376,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"set_value","","",376,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bitmask"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"bitmask"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"bitmask"}],"output":{"name":"bool"}}],[11,"hash","","",9,null],[11,"new","","",9,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"deref","","",9,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"deref_mut","","",9,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"bitand","","",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitor","","",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitxor","","",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"not","","",9,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"from","","",9,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"static_type","","",9,{"inputs":[],"output":{"name":"type"}}],[11,"from_value","","",9,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"from_value_optional","","",9,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"set_value","","",9,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",377,{"inputs":[{"name":"self"}],"output":{"name":"array"}}],[11,"fmt","","",377,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",377,null],[11,"into_owned","","",377,{"inputs":[{"name":"self"}],"output":{"name":"array"}}],[11,"as_slice","","",377,null],[11,"from","","",377,null],[11,"from","","",377,null],[11,"from_value","","",377,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"from_value_optional","","",377,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"set_value","","",377,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"static_type","","",377,{"inputs":[],"output":{"name":"type"}}],[11,"clone","","",378,{"inputs":[{"name":"self"}],"output":{"name":"list"}}],[11,"fmt","","",378,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",378,null],[11,"into_owned","","",378,{"inputs":[{"name":"self"}],"output":{"name":"list"}}],[11,"as_slice","","",378,null],[11,"from","","",378,null],[11,"from","","",378,null],[11,"from_value","","",378,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"from_value_optional","","",378,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"set_value","","",378,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"static_type","","",378,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"valueorder"}],"output":{"name":"bool"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"valueorder"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",56,null],[11,"to_glib","","",56,null],[11,"from_glib","","",56,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"can_compare","","",379,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"compare","","",379,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"valueorder"}}],[11,"can_intersect","","",379,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"intersect","","",379,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"can_subtract","","",379,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"subtract","","",379,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"can_union","","",379,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"union","","",379,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"fixate","","",379,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_fixed","","",379,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_subset","","",379,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"serialize","","",379,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"deserialize","","",379,{"inputs":[{"name":"t"}],"output":{"generics":["value"],"name":"option"}}],[11,"new","","",380,{"inputs":[],"output":{"name":"self"}}],[11,"upcast","","",380,{"inputs":[{"name":"self"}],"output":{"name":"segment"}}],[11,"upcast_ref","","",380,{"inputs":[{"name":"self"}],"output":{"name":"segment"}}],[11,"reset","","",380,{"inputs":[{"name":"self"}],"output":null}],[11,"clip","","",380,{"inputs":[{"name":"self"},{"name":"v"},{"name":"v"}],"output":{"name":"option"}}],[11,"do_seek","","",380,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"seekflags"},{"name":"seektype"},{"name":"v"},{"name":"seektype"},{"name":"v"}],"output":{"generics":["bool"],"name":"option"}}],[11,"offset_running_time","","",380,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bool"}}],[11,"position_from_running_time","","",380,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"t"}}],[11,"position_from_running_time_full","","",380,null],[11,"position_from_stream_time","","",380,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"t"}}],[11,"position_from_stream_time_full","","",380,null],[11,"set_running_time","","",380,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"to_position","","",380,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"t"}}],[11,"to_running_time","","",380,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"t"}}],[11,"to_running_time_full","","",380,null],[11,"to_stream_time","","",380,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"t"}}],[11,"to_stream_time_full","","",380,null],[11,"get_flags","","",380,{"inputs":[{"name":"self"}],"output":{"name":"segmentflags"}}],[11,"set_flags","","",380,{"inputs":[{"name":"self"},{"name":"segmentflags"}],"output":null}],[11,"get_rate","","",380,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"set_rate","","",380,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"get_applied_rate","","",380,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"set_applied_rate","","",380,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"get_format","","",380,{"inputs":[{"name":"self"}],"output":{"name":"format"}}],[11,"get_base","","",380,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_base","","",380,{"inputs":[{"name":"self"},{"name":"v"}],"output":null}],[11,"get_offset","","",380,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_offset","","",380,{"inputs":[{"name":"self"},{"name":"v"}],"output":null}],[11,"get_start","","",380,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_start","","",380,{"inputs":[{"name":"self"},{"name":"v"}],"output":null}],[11,"get_stop","","",380,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_stop","","",380,{"inputs":[{"name":"self"},{"name":"v"}],"output":null}],[11,"get_time","","",380,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_time","","",380,{"inputs":[{"name":"self"},{"name":"v"}],"output":null}],[11,"get_position","","",380,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_position","","",380,{"inputs":[{"name":"self"},{"name":"v"}],"output":null}],[11,"get_duration","","",380,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_duration","","",380,{"inputs":[{"name":"self"},{"name":"v"}],"output":null}],[11,"eq","","",380,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",380,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"as_ref","","",380,{"inputs":[{"name":"self"}],"output":{"name":"segment"}}],[11,"fmt","","",380,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",380,{"inputs":[],"output":{"name":"self"}}],[11,"static_type","","",380,{"inputs":[],"output":{"name":"type"}}],[0,"toc","","",null,null],[3,"TocRef","gstreamer::toc","",null,null],[3,"TocEntryRef","","",null,null],[6,"Toc","","",null,null],[6,"TocEntry","","",null,null],[11,"new","gstreamer::miniobject","",103,{"inputs":[{"name":"tocscope"}],"output":{"name":"self"}}],[11,"get_scope","gstreamer::toc","",381,{"inputs":[{"name":"self"}],"output":{"name":"tocscope"}}],[11,"find_entry","","",381,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["tocentry"],"name":"option"}}],[11,"get_entries","","",381,{"inputs":[{"name":"self"}],"output":{"generics":["tocentry"],"name":"vec"}}],[11,"append_entry","","",381,{"inputs":[{"name":"self"},{"name":"tocentry"}],"output":null}],[11,"get_tags","","",381,{"inputs":[{"name":"self"}],"output":{"generics":["taglist"],"name":"option"}}],[11,"set_tags","","",381,{"inputs":[{"name":"self"},{"name":"taglist"}],"output":null}],[11,"merge_tags","","",381,{"inputs":[{"name":"self"},{"name":"taglist"},{"name":"tagmergemode"}],"output":null}],[11,"dump","","",381,{"inputs":[{"name":"self"}],"output":null}],[11,"static_type","","",381,{"inputs":[],"output":{"name":"type"}}],[11,"to_owned","","",381,{"inputs":[{"name":"self"}],"output":{"generics":["tocref"],"name":"gstrc"}}],[11,"new","gstreamer::miniobject","",103,{"inputs":[{"name":"tocentrytype"},{"name":"str"}],"output":{"name":"self"}}],[11,"get_entry_type","gstreamer::toc","",382,{"inputs":[{"name":"self"}],"output":{"name":"tocentrytype"}}],[11,"get_uid","","",382,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"append_sub_entry","","",382,{"inputs":[{"name":"self"},{"name":"tocentry"}],"output":null}],[11,"get_sub_entries","","",382,{"inputs":[{"name":"self"}],"output":{"generics":["tocentry"],"name":"vec"}}],[11,"get_parent","","",382,{"inputs":[{"name":"self"}],"output":{"generics":["tocentry"],"name":"option"}}],[11,"get_start_stop_times","","",382,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"set_start_stop_times","","",382,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"i64"}],"output":null}],[11,"get_tags","","",382,{"inputs":[{"name":"self"}],"output":{"generics":["taglist"],"name":"option"}}],[11,"set_tags","","",382,{"inputs":[{"name":"self"},{"name":"taglist"}],"output":null}],[11,"merge_tags","","",382,{"inputs":[{"name":"self"},{"name":"taglist"},{"name":"tagmergemode"}],"output":null}],[11,"is_alternative","","",382,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_sequence","","",382,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_loop","","",382,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"set_loop","","",382,{"inputs":[{"name":"self"},{"name":"toclooptype"},{"name":"i32"}],"output":null}],[11,"static_type","","",382,{"inputs":[],"output":{"name":"type"}}],[11,"to_owned","","",382,{"inputs":[{"name":"self"}],"output":{"generics":["tocentryref"],"name":"gstrc"}}],[11,"clone","gstreamer","",383,{"inputs":[{"name":"self"}],"output":{"name":"clockid"}}],[11,"get_time","","",383,{"inputs":[{"name":"self"}],"output":{"name":"clocktime"}}],[11,"unschedule","","",383,{"inputs":[{"name":"self"}],"output":null}],[11,"wait","","",383,null],[11,"wait_async","","",383,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"clockreturn"}}],[11,"partial_cmp","","",383,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",383,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"eq","","",383,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"adjust_with_calibration","","",60,{"inputs":[{"name":"clocktime"},{"name":"clocktime"},{"name":"clocktime"},{"name":"clocktime"},{"name":"clocktime"}],"output":{"name":"clocktime"}}],[11,"unadjust_with_calibration","","",60,{"inputs":[{"name":"clocktime"},{"name":"clocktime"},{"name":"clocktime"},{"name":"clocktime"},{"name":"clocktime"}],"output":{"name":"clocktime"}}],[0,"functions","","",null,null],[5,"parse_bin_from_description_full","gstreamer::functions","",null,{"inputs":[{"name":"str"},{"name":"bool"},{"name":"p"},{"name":"parseflags"}],"output":{"generics":["element","error"],"name":"result"}}],[5,"parse_launch_full","","",null,{"inputs":[{"name":"str"},{"name":"p"},{"name":"parseflags"}],"output":{"generics":["element","error"],"name":"result"}}],[5,"parse_launchv_full","","",null,null],[5,"util_group_id_next","","",null,{"inputs":[],"output":{"name":"groupid"}}],[5,"util_seqnum_next","","",null,{"inputs":[],"output":{"name":"seqnum"}}],[0,"prelude","gstreamer","",null,null],[8,"MulDiv","gstreamer::prelude","Trait for calculating `val * num / denom` with different rounding modes and overflow protection.",null,null],[16,"Output","","",384,null],[10,"mul_div_floor","","Calculates `floor(val * num / denom)`, i.e. the next integer to the result of the division with the smaller absolute value.",384,{"inputs":[{"name":"self"},{"name":"rhs"},{"name":"rhs"}],"output":{"name":"option"}}],[10,"mul_div_round","","Calculates `round(val * num / denom)`, i.e. the closest integer to the result of the division. If both surrounding integers are the same distance, the one with the bigger absolute value is returned.",384,{"inputs":[{"name":"self"},{"name":"rhs"},{"name":"rhs"}],"output":{"name":"option"}}],[10,"mul_div_ceil","","Calculates `ceil(val * num / denom)`, i.e. the next integer to the result of the division with the bigger absolute value.",384,{"inputs":[{"name":"self"},{"name":"rhs"},{"name":"rhs"}],"output":{"name":"option"}}],[8,"BinExt","","Trait containing all `Bin` methods.",null,null],[10,"add","","Adds the given element to the bin. Sets the element's parent, and thus takes ownership of the element. An element can only be added to one bin.",385,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"find_unlinked_pad","","Recursively looks for elements with an unlinked pad of the given direction within the specified bin and returns an unlinked pad if one is found, or `None` otherwise. If a pad is found, the caller owns a reference to it and should use `GstObjectExt::unref` on the pad when it is not needed any longer. ## `direction` whether to look for an unlinked source or sink pad",385,{"inputs":[{"name":"self"},{"name":"paddirection"}],"output":{"generics":["pad"],"name":"option"}}],[10,"get_by_interface","","Looks for an element inside the bin that implements the given interface. If such an element is found, it returns the element. You can cast this element to the given interface afterwards. If you want all elements that implement the interface, use `BinExt::iterate_all_by_interface`. This function recurses into child bins.",385,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"generics":["element"],"name":"option"}}],[10,"get_by_name","","Gets the element with the given name from a bin. This function recurses into child bins.",385,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["element"],"name":"option"}}],[10,"get_by_name_recurse_up","","Gets the element with the given name from this bin. If the element is not found, a recursion is performed on the parent bin.",385,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["element"],"name":"option"}}],[10,"get_suppressed_flags","","Return the suppressed flags of the bin.",385,{"inputs":[{"name":"self"}],"output":{"name":"elementflags"}}],[10,"recalculate_latency","","Query `self` for the current latency using and reconfigures this latency to all the elements with a LATENCY event.",385,{"inputs":[{"name":"self"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"remove","","Removes the element from the bin, unparenting it as well. Unparenting the element means that the element will be dereferenced, so if the bin holds the only reference to the element, the element will be freed in the process of removing it from the bin. If you want the element to still exist after removing, you need to call `GstObjectExt::ref` before removing it from the bin.",385,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"set_suppressed_flags","","Suppress the given flags on the bin. `ElementFlags` of a child element are propagated when it is added to the bin. When suppressed flags are set, those specified flags will not be propagated to the bin.",385,{"inputs":[{"name":"self"},{"name":"elementflags"}],"output":null}],[10,"sync_children_states","","Synchronizes the state of every child of `self` with the state of `self`. See also `ElementExt::sync_state_with_parent`.",385,{"inputs":[{"name":"self"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"get_property_async_handling","","",385,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_async_handling","","",385,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_message_forward","","",385,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_message_forward","","",385,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_deep_element_added","","Will be emitted after the element was added to sub_bin.",385,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_deep_element_removed","","Will be emitted after the element was removed from sub_bin.",385,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_do_latency","","Will be emitted when the bin needs to perform latency calculations. This signal is only emitted for toplevel bins or when async-handling is enabled.",385,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_element_added","","Will be emitted after the element was added to the bin. ## `element` the `Element` that was added to the bin",385,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_element_removed","","Will be emitted after the element was removed from the bin. ## `element` the `Element` that was removed from the bin",385,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_async_handling_notify","","",385,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_message_forward_notify","","",385,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ChildProxyExt","","Trait containing all `ChildProxy` methods.",null,null],[10,"child_added","","Emits the \"child-added\" signal. ## `child` the newly added child ## `name` the name of the new child",386,{"inputs":[{"name":"self"},{"name":"p"},{"name":"str"}],"output":null}],[10,"child_removed","","Emits the \"child-removed\" signal. ## `child` the removed child ## `name` the name of the old child",386,{"inputs":[{"name":"self"},{"name":"p"},{"name":"str"}],"output":null}],[10,"get_child_by_index","","Fetches a child by its number. ## `index` the child's position in the child list",386,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["object"],"name":"option"}}],[10,"get_child_by_name","","Looks up a child element by the given name.",386,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["object"],"name":"option"}}],[10,"get_children_count","","Gets the number of child objects this parent contains.",386,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"connect_child_added","","Will be emitted after the `object` was added to the `child_proxy`. ## `object` the `gobject::Object` that was added ## `name` the name of the new child",386,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_child_removed","","Will be emitted after the `object` was removed from the `child_proxy`. ## `object` the `gobject::Object` that was removed ## `name` the name of the old child",386,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ClockExt","","Trait containing all `Clock` methods.",null,null],[10,"add_observation","","The time `master` of the master clock and the time `slave` of the slave clock are added to the list of observations. If enough observations are available, a linear regression algorithm is run on the observations and `self` is recalibrated.",387,{"inputs":[{"name":"self"},{"name":"clocktime"},{"name":"clocktime"}],"output":{"generics":["f64"],"name":"option"}}],[10,"add_observation_unapplied","","Add a clock observation to the internal slaving algorithm the same as `ClockExt::add_observation`, and return the result of the master clock estimation, without updating the internal calibration.",387,{"inputs":[{"name":"self"},{"name":"clocktime"},{"name":"clocktime"}],"output":{"name":"option"}}],[10,"adjust_unlocked","","Converts the given `internal` clock time to the external time, adjusting for the rate and reference time set with `ClockExt::set_calibration` and making sure that the returned time is increasing. This function should be called with the clock's OBJECT_LOCK held and is mainly used by clock subclasses.",387,{"inputs":[{"name":"self"},{"name":"clocktime"}],"output":{"name":"clocktime"}}],[10,"get_calibration","","Gets the internal rate and reference time of `self`. See `ClockExt::set_calibration` for more information.",387,null],[10,"get_internal_time","","Gets the current internal time of the given clock. The time is returned unadjusted for the offset and the rate.",387,{"inputs":[{"name":"self"}],"output":{"name":"clocktime"}}],[10,"get_master","","Get the master clock that `self` is slaved to or `None` when the clock is not slaved to any master clock.",387,{"inputs":[{"name":"self"}],"output":{"generics":["clock"],"name":"option"}}],[10,"get_resolution","","Get the accuracy of the clock. The accuracy of the clock is the granularity of the values returned by `ClockExt::get_time`.",387,{"inputs":[{"name":"self"}],"output":{"name":"clocktime"}}],[10,"get_time","","Gets the current time of the given clock. The time is always monotonically increasing and adjusted according to the current offset and rate.",387,{"inputs":[{"name":"self"}],"output":{"name":"clocktime"}}],[10,"get_timeout","","Get the amount of time that master and slave clocks are sampled.",387,{"inputs":[{"name":"self"}],"output":{"name":"clocktime"}}],[10,"is_synced","","Checks if the clock is currently synced.",387,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_calibration","","Adjusts the rate and time of `self`. A rate of 1/1 is the normal speed of the clock. Values bigger than 1/1 make the clock go faster.",387,{"inputs":[{"name":"self"},{"name":"clocktime"},{"name":"clocktime"},{"name":"clocktime"},{"name":"clocktime"}],"output":null}],[10,"set_master","","Set `master` as the master clock for `self`. `self` will be automatically calibrated so that `ClockExt::get_time` reports the same time as the master clock.",387,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"set_resolution","","Set the accuracy of the clock. Some clocks have the possibility to operate with different accuracy at the expense of more resource usage. There is normally no need to change the default resolution of a clock. The resolution of a clock can only be changed if the clock has the `ClockFlags::CanSetResolution` flag set. ## `resolution` The resolution to set",387,{"inputs":[{"name":"self"},{"name":"clocktime"}],"output":{"name":"clocktime"}}],[10,"set_synced","","Sets `self` to synced and emits the GstClock::synced signal, and wakes up any thread waiting in `ClockExt::wait_for_sync`.",387,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_timeout","","Set the amount of time, in nanoseconds, to sample master and slave clocks ## `timeout` a timeout",387,{"inputs":[{"name":"self"},{"name":"clocktime"}],"output":null}],[10,"unadjust_unlocked","","Converts the given `external` clock time to the internal time of `self`, using the rate and reference time set with `ClockExt::set_calibration`. This function should be called with the clock's OBJECT_LOCK held and is mainly used by clock subclasses.",387,{"inputs":[{"name":"self"},{"name":"clocktime"}],"output":{"name":"clocktime"}}],[10,"wait_for_sync","","Waits until `self` is synced for reporting the current time. If `timeout` is `GST_CLOCK_TIME_NONE` it will wait forever, otherwise it will time out after `timeout` nanoseconds.",387,{"inputs":[{"name":"self"},{"name":"clocktime"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"get_property_window_size","","",387,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_window_size","","",387,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_window_threshold","","",387,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_window_threshold","","",387,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"connect_synced","","Signaled on clocks with GST_CLOCK_FLAG_NEEDS_STARTUP_SYNC set once the clock is synchronized, or when it completely lost synchronization. This signal will not be emitted on clocks without the flag.",387,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_timeout_notify","","",387,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_window_size_notify","","",387,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_window_threshold_notify","","",387,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"DeviceExt","","Trait containing all `Device` methods.",null,null],[10,"create_element","","Creates the element with all of the required parameters set to use this device. ## `name` name of new element, or `None` to automatically create a unique name.",388,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["element"],"name":"option"}}],[10,"get_caps","","Getter for the `Caps` that this device supports.",388,{"inputs":[{"name":"self"}],"output":{"generics":["caps"],"name":"option"}}],[10,"get_device_class","","Gets the \"class\" of a device. This is a \"/\" separated list of classes that represent this device. They are a subset of the classes of the `DeviceProvider` that produced this device.",388,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[10,"get_display_name","","Gets the user-friendly name of the device.",388,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[10,"get_properties","","Gets the extra properties of a device.",388,{"inputs":[{"name":"self"}],"output":{"generics":["structure"],"name":"option"}}],[10,"has_classes","","Check if `self` matches all of the given classes ## `classes` a \"/\"-separated list of device classes to match, only match if  all classes are matched",388,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[10,"has_classesv","","Check if `factory` matches all of the given classes ## `classes` a `None` terminated array of classes  to match, only match if all classes are matched",388,null],[10,"reconfigure_element","","Tries to reconfigure an existing element to use the device. If this function fails, then one must destroy the element and create a new one using `DeviceExt::create_element`.",388,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[10,"get_property_caps","","",388,{"inputs":[{"name":"self"}],"output":{"generics":["caps"],"name":"option"}}],[10,"get_property_device_class","","",388,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_property_display_name","","",388,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_property_properties","","",388,{"inputs":[{"name":"self"}],"output":{"generics":["structure"],"name":"option"}}],[10,"connect_removed","","",388,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_caps_notify","","",388,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_device_class_notify","","",388,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_display_name_notify","","",388,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_properties_notify","","",388,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"DeviceMonitorExt","","Trait containing all `DeviceMonitor` methods.",null,null],[10,"add_filter","","Adds a filter for which `Device` will be monitored, any device that matches all these classes and the `Caps` will be returned.",389,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":{"name":"u32"}}],[10,"get_bus","","Gets the `Bus` of this `DeviceMonitor`",389,{"inputs":[{"name":"self"}],"output":{"name":"bus"}}],[10,"get_devices","","Gets a list of devices from all of the relevant monitors. This may actually probe the hardware if the monitor is not currently started.",389,{"inputs":[{"name":"self"}],"output":{"generics":["device"],"name":"vec"}}],[10,"get_providers","","Get a list of the currently selected device provider factories.",389,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[10,"get_show_all_devices","","Get if `self` is curretly showing all devices, even those from hidden providers.",389,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"remove_filter","","Removes a filter from the `DeviceMonitor` using the id that was returned by `DeviceMonitorExt::add_filter`. ## `filter_id` the id of the filter",389,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[10,"set_show_all_devices","","Set if all devices should be visible, even those devices from hidden providers. Setting `show_all` to true might show some devices multiple times. ## `show_all` show all devices",389,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"start","","Starts monitoring the devices, one this has succeeded, the `MessageType::DeviceAdded` and `MessageType::DeviceRemoved` messages will be emitted on the bus when the list of devices changes.",389,{"inputs":[{"name":"self"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"stop","","Stops monitoring the devices.",389,{"inputs":[{"name":"self"}],"output":null}],[10,"get_property_show_all","","",389,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_show_all","","",389,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_property_show_all_notify","","",389,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"DeviceProviderExt","","Trait containing all `DeviceProvider` methods.",null,null],[10,"can_monitor","","",390,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"device_add","","Posts a message on the provider's `Bus` to inform applications that a new device has been added.",390,{"inputs":[{"name":"self"},{"name":"device"}],"output":null}],[10,"device_remove","","Posts a message on the provider's `Bus` to inform applications that a device has been removed.",390,{"inputs":[{"name":"self"},{"name":"device"}],"output":null}],[10,"get_bus","","Gets the `Bus` of this `DeviceProvider`",390,{"inputs":[{"name":"self"}],"output":{"name":"bus"}}],[10,"get_devices","","Gets a list of devices that this provider understands. This may actually probe the hardware if the provider is not currently started.",390,{"inputs":[{"name":"self"}],"output":{"generics":["device"],"name":"vec"}}],[10,"get_factory","","Retrieves the factory that was used to create this device provider.",390,{"inputs":[{"name":"self"}],"output":{"generics":["deviceproviderfactory"],"name":"option"}}],[10,"get_hidden_providers","","Get the provider factory names of the `DeviceProvider` instances that are hidden by `self`.",390,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[10,"hide_provider","","Make `self` hide the devices from the factory with `name`.",390,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"start","","Starts providering the devices. This will cause `MessageType::DeviceAdded` and `MessageType::DeviceRemoved` messages to be posted on the provider's bus when devices are added or removed from the system.",390,{"inputs":[{"name":"self"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"stop","","Decreases the use-count by one. If the use count reaches zero, this `DeviceProvider` will stop providering the devices. This needs to be called the same number of times that `DeviceProviderExt::start` was called.",390,{"inputs":[{"name":"self"}],"output":null}],[10,"unhide_provider","","Make `self` unhide the devices from factory `name`.",390,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"connect_provider_hidden","","",390,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_provider_unhidden","","",390,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ElementExt","","Trait containing all `Element` methods.",null,null],[10,"abort_state","","Abort the state change of the element. This function is used by elements that do asynchronous state changes and find out something is wrong.",391,{"inputs":[{"name":"self"}],"output":null}],[10,"add_pad","","Adds a pad (link point) to `self`. `pad`'s parent will be set to `self`; see `GstObjectExt::set_parent` for refcounting information.",391,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"change_state","","Perform `transition` on `self`.",391,{"inputs":[{"name":"self"},{"name":"statechange"}],"output":{"name":"statechangereturn"}}],[10,"continue_state","","Commit the state change of the element and proceed to the next pending state if any. This function is used by elements that do asynchronous state changes. The core will normally call this method automatically when an element returned `StateChangeReturn::Success` from the state change function.",391,{"inputs":[{"name":"self"},{"name":"statechangereturn"}],"output":{"name":"statechangereturn"}}],[10,"create_all_pads","","Creates a pad for each pad template that is always available. This function is only useful during object initialization of subclasses of `Element`.",391,{"inputs":[{"name":"self"}],"output":null}],[10,"get_base_time","","Returns the base time of the element. The base time is the absolute time of the clock when this element was last put to PLAYING. Subtracting the base time from the clock time gives the running time of the element.",391,{"inputs":[{"name":"self"}],"output":{"name":"clocktime"}}],[10,"get_bus","","Returns the bus of the element. Note that only a `Pipeline` will provide a bus for the application.",391,{"inputs":[{"name":"self"}],"output":{"generics":["bus"],"name":"option"}}],[10,"get_clock","","Gets the currently configured clock of the element. This is the clock as was last set with `ElementExt::set_clock`.",391,{"inputs":[{"name":"self"}],"output":{"generics":["clock"],"name":"option"}}],[10,"get_compatible_pad","","Looks for an unlinked pad to which the given pad can link. It is not guaranteed that linking the pads will work, though it should work in most cases.",391,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":{"generics":["pad"],"name":"option"}}],[10,"get_compatible_pad_template","","Retrieves a pad template from `self` that is compatible with `compattempl`. Pads from compatible templates can be linked together. ## `compattempl` the `PadTemplate` to find a compatible  template for",391,{"inputs":[{"name":"self"},{"name":"padtemplate"}],"output":{"generics":["padtemplate"],"name":"option"}}],[10,"get_context","","Gets the context with `context_type` set on the element or NULL.",391,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["context"],"name":"option"}}],[10,"get_contexts","","Gets the contexts set on the element.",391,{"inputs":[{"name":"self"}],"output":{"generics":["context"],"name":"vec"}}],[10,"get_factory","","Retrieves the factory that was used to create this element.",391,{"inputs":[{"name":"self"}],"output":{"generics":["elementfactory"],"name":"option"}}],[10,"get_request_pad","","Retrieves a pad from the element by name (e.g. \"src_%d\"). This version only retrieves request pads. The pad should be released with `ElementExt::release_request_pad`.",391,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["pad"],"name":"option"}}],[10,"get_start_time","","Returns the start time of the element. The start time is the running time of the clock when this element was last put to PAUSED.",391,{"inputs":[{"name":"self"}],"output":{"name":"clocktime"}}],[10,"get_state","","Gets the state of the element.",391,null],[10,"get_static_pad","","Retrieves a pad from `self` by name. This version only retrieves already-existing (i.e. 'static') pads. ## `name` the name of the static `Pad` to retrieve.",391,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["pad"],"name":"option"}}],[10,"is_locked_state","","Checks if the state of an element is locked. If the state of an element is locked, state changes of the parent don't affect the element. This way you can leave currently unused elements inside bins. Just lock their state before changing the state from `State::Null`.",391,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"link","","Links `self` to `dest`. The link must be from source to destination; the other direction will not be tried. The function looks for existing pads that aren't linked yet. It will request new pads if necessary. Such pads need to be released manually when unlinking. If multiple links are possible, only one is established.",391,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"link_filtered","","Links `self` to `dest` using the given caps as filtercaps. The link must be from source to destination; the other direction will not be tried. The function looks for existing pads that aren't linked yet. It will request new pads if necessary. If multiple links are possible, only one is established.",391,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"link_pads","","Links the two named pads of the source and destination elements. Side effect is that if one of the pads has no parent, it becomes a child of the parent of the other element. If they have different parents, the link fails. ## `srcpadname` the name of the `Pad` in source element  or `None` for any pad. ## `dest` the `Element` containing the destination pad. ## `destpadname` the name of the `Pad` in destination element, or `None` for any pad.",391,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"},{"name":"r"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"link_pads_filtered","","Links the two named pads of the source and destination elements. Side effect is that if one of the pads has no parent, it becomes a child of the parent of the other element. If they have different parents, the link fails. If `caps` is not `None`, makes sure that the caps of the link is a subset of `caps`. ## `srcpadname` the name of the `Pad` in source element  or `None` for any pad. ## `dest` the `Element` containing the destination pad. ## `destpadname` the name of the `Pad` in destination element  or `None` for any pad. ## `filter` the `Caps` to filter the link,  or `None` for no filter.",391,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"},{"name":"r"},{"name":"s"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"link_pads_full","","Links the two named pads of the source and destination elements. Side effect is that if one of the pads has no parent, it becomes a child of the parent of the other element. If they have different parents, the link fails.",391,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"},{"name":"r"},{"name":"padlinkcheck"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"lost_state","","Brings the element to the lost state. The current state of the element is copied to the pending state so that any call to `ElementExt::get_state` will return `StateChangeReturn::Async`.",391,{"inputs":[{"name":"self"}],"output":null}],[10,"no_more_pads","","Use this function to signal that the element does not expect any more pads to show up in the current pipeline. This function should be called whenever pads have been added by the element itself. Elements with `PadPresence::Sometimes` pad templates use this in combination with autopluggers to figure out that the element is done initializing its pads.",391,{"inputs":[{"name":"self"}],"output":null}],[10,"post_message","","Post a message on the element's `Bus`. This function takes ownership of the message; if you want to access the message after this call, you should add an additional reference before calling. ## `message` a `Message` to post",391,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"provide_clock","","Get the clock provided by the given element. > An element is only required to provide a clock in the PAUSED > state. Some elements can provide a clock in other states.",391,{"inputs":[{"name":"self"}],"output":{"generics":["clock"],"name":"option"}}],[10,"release_request_pad","","Makes the element free the previously requested pad as obtained with `ElementExt::request_pad`.",391,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"remove_pad","","Removes `pad` from `self`. `pad` will be destroyed if it has not been referenced elsewhere using `GstObjectExt::unparent`.",391,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"request_pad","","Retrieves a request pad from the element according to the provided template. Pad templates can be looked up using `ElementFactory::get_static_pad_templates`.",391,{"inputs":[{"name":"self"},{"name":"padtemplate"},{"name":"p"},{"name":"q"}],"output":{"generics":["pad"],"name":"option"}}],[10,"set_base_time","","Set the base time of an element. See `ElementExt::get_base_time`.",391,{"inputs":[{"name":"self"},{"name":"clocktime"}],"output":null}],[10,"set_bus","","Sets the bus of the element. Increases the refcount on the bus. For internal use only, unless you're testing elements.",391,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_clock","","Sets the clock for the element. This function increases the refcount on the clock. Any previously set clock on the object is unreffed. ## `clock` the `Clock` to set for the element.",391,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"set_context","","Sets the context of the element. Increases the refcount of the context.",391,{"inputs":[{"name":"self"},{"name":"context"}],"output":null}],[10,"set_locked_state","","Locks the state of an element, so state changes of the parent don't affect this element anymore.",391,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[10,"set_start_time","","Set the start time of an element. The start time of the element is the running time of the element when it last went to the PAUSED state. In READY or after a flushing seek, it is set to 0.",391,{"inputs":[{"name":"self"},{"name":"clocktime"}],"output":null}],[10,"set_state","","Sets the state of the element. This function will try to set the requested state by going through all the intermediary states and calling the class's state change function for each.",391,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"statechangereturn"}}],[10,"sync_state_with_parent","","Tries to change the state of the element to the same as its parent. If this function returns `false`, the state of element is undefined.",391,{"inputs":[{"name":"self"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"unlink","","Unlinks all source pads of the source element with all sink pads of the sink element to which they are linked.",391,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"unlink_pads","","Unlinks the two named pads of the source and destination elements.",391,{"inputs":[{"name":"self"},{"name":"str"},{"name":"p"},{"name":"str"}],"output":null}],[10,"connect_no_more_pads","","This signals that the element will not generate more dynamic pads. Note that this signal will usually be emitted from the context of the streaming thread.",391,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_pad_added","","a new `Pad` has been added to the element. Note that this signal will usually be emitted from the context of the streaming thread. Also keep in mind that if you add new elements to the pipeline in the signal handler you will need to set them to the desired target state with `ElementExt::set_state` or `ElementExt::sync_state_with_parent`. ## `new_pad` the pad that has been added",391,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_pad_removed","","a `Pad` has been removed from the element ## `old_pad` the pad that has been removed",391,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"GhostPadExt","","Trait containing all `GhostPad` methods.",null,null],[10,"get_target","","Get the target pad of `self`. Unref target pad after usage.",392,{"inputs":[{"name":"self"}],"output":{"generics":["pad"],"name":"option"}}],[10,"set_target","","Set the new target of the ghostpad `self`. Any existing target is unlinked and links to the new target are established. if `newtarget` is `None` the target will be cleared. ## `newtarget` the new pad target",392,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"generics":["boolerror"],"name":"result"}}],[8,"GstObjectExt","","Trait containing all `Object` methods.",null,null],[10,"default_error","","A default error function that uses `g_printerr` to display the error message and the optional debug sting..",393,{"inputs":[{"name":"self"},{"name":"error"},{"name":"p"}],"output":null}],[10,"get_control_rate","","Obtain the control-rate for this `self`. Audio processing `Element` objects will use this rate to sub-divide their processing loop and call `GstObjectExt::sync_values` inbetween. The length of the processing segment should be up to `control`-rate nanoseconds.",393,{"inputs":[{"name":"self"}],"output":{"name":"clocktime"}}],[10,"get_name","","Returns a copy of the name of `self`. Caller should `g_free` the return value after usage. For a nameless object, this returns `None`, which you can safely `g_free` as well.",393,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[10,"get_parent","","Returns the parent of `self`. This function increases the refcount of the parent object so you should `GstObjectExt::unref` it after usage.",393,{"inputs":[{"name":"self"}],"output":{"generics":["object"],"name":"option"}}],[10,"get_path_string","","Generates a string describing the path of `self` in the object hierarchy. Only useful (or used) for debugging.",393,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[10,"has_active_control_bindings","","Check if the `self` has active controlled properties.",393,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"has_ancestor","","Check if `self` has an ancestor `ancestor` somewhere up in the hierarchy. One can e.g. check if a `Element` is inside a `Pipeline`.",393,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[10,"has_as_ancestor","","Check if `self` has an ancestor `ancestor` somewhere up in the hierarchy. One can e.g. check if a `Element` is inside a `Pipeline`. ## `ancestor` a `Object` to check as ancestor",393,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[10,"has_as_parent","","Check if `parent` is the parent of `self`. E.g. a `Element` can check if it owns a given `Pad`. ## `parent` a `Object` to check as parent",393,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[10,"set_control_binding_disabled","","This function is used to disable the control bindings on a property for some time, i.e. `GstObjectExt::sync_values` will do nothing for the property. ## `property_name` property to disable ## `disabled` boolean that specifies whether to disable the controller or not.",393,{"inputs":[{"name":"self"},{"name":"str"},{"name":"bool"}],"output":null}],[10,"set_control_bindings_disabled","","This function is used to disable all controlled properties of the `self` for some time, i.e. `GstObjectExt::sync_values` will do nothing. ## `disabled` boolean that specifies whether to disable the controller or not.",393,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_control_rate","","Change the control-rate for this `self`. Audio processing `Element` objects will use this rate to sub-divide their processing loop and call `GstObjectExt::sync_values` inbetween. The length of the processing segment should be up to `control`-rate nanoseconds.",393,{"inputs":[{"name":"self"},{"name":"clocktime"}],"output":null}],[10,"set_name","","Sets the name of `self`, or gives `self` a guaranteed unique name (if `name` is `None`). This function makes a copy of the provided name, so the caller retains ownership of the name it sent. ## `name` new name of object",393,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"set_parent","","Sets the parent of `self` to `parent`. The object's reference count will be incremented, and any floating reference will be removed (see `Object::ref_sink`). ## `parent` new parent of object",393,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"suggest_next_sync","","Returns a suggestion for timestamps where buffers should be split to get best controller results.",393,{"inputs":[{"name":"self"}],"output":{"name":"clocktime"}}],[10,"sync_values","","Sets the properties of the object, according to the `GstControlSources` that (maybe) handle them and for the given timestamp.",393,{"inputs":[{"name":"self"},{"name":"clocktime"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"unparent","","Clear the parent of `self`, removing the associated reference. This function decreases the refcount of `self`.",393,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_property_name_notify","","",393,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_parent_notify","","",393,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"PadExt","","Trait containing all `Pad` methods.",null,null],[10,"activate_mode","","Activates or deactivates the given pad in `mode` via dispatching to the pad's activatemodefunc. For use from within pad activation functions only.",394,{"inputs":[{"name":"self"},{"name":"padmode"},{"name":"bool"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"can_link","","Checks if the source pad and the sink pad are compatible so they can be linked. ## `sinkpad` the sink `Pad`.",394,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[10,"check_reconfigure","","Check and clear the `PadFlags::NeedReconfigure` flag on `self` and return `true` if the flag was set.",394,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"create_stream_id","","Creates a stream-id for the source `Pad` `self` by combining the upstream information with the optional `stream_id` of the stream of `self`. `self` must have a parent `Element` and which must have zero or one sinkpad. `stream_id` can only be `None` if the parent element of `self` has only a single source pad.",394,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_allowed_caps","","Gets the capabilities of the allowed media types that can flow through `self` and its peer.",394,{"inputs":[{"name":"self"}],"output":{"generics":["caps"],"name":"option"}}],[10,"get_current_caps","","Gets the capabilities currently configured on `self` with the last `EventType::Caps` event.",394,{"inputs":[{"name":"self"}],"output":{"generics":["caps"],"name":"option"}}],[10,"get_direction","","Gets the direction of the pad. The direction of the pad is decided at construction time so this function does not take the LOCK.",394,{"inputs":[{"name":"self"}],"output":{"name":"paddirection"}}],[10,"get_last_flow_return","","Gets the `FlowReturn` return from the last data passed by this pad.",394,{"inputs":[{"name":"self"}],"output":{"name":"flowreturn"}}],[10,"get_offset","","Get the offset applied to the running time of `self`. `self` has to be a source pad.",394,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"get_pad_template","","Gets the template for `self`.",394,{"inputs":[{"name":"self"}],"output":{"generics":["padtemplate"],"name":"option"}}],[10,"get_pad_template_caps","","Gets the capabilities for `self`'s template.",394,{"inputs":[{"name":"self"}],"output":{"generics":["caps"],"name":"option"}}],[10,"get_parent_element","","Gets the parent of `self`, cast to a `Element`. If a `self` has no parent or its parent is not an element, return `None`.",394,{"inputs":[{"name":"self"}],"output":{"generics":["element"],"name":"option"}}],[10,"get_peer","","Gets the peer of `self`. This function refs the peer pad so you need to unref it after use.",394,{"inputs":[{"name":"self"}],"output":{"generics":["pad"],"name":"option"}}],[10,"get_sticky_event","","Returns a new reference of the sticky event of type `event_type` from the event. ## `event_type` the `EventType` that should be retrieved. ## `idx` the index of the event",394,{"inputs":[{"name":"self"},{"name":"eventtype"},{"name":"u32"}],"output":{"generics":["event"],"name":"option"}}],[10,"get_stream","","Returns the current `Stream` for the `self`, or `None` if none has been set yet, i.e. the pad has not received a stream-start event yet.",394,{"inputs":[{"name":"self"}],"output":{"generics":["stream"],"name":"option"}}],[10,"get_stream_id","","Returns the current stream-id for the `self`, or `None` if none has been set yet, i.e. the pad has not received a stream-start event yet.",394,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_task_state","","Get `self` task state. If no task is currently set, `TaskState::Stopped` is returned.",394,{"inputs":[{"name":"self"}],"output":{"name":"taskstate"}}],[10,"has_current_caps","","Check if `self` has caps set on it with a `EventType::Caps` event.",394,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_active","","Query if a pad is active",394,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_blocked","","Checks if the pad is blocked or not. This function returns the last requested state of the pad. It is not certain that the pad is actually blocking at this point (see `PadExt::is_blocking`).",394,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_blocking","","Checks if the pad is blocking or not. This is a guaranteed state of whether the pad is actually blocking on a `Buffer` or a `Event`.",394,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_linked","","Checks if a `self` is linked to another pad or not.",394,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"link","","Links the source pad and the sink pad. ## `sinkpad` the sink `Pad` to link.",394,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"padlinkreturn"}}],[10,"link_full","","Links the source pad and the sink pad.",394,{"inputs":[{"name":"self"},{"name":"p"},{"name":"padlinkcheck"}],"output":{"name":"padlinkreturn"}}],[10,"link_maybe_ghosting","","Links `self` to `sink`, creating any `GhostPad`'s in between as necessary.",394,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"link_maybe_ghosting_full","","Links `self` to `sink`, creating any `GhostPad`'s in between as necessary.",394,{"inputs":[{"name":"self"},{"name":"p"},{"name":"padlinkcheck"}],"output":{"name":"bool"}}],[10,"mark_reconfigure","","Mark a pad for needing reconfiguration. The next call to `PadExt::check_reconfigure` will return `true` after this call.",394,{"inputs":[{"name":"self"}],"output":null}],[10,"needs_reconfigure","","Check the `PadFlags::NeedReconfigure` flag on `self` and return `true` if the flag was set.",394,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"pause_task","","Pause the task of `self`. This function will also wait until the function executed by the task is finished if this function is not called from the task function.",394,{"inputs":[{"name":"self"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"peer_query_accept_caps","","Check if the peer of `self` accepts `caps`. If `self` has no peer, this function returns `true`. ## `caps` a `Caps` to check on the pad",394,{"inputs":[{"name":"self"},{"name":"caps"}],"output":{"name":"bool"}}],[10,"peer_query_caps","","Gets the capabilities of the peer connected to this pad. Similar to `PadExt::query_caps`.",394,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["caps"],"name":"option"}}],[10,"query_accept_caps","","Check if the given pad accepts the caps. ## `caps` a `Caps` to check on the pad",394,{"inputs":[{"name":"self"},{"name":"caps"}],"output":{"name":"bool"}}],[10,"query_caps","","Gets the capabilities this pad can produce or consume. Note that this method doesn't necessarily return the caps set by sending a `Event::new_caps` - use `PadExt::get_current_caps` for that instead. gst_pad_query_caps returns all possible caps a pad can operate with, using the pad's CAPS query function, If the query fails, this function will return `filter`, if not `None`, otherwise ANY.",394,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["caps"],"name":"option"}}],[10,"set_active","","Activates or deactivates the given pad. Normally called from within core state change functions.",394,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"set_offset","","Set the offset that will be applied to the running time of `self`. ## `offset` the offset",394,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[10,"stop_task","","Stop the task of `self`. This function will also make sure that the function executed by the task will effectively stop if not called from the GstTaskFunction.",394,{"inputs":[{"name":"self"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"store_sticky_event","","Store the sticky `event` on `self` ## `event` a `Event`",394,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"flowreturn"}}],[10,"unlink","","Unlinks the source pad from the sink pad. Will emit the `Pad::unlinked` signal on both pads. ## `sinkpad` the sink `Pad` to unlink.",394,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"use_fixed_caps","","A helper function you can use that sets the FIXED_CAPS flag This way the default CAPS query will always return the negotiated caps or in case the pad is not negotiated, the padtemplate caps.",394,{"inputs":[{"name":"self"}],"output":null}],[10,"get_property_caps","","",394,{"inputs":[{"name":"self"}],"output":{"generics":["caps"],"name":"option"}}],[10,"get_property_template","","",394,{"inputs":[{"name":"self"}],"output":{"generics":["padtemplate"],"name":"option"}}],[10,"set_property_template","","",394,{"inputs":[{"name":"self"},{"generics":["padtemplate"],"name":"option"}],"output":null}],[10,"connect_linked","","Signals that a pad has been linked to the peer pad. ## `peer` the peer pad that has been connected",394,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_unlinked","","Signals that a pad has been unlinked from the peer pad. ## `peer` the peer pad that has been disconnected",394,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_caps_notify","","",394,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_direction_notify","","",394,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_offset_notify","","",394,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_template_notify","","",394,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"PipelineExt","","Trait containing all `Pipeline` methods.",null,null],[10,"auto_clock","","Let `self` select a clock automatically. This is the default behaviour.",395,{"inputs":[{"name":"self"}],"output":null}],[10,"get_auto_flush_bus","","Check if `self` will automatically flush messages when going to the NULL state.",395,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_delay","","Get the configured delay (see `PipelineExt::set_delay`).",395,{"inputs":[{"name":"self"}],"output":{"name":"clocktime"}}],[10,"get_latency","","Gets the latency that should be configured on the pipeline. See `PipelineExt::set_latency`.",395,{"inputs":[{"name":"self"}],"output":{"name":"clocktime"}}],[10,"get_pipeline_clock","","Gets the current clock used by `self`.",395,{"inputs":[{"name":"self"}],"output":{"generics":["clock"],"name":"option"}}],[10,"set_auto_flush_bus","","Usually, when a pipeline goes from READY to NULL state, it automatically flushes all pending messages on the bus, which is done for refcounting purposes, to break circular references.",395,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_delay","","Set the expected delay needed for all elements to perform the PAUSED to PLAYING state change. `delay` will be added to the base time of the elements so that they wait an additional `delay` amount of time before starting to process buffers and cannot be `GST_CLOCK_TIME_NONE`.",395,{"inputs":[{"name":"self"},{"name":"clocktime"}],"output":null}],[10,"set_latency","","Sets the latency that should be configured on the pipeline. Setting GST_CLOCK_TIME_NONE will restore the default behaviour of using the minimum latency from the LATENCY query. Setting this is usually not required and the pipeline will figure out an appropriate latency automatically.",395,{"inputs":[{"name":"self"},{"name":"clocktime"}],"output":null}],[10,"use_clock","","Force `self` to use the given `clock`. The pipeline will always use the given clock even if new clock providers are added to this pipeline.",395,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"connect_property_auto_flush_bus_notify","","",395,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_delay_notify","","",395,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_latency_notify","","",395,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"PluginFeatureExt","","Trait containing all `PluginFeature` methods.",null,null],[10,"check_version","","Checks whether the given plugin feature is at least  the required version ## `min_major` minimum required major version ## `min_minor` minimum required minor version ## `min_micro` minimum required micro version",396,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"bool"}}],[10,"get_plugin","","Get the plugin that provides this feature.",396,{"inputs":[{"name":"self"}],"output":{"generics":["plugin"],"name":"option"}}],[10,"get_plugin_name","","Get the name of the plugin that provides this feature.",396,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_rank","","Gets the rank of a plugin feature.",396,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"load","","Loads the plugin containing `self` if it's not already loaded. `self` is unaffected; use the return value instead.",396,{"inputs":[{"name":"self"}],"output":{"generics":["pluginfeature"],"name":"option"}}],[10,"set_rank","","Specifies a rank for a plugin feature, so that autoplugging uses the most appropriate feature. ## `rank` rank value - higher number means more priority rank",396,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[8,"PresetExt","","Trait containing all `Preset` methods.",null,null],[10,"delete_preset","","Delete the given preset. ## `name` preset name to remove",397,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"get_meta","","Gets the `value` for an existing meta data `tag`. Meta data `tag` names can be something like e.g. \"comment\". Returned values need to be released when done. ## `name` preset name ## `tag` meta data item name ## `value` value",397,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_preset_names","","Get a copy of preset names as a `None` terminated string array.",397,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[10,"get_property_names","","Get a the names of the GObject properties that can be used for presets.",397,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[10,"is_editable","","Check if one can add new presets, change existing ones and remove presets.",397,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"load_preset","","Load the given preset. ## `name` preset name to load",397,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"rename_preset","","Renames a preset. If there is already a preset by the `new_name` it will be overwritten. ## `old_name` current preset name ## `new_name` new preset name",397,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"save_preset","","Save the current object settings as a preset under the given name. If there is already a preset by this `name` it will be overwritten. ## `name` preset name to save",397,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"set_meta","","Sets a new `value` for an existing meta data item or adds a new item. Meta data `tag` names can be something like e.g. \"comment\". Supplying `None` for the `value` will unset an existing value. ## `name` preset name ## `tag` meta data item name ## `value` new value",397,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"p"}],"output":{"generics":["boolerror"],"name":"result"}}],[8,"ProxyPadExt","","Trait containing all `ProxyPad` methods.",null,null],[10,"get_internal","","Get the internal pad of `self`. Unref target pad after usage.",398,{"inputs":[{"name":"self"}],"output":{"generics":["proxypad"],"name":"option"}}],[8,"SystemClockExt","","Trait containing all `SystemClock` methods.",null,null],[10,"get_property_clock_type","","",399,{"inputs":[{"name":"self"}],"output":{"name":"clocktype"}}],[10,"set_property_clock_type","","",399,{"inputs":[{"name":"self"},{"name":"clocktype"}],"output":null}],[10,"connect_property_clock_type_notify","","",399,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"TagSetterExt","","Trait containing all `TagSetter` methods.",null,null],[10,"get_tag_list","","Returns the current list of tags the setter uses. The list should not be modified or freed.",400,{"inputs":[{"name":"self"}],"output":{"generics":["taglist"],"name":"option"}}],[10,"get_tag_merge_mode","","Queries the mode by which tags inside the setter are overwritten by tags from events",400,{"inputs":[{"name":"self"}],"output":{"name":"tagmergemode"}}],[10,"merge_tags","","Merges the given list into the setter's list using the given mode. ## `list` a tag list to merge from ## `mode` the mode to merge with",400,{"inputs":[{"name":"self"},{"name":"taglist"},{"name":"tagmergemode"}],"output":null}],[10,"reset_tags","","Reset the internal taglist. Elements should call this from within the state-change handler.",400,{"inputs":[{"name":"self"}],"output":null}],[10,"set_tag_merge_mode","","Sets the given merge mode that is used for adding tags from events to tags specified by this interface. The default is `TagMergeMode::Keep`, which keeps the tags set with this interface and discards tags from events. ## `mode` The mode with which tags are added",400,{"inputs":[{"name":"self"},{"name":"tagmergemode"}],"output":null}],[8,"TocSetterExt","","Trait containing all `TocSetter` methods.",null,null],[10,"get_toc","","Return current TOC the setter uses. The TOC should not be modified without making it writable first.",401,{"inputs":[{"name":"self"}],"output":{"generics":["toc"],"name":"option"}}],[10,"reset","","Reset the internal TOC. Elements should call this from within the state-change handler.",401,{"inputs":[{"name":"self"}],"output":null}],[10,"set_toc","","Set the given TOC on the setter. Previously set TOC will be unreffed before setting a new one. ## `toc` a `Toc` to set.",401,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[8,"URIHandlerExt","","Trait containing all `URIHandler` methods.",null,null],[10,"get_protocols","","Gets the list of protocols supported by `self`. This list may not be modified.",402,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[10,"get_uri","","Gets the currently handled URI.",402,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_uri_type","","Gets the type of the given URI handler",402,{"inputs":[{"name":"self"}],"output":{"name":"uritype"}}],[10,"set_uri","","Tries to set the URI of the given handler. ## `uri` URI to set",402,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[8,"ElementExtManual","","",null,null],[10,"query","","",403,{"inputs":[{"name":"self"},{"name":"queryref"}],"output":{"name":"bool"}}],[10,"send_event","","",403,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[10,"get_metadata","","",403,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["str"],"name":"option"}}],[10,"get_pad_template","","",403,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["padtemplate"],"name":"option"}}],[10,"get_pad_template_list","","",403,{"inputs":[{"name":"self"}],"output":{"generics":["padtemplate"],"name":"vec"}}],[10,"message_full","","",403,{"inputs":[{"name":"self"},{"name":"elementmessagetype"},{"name":"t"},{"generics":["str"],"name":"option"},{"generics":["str"],"name":"option"},{"name":"str"},{"name":"str"},{"name":"u32"}],"output":null}],[10,"message_full_with_details","","",403,{"inputs":[{"name":"self"},{"name":"elementmessagetype"},{"name":"t"},{"generics":["str"],"name":"option"},{"generics":["str"],"name":"option"},{"name":"str"},{"name":"str"},{"name":"u32"},{"name":"structure"}],"output":null}],[10,"post_error_message","","",403,{"inputs":[{"name":"self"},{"name":"errormessage"}],"output":null}],[10,"iterate_pads","","",403,{"inputs":[{"name":"self"}],"output":{"generics":["pad"],"name":"iterator"}}],[10,"iterate_sink_pads","","",403,{"inputs":[{"name":"self"}],"output":{"generics":["pad"],"name":"iterator"}}],[10,"iterate_src_pads","","",403,{"inputs":[{"name":"self"}],"output":{"generics":["pad"],"name":"iterator"}}],[10,"get_pads","","",403,{"inputs":[{"name":"self"}],"output":{"generics":["pad"],"name":"vec"}}],[10,"get_sink_pads","","",403,{"inputs":[{"name":"self"}],"output":{"generics":["pad"],"name":"vec"}}],[10,"get_src_pads","","",403,{"inputs":[{"name":"self"}],"output":{"generics":["pad"],"name":"vec"}}],[10,"add_property_deep_notify_watch","","",403,{"inputs":[{"name":"self"},{"name":"p"},{"name":"bool"}],"output":{"name":"notifywatchid"}}],[10,"add_property_notify_watch","","",403,{"inputs":[{"name":"self"},{"name":"p"},{"name":"bool"}],"output":{"name":"notifywatchid"}}],[10,"remove_property_notify_watch","","",403,{"inputs":[{"name":"self"},{"name":"notifywatchid"}],"output":null}],[10,"query_convert","","",403,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"option"}}],[10,"query_convert_generic","","",403,{"inputs":[{"name":"self"},{"name":"v"},{"name":"format"}],"output":{"generics":["genericformattedvalue"],"name":"option"}}],[10,"query_duration","","",403,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"query_duration_generic","","",403,{"inputs":[{"name":"self"},{"name":"format"}],"output":{"generics":["genericformattedvalue"],"name":"option"}}],[10,"query_position","","",403,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"query_position_generic","","",403,{"inputs":[{"name":"self"},{"name":"format"}],"output":{"generics":["genericformattedvalue"],"name":"option"}}],[10,"seek","","",403,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"seekflags"},{"name":"seektype"},{"name":"v"},{"name":"seektype"},{"name":"v"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"seek_simple","","",403,{"inputs":[{"name":"self"},{"name":"seekflags"},{"name":"v"}],"output":{"generics":["boolerror"],"name":"result"}}],[8,"BinExtManual","","",null,null],[10,"add_many","","",404,null],[10,"remove_many","","",404,null],[10,"iterate_all_by_interface","","",404,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"generics":["element"],"name":"iterator"}}],[10,"iterate_elements","","",404,{"inputs":[{"name":"self"}],"output":{"generics":["element"],"name":"iterator"}}],[10,"iterate_recurse","","",404,{"inputs":[{"name":"self"}],"output":{"generics":["element"],"name":"iterator"}}],[10,"iterate_sinks","","",404,{"inputs":[{"name":"self"}],"output":{"generics":["element"],"name":"iterator"}}],[10,"iterate_sorted","","",404,{"inputs":[{"name":"self"}],"output":{"generics":["element"],"name":"iterator"}}],[10,"iterate_sources","","",404,{"inputs":[{"name":"self"}],"output":{"generics":["element"],"name":"iterator"}}],[10,"get_children","","",404,{"inputs":[{"name":"self"}],"output":{"generics":["element"],"name":"vec"}}],[8,"PadExtManual","","",null,null],[10,"add_probe","","",405,{"inputs":[{"name":"self"},{"name":"padprobetype"},{"name":"f"}],"output":{"name":"padprobeid"}}],[10,"remove_probe","","",405,{"inputs":[{"name":"self"},{"name":"padprobeid"}],"output":null}],[10,"chain","","",405,{"inputs":[{"name":"self"},{"name":"buffer"}],"output":{"name":"flowreturn"}}],[10,"push","","",405,{"inputs":[{"name":"self"},{"name":"buffer"}],"output":{"name":"flowreturn"}}],[10,"chain_list","","",405,{"inputs":[{"name":"self"},{"name":"bufferlist"}],"output":{"name":"flowreturn"}}],[10,"push_list","","",405,{"inputs":[{"name":"self"},{"name":"bufferlist"}],"output":{"name":"flowreturn"}}],[10,"pull_range","","",405,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u32"}],"output":{"generics":["buffer","flowreturn"],"name":"result"}}],[10,"get_range","","",405,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u32"}],"output":{"generics":["buffer","flowreturn"],"name":"result"}}],[10,"peer_query","","",405,{"inputs":[{"name":"self"},{"name":"queryref"}],"output":{"name":"bool"}}],[10,"query","","",405,{"inputs":[{"name":"self"},{"name":"queryref"}],"output":{"name":"bool"}}],[10,"query_default","","",405,{"inputs":[{"name":"self"},{"name":"q"},{"name":"queryref"}],"output":{"name":"bool"}}],[10,"proxy_query_caps","","",405,{"inputs":[{"name":"self"},{"name":"queryref"}],"output":{"name":"bool"}}],[10,"proxy_query_accept_caps","","",405,{"inputs":[{"name":"self"},{"name":"queryref"}],"output":{"name":"bool"}}],[10,"event_default","","",405,{"inputs":[{"name":"self"},{"name":"q"},{"name":"event"}],"output":{"name":"bool"}}],[10,"push_event","","",405,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[10,"send_event","","",405,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[10,"iterate_internal_links","","",405,{"inputs":[{"name":"self"}],"output":{"generics":["pad"],"name":"iterator"}}],[10,"iterate_internal_links_default","","",405,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"generics":["pad"],"name":"iterator"}}],[10,"stream_lock","","",405,{"inputs":[{"name":"self"}],"output":{"name":"streamlock"}}],[10,"set_activate_function","","",405,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[10,"set_activatemode_function","","",405,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[10,"set_chain_function","","",405,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[10,"set_chain_list_function","","",405,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[10,"set_event_function","","",405,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[10,"set_event_full_function","","",405,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[10,"set_getrange_function","","",405,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[10,"set_iterate_internal_links_function","","",405,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[10,"set_link_function","","",405,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[10,"set_query_function","","",405,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[10,"set_unlink_function","","",405,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[10,"start_task","","",405,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"peer_query_convert","","",405,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"option"}}],[10,"peer_query_convert_generic","","",405,{"inputs":[{"name":"self"},{"name":"v"},{"name":"format"}],"output":{"generics":["genericformattedvalue"],"name":"option"}}],[10,"peer_query_duration","","",405,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"peer_query_duration_generic","","",405,{"inputs":[{"name":"self"},{"name":"format"}],"output":{"generics":["genericformattedvalue"],"name":"option"}}],[10,"peer_query_position","","",405,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"peer_query_position_generic","","",405,{"inputs":[{"name":"self"},{"name":"format"}],"output":{"generics":["genericformattedvalue"],"name":"option"}}],[10,"query_convert","","",405,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"option"}}],[10,"query_convert_generic","","",405,{"inputs":[{"name":"self"},{"name":"v"},{"name":"format"}],"output":{"generics":["genericformattedvalue"],"name":"option"}}],[10,"query_duration","","",405,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"query_duration_generic","","",405,{"inputs":[{"name":"self"},{"name":"format"}],"output":{"generics":["genericformattedvalue"],"name":"option"}}],[10,"query_position","","",405,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"query_position_generic","","",405,{"inputs":[{"name":"self"},{"name":"format"}],"output":{"generics":["genericformattedvalue"],"name":"option"}}],[8,"GstObjectExtManual","","",null,null],[10,"connect_deep_notify","","",406,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"GObjectExtManualGst","","",null,null],[10,"set_property_from_str","","",407,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":null}],[8,"ChildProxyExtManual","","",null,null],[10,"get_child_property","","",408,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["value"],"name":"option"}}],[10,"set_child_property","","",408,{"inputs":[{"name":"self"},{"name":"str"},{"name":"tovalue"}],"output":{"generics":["boolerror"],"name":"result"}}],[8,"TagSetterExtManual","","",null,null],[10,"add","","",409,null],[8,"DeviceProviderExtManual","","",null,null],[10,"get_metadata","","",410,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["str"],"name":"option"}}],[8,"ClockExtManual","","",null,null],[10,"new_periodic_id","","",411,{"inputs":[{"name":"self"},{"name":"clocktime"},{"name":"clocktime"}],"output":{"generics":["clockid"],"name":"option"}}],[10,"periodic_id_reinit","","",411,{"inputs":[{"name":"self"},{"name":"clockid"},{"name":"clocktime"},{"name":"clocktime"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"new_single_shot_id","","",411,{"inputs":[{"name":"self"},{"name":"clocktime"}],"output":{"generics":["clockid"],"name":"option"}}],[10,"single_shot_id_reinit","","",411,{"inputs":[{"name":"self"},{"name":"clockid"},{"name":"clocktime"}],"output":{"generics":["boolerror"],"name":"result"}}],[8,"GstValueExt","","",null,null],[10,"can_compare","","",412,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"compare","","",412,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"valueorder"}}],[10,"can_intersect","","",412,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"intersect","","",412,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[10,"can_subtract","","",412,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"subtract","","",412,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[10,"can_union","","",412,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"union","","",412,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[10,"fixate","","",412,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"is_fixed","","",412,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_subset","","",412,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"serialize","","",412,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"deserialize","","",412,{"inputs":[{"name":"t"}],"output":{"generics":["value"],"name":"option"}}],[6,"ClockTimeDiff","gstreamer","",null,null],[6,"ElementFactoryListType","","",null,null],[6,"Segment","","",null,null],[17,"PAD_PROBE_ID_INVALID","","",null,null],[17,"BUFFER_OFFSET_NONE","","",null,null],[17,"CLOCK_TIME_NONE","","",null,null],[17,"SECOND","","",null,null],[17,"MSECOND","","",null,null],[17,"USECOND","","",null,null],[17,"NSECOND","","",null,null],[17,"SECOND_VAL","","",null,null],[17,"MSECOND_VAL","","",null,null],[17,"USECOND_VAL","","",null,null],[17,"NSECOND_VAL","","",null,null],[17,"FORMAT_PERCENT_MAX","","",null,null],[17,"FORMAT_PERCENT_SCALE","","",null,null],[8,"BinExt","","Trait containing all `Bin` methods.",null,null],[10,"add","","Adds the given element to the bin. Sets the element's parent, and thus takes ownership of the element. An element can only be added to one bin.",385,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"find_unlinked_pad","","Recursively looks for elements with an unlinked pad of the given direction within the specified bin and returns an unlinked pad if one is found, or `None` otherwise. If a pad is found, the caller owns a reference to it and should use `GstObjectExt::unref` on the pad when it is not needed any longer. ## `direction` whether to look for an unlinked source or sink pad",385,{"inputs":[{"name":"self"},{"name":"paddirection"}],"output":{"generics":["pad"],"name":"option"}}],[10,"get_by_interface","","Looks for an element inside the bin that implements the given interface. If such an element is found, it returns the element. You can cast this element to the given interface afterwards. If you want all elements that implement the interface, use `BinExt::iterate_all_by_interface`. This function recurses into child bins.",385,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"generics":["element"],"name":"option"}}],[10,"get_by_name","","Gets the element with the given name from a bin. This function recurses into child bins.",385,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["element"],"name":"option"}}],[10,"get_by_name_recurse_up","","Gets the element with the given name from this bin. If the element is not found, a recursion is performed on the parent bin.",385,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["element"],"name":"option"}}],[10,"get_suppressed_flags","","Return the suppressed flags of the bin.",385,{"inputs":[{"name":"self"}],"output":{"name":"elementflags"}}],[10,"recalculate_latency","","Query `self` for the current latency using and reconfigures this latency to all the elements with a LATENCY event.",385,{"inputs":[{"name":"self"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"remove","","Removes the element from the bin, unparenting it as well. Unparenting the element means that the element will be dereferenced, so if the bin holds the only reference to the element, the element will be freed in the process of removing it from the bin. If you want the element to still exist after removing, you need to call `GstObjectExt::ref` before removing it from the bin.",385,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"set_suppressed_flags","","Suppress the given flags on the bin. `ElementFlags` of a child element are propagated when it is added to the bin. When suppressed flags are set, those specified flags will not be propagated to the bin.",385,{"inputs":[{"name":"self"},{"name":"elementflags"}],"output":null}],[10,"sync_children_states","","Synchronizes the state of every child of `self` with the state of `self`. See also `ElementExt::sync_state_with_parent`.",385,{"inputs":[{"name":"self"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"get_property_async_handling","","",385,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_async_handling","","",385,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_message_forward","","",385,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_message_forward","","",385,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_deep_element_added","","Will be emitted after the element was added to sub_bin.",385,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_deep_element_removed","","Will be emitted after the element was removed from sub_bin.",385,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_do_latency","","Will be emitted when the bin needs to perform latency calculations. This signal is only emitted for toplevel bins or when async-handling is enabled.",385,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_element_added","","Will be emitted after the element was added to the bin. ## `element` the `Element` that was added to the bin",385,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_element_removed","","Will be emitted after the element was removed from the bin. ## `element` the `Element` that was removed from the bin",385,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_async_handling_notify","","",385,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_message_forward_notify","","",385,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ChildProxyExt","","Trait containing all `ChildProxy` methods.",null,null],[10,"child_added","","Emits the \"child-added\" signal. ## `child` the newly added child ## `name` the name of the new child",386,{"inputs":[{"name":"self"},{"name":"p"},{"name":"str"}],"output":null}],[10,"child_removed","","Emits the \"child-removed\" signal. ## `child` the removed child ## `name` the name of the old child",386,{"inputs":[{"name":"self"},{"name":"p"},{"name":"str"}],"output":null}],[10,"get_child_by_index","","Fetches a child by its number. ## `index` the child's position in the child list",386,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["object"],"name":"option"}}],[10,"get_child_by_name","","Looks up a child element by the given name.",386,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["object"],"name":"option"}}],[10,"get_children_count","","Gets the number of child objects this parent contains.",386,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"connect_child_added","","Will be emitted after the `object` was added to the `child_proxy`. ## `object` the `gobject::Object` that was added ## `name` the name of the new child",386,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_child_removed","","Will be emitted after the `object` was removed from the `child_proxy`. ## `object` the `gobject::Object` that was removed ## `name` the name of the old child",386,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ClockExt","","Trait containing all `Clock` methods.",null,null],[10,"add_observation","","The time `master` of the master clock and the time `slave` of the slave clock are added to the list of observations. If enough observations are available, a linear regression algorithm is run on the observations and `self` is recalibrated.",387,{"inputs":[{"name":"self"},{"name":"clocktime"},{"name":"clocktime"}],"output":{"generics":["f64"],"name":"option"}}],[10,"add_observation_unapplied","","Add a clock observation to the internal slaving algorithm the same as `ClockExt::add_observation`, and return the result of the master clock estimation, without updating the internal calibration.",387,{"inputs":[{"name":"self"},{"name":"clocktime"},{"name":"clocktime"}],"output":{"name":"option"}}],[10,"adjust_unlocked","","Converts the given `internal` clock time to the external time, adjusting for the rate and reference time set with `ClockExt::set_calibration` and making sure that the returned time is increasing. This function should be called with the clock's OBJECT_LOCK held and is mainly used by clock subclasses.",387,{"inputs":[{"name":"self"},{"name":"clocktime"}],"output":{"name":"clocktime"}}],[10,"get_calibration","","Gets the internal rate and reference time of `self`. See `ClockExt::set_calibration` for more information.",387,null],[10,"get_internal_time","","Gets the current internal time of the given clock. The time is returned unadjusted for the offset and the rate.",387,{"inputs":[{"name":"self"}],"output":{"name":"clocktime"}}],[10,"get_master","","Get the master clock that `self` is slaved to or `None` when the clock is not slaved to any master clock.",387,{"inputs":[{"name":"self"}],"output":{"generics":["clock"],"name":"option"}}],[10,"get_resolution","","Get the accuracy of the clock. The accuracy of the clock is the granularity of the values returned by `ClockExt::get_time`.",387,{"inputs":[{"name":"self"}],"output":{"name":"clocktime"}}],[10,"get_time","","Gets the current time of the given clock. The time is always monotonically increasing and adjusted according to the current offset and rate.",387,{"inputs":[{"name":"self"}],"output":{"name":"clocktime"}}],[10,"get_timeout","","Get the amount of time that master and slave clocks are sampled.",387,{"inputs":[{"name":"self"}],"output":{"name":"clocktime"}}],[10,"is_synced","","Checks if the clock is currently synced.",387,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_calibration","","Adjusts the rate and time of `self`. A rate of 1/1 is the normal speed of the clock. Values bigger than 1/1 make the clock go faster.",387,{"inputs":[{"name":"self"},{"name":"clocktime"},{"name":"clocktime"},{"name":"clocktime"},{"name":"clocktime"}],"output":null}],[10,"set_master","","Set `master` as the master clock for `self`. `self` will be automatically calibrated so that `ClockExt::get_time` reports the same time as the master clock.",387,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"set_resolution","","Set the accuracy of the clock. Some clocks have the possibility to operate with different accuracy at the expense of more resource usage. There is normally no need to change the default resolution of a clock. The resolution of a clock can only be changed if the clock has the `ClockFlags::CanSetResolution` flag set. ## `resolution` The resolution to set",387,{"inputs":[{"name":"self"},{"name":"clocktime"}],"output":{"name":"clocktime"}}],[10,"set_synced","","Sets `self` to synced and emits the GstClock::synced signal, and wakes up any thread waiting in `ClockExt::wait_for_sync`.",387,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_timeout","","Set the amount of time, in nanoseconds, to sample master and slave clocks ## `timeout` a timeout",387,{"inputs":[{"name":"self"},{"name":"clocktime"}],"output":null}],[10,"unadjust_unlocked","","Converts the given `external` clock time to the internal time of `self`, using the rate and reference time set with `ClockExt::set_calibration`. This function should be called with the clock's OBJECT_LOCK held and is mainly used by clock subclasses.",387,{"inputs":[{"name":"self"},{"name":"clocktime"}],"output":{"name":"clocktime"}}],[10,"wait_for_sync","","Waits until `self` is synced for reporting the current time. If `timeout` is `GST_CLOCK_TIME_NONE` it will wait forever, otherwise it will time out after `timeout` nanoseconds.",387,{"inputs":[{"name":"self"},{"name":"clocktime"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"get_property_window_size","","",387,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_window_size","","",387,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_window_threshold","","",387,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_window_threshold","","",387,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"connect_synced","","Signaled on clocks with GST_CLOCK_FLAG_NEEDS_STARTUP_SYNC set once the clock is synchronized, or when it completely lost synchronization. This signal will not be emitted on clocks without the flag.",387,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_timeout_notify","","",387,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_window_size_notify","","",387,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_window_threshold_notify","","",387,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"DeviceExt","","Trait containing all `Device` methods.",null,null],[10,"create_element","","Creates the element with all of the required parameters set to use this device. ## `name` name of new element, or `None` to automatically create a unique name.",388,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["element"],"name":"option"}}],[10,"get_caps","","Getter for the `Caps` that this device supports.",388,{"inputs":[{"name":"self"}],"output":{"generics":["caps"],"name":"option"}}],[10,"get_device_class","","Gets the \"class\" of a device. This is a \"/\" separated list of classes that represent this device. They are a subset of the classes of the `DeviceProvider` that produced this device.",388,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[10,"get_display_name","","Gets the user-friendly name of the device.",388,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[10,"get_properties","","Gets the extra properties of a device.",388,{"inputs":[{"name":"self"}],"output":{"generics":["structure"],"name":"option"}}],[10,"has_classes","","Check if `self` matches all of the given classes ## `classes` a \"/\"-separated list of device classes to match, only match if  all classes are matched",388,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[10,"has_classesv","","Check if `factory` matches all of the given classes ## `classes` a `None` terminated array of classes  to match, only match if all classes are matched",388,null],[10,"reconfigure_element","","Tries to reconfigure an existing element to use the device. If this function fails, then one must destroy the element and create a new one using `DeviceExt::create_element`.",388,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[10,"get_property_caps","","",388,{"inputs":[{"name":"self"}],"output":{"generics":["caps"],"name":"option"}}],[10,"get_property_device_class","","",388,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_property_display_name","","",388,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_property_properties","","",388,{"inputs":[{"name":"self"}],"output":{"generics":["structure"],"name":"option"}}],[10,"connect_removed","","",388,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_caps_notify","","",388,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_device_class_notify","","",388,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_display_name_notify","","",388,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_properties_notify","","",388,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"DeviceMonitorExt","","Trait containing all `DeviceMonitor` methods.",null,null],[10,"add_filter","","Adds a filter for which `Device` will be monitored, any device that matches all these classes and the `Caps` will be returned.",389,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":{"name":"u32"}}],[10,"get_bus","","Gets the `Bus` of this `DeviceMonitor`",389,{"inputs":[{"name":"self"}],"output":{"name":"bus"}}],[10,"get_devices","","Gets a list of devices from all of the relevant monitors. This may actually probe the hardware if the monitor is not currently started.",389,{"inputs":[{"name":"self"}],"output":{"generics":["device"],"name":"vec"}}],[10,"get_providers","","Get a list of the currently selected device provider factories.",389,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[10,"get_show_all_devices","","Get if `self` is curretly showing all devices, even those from hidden providers.",389,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"remove_filter","","Removes a filter from the `DeviceMonitor` using the id that was returned by `DeviceMonitorExt::add_filter`. ## `filter_id` the id of the filter",389,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[10,"set_show_all_devices","","Set if all devices should be visible, even those devices from hidden providers. Setting `show_all` to true might show some devices multiple times. ## `show_all` show all devices",389,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"start","","Starts monitoring the devices, one this has succeeded, the `MessageType::DeviceAdded` and `MessageType::DeviceRemoved` messages will be emitted on the bus when the list of devices changes.",389,{"inputs":[{"name":"self"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"stop","","Stops monitoring the devices.",389,{"inputs":[{"name":"self"}],"output":null}],[10,"get_property_show_all","","",389,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_show_all","","",389,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_property_show_all_notify","","",389,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"DeviceProviderExt","","Trait containing all `DeviceProvider` methods.",null,null],[10,"can_monitor","","",390,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"device_add","","Posts a message on the provider's `Bus` to inform applications that a new device has been added.",390,{"inputs":[{"name":"self"},{"name":"device"}],"output":null}],[10,"device_remove","","Posts a message on the provider's `Bus` to inform applications that a device has been removed.",390,{"inputs":[{"name":"self"},{"name":"device"}],"output":null}],[10,"get_bus","","Gets the `Bus` of this `DeviceProvider`",390,{"inputs":[{"name":"self"}],"output":{"name":"bus"}}],[10,"get_devices","","Gets a list of devices that this provider understands. This may actually probe the hardware if the provider is not currently started.",390,{"inputs":[{"name":"self"}],"output":{"generics":["device"],"name":"vec"}}],[10,"get_factory","","Retrieves the factory that was used to create this device provider.",390,{"inputs":[{"name":"self"}],"output":{"generics":["deviceproviderfactory"],"name":"option"}}],[10,"get_hidden_providers","","Get the provider factory names of the `DeviceProvider` instances that are hidden by `self`.",390,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[10,"hide_provider","","Make `self` hide the devices from the factory with `name`.",390,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"start","","Starts providering the devices. This will cause `MessageType::DeviceAdded` and `MessageType::DeviceRemoved` messages to be posted on the provider's bus when devices are added or removed from the system.",390,{"inputs":[{"name":"self"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"stop","","Decreases the use-count by one. If the use count reaches zero, this `DeviceProvider` will stop providering the devices. This needs to be called the same number of times that `DeviceProviderExt::start` was called.",390,{"inputs":[{"name":"self"}],"output":null}],[10,"unhide_provider","","Make `self` unhide the devices from factory `name`.",390,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"connect_provider_hidden","","",390,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_provider_unhidden","","",390,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ElementExt","","Trait containing all `Element` methods.",null,null],[10,"abort_state","","Abort the state change of the element. This function is used by elements that do asynchronous state changes and find out something is wrong.",391,{"inputs":[{"name":"self"}],"output":null}],[10,"add_pad","","Adds a pad (link point) to `self`. `pad`'s parent will be set to `self`; see `GstObjectExt::set_parent` for refcounting information.",391,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"change_state","","Perform `transition` on `self`.",391,{"inputs":[{"name":"self"},{"name":"statechange"}],"output":{"name":"statechangereturn"}}],[10,"continue_state","","Commit the state change of the element and proceed to the next pending state if any. This function is used by elements that do asynchronous state changes. The core will normally call this method automatically when an element returned `StateChangeReturn::Success` from the state change function.",391,{"inputs":[{"name":"self"},{"name":"statechangereturn"}],"output":{"name":"statechangereturn"}}],[10,"create_all_pads","","Creates a pad for each pad template that is always available. This function is only useful during object initialization of subclasses of `Element`.",391,{"inputs":[{"name":"self"}],"output":null}],[10,"get_base_time","","Returns the base time of the element. The base time is the absolute time of the clock when this element was last put to PLAYING. Subtracting the base time from the clock time gives the running time of the element.",391,{"inputs":[{"name":"self"}],"output":{"name":"clocktime"}}],[10,"get_bus","","Returns the bus of the element. Note that only a `Pipeline` will provide a bus for the application.",391,{"inputs":[{"name":"self"}],"output":{"generics":["bus"],"name":"option"}}],[10,"get_clock","","Gets the currently configured clock of the element. This is the clock as was last set with `ElementExt::set_clock`.",391,{"inputs":[{"name":"self"}],"output":{"generics":["clock"],"name":"option"}}],[10,"get_compatible_pad","","Looks for an unlinked pad to which the given pad can link. It is not guaranteed that linking the pads will work, though it should work in most cases.",391,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":{"generics":["pad"],"name":"option"}}],[10,"get_compatible_pad_template","","Retrieves a pad template from `self` that is compatible with `compattempl`. Pads from compatible templates can be linked together. ## `compattempl` the `PadTemplate` to find a compatible  template for",391,{"inputs":[{"name":"self"},{"name":"padtemplate"}],"output":{"generics":["padtemplate"],"name":"option"}}],[10,"get_context","","Gets the context with `context_type` set on the element or NULL.",391,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["context"],"name":"option"}}],[10,"get_contexts","","Gets the contexts set on the element.",391,{"inputs":[{"name":"self"}],"output":{"generics":["context"],"name":"vec"}}],[10,"get_factory","","Retrieves the factory that was used to create this element.",391,{"inputs":[{"name":"self"}],"output":{"generics":["elementfactory"],"name":"option"}}],[10,"get_request_pad","","Retrieves a pad from the element by name (e.g. \"src_%d\"). This version only retrieves request pads. The pad should be released with `ElementExt::release_request_pad`.",391,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["pad"],"name":"option"}}],[10,"get_start_time","","Returns the start time of the element. The start time is the running time of the clock when this element was last put to PAUSED.",391,{"inputs":[{"name":"self"}],"output":{"name":"clocktime"}}],[10,"get_state","","Gets the state of the element.",391,null],[10,"get_static_pad","","Retrieves a pad from `self` by name. This version only retrieves already-existing (i.e. 'static') pads. ## `name` the name of the static `Pad` to retrieve.",391,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["pad"],"name":"option"}}],[10,"is_locked_state","","Checks if the state of an element is locked. If the state of an element is locked, state changes of the parent don't affect the element. This way you can leave currently unused elements inside bins. Just lock their state before changing the state from `State::Null`.",391,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"link","","Links `self` to `dest`. The link must be from source to destination; the other direction will not be tried. The function looks for existing pads that aren't linked yet. It will request new pads if necessary. Such pads need to be released manually when unlinking. If multiple links are possible, only one is established.",391,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"link_filtered","","Links `self` to `dest` using the given caps as filtercaps. The link must be from source to destination; the other direction will not be tried. The function looks for existing pads that aren't linked yet. It will request new pads if necessary. If multiple links are possible, only one is established.",391,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"link_pads","","Links the two named pads of the source and destination elements. Side effect is that if one of the pads has no parent, it becomes a child of the parent of the other element. If they have different parents, the link fails. ## `srcpadname` the name of the `Pad` in source element  or `None` for any pad. ## `dest` the `Element` containing the destination pad. ## `destpadname` the name of the `Pad` in destination element, or `None` for any pad.",391,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"},{"name":"r"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"link_pads_filtered","","Links the two named pads of the source and destination elements. Side effect is that if one of the pads has no parent, it becomes a child of the parent of the other element. If they have different parents, the link fails. If `caps` is not `None`, makes sure that the caps of the link is a subset of `caps`. ## `srcpadname` the name of the `Pad` in source element  or `None` for any pad. ## `dest` the `Element` containing the destination pad. ## `destpadname` the name of the `Pad` in destination element  or `None` for any pad. ## `filter` the `Caps` to filter the link,  or `None` for no filter.",391,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"},{"name":"r"},{"name":"s"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"link_pads_full","","Links the two named pads of the source and destination elements. Side effect is that if one of the pads has no parent, it becomes a child of the parent of the other element. If they have different parents, the link fails.",391,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"},{"name":"r"},{"name":"padlinkcheck"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"lost_state","","Brings the element to the lost state. The current state of the element is copied to the pending state so that any call to `ElementExt::get_state` will return `StateChangeReturn::Async`.",391,{"inputs":[{"name":"self"}],"output":null}],[10,"no_more_pads","","Use this function to signal that the element does not expect any more pads to show up in the current pipeline. This function should be called whenever pads have been added by the element itself. Elements with `PadPresence::Sometimes` pad templates use this in combination with autopluggers to figure out that the element is done initializing its pads.",391,{"inputs":[{"name":"self"}],"output":null}],[10,"post_message","","Post a message on the element's `Bus`. This function takes ownership of the message; if you want to access the message after this call, you should add an additional reference before calling. ## `message` a `Message` to post",391,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"provide_clock","","Get the clock provided by the given element. > An element is only required to provide a clock in the PAUSED > state. Some elements can provide a clock in other states.",391,{"inputs":[{"name":"self"}],"output":{"generics":["clock"],"name":"option"}}],[10,"release_request_pad","","Makes the element free the previously requested pad as obtained with `ElementExt::request_pad`.",391,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"remove_pad","","Removes `pad` from `self`. `pad` will be destroyed if it has not been referenced elsewhere using `GstObjectExt::unparent`.",391,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"request_pad","","Retrieves a request pad from the element according to the provided template. Pad templates can be looked up using `ElementFactory::get_static_pad_templates`.",391,{"inputs":[{"name":"self"},{"name":"padtemplate"},{"name":"p"},{"name":"q"}],"output":{"generics":["pad"],"name":"option"}}],[10,"set_base_time","","Set the base time of an element. See `ElementExt::get_base_time`.",391,{"inputs":[{"name":"self"},{"name":"clocktime"}],"output":null}],[10,"set_bus","","Sets the bus of the element. Increases the refcount on the bus. For internal use only, unless you're testing elements.",391,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_clock","","Sets the clock for the element. This function increases the refcount on the clock. Any previously set clock on the object is unreffed. ## `clock` the `Clock` to set for the element.",391,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"set_context","","Sets the context of the element. Increases the refcount of the context.",391,{"inputs":[{"name":"self"},{"name":"context"}],"output":null}],[10,"set_locked_state","","Locks the state of an element, so state changes of the parent don't affect this element anymore.",391,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[10,"set_start_time","","Set the start time of an element. The start time of the element is the running time of the element when it last went to the PAUSED state. In READY or after a flushing seek, it is set to 0.",391,{"inputs":[{"name":"self"},{"name":"clocktime"}],"output":null}],[10,"set_state","","Sets the state of the element. This function will try to set the requested state by going through all the intermediary states and calling the class's state change function for each.",391,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"statechangereturn"}}],[10,"sync_state_with_parent","","Tries to change the state of the element to the same as its parent. If this function returns `false`, the state of element is undefined.",391,{"inputs":[{"name":"self"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"unlink","","Unlinks all source pads of the source element with all sink pads of the sink element to which they are linked.",391,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"unlink_pads","","Unlinks the two named pads of the source and destination elements.",391,{"inputs":[{"name":"self"},{"name":"str"},{"name":"p"},{"name":"str"}],"output":null}],[10,"connect_no_more_pads","","This signals that the element will not generate more dynamic pads. Note that this signal will usually be emitted from the context of the streaming thread.",391,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_pad_added","","a new `Pad` has been added to the element. Note that this signal will usually be emitted from the context of the streaming thread. Also keep in mind that if you add new elements to the pipeline in the signal handler you will need to set them to the desired target state with `ElementExt::set_state` or `ElementExt::sync_state_with_parent`. ## `new_pad` the pad that has been added",391,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_pad_removed","","a `Pad` has been removed from the element ## `old_pad` the pad that has been removed",391,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"GhostPadExt","","Trait containing all `GhostPad` methods.",null,null],[10,"get_target","","Get the target pad of `self`. Unref target pad after usage.",392,{"inputs":[{"name":"self"}],"output":{"generics":["pad"],"name":"option"}}],[10,"set_target","","Set the new target of the ghostpad `self`. Any existing target is unlinked and links to the new target are established. if `newtarget` is `None` the target will be cleared. ## `newtarget` the new pad target",392,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"generics":["boolerror"],"name":"result"}}],[8,"GstObjectExt","","Trait containing all `Object` methods.",null,null],[10,"default_error","","A default error function that uses `g_printerr` to display the error message and the optional debug sting..",393,{"inputs":[{"name":"self"},{"name":"error"},{"name":"p"}],"output":null}],[10,"get_control_rate","","Obtain the control-rate for this `self`. Audio processing `Element` objects will use this rate to sub-divide their processing loop and call `GstObjectExt::sync_values` inbetween. The length of the processing segment should be up to `control`-rate nanoseconds.",393,{"inputs":[{"name":"self"}],"output":{"name":"clocktime"}}],[10,"get_name","","Returns a copy of the name of `self`. Caller should `g_free` the return value after usage. For a nameless object, this returns `None`, which you can safely `g_free` as well.",393,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[10,"get_parent","","Returns the parent of `self`. This function increases the refcount of the parent object so you should `GstObjectExt::unref` it after usage.",393,{"inputs":[{"name":"self"}],"output":{"generics":["object"],"name":"option"}}],[10,"get_path_string","","Generates a string describing the path of `self` in the object hierarchy. Only useful (or used) for debugging.",393,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[10,"has_active_control_bindings","","Check if the `self` has active controlled properties.",393,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"has_ancestor","","Check if `self` has an ancestor `ancestor` somewhere up in the hierarchy. One can e.g. check if a `Element` is inside a `Pipeline`.",393,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[10,"has_as_ancestor","","Check if `self` has an ancestor `ancestor` somewhere up in the hierarchy. One can e.g. check if a `Element` is inside a `Pipeline`. ## `ancestor` a `Object` to check as ancestor",393,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[10,"has_as_parent","","Check if `parent` is the parent of `self`. E.g. a `Element` can check if it owns a given `Pad`. ## `parent` a `Object` to check as parent",393,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[10,"set_control_binding_disabled","","This function is used to disable the control bindings on a property for some time, i.e. `GstObjectExt::sync_values` will do nothing for the property. ## `property_name` property to disable ## `disabled` boolean that specifies whether to disable the controller or not.",393,{"inputs":[{"name":"self"},{"name":"str"},{"name":"bool"}],"output":null}],[10,"set_control_bindings_disabled","","This function is used to disable all controlled properties of the `self` for some time, i.e. `GstObjectExt::sync_values` will do nothing. ## `disabled` boolean that specifies whether to disable the controller or not.",393,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_control_rate","","Change the control-rate for this `self`. Audio processing `Element` objects will use this rate to sub-divide their processing loop and call `GstObjectExt::sync_values` inbetween. The length of the processing segment should be up to `control`-rate nanoseconds.",393,{"inputs":[{"name":"self"},{"name":"clocktime"}],"output":null}],[10,"set_name","","Sets the name of `self`, or gives `self` a guaranteed unique name (if `name` is `None`). This function makes a copy of the provided name, so the caller retains ownership of the name it sent. ## `name` new name of object",393,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"set_parent","","Sets the parent of `self` to `parent`. The object's reference count will be incremented, and any floating reference will be removed (see `Object::ref_sink`). ## `parent` new parent of object",393,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"suggest_next_sync","","Returns a suggestion for timestamps where buffers should be split to get best controller results.",393,{"inputs":[{"name":"self"}],"output":{"name":"clocktime"}}],[10,"sync_values","","Sets the properties of the object, according to the `GstControlSources` that (maybe) handle them and for the given timestamp.",393,{"inputs":[{"name":"self"},{"name":"clocktime"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"unparent","","Clear the parent of `self`, removing the associated reference. This function decreases the refcount of `self`.",393,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_property_name_notify","","",393,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_parent_notify","","",393,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"PadExt","","Trait containing all `Pad` methods.",null,null],[10,"activate_mode","","Activates or deactivates the given pad in `mode` via dispatching to the pad's activatemodefunc. For use from within pad activation functions only.",394,{"inputs":[{"name":"self"},{"name":"padmode"},{"name":"bool"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"can_link","","Checks if the source pad and the sink pad are compatible so they can be linked. ## `sinkpad` the sink `Pad`.",394,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[10,"check_reconfigure","","Check and clear the `PadFlags::NeedReconfigure` flag on `self` and return `true` if the flag was set.",394,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"create_stream_id","","Creates a stream-id for the source `Pad` `self` by combining the upstream information with the optional `stream_id` of the stream of `self`. `self` must have a parent `Element` and which must have zero or one sinkpad. `stream_id` can only be `None` if the parent element of `self` has only a single source pad.",394,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_allowed_caps","","Gets the capabilities of the allowed media types that can flow through `self` and its peer.",394,{"inputs":[{"name":"self"}],"output":{"generics":["caps"],"name":"option"}}],[10,"get_current_caps","","Gets the capabilities currently configured on `self` with the last `EventType::Caps` event.",394,{"inputs":[{"name":"self"}],"output":{"generics":["caps"],"name":"option"}}],[10,"get_direction","","Gets the direction of the pad. The direction of the pad is decided at construction time so this function does not take the LOCK.",394,{"inputs":[{"name":"self"}],"output":{"name":"paddirection"}}],[10,"get_last_flow_return","","Gets the `FlowReturn` return from the last data passed by this pad.",394,{"inputs":[{"name":"self"}],"output":{"name":"flowreturn"}}],[10,"get_offset","","Get the offset applied to the running time of `self`. `self` has to be a source pad.",394,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"get_pad_template","","Gets the template for `self`.",394,{"inputs":[{"name":"self"}],"output":{"generics":["padtemplate"],"name":"option"}}],[10,"get_pad_template_caps","","Gets the capabilities for `self`'s template.",394,{"inputs":[{"name":"self"}],"output":{"generics":["caps"],"name":"option"}}],[10,"get_parent_element","","Gets the parent of `self`, cast to a `Element`. If a `self` has no parent or its parent is not an element, return `None`.",394,{"inputs":[{"name":"self"}],"output":{"generics":["element"],"name":"option"}}],[10,"get_peer","","Gets the peer of `self`. This function refs the peer pad so you need to unref it after use.",394,{"inputs":[{"name":"self"}],"output":{"generics":["pad"],"name":"option"}}],[10,"get_sticky_event","","Returns a new reference of the sticky event of type `event_type` from the event. ## `event_type` the `EventType` that should be retrieved. ## `idx` the index of the event",394,{"inputs":[{"name":"self"},{"name":"eventtype"},{"name":"u32"}],"output":{"generics":["event"],"name":"option"}}],[10,"get_stream","","Returns the current `Stream` for the `self`, or `None` if none has been set yet, i.e. the pad has not received a stream-start event yet.",394,{"inputs":[{"name":"self"}],"output":{"generics":["stream"],"name":"option"}}],[10,"get_stream_id","","Returns the current stream-id for the `self`, or `None` if none has been set yet, i.e. the pad has not received a stream-start event yet.",394,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_task_state","","Get `self` task state. If no task is currently set, `TaskState::Stopped` is returned.",394,{"inputs":[{"name":"self"}],"output":{"name":"taskstate"}}],[10,"has_current_caps","","Check if `self` has caps set on it with a `EventType::Caps` event.",394,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_active","","Query if a pad is active",394,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_blocked","","Checks if the pad is blocked or not. This function returns the last requested state of the pad. It is not certain that the pad is actually blocking at this point (see `PadExt::is_blocking`).",394,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_blocking","","Checks if the pad is blocking or not. This is a guaranteed state of whether the pad is actually blocking on a `Buffer` or a `Event`.",394,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_linked","","Checks if a `self` is linked to another pad or not.",394,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"link","","Links the source pad and the sink pad. ## `sinkpad` the sink `Pad` to link.",394,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"padlinkreturn"}}],[10,"link_full","","Links the source pad and the sink pad.",394,{"inputs":[{"name":"self"},{"name":"p"},{"name":"padlinkcheck"}],"output":{"name":"padlinkreturn"}}],[10,"link_maybe_ghosting","","Links `self` to `sink`, creating any `GhostPad`'s in between as necessary.",394,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"link_maybe_ghosting_full","","Links `self` to `sink`, creating any `GhostPad`'s in between as necessary.",394,{"inputs":[{"name":"self"},{"name":"p"},{"name":"padlinkcheck"}],"output":{"name":"bool"}}],[10,"mark_reconfigure","","Mark a pad for needing reconfiguration. The next call to `PadExt::check_reconfigure` will return `true` after this call.",394,{"inputs":[{"name":"self"}],"output":null}],[10,"needs_reconfigure","","Check the `PadFlags::NeedReconfigure` flag on `self` and return `true` if the flag was set.",394,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"pause_task","","Pause the task of `self`. This function will also wait until the function executed by the task is finished if this function is not called from the task function.",394,{"inputs":[{"name":"self"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"peer_query_accept_caps","","Check if the peer of `self` accepts `caps`. If `self` has no peer, this function returns `true`. ## `caps` a `Caps` to check on the pad",394,{"inputs":[{"name":"self"},{"name":"caps"}],"output":{"name":"bool"}}],[10,"peer_query_caps","","Gets the capabilities of the peer connected to this pad. Similar to `PadExt::query_caps`.",394,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["caps"],"name":"option"}}],[10,"query_accept_caps","","Check if the given pad accepts the caps. ## `caps` a `Caps` to check on the pad",394,{"inputs":[{"name":"self"},{"name":"caps"}],"output":{"name":"bool"}}],[10,"query_caps","","Gets the capabilities this pad can produce or consume. Note that this method doesn't necessarily return the caps set by sending a `Event::new_caps` - use `PadExt::get_current_caps` for that instead. gst_pad_query_caps returns all possible caps a pad can operate with, using the pad's CAPS query function, If the query fails, this function will return `filter`, if not `None`, otherwise ANY.",394,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["caps"],"name":"option"}}],[10,"set_active","","Activates or deactivates the given pad. Normally called from within core state change functions.",394,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"set_offset","","Set the offset that will be applied to the running time of `self`. ## `offset` the offset",394,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[10,"stop_task","","Stop the task of `self`. This function will also make sure that the function executed by the task will effectively stop if not called from the GstTaskFunction.",394,{"inputs":[{"name":"self"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"store_sticky_event","","Store the sticky `event` on `self` ## `event` a `Event`",394,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"flowreturn"}}],[10,"unlink","","Unlinks the source pad from the sink pad. Will emit the `Pad::unlinked` signal on both pads. ## `sinkpad` the sink `Pad` to unlink.",394,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"use_fixed_caps","","A helper function you can use that sets the FIXED_CAPS flag This way the default CAPS query will always return the negotiated caps or in case the pad is not negotiated, the padtemplate caps.",394,{"inputs":[{"name":"self"}],"output":null}],[10,"get_property_caps","","",394,{"inputs":[{"name":"self"}],"output":{"generics":["caps"],"name":"option"}}],[10,"get_property_template","","",394,{"inputs":[{"name":"self"}],"output":{"generics":["padtemplate"],"name":"option"}}],[10,"set_property_template","","",394,{"inputs":[{"name":"self"},{"generics":["padtemplate"],"name":"option"}],"output":null}],[10,"connect_linked","","Signals that a pad has been linked to the peer pad. ## `peer` the peer pad that has been connected",394,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_unlinked","","Signals that a pad has been unlinked from the peer pad. ## `peer` the peer pad that has been disconnected",394,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_caps_notify","","",394,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_direction_notify","","",394,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_offset_notify","","",394,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_template_notify","","",394,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"PipelineExt","","Trait containing all `Pipeline` methods.",null,null],[10,"auto_clock","","Let `self` select a clock automatically. This is the default behaviour.",395,{"inputs":[{"name":"self"}],"output":null}],[10,"get_auto_flush_bus","","Check if `self` will automatically flush messages when going to the NULL state.",395,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_delay","","Get the configured delay (see `PipelineExt::set_delay`).",395,{"inputs":[{"name":"self"}],"output":{"name":"clocktime"}}],[10,"get_latency","","Gets the latency that should be configured on the pipeline. See `PipelineExt::set_latency`.",395,{"inputs":[{"name":"self"}],"output":{"name":"clocktime"}}],[10,"get_pipeline_clock","","Gets the current clock used by `self`.",395,{"inputs":[{"name":"self"}],"output":{"generics":["clock"],"name":"option"}}],[10,"set_auto_flush_bus","","Usually, when a pipeline goes from READY to NULL state, it automatically flushes all pending messages on the bus, which is done for refcounting purposes, to break circular references.",395,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_delay","","Set the expected delay needed for all elements to perform the PAUSED to PLAYING state change. `delay` will be added to the base time of the elements so that they wait an additional `delay` amount of time before starting to process buffers and cannot be `GST_CLOCK_TIME_NONE`.",395,{"inputs":[{"name":"self"},{"name":"clocktime"}],"output":null}],[10,"set_latency","","Sets the latency that should be configured on the pipeline. Setting GST_CLOCK_TIME_NONE will restore the default behaviour of using the minimum latency from the LATENCY query. Setting this is usually not required and the pipeline will figure out an appropriate latency automatically.",395,{"inputs":[{"name":"self"},{"name":"clocktime"}],"output":null}],[10,"use_clock","","Force `self` to use the given `clock`. The pipeline will always use the given clock even if new clock providers are added to this pipeline.",395,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"connect_property_auto_flush_bus_notify","","",395,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_delay_notify","","",395,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_latency_notify","","",395,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"PluginFeatureExt","","Trait containing all `PluginFeature` methods.",null,null],[10,"check_version","","Checks whether the given plugin feature is at least  the required version ## `min_major` minimum required major version ## `min_minor` minimum required minor version ## `min_micro` minimum required micro version",396,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"bool"}}],[10,"get_plugin","","Get the plugin that provides this feature.",396,{"inputs":[{"name":"self"}],"output":{"generics":["plugin"],"name":"option"}}],[10,"get_plugin_name","","Get the name of the plugin that provides this feature.",396,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_rank","","Gets the rank of a plugin feature.",396,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"load","","Loads the plugin containing `self` if it's not already loaded. `self` is unaffected; use the return value instead.",396,{"inputs":[{"name":"self"}],"output":{"generics":["pluginfeature"],"name":"option"}}],[10,"set_rank","","Specifies a rank for a plugin feature, so that autoplugging uses the most appropriate feature. ## `rank` rank value - higher number means more priority rank",396,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[8,"PresetExt","","Trait containing all `Preset` methods.",null,null],[10,"delete_preset","","Delete the given preset. ## `name` preset name to remove",397,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"get_meta","","Gets the `value` for an existing meta data `tag`. Meta data `tag` names can be something like e.g. \"comment\". Returned values need to be released when done. ## `name` preset name ## `tag` meta data item name ## `value` value",397,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_preset_names","","Get a copy of preset names as a `None` terminated string array.",397,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[10,"get_property_names","","Get a the names of the GObject properties that can be used for presets.",397,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[10,"is_editable","","Check if one can add new presets, change existing ones and remove presets.",397,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"load_preset","","Load the given preset. ## `name` preset name to load",397,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"rename_preset","","Renames a preset. If there is already a preset by the `new_name` it will be overwritten. ## `old_name` current preset name ## `new_name` new preset name",397,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"save_preset","","Save the current object settings as a preset under the given name. If there is already a preset by this `name` it will be overwritten. ## `name` preset name to save",397,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"set_meta","","Sets a new `value` for an existing meta data item or adds a new item. Meta data `tag` names can be something like e.g. \"comment\". Supplying `None` for the `value` will unset an existing value. ## `name` preset name ## `tag` meta data item name ## `value` new value",397,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"p"}],"output":{"generics":["boolerror"],"name":"result"}}],[8,"ProxyPadExt","","Trait containing all `ProxyPad` methods.",null,null],[10,"get_internal","","Get the internal pad of `self`. Unref target pad after usage.",398,{"inputs":[{"name":"self"}],"output":{"generics":["proxypad"],"name":"option"}}],[8,"SystemClockExt","","Trait containing all `SystemClock` methods.",null,null],[10,"get_property_clock_type","","",399,{"inputs":[{"name":"self"}],"output":{"name":"clocktype"}}],[10,"set_property_clock_type","","",399,{"inputs":[{"name":"self"},{"name":"clocktype"}],"output":null}],[10,"connect_property_clock_type_notify","","",399,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"TagSetterExt","","Trait containing all `TagSetter` methods.",null,null],[10,"get_tag_list","","Returns the current list of tags the setter uses. The list should not be modified or freed.",400,{"inputs":[{"name":"self"}],"output":{"generics":["taglist"],"name":"option"}}],[10,"get_tag_merge_mode","","Queries the mode by which tags inside the setter are overwritten by tags from events",400,{"inputs":[{"name":"self"}],"output":{"name":"tagmergemode"}}],[10,"merge_tags","","Merges the given list into the setter's list using the given mode. ## `list` a tag list to merge from ## `mode` the mode to merge with",400,{"inputs":[{"name":"self"},{"name":"taglist"},{"name":"tagmergemode"}],"output":null}],[10,"reset_tags","","Reset the internal taglist. Elements should call this from within the state-change handler.",400,{"inputs":[{"name":"self"}],"output":null}],[10,"set_tag_merge_mode","","Sets the given merge mode that is used for adding tags from events to tags specified by this interface. The default is `TagMergeMode::Keep`, which keeps the tags set with this interface and discards tags from events. ## `mode` The mode with which tags are added",400,{"inputs":[{"name":"self"},{"name":"tagmergemode"}],"output":null}],[8,"TocSetterExt","","Trait containing all `TocSetter` methods.",null,null],[10,"get_toc","","Return current TOC the setter uses. The TOC should not be modified without making it writable first.",401,{"inputs":[{"name":"self"}],"output":{"generics":["toc"],"name":"option"}}],[10,"reset","","Reset the internal TOC. Elements should call this from within the state-change handler.",401,{"inputs":[{"name":"self"}],"output":null}],[10,"set_toc","","Set the given TOC on the setter. Previously set TOC will be unreffed before setting a new one. ## `toc` a `Toc` to set.",401,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[8,"URIHandlerExt","","Trait containing all `URIHandler` methods.",null,null],[10,"get_protocols","","Gets the list of protocols supported by `self`. This list may not be modified.",402,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[10,"get_uri","","Gets the currently handled URI.",402,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_uri_type","","Gets the type of the given URI handler",402,{"inputs":[{"name":"self"}],"output":{"name":"uritype"}}],[10,"set_uri","","Tries to set the URI of the given handler. ## `uri` URI to set",402,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[8,"GstObjectExtManual","","",null,null],[10,"connect_deep_notify","","",406,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ElementExtManual","","",null,null],[10,"query","","",403,{"inputs":[{"name":"self"},{"name":"queryref"}],"output":{"name":"bool"}}],[10,"send_event","","",403,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[10,"get_metadata","","",403,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["str"],"name":"option"}}],[10,"get_pad_template","","",403,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["padtemplate"],"name":"option"}}],[10,"get_pad_template_list","","",403,{"inputs":[{"name":"self"}],"output":{"generics":["padtemplate"],"name":"vec"}}],[10,"message_full","","",403,{"inputs":[{"name":"self"},{"name":"elementmessagetype"},{"name":"t"},{"generics":["str"],"name":"option"},{"generics":["str"],"name":"option"},{"name":"str"},{"name":"str"},{"name":"u32"}],"output":null}],[10,"message_full_with_details","","",403,{"inputs":[{"name":"self"},{"name":"elementmessagetype"},{"name":"t"},{"generics":["str"],"name":"option"},{"generics":["str"],"name":"option"},{"name":"str"},{"name":"str"},{"name":"u32"},{"name":"structure"}],"output":null}],[10,"post_error_message","","",403,{"inputs":[{"name":"self"},{"name":"errormessage"}],"output":null}],[10,"iterate_pads","","",403,{"inputs":[{"name":"self"}],"output":{"generics":["pad"],"name":"iterator"}}],[10,"iterate_sink_pads","","",403,{"inputs":[{"name":"self"}],"output":{"generics":["pad"],"name":"iterator"}}],[10,"iterate_src_pads","","",403,{"inputs":[{"name":"self"}],"output":{"generics":["pad"],"name":"iterator"}}],[10,"get_pads","","",403,{"inputs":[{"name":"self"}],"output":{"generics":["pad"],"name":"vec"}}],[10,"get_sink_pads","","",403,{"inputs":[{"name":"self"}],"output":{"generics":["pad"],"name":"vec"}}],[10,"get_src_pads","","",403,{"inputs":[{"name":"self"}],"output":{"generics":["pad"],"name":"vec"}}],[10,"add_property_deep_notify_watch","","",403,{"inputs":[{"name":"self"},{"name":"p"},{"name":"bool"}],"output":{"name":"notifywatchid"}}],[10,"add_property_notify_watch","","",403,{"inputs":[{"name":"self"},{"name":"p"},{"name":"bool"}],"output":{"name":"notifywatchid"}}],[10,"remove_property_notify_watch","","",403,{"inputs":[{"name":"self"},{"name":"notifywatchid"}],"output":null}],[10,"query_convert","","",403,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"option"}}],[10,"query_convert_generic","","",403,{"inputs":[{"name":"self"},{"name":"v"},{"name":"format"}],"output":{"generics":["genericformattedvalue"],"name":"option"}}],[10,"query_duration","","",403,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"query_duration_generic","","",403,{"inputs":[{"name":"self"},{"name":"format"}],"output":{"generics":["genericformattedvalue"],"name":"option"}}],[10,"query_position","","",403,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"query_position_generic","","",403,{"inputs":[{"name":"self"},{"name":"format"}],"output":{"generics":["genericformattedvalue"],"name":"option"}}],[10,"seek","","",403,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"seekflags"},{"name":"seektype"},{"name":"v"},{"name":"seektype"},{"name":"v"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"seek_simple","","",403,{"inputs":[{"name":"self"},{"name":"seekflags"},{"name":"v"}],"output":{"generics":["boolerror"],"name":"result"}}],[8,"BinExtManual","","",null,null],[10,"add_many","","",404,null],[10,"remove_many","","",404,null],[10,"iterate_all_by_interface","","",404,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"generics":["element"],"name":"iterator"}}],[10,"iterate_elements","","",404,{"inputs":[{"name":"self"}],"output":{"generics":["element"],"name":"iterator"}}],[10,"iterate_recurse","","",404,{"inputs":[{"name":"self"}],"output":{"generics":["element"],"name":"iterator"}}],[10,"iterate_sinks","","",404,{"inputs":[{"name":"self"}],"output":{"generics":["element"],"name":"iterator"}}],[10,"iterate_sorted","","",404,{"inputs":[{"name":"self"}],"output":{"generics":["element"],"name":"iterator"}}],[10,"iterate_sources","","",404,{"inputs":[{"name":"self"}],"output":{"generics":["element"],"name":"iterator"}}],[10,"get_children","","",404,{"inputs":[{"name":"self"}],"output":{"generics":["element"],"name":"vec"}}],[8,"PadExtManual","","",null,null],[10,"add_probe","","",405,{"inputs":[{"name":"self"},{"name":"padprobetype"},{"name":"f"}],"output":{"name":"padprobeid"}}],[10,"remove_probe","","",405,{"inputs":[{"name":"self"},{"name":"padprobeid"}],"output":null}],[10,"chain","","",405,{"inputs":[{"name":"self"},{"name":"buffer"}],"output":{"name":"flowreturn"}}],[10,"push","","",405,{"inputs":[{"name":"self"},{"name":"buffer"}],"output":{"name":"flowreturn"}}],[10,"chain_list","","",405,{"inputs":[{"name":"self"},{"name":"bufferlist"}],"output":{"name":"flowreturn"}}],[10,"push_list","","",405,{"inputs":[{"name":"self"},{"name":"bufferlist"}],"output":{"name":"flowreturn"}}],[10,"pull_range","","",405,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u32"}],"output":{"generics":["buffer","flowreturn"],"name":"result"}}],[10,"get_range","","",405,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u32"}],"output":{"generics":["buffer","flowreturn"],"name":"result"}}],[10,"peer_query","","",405,{"inputs":[{"name":"self"},{"name":"queryref"}],"output":{"name":"bool"}}],[10,"query","","",405,{"inputs":[{"name":"self"},{"name":"queryref"}],"output":{"name":"bool"}}],[10,"query_default","","",405,{"inputs":[{"name":"self"},{"name":"q"},{"name":"queryref"}],"output":{"name":"bool"}}],[10,"proxy_query_caps","","",405,{"inputs":[{"name":"self"},{"name":"queryref"}],"output":{"name":"bool"}}],[10,"proxy_query_accept_caps","","",405,{"inputs":[{"name":"self"},{"name":"queryref"}],"output":{"name":"bool"}}],[10,"event_default","","",405,{"inputs":[{"name":"self"},{"name":"q"},{"name":"event"}],"output":{"name":"bool"}}],[10,"push_event","","",405,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[10,"send_event","","",405,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[10,"iterate_internal_links","","",405,{"inputs":[{"name":"self"}],"output":{"generics":["pad"],"name":"iterator"}}],[10,"iterate_internal_links_default","","",405,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"generics":["pad"],"name":"iterator"}}],[10,"stream_lock","","",405,{"inputs":[{"name":"self"}],"output":{"name":"streamlock"}}],[10,"set_activate_function","","",405,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[10,"set_activatemode_function","","",405,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[10,"set_chain_function","","",405,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[10,"set_chain_list_function","","",405,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[10,"set_event_function","","",405,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[10,"set_event_full_function","","",405,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[10,"set_getrange_function","","",405,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[10,"set_iterate_internal_links_function","","",405,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[10,"set_link_function","","",405,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[10,"set_query_function","","",405,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[10,"set_unlink_function","","",405,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[10,"start_task","","",405,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"peer_query_convert","","",405,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"option"}}],[10,"peer_query_convert_generic","","",405,{"inputs":[{"name":"self"},{"name":"v"},{"name":"format"}],"output":{"generics":["genericformattedvalue"],"name":"option"}}],[10,"peer_query_duration","","",405,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"peer_query_duration_generic","","",405,{"inputs":[{"name":"self"},{"name":"format"}],"output":{"generics":["genericformattedvalue"],"name":"option"}}],[10,"peer_query_position","","",405,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"peer_query_position_generic","","",405,{"inputs":[{"name":"self"},{"name":"format"}],"output":{"generics":["genericformattedvalue"],"name":"option"}}],[10,"query_convert","","",405,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"option"}}],[10,"query_convert_generic","","",405,{"inputs":[{"name":"self"},{"name":"v"},{"name":"format"}],"output":{"generics":["genericformattedvalue"],"name":"option"}}],[10,"query_duration","","",405,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"query_duration_generic","","",405,{"inputs":[{"name":"self"},{"name":"format"}],"output":{"generics":["genericformattedvalue"],"name":"option"}}],[10,"query_position","","",405,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"query_position_generic","","",405,{"inputs":[{"name":"self"},{"name":"format"}],"output":{"generics":["genericformattedvalue"],"name":"option"}}],[8,"GObjectExtManualGst","","",null,null],[10,"set_property_from_str","","",407,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":null}],[8,"ChildProxyExtManual","","",null,null],[10,"get_child_property","","",408,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["value"],"name":"option"}}],[10,"set_child_property","","",408,{"inputs":[{"name":"self"},{"name":"str"},{"name":"tovalue"}],"output":{"generics":["boolerror"],"name":"result"}}],[8,"TagSetterExtManual","","",null,null],[10,"add","","",409,null],[8,"IteratorImpl","","",null,null],[10,"next","","",413,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[10,"resync","","",413,{"inputs":[{"name":"self"}],"output":null}],[8,"DeviceProviderExtManual","","",null,null],[10,"get_metadata","","",410,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["str"],"name":"option"}}],[8,"TypeFindImpl","","",null,null],[10,"peek","","",414,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"u32"}],"output":{"name":"option"}}],[10,"suggest","","",414,{"inputs":[{"name":"self"},{"name":"typefindprobability"},{"name":"caps"}],"output":null}],[11,"get_length","","",414,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[8,"GstValueExt","","",null,null],[10,"can_compare","","",412,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"compare","","",412,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"valueorder"}}],[10,"can_intersect","","",412,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"intersect","","",412,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[10,"can_subtract","","",412,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"subtract","","",412,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[10,"can_union","","",412,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"union","","",412,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[10,"fixate","","",412,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"is_fixed","","",412,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_subset","","",412,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"serialize","","",412,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"deserialize","","",412,{"inputs":[{"name":"t"}],"output":{"generics":["value"],"name":"option"}}],[8,"ClockExtManual","","",null,null],[10,"new_periodic_id","","",411,{"inputs":[{"name":"self"},{"name":"clocktime"},{"name":"clocktime"}],"output":{"generics":["clockid"],"name":"option"}}],[10,"periodic_id_reinit","","",411,{"inputs":[{"name":"self"},{"name":"clockid"},{"name":"clocktime"},{"name":"clocktime"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"new_single_shot_id","","",411,{"inputs":[{"name":"self"},{"name":"clocktime"}],"output":{"generics":["clockid"],"name":"option"}}],[10,"single_shot_id_reinit","","",411,{"inputs":[{"name":"self"},{"name":"clockid"},{"name":"clocktime"}],"output":{"generics":["boolerror"],"name":"result"}}],[14,"gst_error","","",null,null],[14,"gst_warning","","",null,null],[14,"gst_fixme","","",null,null],[14,"gst_info","","",null,null],[14,"gst_debug","","",null,null],[14,"gst_log","","",null,null],[14,"gst_trace","","",null,null],[14,"gst_memdump","","",null,null],[14,"gst_log_with_level","","",null,null],[14,"gst_error_msg","","",null,null],[14,"gst_element_error","","",null,null],[14,"gst_element_warning","","",null,null],[14,"gst_element_info","","",null,null],[11,"from_glib_none","","",379,null],[11,"from_glib_none","","",379,null],[11,"from_glib","","",4,{"inputs":[{"name":"usize"}],"output":{"name":"type"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"clone","","",415,{"inputs":[{"name":"self"}],"output":{"name":"typedvalue"}}],[11,"clone","","",416,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"clone","","",379,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"downcast","","Tries to downcast to a `TypedValue`.",379,{"inputs":[{"name":"self"}],"output":{"generics":["typedvalue","value"],"name":"result"}}],[11,"get","","Tries to get a value of type `T`.",379,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is","","Returns `true` if the type of the value corresponds to `T`.",379,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"type_","","Returns the type of the value.",379,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"type_transformable","","Returns whether `Value`s of type `src` can be transformed to type `dst`.",379,{"inputs":[{"name":"type"},{"name":"type"}],"output":{"name":"bool"}}],[11,"try_into_send_value","","",379,{"inputs":[{"name":"self"}],"output":{"generics":["sendvalue","value"],"name":"result"}}],[11,"deref","","",415,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"description","","",416,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"to_glib_none_mut","","",415,{"inputs":[{"name":"self"}],"output":{"generics":["typedvalue"],"name":"stashmut"}}],[11,"to_glib_none_mut","","",379,{"inputs":[{"name":"self"}],"output":{"generics":["value"],"name":"stashmut"}}],[11,"from_glib_full","","",379,null],[11,"from_glib_none_as_vec","","",379,null],[11,"from_glib_container_as_vec","","",379,null],[11,"from_glib_full_as_vec","","",379,null],[11,"from_glib_none_as_vec","","",379,null],[11,"from_glib_container_as_vec","","",379,null],[11,"from_glib_full_as_vec","","",379,null],[11,"to_glib_none","","",379,{"inputs":[{"name":"self"}],"output":{"generics":["value"],"name":"stash"}}],[11,"fmt","","",379,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",415,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",416,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from","","",415,{"inputs":[{"generics":["str"],"name":"option"}],"output":{"generics":["string"],"name":"typedvalue"}}],[11,"from","","",379,{"inputs":[{"name":"typedvalue"}],"output":{"name":"value"}}],[11,"from","","",415,{"inputs":[{"name":"t"}],"output":{"name":"typedvalue"}}],[11,"from","","",415,{"inputs":[{"generics":["string"],"name":"typedvalue"}],"output":{"generics":["str"],"name":"typedvalue"}}],[11,"from","","",379,{"inputs":[{"name":"t"}],"output":{"name":"value"}}],[11,"from","","",415,{"inputs":[{"name":"option"}],"output":{"name":"typedvalue"}}],[11,"from","","",379,{"inputs":[{"name":"option"}],"output":{"name":"value"}}],[11,"from","","",379,{"inputs":[{"name":"sendvalue"}],"output":{"name":"value"}}],[11,"from","","",415,{"inputs":[{"generics":["str"],"name":"typedvalue"}],"output":{"generics":["string"],"name":"typedvalue"}}],[11,"from","","",415,{"inputs":[{"name":"str"}],"output":{"generics":["string"],"name":"typedvalue"}}],[11,"static_type","","",416,{"inputs":[],"output":{"name":"type"}}],[11,"from_glib_none_num_as_vec","","",379,null],[11,"from_glib_container_num_as_vec","","",379,null],[11,"from_glib_full_num_as_vec","","",379,null],[11,"from_glib_none_num_as_vec","","",4,null],[11,"from_glib_container_num_as_vec","","",4,null],[11,"from_glib_full_num_as_vec","","",4,null],[11,"from_glib_none_num_as_vec","","",4,null],[11,"from_glib_container_num_as_vec","","",4,null],[11,"from_glib_full_num_as_vec","","",4,null],[11,"from_glib_none_num_as_vec","","",379,null],[11,"from_glib_container_num_as_vec","","",379,null],[11,"from_glib_full_num_as_vec","","",379,null],[11,"drop","","",379,null],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"to_glib_none_from_slice","","",4,null],[11,"to_glib_container_from_slice","","",4,null],[11,"to_glib_full_from_slice","","",4,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",416,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"to_glib","","",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_glib","","",1,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"uninitialized","","",379,{"inputs":[],"output":{"name":"value"}}],[11,"to_value","","",379,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"to_value_type","","",379,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"new","","Creates an error with supplied error enum variant and message.",416,{"inputs":[{"name":"t"},{"name":"str"}],"output":{"name":"error"}}],[11,"is","","Checks if the error domain matches `T`.",416,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"kind","","Tries to convert to a specific error enum.",416,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"wrap","","",416,null],[11,"name","","",4,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"is_a","","",4,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"parent","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["type"],"name":"option"}}],[11,"children","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["type"],"name":"vec"}}],[11,"interfaces","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["type"],"name":"vec"}}],[11,"interface_prerequisites","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["type"],"name":"vec"}}],[11,"from_name","","",4,{"inputs":[{"name":"p"}],"output":{"generics":["type"],"name":"option"}}],[11,"get","","Returns the value.",415,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_some","","Returns the value.",415,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set","","Sets the value.",415,null],[11,"set_none","","Sets the value to `None`.",415,null],[11,"set_some","","Sets the value.",415,null],[11,"into_send_value","","",415,{"inputs":[{"name":"self"}],"output":{"name":"sendvalue"}}],[11,"get_length","","",414,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"reset_with_format","","",417,{"inputs":[{"name":"self"},{"name":"format"}],"output":null}],[11,"set_format","","",417,{"inputs":[{"name":"self"},{"name":"format"}],"output":null}],[11,"downcast","","",417,{"inputs":[{"name":"self"}],"output":{"generics":["formattedsegment"],"name":"result"}}],[11,"downcast_ref","","",417,{"inputs":[{"name":"self"}],"output":{"generics":["formattedsegment"],"name":"option"}}],[11,"downcast_mut","","",417,{"inputs":[{"name":"self"}],"output":{"generics":["formattedsegment"],"name":"option"}}]],"paths":[[8,"Cast"],[3,"Continue"],[8,"StaticType"],[8,"ToValue"],[4,"Type"],[3,"PadProbeInfo"],[3,"ClockTime"],[3,"SliceTypeFind"],[3,"Fraction"],[3,"Bitmask"],[4,"BufferingMode"],[4,"BusSyncReply"],[4,"CapsIntersectMode"],[4,"ClockReturn"],[4,"ClockType"],[4,"CoreError"],[4,"DebugLevel"],[4,"EventType"],[4,"FlowReturn"],[4,"Format"],[4,"LibraryError"],[4,"PadDirection"],[4,"PadLinkReturn"],[4,"PadMode"],[4,"PadPresence"],[4,"PadProbeReturn"],[4,"ParseError"],[4,"PluginError"],[4,"ProgressType"],[4,"QOSType"],[4,"Rank"],[4,"ResourceError"],[4,"SeekType"],[4,"State"],[4,"StateChange"],[4,"StateChangeReturn"],[4,"StreamError"],[4,"StreamStatusType"],[4,"StructureChangeType"],[4,"TagMergeMode"],[4,"TaskState"],[4,"TocEntryType"],[4,"TocLoopType"],[4,"TocScope"],[4,"TypeFindProbability"],[4,"URIError"],[4,"URIType"],[4,"ElementMessageType"],[4,"PadProbeData"],[4,"IteratorError"],[4,"ClockError"],[4,"ClockSuccess"],[4,"FlowError"],[4,"FlowSuccess"],[4,"PadLinkError"],[4,"StateChangeSuccess"],[4,"ValueOrder"],[3,"Bin"],[3,"Bus"],[3,"ChildProxy"],[3,"Clock"],[3,"Device"],[3,"DeviceMonitor"],[3,"DeviceProvider"],[3,"DeviceProviderFactory"],[3,"Element"],[3,"ElementFactory"],[3,"GhostPad"],[3,"Object"],[3,"Pad"],[3,"PadTemplate"],[3,"Pipeline"],[3,"Plugin"],[3,"PluginFeature"],[3,"Preset"],[3,"ProxyPad"],[3,"Registry"],[3,"Stream"],[3,"StreamCollection"],[3,"SystemClock"],[3,"TagSetter"],[3,"TocSetter"],[3,"TypeFindFactory"],[3,"URIHandler"],[3,"DateTime"],[3,"BufferCopyFlags"],[3,"BufferFlags"],[3,"DebugColorFlags"],[3,"DebugGraphDetails"],[3,"ElementFlags"],[3,"PadLinkCheck"],[3,"PadProbeType"],[3,"ParseFlags"],[3,"PluginDependencyFlags"],[3,"SchedulingFlags"],[3,"SeekFlags"],[3,"SegmentFlags"],[3,"StackTraceFlags"],[3,"StreamFlags"],[3,"StreamType"],[3,"DebugCategory"],[3,"ErrorMessage"],[8,"MiniObject"],[3,"GstRc"],[4,"MessageView"],[3,"MessageRef"],[3,"Error"],[3,"Warning"],[3,"Info"],[3,"Tag"],[3,"Buffering"],[3,"StateChanged"],[3,"StepDone"],[3,"ClockProvide"],[3,"ClockLost"],[3,"NewClock"],[3,"StructureChange"],[3,"StreamStatus"],[3,"SegmentStart"],[3,"SegmentDone"],[3,"AsyncDone"],[3,"RequestState"],[3,"StepStart"],[3,"Qos"],[3,"Progress"],[3,"Toc"],[3,"ResetTime"],[3,"StreamStart"],[3,"NeedContext"],[3,"HaveContext"],[3,"DeviceAdded"],[3,"DeviceRemoved"],[3,"PropertyNotify"],[3,"StreamCollection"],[3,"StreamsSelected"],[3,"Redirect"],[3,"EosBuilder"],[3,"ErrorBuilder"],[3,"WarningBuilder"],[3,"InfoBuilder"],[3,"TagBuilder"],[3,"BufferingBuilder"],[3,"StateChangedBuilder"],[3,"StateDirtyBuilder"],[3,"StepDoneBuilder"],[3,"ClockProvideBuilder"],[3,"ClockLostBuilder"],[3,"NewClockBuilder"],[3,"StructureChangeBuilder"],[3,"StreamStatusBuilder"],[3,"ApplicationBuilder"],[3,"ElementBuilder"],[3,"SegmentStartBuilder"],[3,"SegmentDoneBuilder"],[3,"DurationChangedBuilder"],[3,"LatencyBuilder"],[3,"AsyncStartBuilder"],[3,"AsyncDoneBuilder"],[3,"RequestStateBuilder"],[3,"StepStartBuilder"],[3,"QosBuilder"],[3,"ProgressBuilder"],[3,"TocBuilder"],[3,"ResetTimeBuilder"],[3,"StreamStartBuilder"],[3,"NeedContextBuilder"],[3,"HaveContextBuilder"],[3,"DeviceAddedBuilder"],[3,"DeviceRemovedBuilder"],[3,"PropertyNotifyBuilder"],[3,"StreamCollectionBuilder"],[3,"StreamsSelectedBuilder"],[3,"RedirectBuilder"],[3,"Structure"],[3,"StructureRef"],[3,"FieldIterator"],[3,"Iter"],[3,"Builder"],[6,"Caps"],[3,"CapsRef"],[3,"Iter"],[3,"IterMut"],[3,"Builder"],[8,"Tag"],[3,"Title"],[3,"TitleSortname"],[3,"Artist"],[3,"ArtistSortname"],[3,"Album"],[3,"AlbumSortname"],[3,"AlbumArtist"],[3,"AlbumArtistSortname"],[3,"Date"],[3,"DateTime"],[3,"Genre"],[3,"Comment"],[3,"ExtendedComment"],[3,"TrackNumber"],[3,"TrackCount"],[3,"AlbumVolumeNumber"],[3,"AlbumVolumeCount"],[3,"Location"],[3,"Homepage"],[3,"Description"],[3,"Version"],[3,"ISRC"],[3,"Organization"],[3,"Copyright"],[3,"CopyrightUri"],[3,"EncodedBy"],[3,"Composer"],[3,"Conductor"],[3,"Contact"],[3,"License"],[3,"LicenseUri"],[3,"Performer"],[3,"Duration"],[3,"Codec"],[3,"VideoCodec"],[3,"AudioCodec"],[3,"SubtitleCodec"],[3,"ContainerFormat"],[3,"Bitrate"],[3,"NominalBitrate"],[3,"MinimumBitrate"],[3,"MaximumBitrate"],[3,"Serial"],[3,"Encoder"],[3,"EncoderVersion"],[3,"TrackGain"],[3,"TrackPeak"],[3,"AlbumGain"],[3,"AlbumPeak"],[3,"ReferenceLevel"],[3,"LanguageCode"],[3,"LanguageName"],[3,"Image"],[3,"PreviewImage"],[3,"Attachment"],[3,"BeatsPerMinute"],[3,"Keywords"],[3,"GeoLocationName"],[3,"GeoLocationLatitude"],[3,"GeoLocationLongitute"],[3,"GeoLocationElevation"],[3,"GeoLocationCity"],[3,"GeoLocationCountry"],[3,"GeoLocationSublocation"],[3,"GeoLocationHorizontalError"],[3,"GeoLocationMovementDirection"],[3,"GeoLocationMovementSpeed"],[3,"GeoLocationCaptureDirection"],[3,"ShowName"],[3,"ShowSortname"],[3,"ShowEpisodeNumber"],[3,"ShowSeasonNumber"],[3,"Lyrics"],[3,"ComposerSortname"],[3,"Grouping"],[3,"UserRating"],[3,"DeviceManufacturer"],[3,"DeviceModel"],[3,"ApplicationName"],[3,"ApplicationData"],[3,"ImageOrientation"],[3,"Publisher"],[3,"InterpretedBy"],[3,"MidiBaseNote"],[3,"PrivateData"],[3,"TagListRef"],[3,"TagIterator"],[3,"BufferRef"],[3,"BufferMap"],[3,"MappedBuffer"],[3,"BUFFER_COPY_METADATA"],[3,"BUFFER_COPY_ALL"],[3,"SampleRef"],[3,"BufferListRef"],[3,"Iter"],[4,"QueryView"],[3,"QueryRef"],[3,"Position"],[3,"Duration"],[3,"Latency"],[3,"Jitter"],[3,"Rate"],[3,"Seeking"],[3,"Segment"],[3,"Convert"],[3,"Formats"],[3,"Buffering"],[3,"Custom"],[3,"Uri"],[3,"Allocation"],[3,"Scheduling"],[3,"AcceptCaps"],[3,"Caps"],[3,"Drain"],[3,"Context"],[3,"Other"],[3,"Seqnum"],[3,"GroupId"],[4,"EventView"],[3,"EventRef"],[3,"FlushStop"],[3,"StreamStart"],[3,"Caps"],[3,"Segment"],[3,"StreamCollection"],[3,"Tag"],[3,"BufferSize"],[3,"SinkMessage"],[3,"StreamGroupDone"],[3,"Toc"],[3,"Protection"],[3,"SegmentDone"],[3,"Gap"],[3,"Qos"],[3,"Seek"],[3,"Latency"],[3,"Step"],[3,"TocSelect"],[3,"SelectStreams"],[3,"FlushStartBuilder"],[3,"FlushStopBuilder"],[3,"StreamStartBuilder"],[3,"CapsBuilder"],[3,"SegmentBuilder"],[3,"StreamCollectionBuilder"],[3,"TagBuilder"],[3,"BufferSizeBuilder"],[3,"SinkMessageBuilder"],[3,"StreamGroupDoneBuilder"],[3,"EosBuilder"],[3,"TocBuilder"],[3,"ProtectionBuilder"],[3,"SegmentDoneBuilder"],[3,"GapBuilder"],[3,"QosBuilder"],[3,"SeekBuilder"],[3,"NavigationBuilder"],[3,"LatencyBuilder"],[3,"StepBuilder"],[3,"ReconfigureBuilder"],[3,"TocSelectBuilder"],[3,"SelectStreamsBuilder"],[3,"CustomUpstreamBuilder"],[3,"CustomDownstreamBuilder"],[3,"CustomDownstreamOobBuilder"],[3,"CustomDownstreamStickyBuilder"],[3,"CustomBothBuilder"],[3,"CustomBothOobBuilder"],[3,"ContextRef"],[3,"StaticCaps"],[3,"StaticPadTemplate"],[3,"NotifyWatchId"],[3,"ELEMENT_METADATA_AUTHOR"],[3,"ELEMENT_METADATA_DESCRIPTION"],[3,"ELEMENT_METADATA_DOC_URI"],[3,"ELEMENT_METADATA_ICON_NAME"],[3,"ELEMENT_METADATA_KLASS"],[3,"ELEMENT_METADATA_LONGNAME"],[3,"BusStream"],[3,"PadProbeId"],[3,"Iterator"],[3,"ParseContext"],[3,"StateChangeError"],[3,"PadLinkSuccess"],[3,"Iter"],[3,"TypeFind"],[3,"Default"],[3,"Bytes"],[3,"Buffers"],[4,"GenericFormattedValue"],[8,"FormattedValue"],[3,"IntRange"],[3,"FractionRange"],[3,"Array"],[3,"List"],[3,"Value"],[3,"FormattedSegment"],[3,"TocRef"],[3,"TocEntryRef"],[3,"ClockId"],[8,"MulDiv"],[8,"BinExt"],[8,"ChildProxyExt"],[8,"ClockExt"],[8,"DeviceExt"],[8,"DeviceMonitorExt"],[8,"DeviceProviderExt"],[8,"ElementExt"],[8,"GhostPadExt"],[8,"GstObjectExt"],[8,"PadExt"],[8,"PipelineExt"],[8,"PluginFeatureExt"],[8,"PresetExt"],[8,"ProxyPadExt"],[8,"SystemClockExt"],[8,"TagSetterExt"],[8,"TocSetterExt"],[8,"URIHandlerExt"],[8,"ElementExtManual"],[8,"BinExtManual"],[8,"PadExtManual"],[8,"GstObjectExtManual"],[8,"GObjectExtManualGst"],[8,"ChildProxyExtManual"],[8,"TagSetterExtManual"],[8,"DeviceProviderExtManual"],[8,"ClockExtManual"],[8,"GstValueExt"],[8,"IteratorImpl"],[8,"TypeFindImpl"],[3,"TypedValue"],[3,"Error"],[6,"Segment"]]};
searchIndex["gstreamer_app"] = {"doc":"","items":[[8,"Cast","gstreamer_app","Upcasting and downcasting support.",null,null],[11,"upcast","","Upcasts an object to a superclass or interface `T`.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"downcast","","Tries to downcast to a subclass or interface implementor `T`.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"is","","Returns `true` if the object is an instance of (can be cast to) `T`.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"dynamic_cast","","Tries to cast to an object of type `T`. This handles upcasting, downcasting and casting between interface and interface implementors. All checks are performed at runtime, while `downcast` and `upcast` will do many checks at compile-time already.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[3,"Continue","","Continue calling the closure in the future iterations or drop it.",null,null],[12,"0","","",1,null],[3,"Error","","A generic error capable of representing various error domains (types).",null,null],[8,"IsA","","Declares the \"is a\" relationship.",null,null],[8,"StaticType","","Types that are supported by GLib dynamic typing.",null,null],[10,"static_type","","Returns the type identifier of `Self`.",2,{"inputs":[],"output":{"name":"type"}}],[8,"ToValue","","Converts to `Value`.",null,null],[10,"to_value","","Returns a `Value` clone of `self`.",3,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[10,"to_value_type","","Returns the type identifer of `self`.",3,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[4,"Type","","A GLib or GLib-based library type",null,null],[13,"Invalid","","An invalid `Type` used as error return value in some functions",4,null],[13,"Unit","","The fundamental type corresponding to the unit type `()`",4,null],[13,"I8","","The fundamental type corresponding to `i8`",4,null],[13,"U8","","The fundamental type corresponding to `u8`",4,null],[13,"Bool","","The fundamental type corresponding to `bool`",4,null],[13,"I32","","The fundamental type corresponding to `i32`",4,null],[13,"U32","","The fundamental type corresponding to `u32`",4,null],[13,"ILong","","The fundamental type corresponding to C `long`",4,null],[13,"ULong","","The fundamental type corresponding to C `unsigned long`",4,null],[13,"I64","","The fundamental type corresponding to `i64`",4,null],[13,"U64","","The fundamental type corresponding to `u64`",4,null],[13,"F32","","The fundamental type corresponding to `f32`",4,null],[13,"F64","","The fundamental type corresponding to `f64`",4,null],[13,"String","","The fundamental type corresponding to `String`",4,null],[13,"Pointer","","The fundamental type corresponding to a pointer",4,null],[13,"Variant","","The fundamental type of GVariant",4,null],[13,"BaseInterface","","The fundamental type from which all interfaces are derived",4,null],[13,"BaseEnum","","The fundamental type from which all enumeration types are derived",4,null],[13,"BaseFlags","","The fundamental type from which all flags types are derived",4,null],[13,"BaseBoxed","","The fundamental type from which all boxed types are derived",4,null],[13,"BaseParamSpec","","The fundamental type from which all `GParamSpec` types are derived",4,null],[13,"BaseObject","","The fundamental type from which all objects are derived",4,null],[13,"Other","","A non-fundamental type identified by value of type `usize`",4,null],[3,"TypedValue","","A statically typed `Value`.",null,null],[3,"Value","","A generic value capable of carrying various types.",null,null],[3,"AppSink","","Appsink is a sink plugin that supports many different methods for making the application get a handle on the GStreamer data in a pipeline. Unlike most GStreamer elements, Appsink provides external API functions.",null,null],[3,"AppSrc","","The appsrc element can be used by applications to insert data into a GStreamer pipeline. Unlike most GStreamer elements, appsrc provides external API functions.",null,null],[3,"AppSrcCallbacks","","",null,null],[3,"AppSrcCallbacksBuilder","","",null,null],[3,"AppSinkCallbacks","","",null,null],[3,"AppSinkCallbacksBuilder","","",null,null],[4,"AppStreamType","","The stream type.",null,null],[13,"Stream","","",5,null],[13,"Seekable","","",5,null],[13,"RandomAccess","","",5,null],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"appsink"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",6,null],[11,"static_type","","",6,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"get_buffer_list_support","","Check if `self` supports buffer lists.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_caps","","Get the configured caps on `self`.",6,{"inputs":[{"name":"self"}],"output":{"generics":["caps"],"name":"option"}}],[11,"get_drop","","Check if `self` will drop old buffers when the maximum amount of queued buffers is reached.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_emit_signals","","Check if appsink will emit the \"new-preroll\" and \"new-sample\" signals.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_max_buffers","","Get the maximum amount of buffers that can be queued in `self`.",6,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_wait_on_eos","","Check if `self` will wait for all buffers to be consumed when an EOS is received.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_eos","","Check if `self` is EOS, which is when no more samples can be pulled because an EOS event was received.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"pull_preroll","","Get the last preroll sample in `self`. This was the sample that caused the appsink to preroll in the PAUSED state. This sample can be pulled many times and remains available to the application even after EOS.",6,{"inputs":[{"name":"self"}],"output":{"generics":["sample"],"name":"option"}}],[11,"pull_sample","","This function blocks until a sample or EOS becomes available or the appsink element is set to the READY/NULL state.",6,{"inputs":[{"name":"self"}],"output":{"generics":["sample"],"name":"option"}}],[11,"set_buffer_list_support","","Instruct `self` to enable or disable buffer list support.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"set_caps","","Set the capabilities on the appsink element. This function takes a copy of the caps structure. After calling this method, the sink will only accept caps that match `caps`. If `caps` is non-fixed, or incomplete, you must check the caps on the samples to get the actual used caps. ## `caps` caps to set",6,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[11,"set_drop","","Instruct `self` to drop old buffers when the maximum amount of queued buffers is reached. ## `drop` the new state",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"set_emit_signals","","Make appsink emit the \"new-preroll\" and \"new-sample\" signals. This option is by default disabled because signal emission is expensive and unneeded when the application prefers to operate in pull mode. ## `emit` the new state",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"set_max_buffers","","Set the maximum amount of buffers that can be queued in `self`. After this amount of buffers are queued in appsink, any more buffers will block upstream elements until a sample is pulled from `self`. ## `max` the maximum number of buffers to queue",6,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"set_wait_on_eos","","Instruct `self` to wait for all buffers to be consumed when an EOS is received. ## `wait` the new state",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"try_pull_preroll","","Get the last preroll sample in `self`. This was the sample that caused the appsink to preroll in the PAUSED state. This sample can be pulled many times and remains available to the application even after EOS.",6,{"inputs":[{"name":"self"},{"name":"clocktime"}],"output":{"generics":["sample"],"name":"option"}}],[11,"try_pull_sample","","This function blocks until a sample or EOS becomes available or the appsink element is set to the READY/NULL state or the timeout expires.",6,{"inputs":[{"name":"self"},{"name":"clocktime"}],"output":{"generics":["sample"],"name":"option"}}],[11,"get_property_buffer_list","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_property_buffer_list","","",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_property_eos","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"connect_eos","","",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_new_preroll","","",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_new_sample","","",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_property_buffer_list_notify","","",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_property_caps_notify","","",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_property_drop_notify","","",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_property_emit_signals_notify","","",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_property_eos_notify","","",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_property_max_buffers_notify","","",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_property_wait_on_eos_notify","","",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"appsrc"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",7,null],[11,"static_type","","",7,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"end_of_stream","","Indicates to the appsrc element that the last buffer queued in the element is the last buffer of the stream.",7,{"inputs":[{"name":"self"}],"output":{"name":"flowreturn"}}],[11,"get_caps","","Get the configured caps on `self`.",7,{"inputs":[{"name":"self"}],"output":{"generics":["caps"],"name":"option"}}],[11,"get_current_level_bytes","","Get the number of currently queued bytes inside `self`.",7,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"get_duration","","Get the duration of the stream in nanoseconds. A value of GST_CLOCK_TIME_NONE means that the duration is not known.",7,{"inputs":[{"name":"self"}],"output":{"name":"clocktime"}}],[11,"get_emit_signals","","Check if appsrc will emit the \"new-preroll\" and \"new-buffer\" signals.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_max_bytes","","Get the maximum amount of bytes that can be queued in `self`.",7,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"get_size","","Get the size of the stream in bytes. A value of -1 means that the size is not known.",7,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"get_stream_type","","Get the stream type. Control the stream type of `self` with `AppSrc::set_stream_type`.",7,{"inputs":[{"name":"self"}],"output":{"name":"appstreamtype"}}],[11,"push_sample","","Extract a buffer from the provided sample and adds it to the queue of buffers that the appsrc element will push to its source pad. Any previous caps that were set on appsrc will be replaced by the caps associated with the sample if not equal.",7,{"inputs":[{"name":"self"},{"name":"sample"}],"output":{"name":"flowreturn"}}],[11,"set_caps","","Set the capabilities on the appsrc element. This function takes a copy of the caps structure. After calling this method, the source will only produce caps that match `caps`. `caps` must be fixed and the caps on the buffers must match the caps or left NULL. ## `caps` caps to set",7,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[11,"set_duration","","Set the duration of the stream in nanoseconds. A value of GST_CLOCK_TIME_NONE means that the duration is not known.",7,{"inputs":[{"name":"self"},{"name":"clocktime"}],"output":null}],[11,"set_emit_signals","","Make appsrc emit the \"new-preroll\" and \"new-buffer\" signals. This option is by default disabled because signal emission is expensive and unneeded when the application prefers to operate in pull mode. ## `emit` the new state",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"set_max_bytes","","Set the maximum amount of bytes that can be queued in `self`. After the maximum amount of bytes are queued, `self` will emit the \"enough-data\" signal. ## `max` the maximum number of bytes to queue",7,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"set_size","","Set the size of the stream in bytes. A value of -1 means that the size is not known. ## `size` the size to set",7,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"set_stream_type","","Set the stream type on `self`. For seekable streams, the \"seek\" signal must be connected to.",7,{"inputs":[{"name":"self"},{"name":"appstreamtype"}],"output":null}],[11,"get_property_block","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_property_block","","",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_property_current_level_bytes","","",7,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"get_property_duration","","",7,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"set_property_duration","","",7,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"get_property_format","","",7,{"inputs":[{"name":"self"}],"output":{"name":"format"}}],[11,"set_property_format","","",7,{"inputs":[{"name":"self"},{"name":"format"}],"output":null}],[11,"get_property_is_live","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_property_is_live","","",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_property_max_latency","","",7,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"set_property_max_latency","","",7,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"get_property_min_latency","","",7,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"set_property_min_latency","","",7,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"get_property_min_percent","","",7,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"set_property_min_percent","","",7,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"connect_enough_data","","",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_need_data","","",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_seek_data","","",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_property_block_notify","","",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_property_caps_notify","","",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_property_current_level_bytes_notify","","",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_property_duration_notify","","",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_property_emit_signals_notify","","",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_property_format_notify","","",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_property_is_live_notify","","",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_property_max_bytes_notify","","",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_property_max_latency_notify","","",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_property_min_latency_notify","","",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_property_min_percent_notify","","",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_property_size_notify","","",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_property_stream_type_notify","","",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"appstreamtype"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"appstreamtype"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"appstreamtype"}],"output":{"name":"bool"}}],[11,"hash","","",5,null],[11,"static_type","","",5,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",5,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",5,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",5,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"new","","",8,{"inputs":[],"output":{"name":"appsrccallbacksbuilder"}}],[11,"need_data","","",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"enough_data","","",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"seek_data","","",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"build","","",9,{"inputs":[{"name":"self"}],"output":{"name":"appsrccallbacks"}}],[11,"push_buffer","","Adds a buffer to the queue of buffers that the appsrc element will push to its source pad. This function takes ownership of the buffer.",7,{"inputs":[{"name":"self"},{"name":"buffer"}],"output":{"name":"flowreturn"}}],[11,"set_callbacks","","Set callbacks which will be executed when data is needed, enough data has been collected or when a seek should be performed. This is an alternative to using the signals, it has lower overhead and is thus less expensive, but also less flexible.",7,{"inputs":[{"name":"self"},{"name":"appsrccallbacks"}],"output":null}],[11,"set_latency","","Configure the `min` and `max` latency in `src`. If `min` is set to -1, the default latency calculations for pseudo-live sources will be used. ## `min` the min latency ## `max` the min latency",7,{"inputs":[{"name":"self"},{"name":"clocktime"},{"name":"clocktime"}],"output":null}],[11,"get_latency","","Retrieve the min and max latencies in `min` and `max` respectively. ## `min` the min latency ## `max` the min latency",7,null],[11,"new","","",10,{"inputs":[],"output":{"name":"appsinkcallbacksbuilder"}}],[11,"eos","","",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"new_preroll","","",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"new_sample","","",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"build","","",11,{"inputs":[{"name":"self"}],"output":{"name":"appsinkcallbacks"}}],[11,"set_callbacks","","Set callbacks which will be executed for each new preroll, new sample and eos. This is an alternative to using the signals, it has lower overhead and is thus less expensive, but also less flexible.",6,{"inputs":[{"name":"self"},{"name":"appsinkcallbacks"}],"output":null}],[0,"prelude","","",null,null],[11,"can_compare","","",12,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"compare","","",12,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"valueorder"}}],[11,"can_intersect","","",12,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"intersect","","",12,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"generics":["value"],"name":"option"}}],[11,"can_subtract","","",12,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"subtract","","",12,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"generics":["value"],"name":"option"}}],[11,"can_union","","",12,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"union","","",12,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"generics":["value"],"name":"option"}}],[11,"fixate","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["value"],"name":"option"}}],[11,"is_fixed","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_subset","","",12,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"serialize","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"deserialize","","",12,{"inputs":[{"name":"t"}],"output":{"generics":["value"],"name":"option"}}],[11,"from_glib_none","","",12,null],[11,"from_glib_none","","",12,null],[11,"from_glib","","",4,{"inputs":[{"name":"usize"}],"output":{"name":"type"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"typedvalue"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"downcast","","Tries to downcast to a `TypedValue`.",12,{"inputs":[{"name":"self"}],"output":{"generics":["typedvalue","value"],"name":"result"}}],[11,"get","","Tries to get a value of type `T`.",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is","","Returns `true` if the type of the value corresponds to `T`.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"type_","","Returns the type of the value.",12,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"type_transformable","","Returns whether `Value`s of type `src` can be transformed to type `dst`.",12,{"inputs":[{"name":"type"},{"name":"type"}],"output":{"name":"bool"}}],[11,"try_into_send_value","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["sendvalue","value"],"name":"result"}}],[11,"deref","","",13,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"description","","",14,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"to_glib_none_mut","","",13,{"inputs":[{"name":"self"}],"output":{"generics":["typedvalue"],"name":"stashmut"}}],[11,"to_glib_none_mut","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["value"],"name":"stashmut"}}],[11,"from_glib_full","","",12,null],[11,"from_glib_none_as_vec","","",12,null],[11,"from_glib_container_as_vec","","",12,null],[11,"from_glib_full_as_vec","","",12,null],[11,"from_glib_none_as_vec","","",12,null],[11,"from_glib_container_as_vec","","",12,null],[11,"from_glib_full_as_vec","","",12,null],[11,"to_glib_none","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["value"],"name":"stash"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from","","",13,{"inputs":[{"generics":["str"],"name":"option"}],"output":{"generics":["string"],"name":"typedvalue"}}],[11,"from","","",12,{"inputs":[{"name":"typedvalue"}],"output":{"name":"value"}}],[11,"from","","",13,{"inputs":[{"name":"t"}],"output":{"name":"typedvalue"}}],[11,"from","","",13,{"inputs":[{"generics":["string"],"name":"typedvalue"}],"output":{"generics":["str"],"name":"typedvalue"}}],[11,"from","","",12,{"inputs":[{"name":"t"}],"output":{"name":"value"}}],[11,"from","","",13,{"inputs":[{"name":"option"}],"output":{"name":"typedvalue"}}],[11,"from","","",12,{"inputs":[{"name":"option"}],"output":{"name":"value"}}],[11,"from","","",12,{"inputs":[{"name":"sendvalue"}],"output":{"name":"value"}}],[11,"from","","",13,{"inputs":[{"generics":["str"],"name":"typedvalue"}],"output":{"generics":["string"],"name":"typedvalue"}}],[11,"from","","",13,{"inputs":[{"name":"str"}],"output":{"generics":["string"],"name":"typedvalue"}}],[11,"static_type","","",14,{"inputs":[],"output":{"name":"type"}}],[11,"from_glib_none_num_as_vec","","",12,null],[11,"from_glib_container_num_as_vec","","",12,null],[11,"from_glib_full_num_as_vec","","",12,null],[11,"from_glib_none_num_as_vec","","",4,null],[11,"from_glib_container_num_as_vec","","",4,null],[11,"from_glib_full_num_as_vec","","",4,null],[11,"from_glib_none_num_as_vec","","",4,null],[11,"from_glib_container_num_as_vec","","",4,null],[11,"from_glib_full_num_as_vec","","",4,null],[11,"from_glib_none_num_as_vec","","",12,null],[11,"from_glib_container_num_as_vec","","",12,null],[11,"from_glib_full_num_as_vec","","",12,null],[11,"drop","","",12,null],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"to_glib_none_from_slice","","",4,null],[11,"to_glib_container_from_slice","","",4,null],[11,"to_glib_full_from_slice","","",4,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"to_glib","","",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_glib","","",1,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"uninitialized","","",12,{"inputs":[],"output":{"name":"value"}}],[11,"to_value","","",12,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"to_value_type","","",12,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"new","","Creates an error with supplied error enum variant and message.",14,{"inputs":[{"name":"t"},{"name":"str"}],"output":{"name":"error"}}],[11,"is","","Checks if the error domain matches `T`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"kind","","Tries to convert to a specific error enum.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"wrap","","",14,null],[11,"name","","",4,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"is_a","","",4,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"parent","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["type"],"name":"option"}}],[11,"children","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["type"],"name":"vec"}}],[11,"interfaces","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["type"],"name":"vec"}}],[11,"interface_prerequisites","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["type"],"name":"vec"}}],[11,"from_name","","",4,{"inputs":[{"name":"p"}],"output":{"generics":["type"],"name":"option"}}],[11,"get","","Returns the value.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_some","","Returns the value.",13,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set","","Sets the value.",13,null],[11,"set_none","","Sets the value to `None`.",13,null],[11,"set_some","","Sets the value.",13,null],[11,"into_send_value","","",13,{"inputs":[{"name":"self"}],"output":{"name":"sendvalue"}}]],"paths":[[8,"Cast"],[3,"Continue"],[8,"StaticType"],[8,"ToValue"],[4,"Type"],[4,"AppStreamType"],[3,"AppSink"],[3,"AppSrc"],[3,"AppSrcCallbacks"],[3,"AppSrcCallbacksBuilder"],[3,"AppSinkCallbacks"],[3,"AppSinkCallbacksBuilder"],[3,"Value"],[3,"TypedValue"],[3,"Error"]]};
searchIndex["gstreamer_app_sys"] = {"doc":"","items":[[3,"GstAppSinkCallbacks","gstreamer_app_sys","",null,null],[12,"eos","","",0,null],[12,"new_preroll","","",0,null],[12,"new_sample","","",0,null],[12,"_gst_reserved","","",0,null],[3,"GstAppSinkClass","","",null,null],[12,"basesink_class","","",1,null],[12,"eos","","",1,null],[12,"new_preroll","","",1,null],[12,"new_sample","","",1,null],[12,"pull_preroll","","",1,null],[12,"pull_sample","","",1,null],[12,"try_pull_preroll","","",1,null],[12,"try_pull_sample","","",1,null],[12,"_gst_reserved","","",1,null],[3,"GstAppSinkPrivate","","",null,null],[3,"GstAppSrcCallbacks","","",null,null],[12,"need_data","","",2,null],[12,"enough_data","","",2,null],[12,"seek_data","","",2,null],[12,"_gst_reserved","","",2,null],[3,"GstAppSrcClass","","",null,null],[12,"basesrc_class","","",3,null],[12,"need_data","","",3,null],[12,"enough_data","","",3,null],[12,"seek_data","","",3,null],[12,"push_buffer","","",3,null],[12,"end_of_stream","","",3,null],[12,"push_sample","","",3,null],[12,"_gst_reserved","","",3,null],[3,"GstAppSrcPrivate","","",null,null],[3,"GstAppSink","","",null,null],[12,"basesink","","",4,null],[12,"priv_","","",4,null],[12,"_gst_reserved","","",4,null],[3,"GstAppSrc","","",null,null],[12,"basesrc","","",5,null],[12,"priv_","","",5,null],[12,"_gst_reserved","","",5,null],[5,"gst_app_stream_type_get_type","","",null,null],[5,"gst_app_sink_get_type","","",null,null],[5,"gst_app_sink_get_buffer_list_support","","",null,null],[5,"gst_app_sink_get_caps","","",null,null],[5,"gst_app_sink_get_drop","","",null,null],[5,"gst_app_sink_get_emit_signals","","",null,null],[5,"gst_app_sink_get_max_buffers","","",null,null],[5,"gst_app_sink_get_wait_on_eos","","",null,null],[5,"gst_app_sink_is_eos","","",null,null],[5,"gst_app_sink_pull_preroll","","",null,null],[5,"gst_app_sink_pull_sample","","",null,null],[5,"gst_app_sink_set_buffer_list_support","","",null,null],[5,"gst_app_sink_set_callbacks","","",null,null],[5,"gst_app_sink_set_caps","","",null,null],[5,"gst_app_sink_set_drop","","",null,null],[5,"gst_app_sink_set_emit_signals","","",null,null],[5,"gst_app_sink_set_max_buffers","","",null,null],[5,"gst_app_sink_set_wait_on_eos","","",null,null],[5,"gst_app_sink_try_pull_preroll","","",null,null],[5,"gst_app_sink_try_pull_sample","","",null,null],[5,"gst_app_src_get_type","","",null,null],[5,"gst_app_src_end_of_stream","","",null,null],[5,"gst_app_src_get_caps","","",null,null],[5,"gst_app_src_get_current_level_bytes","","",null,null],[5,"gst_app_src_get_duration","","",null,null],[5,"gst_app_src_get_emit_signals","","",null,null],[5,"gst_app_src_get_latency","","",null,null],[5,"gst_app_src_get_max_bytes","","",null,null],[5,"gst_app_src_get_size","","",null,null],[5,"gst_app_src_get_stream_type","","",null,null],[5,"gst_app_src_push_buffer","","",null,null],[5,"gst_app_src_push_sample","","",null,null],[5,"gst_app_src_set_callbacks","","",null,null],[5,"gst_app_src_set_caps","","",null,null],[5,"gst_app_src_set_duration","","",null,null],[5,"gst_app_src_set_emit_signals","","",null,null],[5,"gst_app_src_set_latency","","",null,null],[5,"gst_app_src_set_max_bytes","","",null,null],[5,"gst_app_src_set_size","","",null,null],[5,"gst_app_src_set_stream_type","","",null,null],[6,"GstAppStreamType","","",null,null],[17,"GST_APP_STREAM_TYPE_STREAM","","",null,null],[17,"GST_APP_STREAM_TYPE_SEEKABLE","","",null,null],[17,"GST_APP_STREAM_TYPE_RANDOM_ACCESS","","",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"GstAppSinkCallbacks"],[3,"GstAppSinkClass"],[3,"GstAppSrcCallbacks"],[3,"GstAppSrcClass"],[3,"GstAppSink"],[3,"GstAppSrc"],[3,"GstAppSinkPrivate"],[3,"GstAppSrcPrivate"]]};
searchIndex["gstreamer_audio"] = {"doc":"","items":[[8,"Cast","gstreamer_audio","Upcasting and downcasting support.",null,null],[11,"upcast","","Upcasts an object to a superclass or interface `T`.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"downcast","","Tries to downcast to a subclass or interface implementor `T`.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"is","","Returns `true` if the object is an instance of (can be cast to) `T`.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"dynamic_cast","","Tries to cast to an object of type `T`. This handles upcasting, downcasting and casting between interface and interface implementors. All checks are performed at runtime, while `downcast` and `upcast` will do many checks at compile-time already.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[3,"Continue","","Continue calling the closure in the future iterations or drop it.",null,null],[12,"0","","",1,null],[3,"Error","","A generic error capable of representing various error domains (types).",null,null],[8,"IsA","","Declares the \"is a\" relationship.",null,null],[8,"StaticType","","Types that are supported by GLib dynamic typing.",null,null],[10,"static_type","","Returns the type identifier of `Self`.",2,{"inputs":[],"output":{"name":"type"}}],[8,"ToValue","","Converts to `Value`.",null,null],[10,"to_value","","Returns a `Value` clone of `self`.",3,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[10,"to_value_type","","Returns the type identifer of `self`.",3,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[4,"Type","","A GLib or GLib-based library type",null,null],[13,"Invalid","","An invalid `Type` used as error return value in some functions",4,null],[13,"Unit","","The fundamental type corresponding to the unit type `()`",4,null],[13,"I8","","The fundamental type corresponding to `i8`",4,null],[13,"U8","","The fundamental type corresponding to `u8`",4,null],[13,"Bool","","The fundamental type corresponding to `bool`",4,null],[13,"I32","","The fundamental type corresponding to `i32`",4,null],[13,"U32","","The fundamental type corresponding to `u32`",4,null],[13,"ILong","","The fundamental type corresponding to C `long`",4,null],[13,"ULong","","The fundamental type corresponding to C `unsigned long`",4,null],[13,"I64","","The fundamental type corresponding to `i64`",4,null],[13,"U64","","The fundamental type corresponding to `u64`",4,null],[13,"F32","","The fundamental type corresponding to `f32`",4,null],[13,"F64","","The fundamental type corresponding to `f64`",4,null],[13,"String","","The fundamental type corresponding to `String`",4,null],[13,"Pointer","","The fundamental type corresponding to a pointer",4,null],[13,"Variant","","The fundamental type of GVariant",4,null],[13,"BaseInterface","","The fundamental type from which all interfaces are derived",4,null],[13,"BaseEnum","","The fundamental type from which all enumeration types are derived",4,null],[13,"BaseFlags","","The fundamental type from which all flags types are derived",4,null],[13,"BaseBoxed","","The fundamental type from which all boxed types are derived",4,null],[13,"BaseParamSpec","","The fundamental type from which all `GParamSpec` types are derived",4,null],[13,"BaseObject","","The fundamental type from which all objects are derived",4,null],[13,"Other","","A non-fundamental type identified by value of type `usize`",4,null],[3,"TypedValue","","A statically typed `Value`.",null,null],[3,"Value","","A generic value capable of carrying various types.",null,null],[3,"StreamVolume","","This interface is implemented by elements that provide a stream volume. Examples for such elements are `volume` and `playbin`.",null,null],[3,"AudioFlags","","",null,null],[3,"AudioFormatFlags","","",null,null],[3,"AudioPackFlags","","",null,null],[3,"AudioFormatInfo","","Information for an audio format.",null,null],[3,"AudioInfo","","Information describing audio properties. This information can be filled in from GstCaps with `AudioInfo::from_caps`.",null,null],[3,"AudioInfoBuilder","","",null,null],[4,"AudioChannelPosition","","Audio channel positions.",null,null],[13,"None","","",5,null],[13,"Mono","","",5,null],[13,"Invalid","","",5,null],[13,"FrontLeft","","",5,null],[13,"FrontRight","","",5,null],[13,"FrontCenter","","",5,null],[13,"Lfe1","","",5,null],[13,"RearLeft","","",5,null],[13,"RearRight","","",5,null],[13,"FrontLeftOfCenter","","",5,null],[13,"FrontRightOfCenter","","",5,null],[13,"RearCenter","","",5,null],[13,"Lfe2","","",5,null],[13,"SideLeft","","",5,null],[13,"SideRight","","",5,null],[13,"TopFrontLeft","","",5,null],[13,"TopFrontRight","","",5,null],[13,"TopFrontCenter","","",5,null],[13,"TopCenter","","",5,null],[13,"TopRearLeft","","",5,null],[13,"TopRearRight","","",5,null],[13,"TopSideLeft","","",5,null],[13,"TopSideRight","","",5,null],[13,"TopRearCenter","","",5,null],[13,"BottomFrontCenter","","",5,null],[13,"BottomFrontLeft","","",5,null],[13,"BottomFrontRight","","",5,null],[13,"WideLeft","","",5,null],[13,"WideRight","","",5,null],[13,"SurroundLeft","","",5,null],[13,"SurroundRight","","",5,null],[4,"AudioFormat","","Enum value describing the most common audio formats.",null,null],[13,"Unknown","","",6,null],[13,"Encoded","","",6,null],[13,"S8","","",6,null],[13,"U8","","",6,null],[13,"S16le","","",6,null],[13,"S16be","","",6,null],[13,"U16le","","",6,null],[13,"U16be","","",6,null],[13,"S2432le","","",6,null],[13,"S2432be","","",6,null],[13,"U2432le","","",6,null],[13,"U2432be","","",6,null],[13,"S32le","","",6,null],[13,"S32be","","",6,null],[13,"U32le","","",6,null],[13,"U32be","","",6,null],[13,"S24le","","",6,null],[13,"S24be","","",6,null],[13,"U24le","","",6,null],[13,"U24be","","",6,null],[13,"S20le","","",6,null],[13,"S20be","","",6,null],[13,"U20le","","",6,null],[13,"U20be","","",6,null],[13,"S18le","","",6,null],[13,"S18be","","",6,null],[13,"U18le","","",6,null],[13,"U18be","","",6,null],[13,"F32le","","",6,null],[13,"F32be","","",6,null],[13,"F64le","","",6,null],[13,"F64be","","",6,null],[4,"AudioLayout","","Layout of the audio samples for the different channels.",null,null],[13,"Interleaved","","",7,null],[13,"NonInterleaved","","",7,null],[4,"StreamVolumeFormat","","Different representations of a stream volume. `StreamVolume::convert_volume` allows to convert between the different representations.",null,null],[13,"Linear","","",8,null],[13,"Cubic","","",8,null],[13,"Db","","",8,null],[4,"AudioEndianness","","",null,null],[13,"Unknown","","",9,null],[13,"LittleEndian","","",9,null],[13,"BigEndian","","",9,null],[5,"buffer_reorder_channels","","",null,null],[5,"reorder_channels","","",null,null],[5,"get_channel_reorder_map","","",null,null],[5,"audio_buffer_clip","","",null,{"inputs":[{"name":"buffer"},{"name":"segment"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["buffer"],"name":"option"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"streamvolume"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",10,null],[11,"static_type","","",10,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"convert_volume","","`from` `StreamVolumeFormat` to convert from ## `to` `StreamVolumeFormat` to convert to ## `val` Volume in `from` format that should be converted",10,{"inputs":[{"name":"streamvolumeformat"},{"name":"streamvolumeformat"},{"name":"f64"}],"output":{"name":"f64"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"audiochannelposition"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"audiochannelposition"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"audiochannelposition"}],"output":{"name":"bool"}}],[11,"hash","","",5,null],[11,"static_type","","",5,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",5,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",5,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",5,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"audioformat"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"audioformat"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"audioformat"}],"output":{"name":"bool"}}],[11,"hash","","",6,null],[11,"static_type","","",6,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",6,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",6,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",6,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"audiolayout"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"audiolayout"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"audiolayout"}],"output":{"name":"bool"}}],[11,"hash","","",7,null],[11,"static_type","","",7,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",7,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",7,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",7,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"streamvolumeformat"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"streamvolumeformat"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"streamvolumeformat"}],"output":{"name":"bool"}}],[11,"hash","","",8,null],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"audioflags"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"audioflags"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"audioflags"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"self"},{"name":"audioflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",11,{"inputs":[{"name":"self"},{"name":"audioflags"}],"output":{"name":"bool"}}],[11,"le","","",11,{"inputs":[{"name":"self"},{"name":"audioflags"}],"output":{"name":"bool"}}],[11,"gt","","",11,{"inputs":[{"name":"self"},{"name":"audioflags"}],"output":{"name":"bool"}}],[11,"ge","","",11,{"inputs":[{"name":"self"},{"name":"audioflags"}],"output":{"name":"bool"}}],[11,"cmp","","",11,{"inputs":[{"name":"self"},{"name":"audioflags"}],"output":{"name":"ordering"}}],[11,"hash","","",11,null],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",11,null],[18,"UNPOSITIONED","","",11,null],[11,"empty","","Returns an empty set of flags.",11,{"inputs":[],"output":{"name":"audioflags"}}],[11,"all","","Returns the set containing all flags.",11,{"inputs":[],"output":{"name":"audioflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",11,{"inputs":[{"name":"u32"}],"output":{"generics":["audioflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",11,{"inputs":[{"name":"u32"}],"output":{"name":"audioflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",11,{"inputs":[{"name":"self"},{"name":"audioflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",11,{"inputs":[{"name":"self"},{"name":"audioflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",11,{"inputs":[{"name":"self"},{"name":"audioflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",11,{"inputs":[{"name":"self"},{"name":"audioflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",11,{"inputs":[{"name":"self"},{"name":"audioflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",11,{"inputs":[{"name":"self"},{"name":"audioflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",11,{"inputs":[{"name":"self"},{"name":"audioflags"}],"output":{"name":"audioflags"}}],[11,"bitor_assign","","Adds the set of flags.",11,{"inputs":[{"name":"self"},{"name":"audioflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",11,{"inputs":[{"name":"self"},{"name":"audioflags"}],"output":{"name":"audioflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",11,{"inputs":[{"name":"self"},{"name":"audioflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",11,{"inputs":[{"name":"self"},{"name":"audioflags"}],"output":{"name":"audioflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",11,{"inputs":[{"name":"self"},{"name":"audioflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",11,{"inputs":[{"name":"self"},{"name":"audioflags"}],"output":{"name":"audioflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",11,{"inputs":[{"name":"self"},{"name":"audioflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",11,{"inputs":[{"name":"self"}],"output":{"name":"audioflags"}}],[11,"extend","","",11,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",11,{"inputs":[{"name":"t"}],"output":{"name":"audioflags"}}],[11,"static_type","","",11,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",11,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",11,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",11,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"audioformatflags"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"audioformatflags"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"audioformatflags"}}],[11,"partial_cmp","","",12,{"inputs":[{"name":"self"},{"name":"audioformatflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",12,{"inputs":[{"name":"self"},{"name":"audioformatflags"}],"output":{"name":"bool"}}],[11,"le","","",12,{"inputs":[{"name":"self"},{"name":"audioformatflags"}],"output":{"name":"bool"}}],[11,"gt","","",12,{"inputs":[{"name":"self"},{"name":"audioformatflags"}],"output":{"name":"bool"}}],[11,"ge","","",12,{"inputs":[{"name":"self"},{"name":"audioformatflags"}],"output":{"name":"bool"}}],[11,"cmp","","",12,{"inputs":[{"name":"self"},{"name":"audioformatflags"}],"output":{"name":"ordering"}}],[11,"hash","","",12,null],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"INTEGER","","",12,null],[18,"FLOAT","","",12,null],[18,"SIGNED","","",12,null],[18,"COMPLEX","","",12,null],[18,"UNPACK","","",12,null],[11,"empty","","Returns an empty set of flags.",12,{"inputs":[],"output":{"name":"audioformatflags"}}],[11,"all","","Returns the set containing all flags.",12,{"inputs":[],"output":{"name":"audioformatflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",12,{"inputs":[{"name":"u32"}],"output":{"generics":["audioformatflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",12,{"inputs":[{"name":"u32"}],"output":{"name":"audioformatflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",12,{"inputs":[{"name":"self"},{"name":"audioformatflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",12,{"inputs":[{"name":"self"},{"name":"audioformatflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",12,{"inputs":[{"name":"self"},{"name":"audioformatflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",12,{"inputs":[{"name":"self"},{"name":"audioformatflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",12,{"inputs":[{"name":"self"},{"name":"audioformatflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",12,{"inputs":[{"name":"self"},{"name":"audioformatflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",12,{"inputs":[{"name":"self"},{"name":"audioformatflags"}],"output":{"name":"audioformatflags"}}],[11,"bitor_assign","","Adds the set of flags.",12,{"inputs":[{"name":"self"},{"name":"audioformatflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",12,{"inputs":[{"name":"self"},{"name":"audioformatflags"}],"output":{"name":"audioformatflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",12,{"inputs":[{"name":"self"},{"name":"audioformatflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",12,{"inputs":[{"name":"self"},{"name":"audioformatflags"}],"output":{"name":"audioformatflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",12,{"inputs":[{"name":"self"},{"name":"audioformatflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",12,{"inputs":[{"name":"self"},{"name":"audioformatflags"}],"output":{"name":"audioformatflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",12,{"inputs":[{"name":"self"},{"name":"audioformatflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",12,{"inputs":[{"name":"self"}],"output":{"name":"audioformatflags"}}],[11,"extend","","",12,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",12,{"inputs":[{"name":"t"}],"output":{"name":"audioformatflags"}}],[11,"static_type","","",12,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",12,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",12,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",12,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"audiopackflags"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"audiopackflags"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"audiopackflags"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"self"},{"name":"audiopackflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",13,{"inputs":[{"name":"self"},{"name":"audiopackflags"}],"output":{"name":"bool"}}],[11,"le","","",13,{"inputs":[{"name":"self"},{"name":"audiopackflags"}],"output":{"name":"bool"}}],[11,"gt","","",13,{"inputs":[{"name":"self"},{"name":"audiopackflags"}],"output":{"name":"bool"}}],[11,"ge","","",13,{"inputs":[{"name":"self"},{"name":"audiopackflags"}],"output":{"name":"bool"}}],[11,"cmp","","",13,{"inputs":[{"name":"self"},{"name":"audiopackflags"}],"output":{"name":"ordering"}}],[11,"hash","","",13,null],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",13,null],[18,"TRUNCATE_RANGE","","",13,null],[11,"empty","","Returns an empty set of flags.",13,{"inputs":[],"output":{"name":"audiopackflags"}}],[11,"all","","Returns the set containing all flags.",13,{"inputs":[],"output":{"name":"audiopackflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",13,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",13,{"inputs":[{"name":"u32"}],"output":{"generics":["audiopackflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",13,{"inputs":[{"name":"u32"}],"output":{"name":"audiopackflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",13,{"inputs":[{"name":"self"},{"name":"audiopackflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",13,{"inputs":[{"name":"self"},{"name":"audiopackflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",13,{"inputs":[{"name":"self"},{"name":"audiopackflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",13,{"inputs":[{"name":"self"},{"name":"audiopackflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",13,{"inputs":[{"name":"self"},{"name":"audiopackflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",13,{"inputs":[{"name":"self"},{"name":"audiopackflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",13,{"inputs":[{"name":"self"},{"name":"audiopackflags"}],"output":{"name":"audiopackflags"}}],[11,"bitor_assign","","Adds the set of flags.",13,{"inputs":[{"name":"self"},{"name":"audiopackflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",13,{"inputs":[{"name":"self"},{"name":"audiopackflags"}],"output":{"name":"audiopackflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",13,{"inputs":[{"name":"self"},{"name":"audiopackflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",13,{"inputs":[{"name":"self"},{"name":"audiopackflags"}],"output":{"name":"audiopackflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",13,{"inputs":[{"name":"self"},{"name":"audiopackflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",13,{"inputs":[{"name":"self"},{"name":"audiopackflags"}],"output":{"name":"audiopackflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",13,{"inputs":[{"name":"self"},{"name":"audiopackflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",13,{"inputs":[{"name":"self"}],"output":{"name":"audiopackflags"}}],[11,"extend","","",13,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",13,{"inputs":[{"name":"t"}],"output":{"name":"audiopackflags"}}],[11,"static_type","","",13,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",13,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",13,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",13,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"build_integer","","",6,{"inputs":[{"name":"bool"},{"name":"audioendianness"},{"name":"i32"},{"name":"i32"}],"output":{"name":"audioformat"}}],[11,"from_string","","",6,{"inputs":[{"name":"str"}],"output":{"name":"audioformat"}}],[11,"to_string","","",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from_str","","",6,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"audioendianness"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"audioendianness"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",9,null],[11,"from_glib","","",9,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"to_glib","","",9,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_format","","",14,{"inputs":[{"name":"audioformat"}],"output":{"name":"audioformatinfo"}}],[11,"format","","",14,{"inputs":[{"name":"self"}],"output":{"name":"audioformat"}}],[11,"name","","",14,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",14,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"flags","","",14,{"inputs":[{"name":"self"}],"output":{"name":"audioformatflags"}}],[11,"endianness","","",14,{"inputs":[{"name":"self"}],"output":{"name":"audioendianness"}}],[11,"width","","",14,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"depth","","",14,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"unpack_format","","",14,{"inputs":[{"name":"self"}],"output":{"name":"audioformat"}}],[11,"silence","","",14,null],[11,"unpack","","",14,null],[11,"pack","","",14,null],[11,"fill_silence","","",14,null],[11,"is_float","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_integer","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_signed","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_little_endian","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_big_endian","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from_str","","",14,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from","","",14,{"inputs":[{"name":"audioformat"}],"output":{"name":"self"}}],[11,"static_type","","",14,{"inputs":[],"output":{"name":"type"}}],[11,"build","","",15,{"inputs":[{"name":"self"}],"output":{"generics":["audioinfo"],"name":"option"}}],[11,"positions","","",15,null],[11,"flags","","",15,{"inputs":[{"name":"self"},{"name":"audioflags"}],"output":{"name":"self"}}],[11,"layout","","",15,{"inputs":[{"name":"self"},{"name":"audiolayout"}],"output":{"name":"self"}}],[11,"new","","Allocate a new `AudioInfo` that is also initialized with `AudioInfo::init`.",16,{"inputs":[{"name":"audioformat"},{"name":"u32"},{"name":"u32"}],"output":{"name":"audioinfobuilder"}}],[11,"from_caps","","Parse `caps` and update `self`. ## `caps` a `gst::Caps`",16,{"inputs":[{"name":"capsref"}],"output":{"name":"option"}}],[11,"to_caps","","",16,{"inputs":[{"name":"self"}],"output":{"generics":["caps"],"name":"option"}}],[11,"convert","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"option"}}],[11,"convert_generic","","",16,{"inputs":[{"name":"self"},{"name":"v"},{"name":"format"}],"output":{"generics":["genericformattedvalue"],"name":"option"}}],[11,"format","","",16,{"inputs":[{"name":"self"}],"output":{"name":"audioformat"}}],[11,"format_info","","",16,{"inputs":[{"name":"self"}],"output":{"name":"audioformatinfo"}}],[11,"layout","","",16,{"inputs":[{"name":"self"}],"output":{"name":"audiolayout"}}],[11,"flags","","",16,{"inputs":[{"name":"self"}],"output":{"name":"audioflags"}}],[11,"rate","","",16,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"channels","","",16,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"bpf","","",16,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"bps","","",16,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"depth","","",16,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"width","","",16,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"endianness","","",16,{"inputs":[{"name":"self"}],"output":{"name":"audioendianness"}}],[11,"is_big_endian","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_little_endian","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_float","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_integer","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_signed","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"positions","","",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_unpositioned","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"static_type","","",16,{"inputs":[],"output":{"name":"type"}}],[11,"to_mask","","",5,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"positions_to_mask","","",5,null],[11,"positions_from_mask","","",5,null],[11,"positions_to_valid_order","","",5,null],[11,"get_fallback_mask","","",5,{"inputs":[{"name":"u32"}],"output":{"name":"u64"}}],[11,"check_valid_channel_positions","","",5,null],[0,"prelude","","",null,null],[8,"StreamVolumeExt","gstreamer_audio::prelude","Trait containing all `StreamVolume` methods.",null,null],[10,"get_mute","","Returns",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_volume","","`format` `StreamVolumeFormat` which should be returned",17,{"inputs":[{"name":"self"},{"name":"streamvolumeformat"}],"output":{"name":"f64"}}],[10,"set_mute","","`mute` Mute state that should be set",17,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_volume","","`format` `StreamVolumeFormat` of `val` ## `val` Linear volume factor that should be set",17,{"inputs":[{"name":"self"},{"name":"streamvolumeformat"},{"name":"f64"}],"output":null}],[10,"connect_property_mute_notify","","",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_volume_notify","","",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[17,"AUDIO_FORMAT_S16","gstreamer_audio","",null,null],[17,"AUDIO_FORMAT_U16","","",null,null],[17,"AUDIO_FORMAT_S2432","","",null,null],[17,"AUDIO_FORMAT_U2432","","",null,null],[17,"AUDIO_FORMAT_S32","","",null,null],[17,"AUDIO_FORMAT_U32","","",null,null],[17,"AUDIO_FORMAT_S24","","",null,null],[17,"AUDIO_FORMAT_U24","","",null,null],[17,"AUDIO_FORMAT_S20","","",null,null],[17,"AUDIO_FORMAT_U20","","",null,null],[17,"AUDIO_FORMAT_S18","","",null,null],[17,"AUDIO_FORMAT_U18","","",null,null],[17,"AUDIO_FORMAT_F32","","",null,null],[17,"AUDIO_FORMAT_F64","","",null,null],[8,"StreamVolumeExt","","Trait containing all `StreamVolume` methods.",null,null],[10,"get_mute","","Returns",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_volume","","`format` `StreamVolumeFormat` which should be returned",17,{"inputs":[{"name":"self"},{"name":"streamvolumeformat"}],"output":{"name":"f64"}}],[10,"set_mute","","`mute` Mute state that should be set",17,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_volume","","`format` `StreamVolumeFormat` of `val` ## `val` Linear volume factor that should be set",17,{"inputs":[{"name":"self"},{"name":"streamvolumeformat"},{"name":"f64"}],"output":null}],[10,"connect_property_mute_notify","","",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_volume_notify","","",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"from_glib_none","","",18,null],[11,"from_glib_none","","",18,null],[11,"from_glib","","",4,{"inputs":[{"name":"usize"}],"output":{"name":"type"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"typedvalue"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"downcast","","Tries to downcast to a `TypedValue`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["typedvalue","value"],"name":"result"}}],[11,"get","","Tries to get a value of type `T`.",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is","","Returns `true` if the type of the value corresponds to `T`.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"type_","","Returns the type of the value.",18,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"type_transformable","","Returns whether `Value`s of type `src` can be transformed to type `dst`.",18,{"inputs":[{"name":"type"},{"name":"type"}],"output":{"name":"bool"}}],[11,"try_into_send_value","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["sendvalue","value"],"name":"result"}}],[11,"deref","","",19,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"description","","",20,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"to_glib_none_mut","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["typedvalue"],"name":"stashmut"}}],[11,"to_glib_none_mut","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["value"],"name":"stashmut"}}],[11,"from_glib_full","","",18,null],[11,"from_glib_none_as_vec","","",18,null],[11,"from_glib_container_as_vec","","",18,null],[11,"from_glib_full_as_vec","","",18,null],[11,"from_glib_none_as_vec","","",18,null],[11,"from_glib_container_as_vec","","",18,null],[11,"from_glib_full_as_vec","","",18,null],[11,"to_glib_none","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["value"],"name":"stash"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from","","",19,{"inputs":[{"generics":["str"],"name":"option"}],"output":{"generics":["string"],"name":"typedvalue"}}],[11,"from","","",18,{"inputs":[{"name":"typedvalue"}],"output":{"name":"value"}}],[11,"from","","",19,{"inputs":[{"name":"t"}],"output":{"name":"typedvalue"}}],[11,"from","","",19,{"inputs":[{"generics":["string"],"name":"typedvalue"}],"output":{"generics":["str"],"name":"typedvalue"}}],[11,"from","","",18,{"inputs":[{"name":"t"}],"output":{"name":"value"}}],[11,"from","","",19,{"inputs":[{"name":"option"}],"output":{"name":"typedvalue"}}],[11,"from","","",18,{"inputs":[{"name":"option"}],"output":{"name":"value"}}],[11,"from","","",18,{"inputs":[{"name":"sendvalue"}],"output":{"name":"value"}}],[11,"from","","",19,{"inputs":[{"generics":["str"],"name":"typedvalue"}],"output":{"generics":["string"],"name":"typedvalue"}}],[11,"from","","",19,{"inputs":[{"name":"str"}],"output":{"generics":["string"],"name":"typedvalue"}}],[11,"static_type","","",20,{"inputs":[],"output":{"name":"type"}}],[11,"from_glib_none_num_as_vec","","",18,null],[11,"from_glib_container_num_as_vec","","",18,null],[11,"from_glib_full_num_as_vec","","",18,null],[11,"from_glib_none_num_as_vec","","",4,null],[11,"from_glib_container_num_as_vec","","",4,null],[11,"from_glib_full_num_as_vec","","",4,null],[11,"from_glib_none_num_as_vec","","",4,null],[11,"from_glib_container_num_as_vec","","",4,null],[11,"from_glib_full_num_as_vec","","",4,null],[11,"from_glib_none_num_as_vec","","",18,null],[11,"from_glib_container_num_as_vec","","",18,null],[11,"from_glib_full_num_as_vec","","",18,null],[11,"drop","","",18,null],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"to_glib_none_from_slice","","",4,null],[11,"to_glib_container_from_slice","","",4,null],[11,"to_glib_full_from_slice","","",4,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"to_glib","","",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_glib","","",1,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"uninitialized","","",18,{"inputs":[],"output":{"name":"value"}}],[11,"to_value","","",18,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"to_value_type","","",18,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"can_compare","","",18,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"compare","","",18,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"valueorder"}}],[11,"can_intersect","","",18,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"intersect","","",18,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"generics":["value"],"name":"option"}}],[11,"can_subtract","","",18,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"subtract","","",18,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"generics":["value"],"name":"option"}}],[11,"can_union","","",18,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"union","","",18,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"generics":["value"],"name":"option"}}],[11,"fixate","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["value"],"name":"option"}}],[11,"is_fixed","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_subset","","",18,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"serialize","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"deserialize","","",18,{"inputs":[{"name":"t"}],"output":{"generics":["value"],"name":"option"}}],[11,"new","","Creates an error with supplied error enum variant and message.",20,{"inputs":[{"name":"t"},{"name":"str"}],"output":{"name":"error"}}],[11,"is","","Checks if the error domain matches `T`.",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"kind","","Tries to convert to a specific error enum.",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"wrap","","",20,null],[11,"name","","",4,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"is_a","","",4,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"parent","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["type"],"name":"option"}}],[11,"children","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["type"],"name":"vec"}}],[11,"interfaces","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["type"],"name":"vec"}}],[11,"interface_prerequisites","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["type"],"name":"vec"}}],[11,"from_name","","",4,{"inputs":[{"name":"p"}],"output":{"generics":["type"],"name":"option"}}],[11,"get","","Returns the value.",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_some","","Returns the value.",19,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set","","Sets the value.",19,null],[11,"set_none","","Sets the value to `None`.",19,null],[11,"set_some","","Sets the value.",19,null],[11,"into_send_value","","",19,{"inputs":[{"name":"self"}],"output":{"name":"sendvalue"}}]],"paths":[[8,"Cast"],[3,"Continue"],[8,"StaticType"],[8,"ToValue"],[4,"Type"],[4,"AudioChannelPosition"],[4,"AudioFormat"],[4,"AudioLayout"],[4,"StreamVolumeFormat"],[4,"AudioEndianness"],[3,"StreamVolume"],[3,"AudioFlags"],[3,"AudioFormatFlags"],[3,"AudioPackFlags"],[3,"AudioFormatInfo"],[3,"AudioInfoBuilder"],[3,"AudioInfo"],[8,"StreamVolumeExt"],[3,"Value"],[3,"TypedValue"],[3,"Error"]]};
searchIndex["gstreamer_audio_sys"] = {"doc":"","items":[[3,"GstAudioChannelMixerFlags","gstreamer_audio_sys","",null,null],[3,"GstAudioConverterFlags","","",null,null],[3,"GstAudioFlags","","",null,null],[3,"GstAudioFormatFlags","","",null,null],[3,"GstAudioPackFlags","","",null,null],[3,"GstAudioQuantizeFlags","","",null,null],[3,"GstAudioResamplerFlags","","",null,null],[3,"GstAudioBaseSinkClass","","",null,null],[12,"parent_class","","",0,null],[12,"create_ringbuffer","","",0,null],[12,"payload","","",0,null],[12,"_gst_reserved","","",0,null],[3,"GstAudioBaseSinkPrivate","","",null,null],[3,"GstAudioBaseSrcClass","","",null,null],[12,"parent_class","","",1,null],[12,"create_ringbuffer","","",1,null],[12,"_gst_reserved","","",1,null],[3,"GstAudioBaseSrcPrivate","","",null,null],[3,"GstAudioCdSrcClass","","",null,null],[12,"pushsrc_class","","",2,null],[12,"open","","",2,null],[12,"close","","",2,null],[12,"read_sector","","",2,null],[12,"_gst_reserved","","",2,null],[3,"GstAudioCdSrcPrivate","","",null,null],[3,"GstAudioCdSrcTrack","","",null,null],[12,"is_audio","","",3,null],[12,"num","","",3,null],[12,"start","","",3,null],[12,"end","","",3,null],[12,"tags","","",3,null],[12,"_gst_reserved1","","",3,null],[12,"_gst_reserved2","","",3,null],[3,"GstAudioChannelMixer","","",null,null],[3,"GstAudioClippingMeta","","",null,null],[12,"meta","","",4,null],[12,"format","","",4,null],[12,"start","","",4,null],[12,"end","","",4,null],[3,"GstAudioClockClass","","",null,null],[12,"parent_class","","",5,null],[12,"_gst_reserved","","",5,null],[3,"GstAudioConverter","","",null,null],[3,"GstAudioDecoderClass","","",null,null],[12,"element_class","","",6,null],[12,"start","","",6,null],[12,"stop","","",6,null],[12,"set_format","","",6,null],[12,"parse","","",6,null],[12,"handle_frame","","",6,null],[12,"flush","","",6,null],[12,"pre_push","","",6,null],[12,"sink_event","","",6,null],[12,"src_event","","",6,null],[12,"open","","",6,null],[12,"close","","",6,null],[12,"negotiate","","",6,null],[12,"decide_allocation","","",6,null],[12,"propose_allocation","","",6,null],[12,"sink_query","","",6,null],[12,"src_query","","",6,null],[12,"getcaps","","",6,null],[12,"transform_meta","","",6,null],[12,"_gst_reserved","","",6,null],[3,"GstAudioDecoderPrivate","","",null,null],[3,"GstAudioDownmixMeta","","",null,null],[12,"meta","","",7,null],[12,"from_position","","",7,null],[12,"to_position","","",7,null],[12,"from_channels","","",7,null],[12,"to_channels","","",7,null],[12,"matrix","","",7,null],[3,"GstAudioEncoderClass","","",null,null],[12,"element_class","","",8,null],[12,"start","","",8,null],[12,"stop","","",8,null],[12,"set_format","","",8,null],[12,"handle_frame","","",8,null],[12,"flush","","",8,null],[12,"pre_push","","",8,null],[12,"sink_event","","",8,null],[12,"src_event","","",8,null],[12,"getcaps","","",8,null],[12,"open","","",8,null],[12,"close","","",8,null],[12,"negotiate","","",8,null],[12,"decide_allocation","","",8,null],[12,"propose_allocation","","",8,null],[12,"transform_meta","","",8,null],[12,"sink_query","","",8,null],[12,"src_query","","",8,null],[12,"_gst_reserved","","",8,null],[3,"GstAudioEncoderPrivate","","",null,null],[3,"GstAudioFilterClass","","",null,null],[12,"basetransformclass","","",9,null],[12,"setup","","",9,null],[12,"_gst_reserved","","",9,null],[3,"GstAudioFormatInfo","","",null,null],[12,"format","","",10,null],[12,"name","","",10,null],[12,"description","","",10,null],[12,"flags","","",10,null],[12,"endianness","","",10,null],[12,"width","","",10,null],[12,"depth","","",10,null],[12,"silence","","",10,null],[12,"unpack_format","","",10,null],[12,"unpack_func","","",10,null],[12,"pack_func","","",10,null],[12,"_gst_reserved","","",10,null],[3,"GstAudioInfo","","",null,null],[12,"finfo","","",11,null],[12,"flags","","",11,null],[12,"layout","","",11,null],[12,"rate","","",11,null],[12,"channels","","",11,null],[12,"bpf","","",11,null],[12,"position","","",11,null],[12,"_gst_reserved","","",11,null],[3,"GstAudioQuantize","","",null,null],[3,"GstAudioResampler","","",null,null],[3,"GstAudioRingBufferClass","","",null,null],[12,"parent_class","","",12,null],[12,"open_device","","",12,null],[12,"acquire","","",12,null],[12,"release","","",12,null],[12,"close_device","","",12,null],[12,"start","","",12,null],[12,"pause","","",12,null],[12,"resume","","",12,null],[12,"stop","","",12,null],[12,"delay","","",12,null],[12,"activate","","",12,null],[12,"commit","","",12,null],[12,"clear_all","","",12,null],[12,"_gst_reserved","","",12,null],[3,"GstAudioRingBufferSpec","","",null,null],[12,"caps","","",13,null],[12,"type_","","",13,null],[12,"info","","",13,null],[12,"latency_time","","",13,null],[12,"buffer_time","","",13,null],[12,"segsize","","",13,null],[12,"segtotal","","",13,null],[12,"seglatency","","",13,null],[12,"_gst_reserved","","",13,null],[3,"GstAudioSinkClass","","",null,null],[12,"parent_class","","",14,null],[12,"open","","",14,null],[12,"prepare","","",14,null],[12,"unprepare","","",14,null],[12,"close","","",14,null],[12,"write","","",14,null],[12,"delay","","",14,null],[12,"reset","","",14,null],[12,"_gst_reserved","","",14,null],[3,"GstAudioSrcClass","","",null,null],[12,"parent_class","","",15,null],[12,"open","","",15,null],[12,"prepare","","",15,null],[12,"unprepare","","",15,null],[12,"close","","",15,null],[12,"read","","",15,null],[12,"delay","","",15,null],[12,"reset","","",15,null],[12,"_gst_reserved","","",15,null],[3,"GstStreamVolumeInterface","","",null,null],[12,"iface","","",16,null],[3,"GstAudioBaseSink","","",null,null],[12,"element","","",17,null],[12,"ringbuffer","","",17,null],[12,"buffer_time","","",17,null],[12,"latency_time","","",17,null],[12,"next_sample","","",17,null],[12,"provided_clock","","",17,null],[12,"eos_rendering","","",17,null],[12,"priv_","","",17,null],[12,"_gst_reserved","","",17,null],[3,"GstAudioBaseSrc","","",null,null],[12,"element","","",18,null],[12,"ringbuffer","","",18,null],[12,"buffer_time","","",18,null],[12,"latency_time","","",18,null],[12,"next_sample","","",18,null],[12,"clock","","",18,null],[12,"priv_","","",18,null],[12,"_gst_reserved","","",18,null],[3,"GstAudioCdSrc","","",null,null],[12,"pushsrc","","",19,null],[12,"tags","","",19,null],[12,"priv_","","",19,null],[12,"_gst_reserved1","","",19,null],[12,"_gst_reserved2","","",19,null],[3,"GstAudioClock","","",null,null],[12,"clock","","",20,null],[12,"func","","",20,null],[12,"user_data","","",20,null],[12,"destroy_notify","","",20,null],[12,"last_time","","",20,null],[12,"time_offset","","",20,null],[12,"_gst_reserved","","",20,null],[3,"GstAudioDecoder","","",null,null],[12,"element","","",21,null],[12,"sinkpad","","",21,null],[12,"srcpad","","",21,null],[12,"stream_lock","","",21,null],[12,"input_segment","","",21,null],[12,"output_segment","","",21,null],[12,"priv_","","",21,null],[12,"_gst_reserved","","",21,null],[3,"GstAudioEncoder","","",null,null],[12,"element","","",22,null],[12,"sinkpad","","",22,null],[12,"srcpad","","",22,null],[12,"stream_lock","","",22,null],[12,"input_segment","","",22,null],[12,"output_segment","","",22,null],[12,"priv_","","",22,null],[12,"_gst_reserved","","",22,null],[3,"GstAudioFilter","","",null,null],[12,"basetransform","","",23,null],[12,"info","","",23,null],[12,"_gst_reserved","","",23,null],[3,"GstAudioRingBuffer","","",null,null],[12,"object","","",24,null],[12,"cond","","",24,null],[12,"open","","",24,null],[12,"acquired","","",24,null],[12,"memory","","",24,null],[12,"size","","",24,null],[12,"timestamps","","",24,null],[12,"spec","","",24,null],[12,"samples_per_seg","","",24,null],[12,"empty_seg","","",24,null],[12,"state","","",24,null],[12,"segdone","","",24,null],[12,"segbase","","",24,null],[12,"waiting","","",24,null],[12,"callback","","",24,null],[12,"cb_data","","",24,null],[12,"need_reorder","","",24,null],[12,"channel_reorder_map","","",24,null],[12,"flushing","","",24,null],[12,"may_start","","",24,null],[12,"active","","",24,null],[12,"cb_data_notify","","",24,null],[12,"_gst_reserved","","",24,null],[3,"GstAudioSink","","",null,null],[12,"element","","",25,null],[12,"thread","","",25,null],[12,"_gst_reserved","","",25,null],[3,"GstAudioSrc","","",null,null],[12,"element","","",26,null],[12,"thread","","",26,null],[12,"_gst_reserved","","",26,null],[3,"GstStreamVolume","","",null,null],[5,"gst_audio_base_sink_discont_reason_get_type","","",null,null],[5,"gst_audio_base_sink_slave_method_get_type","","",null,null],[5,"gst_audio_base_src_slave_method_get_type","","",null,null],[5,"gst_audio_cd_src_mode_get_type","","",null,null],[5,"gst_audio_channel_position_get_type","","",null,null],[5,"gst_audio_dither_method_get_type","","",null,null],[5,"gst_audio_format_get_type","","",null,null],[5,"gst_audio_format_build_integer","","",null,null],[5,"gst_audio_format_fill_silence","","",null,null],[5,"gst_audio_format_from_string","","",null,null],[5,"gst_audio_format_get_info","","",null,null],[5,"gst_audio_format_to_string","","",null,null],[5,"gst_audio_layout_get_type","","",null,null],[5,"gst_audio_noise_shaping_method_get_type","","",null,null],[5,"gst_audio_resampler_filter_interpolation_get_type","","",null,null],[5,"gst_audio_resampler_filter_mode_get_type","","",null,null],[5,"gst_audio_resampler_method_get_type","","",null,null],[5,"gst_audio_ring_buffer_format_type_get_type","","",null,null],[5,"gst_audio_ring_buffer_state_get_type","","",null,null],[5,"gst_audio_channel_mixer_flags_get_type","","",null,null],[5,"gst_audio_converter_flags_get_type","","",null,null],[5,"gst_audio_flags_get_type","","",null,null],[5,"gst_audio_format_flags_get_type","","",null,null],[5,"gst_audio_pack_flags_get_type","","",null,null],[5,"gst_audio_quantize_flags_get_type","","",null,null],[5,"gst_audio_resampler_flags_get_type","","",null,null],[5,"gst_audio_channel_mixer_free","","",null,null],[5,"gst_audio_channel_mixer_is_passthrough","","",null,null],[5,"gst_audio_channel_mixer_samples","","",null,null],[5,"gst_audio_channel_mixer_new","","",null,null],[5,"gst_audio_clipping_meta_get_info","","",null,null],[5,"gst_audio_converter_free","","",null,null],[5,"gst_audio_converter_get_config","","",null,null],[5,"gst_audio_converter_get_in_frames","","",null,null],[5,"gst_audio_converter_get_max_latency","","",null,null],[5,"gst_audio_converter_get_out_frames","","",null,null],[5,"gst_audio_converter_reset","","",null,null],[5,"gst_audio_converter_samples","","",null,null],[5,"gst_audio_converter_supports_inplace","","",null,null],[5,"gst_audio_converter_update_config","","",null,null],[5,"gst_audio_converter_new","","",null,null],[5,"gst_audio_downmix_meta_get_info","","",null,null],[5,"gst_audio_filter_class_add_pad_templates","","",null,null],[5,"gst_audio_info_get_type","","",null,null],[5,"gst_audio_info_new","","",null,null],[5,"gst_audio_info_convert","","",null,null],[5,"gst_audio_info_copy","","",null,null],[5,"gst_audio_info_free","","",null,null],[5,"gst_audio_info_from_caps","","",null,null],[5,"gst_audio_info_init","","",null,null],[5,"gst_audio_info_is_equal","","",null,null],[5,"gst_audio_info_set_format","","",null,null],[5,"gst_audio_info_to_caps","","",null,null],[5,"gst_audio_quantize_free","","",null,null],[5,"gst_audio_quantize_reset","","",null,null],[5,"gst_audio_quantize_samples","","",null,null],[5,"gst_audio_quantize_new","","",null,null],[5,"gst_audio_resampler_free","","",null,null],[5,"gst_audio_resampler_get_in_frames","","",null,null],[5,"gst_audio_resampler_get_max_latency","","",null,null],[5,"gst_audio_resampler_get_out_frames","","",null,null],[5,"gst_audio_resampler_resample","","",null,null],[5,"gst_audio_resampler_reset","","",null,null],[5,"gst_audio_resampler_update","","",null,null],[5,"gst_audio_resampler_new","","",null,null],[5,"gst_audio_resampler_options_set_quality","","",null,null],[5,"gst_audio_base_sink_get_type","","",null,null],[5,"gst_audio_base_sink_create_ringbuffer","","",null,null],[5,"gst_audio_base_sink_get_alignment_threshold","","",null,null],[5,"gst_audio_base_sink_get_discont_wait","","",null,null],[5,"gst_audio_base_sink_get_drift_tolerance","","",null,null],[5,"gst_audio_base_sink_get_provide_clock","","",null,null],[5,"gst_audio_base_sink_get_slave_method","","",null,null],[5,"gst_audio_base_sink_report_device_failure","","",null,null],[5,"gst_audio_base_sink_set_alignment_threshold","","",null,null],[5,"gst_audio_base_sink_set_custom_slaving_callback","","",null,null],[5,"gst_audio_base_sink_set_discont_wait","","",null,null],[5,"gst_audio_base_sink_set_drift_tolerance","","",null,null],[5,"gst_audio_base_sink_set_provide_clock","","",null,null],[5,"gst_audio_base_sink_set_slave_method","","",null,null],[5,"gst_audio_base_src_get_type","","",null,null],[5,"gst_audio_base_src_create_ringbuffer","","",null,null],[5,"gst_audio_base_src_get_provide_clock","","",null,null],[5,"gst_audio_base_src_get_slave_method","","",null,null],[5,"gst_audio_base_src_set_provide_clock","","",null,null],[5,"gst_audio_base_src_set_slave_method","","",null,null],[5,"gst_audio_cd_src_get_type","","",null,null],[5,"gst_audio_cd_src_add_track","","",null,null],[5,"gst_audio_clock_get_type","","",null,null],[5,"gst_audio_clock_new","","",null,null],[5,"gst_audio_clock_adjust","","",null,null],[5,"gst_audio_clock_get_time","","",null,null],[5,"gst_audio_clock_invalidate","","",null,null],[5,"gst_audio_clock_reset","","",null,null],[5,"gst_audio_decoder_get_type","","",null,null],[5,"gst_audio_decoder_allocate_output_buffer","","",null,null],[5,"gst_audio_decoder_finish_frame","","",null,null],[5,"gst_audio_decoder_get_allocator","","",null,null],[5,"gst_audio_decoder_get_audio_info","","",null,null],[5,"gst_audio_decoder_get_delay","","",null,null],[5,"gst_audio_decoder_get_drainable","","",null,null],[5,"gst_audio_decoder_get_estimate_rate","","",null,null],[5,"gst_audio_decoder_get_latency","","",null,null],[5,"gst_audio_decoder_get_max_errors","","",null,null],[5,"gst_audio_decoder_get_min_latency","","",null,null],[5,"gst_audio_decoder_get_needs_format","","",null,null],[5,"gst_audio_decoder_get_parse_state","","",null,null],[5,"gst_audio_decoder_get_plc","","",null,null],[5,"gst_audio_decoder_get_plc_aware","","",null,null],[5,"gst_audio_decoder_get_tolerance","","",null,null],[5,"gst_audio_decoder_merge_tags","","",null,null],[5,"gst_audio_decoder_negotiate","","",null,null],[5,"gst_audio_decoder_proxy_getcaps","","",null,null],[5,"gst_audio_decoder_set_allocation_caps","","",null,null],[5,"gst_audio_decoder_set_drainable","","",null,null],[5,"gst_audio_decoder_set_estimate_rate","","",null,null],[5,"gst_audio_decoder_set_latency","","",null,null],[5,"gst_audio_decoder_set_max_errors","","",null,null],[5,"gst_audio_decoder_set_min_latency","","",null,null],[5,"gst_audio_decoder_set_needs_format","","",null,null],[5,"gst_audio_decoder_set_output_format","","",null,null],[5,"gst_audio_decoder_set_plc","","",null,null],[5,"gst_audio_decoder_set_plc_aware","","",null,null],[5,"gst_audio_decoder_set_tolerance","","",null,null],[5,"gst_audio_decoder_set_use_default_pad_acceptcaps","","",null,null],[5,"gst_audio_encoder_get_type","","",null,null],[5,"gst_audio_encoder_allocate_output_buffer","","",null,null],[5,"gst_audio_encoder_finish_frame","","",null,null],[5,"gst_audio_encoder_get_allocator","","",null,null],[5,"gst_audio_encoder_get_audio_info","","",null,null],[5,"gst_audio_encoder_get_drainable","","",null,null],[5,"gst_audio_encoder_get_frame_max","","",null,null],[5,"gst_audio_encoder_get_frame_samples_max","","",null,null],[5,"gst_audio_encoder_get_frame_samples_min","","",null,null],[5,"gst_audio_encoder_get_hard_min","","",null,null],[5,"gst_audio_encoder_get_hard_resync","","",null,null],[5,"gst_audio_encoder_get_latency","","",null,null],[5,"gst_audio_encoder_get_lookahead","","",null,null],[5,"gst_audio_encoder_get_mark_granule","","",null,null],[5,"gst_audio_encoder_get_perfect_timestamp","","",null,null],[5,"gst_audio_encoder_get_tolerance","","",null,null],[5,"gst_audio_encoder_merge_tags","","",null,null],[5,"gst_audio_encoder_negotiate","","",null,null],[5,"gst_audio_encoder_proxy_getcaps","","",null,null],[5,"gst_audio_encoder_set_allocation_caps","","",null,null],[5,"gst_audio_encoder_set_drainable","","",null,null],[5,"gst_audio_encoder_set_frame_max","","",null,null],[5,"gst_audio_encoder_set_frame_samples_max","","",null,null],[5,"gst_audio_encoder_set_frame_samples_min","","",null,null],[5,"gst_audio_encoder_set_hard_min","","",null,null],[5,"gst_audio_encoder_set_hard_resync","","",null,null],[5,"gst_audio_encoder_set_headers","","",null,null],[5,"gst_audio_encoder_set_latency","","",null,null],[5,"gst_audio_encoder_set_lookahead","","",null,null],[5,"gst_audio_encoder_set_mark_granule","","",null,null],[5,"gst_audio_encoder_set_output_format","","",null,null],[5,"gst_audio_encoder_set_perfect_timestamp","","",null,null],[5,"gst_audio_encoder_set_tolerance","","",null,null],[5,"gst_audio_filter_get_type","","",null,null],[5,"gst_audio_ring_buffer_get_type","","",null,null],[5,"gst_audio_ring_buffer_debug_spec_buff","","",null,null],[5,"gst_audio_ring_buffer_debug_spec_caps","","",null,null],[5,"gst_audio_ring_buffer_parse_caps","","",null,null],[5,"gst_audio_ring_buffer_acquire","","",null,null],[5,"gst_audio_ring_buffer_activate","","",null,null],[5,"gst_audio_ring_buffer_advance","","",null,null],[5,"gst_audio_ring_buffer_clear","","",null,null],[5,"gst_audio_ring_buffer_clear_all","","",null,null],[5,"gst_audio_ring_buffer_close_device","","",null,null],[5,"gst_audio_ring_buffer_commit","","",null,null],[5,"gst_audio_ring_buffer_convert","","",null,null],[5,"gst_audio_ring_buffer_delay","","",null,null],[5,"gst_audio_ring_buffer_device_is_open","","",null,null],[5,"gst_audio_ring_buffer_is_acquired","","",null,null],[5,"gst_audio_ring_buffer_is_active","","",null,null],[5,"gst_audio_ring_buffer_is_flushing","","",null,null],[5,"gst_audio_ring_buffer_may_start","","",null,null],[5,"gst_audio_ring_buffer_open_device","","",null,null],[5,"gst_audio_ring_buffer_pause","","",null,null],[5,"gst_audio_ring_buffer_prepare_read","","",null,null],[5,"gst_audio_ring_buffer_read","","",null,null],[5,"gst_audio_ring_buffer_release","","",null,null],[5,"gst_audio_ring_buffer_samples_done","","",null,null],[5,"gst_audio_ring_buffer_set_callback","","",null,null],[5,"gst_audio_ring_buffer_set_callback_full","","",null,null],[5,"gst_audio_ring_buffer_set_channel_positions","","",null,null],[5,"gst_audio_ring_buffer_set_flushing","","",null,null],[5,"gst_audio_ring_buffer_set_sample","","",null,null],[5,"gst_audio_ring_buffer_set_timestamp","","",null,null],[5,"gst_audio_ring_buffer_start","","",null,null],[5,"gst_audio_ring_buffer_stop","","",null,null],[5,"gst_audio_sink_get_type","","",null,null],[5,"gst_audio_src_get_type","","",null,null],[5,"gst_stream_volume_get_type","","",null,null],[5,"gst_stream_volume_convert_volume","","",null,null],[5,"gst_stream_volume_get_mute","","",null,null],[5,"gst_stream_volume_get_volume","","",null,null],[5,"gst_stream_volume_set_mute","","",null,null],[5,"gst_stream_volume_set_volume","","",null,null],[5,"gst_audio_buffer_clip","","",null,null],[5,"gst_audio_buffer_reorder_channels","","",null,null],[5,"gst_audio_channel_get_fallback_mask","","",null,null],[5,"gst_audio_channel_positions_from_mask","","",null,null],[5,"gst_audio_channel_positions_to_mask","","",null,null],[5,"gst_audio_channel_positions_to_string","","",null,null],[5,"gst_audio_channel_positions_to_valid_order","","",null,null],[5,"gst_audio_check_valid_channel_positions","","",null,null],[5,"gst_audio_clipping_meta_api_get_type","","",null,null],[5,"gst_audio_downmix_meta_api_get_type","","",null,null],[5,"gst_audio_format_info_get_type","","",null,null],[5,"gst_audio_get_channel_reorder_map","","",null,null],[5,"gst_audio_iec61937_frame_size","","",null,null],[5,"gst_audio_iec61937_payload","","",null,null],[5,"gst_audio_reorder_channels","","",null,null],[5,"gst_buffer_add_audio_clipping_meta","","",null,null],[5,"gst_buffer_add_audio_downmix_meta","","",null,null],[5,"gst_buffer_get_audio_downmix_meta_for_channels","","",null,null],[6,"GstAudioBaseSinkDiscontReason","","",null,null],[6,"GstAudioBaseSinkSlaveMethod","","",null,null],[6,"GstAudioBaseSrcSlaveMethod","","",null,null],[6,"GstAudioCdSrcMode","","",null,null],[6,"GstAudioChannelPosition","","",null,null],[6,"GstAudioDitherMethod","","",null,null],[6,"GstAudioFormat","","",null,null],[6,"GstAudioLayout","","",null,null],[6,"GstAudioNoiseShapingMethod","","",null,null],[6,"GstAudioResamplerFilterInterpolation","","",null,null],[6,"GstAudioResamplerFilterMode","","",null,null],[6,"GstAudioResamplerMethod","","",null,null],[6,"GstAudioRingBufferFormatType","","",null,null],[6,"GstAudioRingBufferState","","",null,null],[6,"GstStreamVolumeFormat","","",null,null],[6,"GstAudioBaseSinkCustomSlavingCallback","","",null,null],[6,"GstAudioClockGetTimeFunc","","",null,null],[6,"GstAudioFormatPack","","",null,null],[6,"GstAudioFormatUnpack","","",null,null],[6,"GstAudioRingBufferCallback","","",null,null],[17,"GST_AUDIO_BASE_SINK_DISCONT_REASON_NO_DISCONT","","",null,null],[17,"GST_AUDIO_BASE_SINK_DISCONT_REASON_NEW_CAPS","","",null,null],[17,"GST_AUDIO_BASE_SINK_DISCONT_REASON_FLUSH","","",null,null],[17,"GST_AUDIO_BASE_SINK_DISCONT_REASON_SYNC_LATENCY","","",null,null],[17,"GST_AUDIO_BASE_SINK_DISCONT_REASON_ALIGNMENT","","",null,null],[17,"GST_AUDIO_BASE_SINK_DISCONT_REASON_DEVICE_FAILURE","","",null,null],[17,"GST_AUDIO_BASE_SINK_SLAVE_RESAMPLE","","",null,null],[17,"GST_AUDIO_BASE_SINK_SLAVE_SKEW","","",null,null],[17,"GST_AUDIO_BASE_SINK_SLAVE_NONE","","",null,null],[17,"GST_AUDIO_BASE_SINK_SLAVE_CUSTOM","","",null,null],[17,"GST_AUDIO_BASE_SRC_SLAVE_RESAMPLE","","",null,null],[17,"GST_AUDIO_BASE_SRC_SLAVE_RE_TIMESTAMP","","",null,null],[17,"GST_AUDIO_BASE_SRC_SLAVE_SKEW","","",null,null],[17,"GST_AUDIO_BASE_SRC_SLAVE_NONE","","",null,null],[17,"GST_AUDIO_CD_SRC_MODE_NORMAL","","",null,null],[17,"GST_AUDIO_CD_SRC_MODE_CONTINUOUS","","",null,null],[17,"GST_AUDIO_CHANNEL_POSITION_NONE","","",null,null],[17,"GST_AUDIO_CHANNEL_POSITION_MONO","","",null,null],[17,"GST_AUDIO_CHANNEL_POSITION_INVALID","","",null,null],[17,"GST_AUDIO_CHANNEL_POSITION_FRONT_LEFT","","",null,null],[17,"GST_AUDIO_CHANNEL_POSITION_FRONT_RIGHT","","",null,null],[17,"GST_AUDIO_CHANNEL_POSITION_FRONT_CENTER","","",null,null],[17,"GST_AUDIO_CHANNEL_POSITION_LFE1","","",null,null],[17,"GST_AUDIO_CHANNEL_POSITION_REAR_LEFT","","",null,null],[17,"GST_AUDIO_CHANNEL_POSITION_REAR_RIGHT","","",null,null],[17,"GST_AUDIO_CHANNEL_POSITION_FRONT_LEFT_OF_CENTER","","",null,null],[17,"GST_AUDIO_CHANNEL_POSITION_FRONT_RIGHT_OF_CENTER","","",null,null],[17,"GST_AUDIO_CHANNEL_POSITION_REAR_CENTER","","",null,null],[17,"GST_AUDIO_CHANNEL_POSITION_LFE2","","",null,null],[17,"GST_AUDIO_CHANNEL_POSITION_SIDE_LEFT","","",null,null],[17,"GST_AUDIO_CHANNEL_POSITION_SIDE_RIGHT","","",null,null],[17,"GST_AUDIO_CHANNEL_POSITION_TOP_FRONT_LEFT","","",null,null],[17,"GST_AUDIO_CHANNEL_POSITION_TOP_FRONT_RIGHT","","",null,null],[17,"GST_AUDIO_CHANNEL_POSITION_TOP_FRONT_CENTER","","",null,null],[17,"GST_AUDIO_CHANNEL_POSITION_TOP_CENTER","","",null,null],[17,"GST_AUDIO_CHANNEL_POSITION_TOP_REAR_LEFT","","",null,null],[17,"GST_AUDIO_CHANNEL_POSITION_TOP_REAR_RIGHT","","",null,null],[17,"GST_AUDIO_CHANNEL_POSITION_TOP_SIDE_LEFT","","",null,null],[17,"GST_AUDIO_CHANNEL_POSITION_TOP_SIDE_RIGHT","","",null,null],[17,"GST_AUDIO_CHANNEL_POSITION_TOP_REAR_CENTER","","",null,null],[17,"GST_AUDIO_CHANNEL_POSITION_BOTTOM_FRONT_CENTER","","",null,null],[17,"GST_AUDIO_CHANNEL_POSITION_BOTTOM_FRONT_LEFT","","",null,null],[17,"GST_AUDIO_CHANNEL_POSITION_BOTTOM_FRONT_RIGHT","","",null,null],[17,"GST_AUDIO_CHANNEL_POSITION_WIDE_LEFT","","",null,null],[17,"GST_AUDIO_CHANNEL_POSITION_WIDE_RIGHT","","",null,null],[17,"GST_AUDIO_CHANNEL_POSITION_SURROUND_LEFT","","",null,null],[17,"GST_AUDIO_CHANNEL_POSITION_SURROUND_RIGHT","","",null,null],[17,"GST_AUDIO_DITHER_NONE","","",null,null],[17,"GST_AUDIO_DITHER_RPDF","","",null,null],[17,"GST_AUDIO_DITHER_TPDF","","",null,null],[17,"GST_AUDIO_DITHER_TPDF_HF","","",null,null],[17,"GST_AUDIO_FORMAT_UNKNOWN","","",null,null],[17,"GST_AUDIO_FORMAT_ENCODED","","",null,null],[17,"GST_AUDIO_FORMAT_S8","","",null,null],[17,"GST_AUDIO_FORMAT_U8","","",null,null],[17,"GST_AUDIO_FORMAT_S16LE","","",null,null],[17,"GST_AUDIO_FORMAT_S16BE","","",null,null],[17,"GST_AUDIO_FORMAT_U16LE","","",null,null],[17,"GST_AUDIO_FORMAT_U16BE","","",null,null],[17,"GST_AUDIO_FORMAT_S24_32LE","","",null,null],[17,"GST_AUDIO_FORMAT_S24_32BE","","",null,null],[17,"GST_AUDIO_FORMAT_U24_32LE","","",null,null],[17,"GST_AUDIO_FORMAT_U24_32BE","","",null,null],[17,"GST_AUDIO_FORMAT_S32LE","","",null,null],[17,"GST_AUDIO_FORMAT_S32BE","","",null,null],[17,"GST_AUDIO_FORMAT_U32LE","","",null,null],[17,"GST_AUDIO_FORMAT_U32BE","","",null,null],[17,"GST_AUDIO_FORMAT_S24LE","","",null,null],[17,"GST_AUDIO_FORMAT_S24BE","","",null,null],[17,"GST_AUDIO_FORMAT_U24LE","","",null,null],[17,"GST_AUDIO_FORMAT_U24BE","","",null,null],[17,"GST_AUDIO_FORMAT_S20LE","","",null,null],[17,"GST_AUDIO_FORMAT_S20BE","","",null,null],[17,"GST_AUDIO_FORMAT_U20LE","","",null,null],[17,"GST_AUDIO_FORMAT_U20BE","","",null,null],[17,"GST_AUDIO_FORMAT_S18LE","","",null,null],[17,"GST_AUDIO_FORMAT_S18BE","","",null,null],[17,"GST_AUDIO_FORMAT_U18LE","","",null,null],[17,"GST_AUDIO_FORMAT_U18BE","","",null,null],[17,"GST_AUDIO_FORMAT_F32LE","","",null,null],[17,"GST_AUDIO_FORMAT_F32BE","","",null,null],[17,"GST_AUDIO_FORMAT_F64LE","","",null,null],[17,"GST_AUDIO_FORMAT_F64BE","","",null,null],[17,"GST_AUDIO_LAYOUT_INTERLEAVED","","",null,null],[17,"GST_AUDIO_LAYOUT_NON_INTERLEAVED","","",null,null],[17,"GST_AUDIO_NOISE_SHAPING_NONE","","",null,null],[17,"GST_AUDIO_NOISE_SHAPING_ERROR_FEEDBACK","","",null,null],[17,"GST_AUDIO_NOISE_SHAPING_SIMPLE","","",null,null],[17,"GST_AUDIO_NOISE_SHAPING_MEDIUM","","",null,null],[17,"GST_AUDIO_NOISE_SHAPING_HIGH","","",null,null],[17,"GST_AUDIO_RESAMPLER_FILTER_INTERPOLATION_NONE","","",null,null],[17,"GST_AUDIO_RESAMPLER_FILTER_INTERPOLATION_LINEAR","","",null,null],[17,"GST_AUDIO_RESAMPLER_FILTER_INTERPOLATION_CUBIC","","",null,null],[17,"GST_AUDIO_RESAMPLER_FILTER_MODE_INTERPOLATED","","",null,null],[17,"GST_AUDIO_RESAMPLER_FILTER_MODE_FULL","","",null,null],[17,"GST_AUDIO_RESAMPLER_FILTER_MODE_AUTO","","",null,null],[17,"GST_AUDIO_RESAMPLER_METHOD_NEAREST","","",null,null],[17,"GST_AUDIO_RESAMPLER_METHOD_LINEAR","","",null,null],[17,"GST_AUDIO_RESAMPLER_METHOD_CUBIC","","",null,null],[17,"GST_AUDIO_RESAMPLER_METHOD_BLACKMAN_NUTTALL","","",null,null],[17,"GST_AUDIO_RESAMPLER_METHOD_KAISER","","",null,null],[17,"GST_AUDIO_RING_BUFFER_FORMAT_TYPE_RAW","","",null,null],[17,"GST_AUDIO_RING_BUFFER_FORMAT_TYPE_MU_LAW","","",null,null],[17,"GST_AUDIO_RING_BUFFER_FORMAT_TYPE_A_LAW","","",null,null],[17,"GST_AUDIO_RING_BUFFER_FORMAT_TYPE_IMA_ADPCM","","",null,null],[17,"GST_AUDIO_RING_BUFFER_FORMAT_TYPE_MPEG","","",null,null],[17,"GST_AUDIO_RING_BUFFER_FORMAT_TYPE_GSM","","",null,null],[17,"GST_AUDIO_RING_BUFFER_FORMAT_TYPE_IEC958","","",null,null],[17,"GST_AUDIO_RING_BUFFER_FORMAT_TYPE_AC3","","",null,null],[17,"GST_AUDIO_RING_BUFFER_FORMAT_TYPE_EAC3","","",null,null],[17,"GST_AUDIO_RING_BUFFER_FORMAT_TYPE_DTS","","",null,null],[17,"GST_AUDIO_RING_BUFFER_FORMAT_TYPE_MPEG2_AAC","","",null,null],[17,"GST_AUDIO_RING_BUFFER_FORMAT_TYPE_MPEG4_AAC","","",null,null],[17,"GST_AUDIO_RING_BUFFER_FORMAT_TYPE_MPEG2_AAC_RAW","","",null,null],[17,"GST_AUDIO_RING_BUFFER_FORMAT_TYPE_MPEG4_AAC_RAW","","",null,null],[17,"GST_AUDIO_RING_BUFFER_FORMAT_TYPE_FLAC","","",null,null],[17,"GST_AUDIO_RING_BUFFER_STATE_STOPPED","","",null,null],[17,"GST_AUDIO_RING_BUFFER_STATE_PAUSED","","",null,null],[17,"GST_AUDIO_RING_BUFFER_STATE_STARTED","","",null,null],[17,"GST_AUDIO_RING_BUFFER_STATE_ERROR","","",null,null],[17,"GST_STREAM_VOLUME_FORMAT_LINEAR","","",null,null],[17,"GST_STREAM_VOLUME_FORMAT_CUBIC","","",null,null],[17,"GST_STREAM_VOLUME_FORMAT_DB","","",null,null],[17,"GST_AUDIO_CHANNELS_RANGE","","",null,null],[17,"GST_AUDIO_CONVERTER_OPT_DITHER_METHOD","","",null,null],[17,"GST_AUDIO_CONVERTER_OPT_NOISE_SHAPING_METHOD","","",null,null],[17,"GST_AUDIO_CONVERTER_OPT_QUANTIZATION","","",null,null],[17,"GST_AUDIO_CONVERTER_OPT_RESAMPLER_METHOD","","",null,null],[17,"GST_AUDIO_DECODER_MAX_ERRORS","","",null,null],[17,"GST_AUDIO_DECODER_SINK_NAME","","",null,null],[17,"GST_AUDIO_DECODER_SRC_NAME","","",null,null],[17,"GST_AUDIO_DEF_CHANNELS","","",null,null],[17,"GST_AUDIO_DEF_FORMAT","","",null,null],[17,"GST_AUDIO_DEF_RATE","","",null,null],[17,"GST_AUDIO_ENCODER_SINK_NAME","","",null,null],[17,"GST_AUDIO_ENCODER_SRC_NAME","","",null,null],[17,"GST_AUDIO_FORMATS_ALL","","",null,null],[17,"GST_AUDIO_RATE_RANGE","","",null,null],[17,"GST_AUDIO_RESAMPLER_OPT_CUBIC_B","","",null,null],[17,"GST_AUDIO_RESAMPLER_OPT_CUBIC_C","","",null,null],[17,"GST_AUDIO_RESAMPLER_OPT_CUTOFF","","",null,null],[17,"GST_AUDIO_RESAMPLER_OPT_FILTER_INTERPOLATION","","",null,null],[17,"GST_AUDIO_RESAMPLER_OPT_FILTER_MODE","","",null,null],[17,"GST_AUDIO_RESAMPLER_OPT_FILTER_MODE_THRESHOLD","","",null,null],[17,"GST_AUDIO_RESAMPLER_OPT_FILTER_OVERSAMPLE","","",null,null],[17,"GST_AUDIO_RESAMPLER_OPT_MAX_PHASE_ERROR","","",null,null],[17,"GST_AUDIO_RESAMPLER_OPT_N_TAPS","","",null,null],[17,"GST_AUDIO_RESAMPLER_OPT_STOP_ATTENUATION","","",null,null],[17,"GST_AUDIO_RESAMPLER_OPT_TRANSITION_BANDWIDTH","","",null,null],[17,"GST_AUDIO_RESAMPLER_QUALITY_DEFAULT","","",null,null],[17,"GST_AUDIO_RESAMPLER_QUALITY_MAX","","",null,null],[17,"GST_AUDIO_RESAMPLER_QUALITY_MIN","","",null,null],[17,"GST_META_TAG_AUDIO_CHANNELS_STR","","",null,null],[17,"GST_META_TAG_AUDIO_RATE_STR","","",null,null],[17,"GST_META_TAG_AUDIO_STR","","",null,null],[17,"GST_AUDIO_CHANNEL_MIXER_FLAGS_NONE","","",null,null],[17,"GST_AUDIO_CHANNEL_MIXER_FLAGS_NON_INTERLEAVED_IN","","",null,null],[17,"GST_AUDIO_CHANNEL_MIXER_FLAGS_NON_INTERLEAVED_OUT","","",null,null],[17,"GST_AUDIO_CHANNEL_MIXER_FLAGS_UNPOSITIONED_IN","","",null,null],[17,"GST_AUDIO_CHANNEL_MIXER_FLAGS_UNPOSITIONED_OUT","","",null,null],[17,"GST_AUDIO_CONVERTER_FLAG_NONE","","",null,null],[17,"GST_AUDIO_CONVERTER_FLAG_IN_WRITABLE","","",null,null],[17,"GST_AUDIO_CONVERTER_FLAG_VARIABLE_RATE","","",null,null],[17,"GST_AUDIO_FLAG_NONE","","",null,null],[17,"GST_AUDIO_FLAG_UNPOSITIONED","","",null,null],[17,"GST_AUDIO_FORMAT_FLAG_INTEGER","","",null,null],[17,"GST_AUDIO_FORMAT_FLAG_FLOAT","","",null,null],[17,"GST_AUDIO_FORMAT_FLAG_SIGNED","","",null,null],[17,"GST_AUDIO_FORMAT_FLAG_COMPLEX","","",null,null],[17,"GST_AUDIO_FORMAT_FLAG_UNPACK","","",null,null],[17,"GST_AUDIO_PACK_FLAG_NONE","","",null,null],[17,"GST_AUDIO_PACK_FLAG_TRUNCATE_RANGE","","",null,null],[17,"GST_AUDIO_QUANTIZE_FLAG_NONE","","",null,null],[17,"GST_AUDIO_QUANTIZE_FLAG_NON_INTERLEAVED","","",null,null],[17,"GST_AUDIO_RESAMPLER_FLAG_NONE","","",null,null],[17,"GST_AUDIO_RESAMPLER_FLAG_NON_INTERLEAVED_IN","","",null,null],[17,"GST_AUDIO_RESAMPLER_FLAG_NON_INTERLEAVED_OUT","","",null,null],[17,"GST_AUDIO_RESAMPLER_FLAG_VARIABLE_RATE","","",null,null],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"gstaudiochannelmixerflags"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"gstaudiochannelmixerflags"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"gstaudiochannelmixerflags"}}],[11,"partial_cmp","","",27,{"inputs":[{"name":"self"},{"name":"gstaudiochannelmixerflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",27,{"inputs":[{"name":"self"},{"name":"gstaudiochannelmixerflags"}],"output":{"name":"bool"}}],[11,"le","","",27,{"inputs":[{"name":"self"},{"name":"gstaudiochannelmixerflags"}],"output":{"name":"bool"}}],[11,"gt","","",27,{"inputs":[{"name":"self"},{"name":"gstaudiochannelmixerflags"}],"output":{"name":"bool"}}],[11,"ge","","",27,{"inputs":[{"name":"self"},{"name":"gstaudiochannelmixerflags"}],"output":{"name":"bool"}}],[11,"cmp","","",27,{"inputs":[{"name":"self"},{"name":"gstaudiochannelmixerflags"}],"output":{"name":"ordering"}}],[11,"hash","","",27,null],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",27,null],[18,"NON_INTERLEAVED_IN","","",27,null],[18,"NON_INTERLEAVED_OUT","","",27,null],[18,"UNPOSITIONED_IN","","",27,null],[18,"UNPOSITIONED_OUT","","",27,null],[11,"empty","","Returns an empty set of flags.",27,{"inputs":[],"output":{"name":"gstaudiochannelmixerflags"}}],[11,"all","","Returns the set containing all flags.",27,{"inputs":[],"output":{"name":"gstaudiochannelmixerflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",27,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",27,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gstaudiochannelmixerflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",27,{"inputs":[{"name":"c_uint"}],"output":{"name":"gstaudiochannelmixerflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",27,{"inputs":[{"name":"self"},{"name":"gstaudiochannelmixerflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",27,{"inputs":[{"name":"self"},{"name":"gstaudiochannelmixerflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",27,{"inputs":[{"name":"self"},{"name":"gstaudiochannelmixerflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",27,{"inputs":[{"name":"self"},{"name":"gstaudiochannelmixerflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",27,{"inputs":[{"name":"self"},{"name":"gstaudiochannelmixerflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",27,{"inputs":[{"name":"self"},{"name":"gstaudiochannelmixerflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",27,{"inputs":[{"name":"self"},{"name":"gstaudiochannelmixerflags"}],"output":{"name":"gstaudiochannelmixerflags"}}],[11,"bitor_assign","","Adds the set of flags.",27,{"inputs":[{"name":"self"},{"name":"gstaudiochannelmixerflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",27,{"inputs":[{"name":"self"},{"name":"gstaudiochannelmixerflags"}],"output":{"name":"gstaudiochannelmixerflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",27,{"inputs":[{"name":"self"},{"name":"gstaudiochannelmixerflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",27,{"inputs":[{"name":"self"},{"name":"gstaudiochannelmixerflags"}],"output":{"name":"gstaudiochannelmixerflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",27,{"inputs":[{"name":"self"},{"name":"gstaudiochannelmixerflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",27,{"inputs":[{"name":"self"},{"name":"gstaudiochannelmixerflags"}],"output":{"name":"gstaudiochannelmixerflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",27,{"inputs":[{"name":"self"},{"name":"gstaudiochannelmixerflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",27,{"inputs":[{"name":"self"}],"output":{"name":"gstaudiochannelmixerflags"}}],[11,"extend","","",27,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",27,{"inputs":[{"name":"t"}],"output":{"name":"gstaudiochannelmixerflags"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"gstaudioconverterflags"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"gstaudioconverterflags"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"gstaudioconverterflags"}}],[11,"partial_cmp","","",28,{"inputs":[{"name":"self"},{"name":"gstaudioconverterflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",28,{"inputs":[{"name":"self"},{"name":"gstaudioconverterflags"}],"output":{"name":"bool"}}],[11,"le","","",28,{"inputs":[{"name":"self"},{"name":"gstaudioconverterflags"}],"output":{"name":"bool"}}],[11,"gt","","",28,{"inputs":[{"name":"self"},{"name":"gstaudioconverterflags"}],"output":{"name":"bool"}}],[11,"ge","","",28,{"inputs":[{"name":"self"},{"name":"gstaudioconverterflags"}],"output":{"name":"bool"}}],[11,"cmp","","",28,{"inputs":[{"name":"self"},{"name":"gstaudioconverterflags"}],"output":{"name":"ordering"}}],[11,"hash","","",28,null],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",28,null],[18,"IN_WRITABLE","","",28,null],[18,"VARIABLE_RATE","","",28,null],[11,"empty","","Returns an empty set of flags.",28,{"inputs":[],"output":{"name":"gstaudioconverterflags"}}],[11,"all","","Returns the set containing all flags.",28,{"inputs":[],"output":{"name":"gstaudioconverterflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",28,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",28,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gstaudioconverterflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",28,{"inputs":[{"name":"c_uint"}],"output":{"name":"gstaudioconverterflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",28,{"inputs":[{"name":"self"},{"name":"gstaudioconverterflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",28,{"inputs":[{"name":"self"},{"name":"gstaudioconverterflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",28,{"inputs":[{"name":"self"},{"name":"gstaudioconverterflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",28,{"inputs":[{"name":"self"},{"name":"gstaudioconverterflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",28,{"inputs":[{"name":"self"},{"name":"gstaudioconverterflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",28,{"inputs":[{"name":"self"},{"name":"gstaudioconverterflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",28,{"inputs":[{"name":"self"},{"name":"gstaudioconverterflags"}],"output":{"name":"gstaudioconverterflags"}}],[11,"bitor_assign","","Adds the set of flags.",28,{"inputs":[{"name":"self"},{"name":"gstaudioconverterflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",28,{"inputs":[{"name":"self"},{"name":"gstaudioconverterflags"}],"output":{"name":"gstaudioconverterflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",28,{"inputs":[{"name":"self"},{"name":"gstaudioconverterflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",28,{"inputs":[{"name":"self"},{"name":"gstaudioconverterflags"}],"output":{"name":"gstaudioconverterflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",28,{"inputs":[{"name":"self"},{"name":"gstaudioconverterflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",28,{"inputs":[{"name":"self"},{"name":"gstaudioconverterflags"}],"output":{"name":"gstaudioconverterflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",28,{"inputs":[{"name":"self"},{"name":"gstaudioconverterflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",28,{"inputs":[{"name":"self"}],"output":{"name":"gstaudioconverterflags"}}],[11,"extend","","",28,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",28,{"inputs":[{"name":"t"}],"output":{"name":"gstaudioconverterflags"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"gstaudioflags"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"gstaudioflags"}],"output":{"name":"bool"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"gstaudioflags"}}],[11,"partial_cmp","","",29,{"inputs":[{"name":"self"},{"name":"gstaudioflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",29,{"inputs":[{"name":"self"},{"name":"gstaudioflags"}],"output":{"name":"bool"}}],[11,"le","","",29,{"inputs":[{"name":"self"},{"name":"gstaudioflags"}],"output":{"name":"bool"}}],[11,"gt","","",29,{"inputs":[{"name":"self"},{"name":"gstaudioflags"}],"output":{"name":"bool"}}],[11,"ge","","",29,{"inputs":[{"name":"self"},{"name":"gstaudioflags"}],"output":{"name":"bool"}}],[11,"cmp","","",29,{"inputs":[{"name":"self"},{"name":"gstaudioflags"}],"output":{"name":"ordering"}}],[11,"hash","","",29,null],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",29,null],[18,"UNPOSITIONED","","",29,null],[11,"empty","","Returns an empty set of flags.",29,{"inputs":[],"output":{"name":"gstaudioflags"}}],[11,"all","","Returns the set containing all flags.",29,{"inputs":[],"output":{"name":"gstaudioflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",29,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",29,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gstaudioflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",29,{"inputs":[{"name":"c_uint"}],"output":{"name":"gstaudioflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",29,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",29,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",29,{"inputs":[{"name":"self"},{"name":"gstaudioflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",29,{"inputs":[{"name":"self"},{"name":"gstaudioflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",29,{"inputs":[{"name":"self"},{"name":"gstaudioflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",29,{"inputs":[{"name":"self"},{"name":"gstaudioflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",29,{"inputs":[{"name":"self"},{"name":"gstaudioflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",29,{"inputs":[{"name":"self"},{"name":"gstaudioflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",29,{"inputs":[{"name":"self"},{"name":"gstaudioflags"}],"output":{"name":"gstaudioflags"}}],[11,"bitor_assign","","Adds the set of flags.",29,{"inputs":[{"name":"self"},{"name":"gstaudioflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",29,{"inputs":[{"name":"self"},{"name":"gstaudioflags"}],"output":{"name":"gstaudioflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",29,{"inputs":[{"name":"self"},{"name":"gstaudioflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",29,{"inputs":[{"name":"self"},{"name":"gstaudioflags"}],"output":{"name":"gstaudioflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",29,{"inputs":[{"name":"self"},{"name":"gstaudioflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",29,{"inputs":[{"name":"self"},{"name":"gstaudioflags"}],"output":{"name":"gstaudioflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",29,{"inputs":[{"name":"self"},{"name":"gstaudioflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",29,{"inputs":[{"name":"self"}],"output":{"name":"gstaudioflags"}}],[11,"extend","","",29,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",29,{"inputs":[{"name":"t"}],"output":{"name":"gstaudioflags"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"gstaudioformatflags"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"gstaudioformatflags"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"gstaudioformatflags"}}],[11,"partial_cmp","","",30,{"inputs":[{"name":"self"},{"name":"gstaudioformatflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",30,{"inputs":[{"name":"self"},{"name":"gstaudioformatflags"}],"output":{"name":"bool"}}],[11,"le","","",30,{"inputs":[{"name":"self"},{"name":"gstaudioformatflags"}],"output":{"name":"bool"}}],[11,"gt","","",30,{"inputs":[{"name":"self"},{"name":"gstaudioformatflags"}],"output":{"name":"bool"}}],[11,"ge","","",30,{"inputs":[{"name":"self"},{"name":"gstaudioformatflags"}],"output":{"name":"bool"}}],[11,"cmp","","",30,{"inputs":[{"name":"self"},{"name":"gstaudioformatflags"}],"output":{"name":"ordering"}}],[11,"hash","","",30,null],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"INTEGER","","",30,null],[18,"FLOAT","","",30,null],[18,"SIGNED","","",30,null],[18,"COMPLEX","","",30,null],[18,"UNPACK","","",30,null],[11,"empty","","Returns an empty set of flags.",30,{"inputs":[],"output":{"name":"gstaudioformatflags"}}],[11,"all","","Returns the set containing all flags.",30,{"inputs":[],"output":{"name":"gstaudioformatflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",30,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",30,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gstaudioformatflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",30,{"inputs":[{"name":"c_uint"}],"output":{"name":"gstaudioformatflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",30,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",30,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",30,{"inputs":[{"name":"self"},{"name":"gstaudioformatflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",30,{"inputs":[{"name":"self"},{"name":"gstaudioformatflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",30,{"inputs":[{"name":"self"},{"name":"gstaudioformatflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",30,{"inputs":[{"name":"self"},{"name":"gstaudioformatflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",30,{"inputs":[{"name":"self"},{"name":"gstaudioformatflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",30,{"inputs":[{"name":"self"},{"name":"gstaudioformatflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",30,{"inputs":[{"name":"self"},{"name":"gstaudioformatflags"}],"output":{"name":"gstaudioformatflags"}}],[11,"bitor_assign","","Adds the set of flags.",30,{"inputs":[{"name":"self"},{"name":"gstaudioformatflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",30,{"inputs":[{"name":"self"},{"name":"gstaudioformatflags"}],"output":{"name":"gstaudioformatflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",30,{"inputs":[{"name":"self"},{"name":"gstaudioformatflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",30,{"inputs":[{"name":"self"},{"name":"gstaudioformatflags"}],"output":{"name":"gstaudioformatflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",30,{"inputs":[{"name":"self"},{"name":"gstaudioformatflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",30,{"inputs":[{"name":"self"},{"name":"gstaudioformatflags"}],"output":{"name":"gstaudioformatflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",30,{"inputs":[{"name":"self"},{"name":"gstaudioformatflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",30,{"inputs":[{"name":"self"}],"output":{"name":"gstaudioformatflags"}}],[11,"extend","","",30,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",30,{"inputs":[{"name":"t"}],"output":{"name":"gstaudioformatflags"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"gstaudiopackflags"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"gstaudiopackflags"}],"output":{"name":"bool"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"gstaudiopackflags"}}],[11,"partial_cmp","","",31,{"inputs":[{"name":"self"},{"name":"gstaudiopackflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",31,{"inputs":[{"name":"self"},{"name":"gstaudiopackflags"}],"output":{"name":"bool"}}],[11,"le","","",31,{"inputs":[{"name":"self"},{"name":"gstaudiopackflags"}],"output":{"name":"bool"}}],[11,"gt","","",31,{"inputs":[{"name":"self"},{"name":"gstaudiopackflags"}],"output":{"name":"bool"}}],[11,"ge","","",31,{"inputs":[{"name":"self"},{"name":"gstaudiopackflags"}],"output":{"name":"bool"}}],[11,"cmp","","",31,{"inputs":[{"name":"self"},{"name":"gstaudiopackflags"}],"output":{"name":"ordering"}}],[11,"hash","","",31,null],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",31,null],[18,"TRUNCATE_RANGE","","",31,null],[11,"empty","","Returns an empty set of flags.",31,{"inputs":[],"output":{"name":"gstaudiopackflags"}}],[11,"all","","Returns the set containing all flags.",31,{"inputs":[],"output":{"name":"gstaudiopackflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",31,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",31,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gstaudiopackflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",31,{"inputs":[{"name":"c_uint"}],"output":{"name":"gstaudiopackflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",31,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",31,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",31,{"inputs":[{"name":"self"},{"name":"gstaudiopackflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",31,{"inputs":[{"name":"self"},{"name":"gstaudiopackflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",31,{"inputs":[{"name":"self"},{"name":"gstaudiopackflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",31,{"inputs":[{"name":"self"},{"name":"gstaudiopackflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",31,{"inputs":[{"name":"self"},{"name":"gstaudiopackflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",31,{"inputs":[{"name":"self"},{"name":"gstaudiopackflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",31,{"inputs":[{"name":"self"},{"name":"gstaudiopackflags"}],"output":{"name":"gstaudiopackflags"}}],[11,"bitor_assign","","Adds the set of flags.",31,{"inputs":[{"name":"self"},{"name":"gstaudiopackflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",31,{"inputs":[{"name":"self"},{"name":"gstaudiopackflags"}],"output":{"name":"gstaudiopackflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",31,{"inputs":[{"name":"self"},{"name":"gstaudiopackflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",31,{"inputs":[{"name":"self"},{"name":"gstaudiopackflags"}],"output":{"name":"gstaudiopackflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",31,{"inputs":[{"name":"self"},{"name":"gstaudiopackflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",31,{"inputs":[{"name":"self"},{"name":"gstaudiopackflags"}],"output":{"name":"gstaudiopackflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",31,{"inputs":[{"name":"self"},{"name":"gstaudiopackflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",31,{"inputs":[{"name":"self"}],"output":{"name":"gstaudiopackflags"}}],[11,"extend","","",31,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",31,{"inputs":[{"name":"t"}],"output":{"name":"gstaudiopackflags"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"gstaudioquantizeflags"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"gstaudioquantizeflags"}],"output":{"name":"bool"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"gstaudioquantizeflags"}}],[11,"partial_cmp","","",32,{"inputs":[{"name":"self"},{"name":"gstaudioquantizeflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",32,{"inputs":[{"name":"self"},{"name":"gstaudioquantizeflags"}],"output":{"name":"bool"}}],[11,"le","","",32,{"inputs":[{"name":"self"},{"name":"gstaudioquantizeflags"}],"output":{"name":"bool"}}],[11,"gt","","",32,{"inputs":[{"name":"self"},{"name":"gstaudioquantizeflags"}],"output":{"name":"bool"}}],[11,"ge","","",32,{"inputs":[{"name":"self"},{"name":"gstaudioquantizeflags"}],"output":{"name":"bool"}}],[11,"cmp","","",32,{"inputs":[{"name":"self"},{"name":"gstaudioquantizeflags"}],"output":{"name":"ordering"}}],[11,"hash","","",32,null],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",32,null],[18,"NON_INTERLEAVED","","",32,null],[11,"empty","","Returns an empty set of flags.",32,{"inputs":[],"output":{"name":"gstaudioquantizeflags"}}],[11,"all","","Returns the set containing all flags.",32,{"inputs":[],"output":{"name":"gstaudioquantizeflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",32,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",32,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gstaudioquantizeflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",32,{"inputs":[{"name":"c_uint"}],"output":{"name":"gstaudioquantizeflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",32,{"inputs":[{"name":"self"},{"name":"gstaudioquantizeflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",32,{"inputs":[{"name":"self"},{"name":"gstaudioquantizeflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",32,{"inputs":[{"name":"self"},{"name":"gstaudioquantizeflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",32,{"inputs":[{"name":"self"},{"name":"gstaudioquantizeflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",32,{"inputs":[{"name":"self"},{"name":"gstaudioquantizeflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",32,{"inputs":[{"name":"self"},{"name":"gstaudioquantizeflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",32,{"inputs":[{"name":"self"},{"name":"gstaudioquantizeflags"}],"output":{"name":"gstaudioquantizeflags"}}],[11,"bitor_assign","","Adds the set of flags.",32,{"inputs":[{"name":"self"},{"name":"gstaudioquantizeflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",32,{"inputs":[{"name":"self"},{"name":"gstaudioquantizeflags"}],"output":{"name":"gstaudioquantizeflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",32,{"inputs":[{"name":"self"},{"name":"gstaudioquantizeflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",32,{"inputs":[{"name":"self"},{"name":"gstaudioquantizeflags"}],"output":{"name":"gstaudioquantizeflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",32,{"inputs":[{"name":"self"},{"name":"gstaudioquantizeflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",32,{"inputs":[{"name":"self"},{"name":"gstaudioquantizeflags"}],"output":{"name":"gstaudioquantizeflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",32,{"inputs":[{"name":"self"},{"name":"gstaudioquantizeflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",32,{"inputs":[{"name":"self"}],"output":{"name":"gstaudioquantizeflags"}}],[11,"extend","","",32,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",32,{"inputs":[{"name":"t"}],"output":{"name":"gstaudioquantizeflags"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"gstaudioresamplerflags"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"gstaudioresamplerflags"}],"output":{"name":"bool"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"gstaudioresamplerflags"}}],[11,"partial_cmp","","",33,{"inputs":[{"name":"self"},{"name":"gstaudioresamplerflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",33,{"inputs":[{"name":"self"},{"name":"gstaudioresamplerflags"}],"output":{"name":"bool"}}],[11,"le","","",33,{"inputs":[{"name":"self"},{"name":"gstaudioresamplerflags"}],"output":{"name":"bool"}}],[11,"gt","","",33,{"inputs":[{"name":"self"},{"name":"gstaudioresamplerflags"}],"output":{"name":"bool"}}],[11,"ge","","",33,{"inputs":[{"name":"self"},{"name":"gstaudioresamplerflags"}],"output":{"name":"bool"}}],[11,"cmp","","",33,{"inputs":[{"name":"self"},{"name":"gstaudioresamplerflags"}],"output":{"name":"ordering"}}],[11,"hash","","",33,null],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",33,null],[18,"NON_INTERLEAVED_IN","","",33,null],[18,"NON_INTERLEAVED_OUT","","",33,null],[18,"VARIABLE_RATE","","",33,null],[11,"empty","","Returns an empty set of flags.",33,{"inputs":[],"output":{"name":"gstaudioresamplerflags"}}],[11,"all","","Returns the set containing all flags.",33,{"inputs":[],"output":{"name":"gstaudioresamplerflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",33,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",33,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gstaudioresamplerflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",33,{"inputs":[{"name":"c_uint"}],"output":{"name":"gstaudioresamplerflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",33,{"inputs":[{"name":"self"},{"name":"gstaudioresamplerflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",33,{"inputs":[{"name":"self"},{"name":"gstaudioresamplerflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",33,{"inputs":[{"name":"self"},{"name":"gstaudioresamplerflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",33,{"inputs":[{"name":"self"},{"name":"gstaudioresamplerflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",33,{"inputs":[{"name":"self"},{"name":"gstaudioresamplerflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",33,{"inputs":[{"name":"self"},{"name":"gstaudioresamplerflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",33,{"inputs":[{"name":"self"},{"name":"gstaudioresamplerflags"}],"output":{"name":"gstaudioresamplerflags"}}],[11,"bitor_assign","","Adds the set of flags.",33,{"inputs":[{"name":"self"},{"name":"gstaudioresamplerflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",33,{"inputs":[{"name":"self"},{"name":"gstaudioresamplerflags"}],"output":{"name":"gstaudioresamplerflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",33,{"inputs":[{"name":"self"},{"name":"gstaudioresamplerflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",33,{"inputs":[{"name":"self"},{"name":"gstaudioresamplerflags"}],"output":{"name":"gstaudioresamplerflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",33,{"inputs":[{"name":"self"},{"name":"gstaudioresamplerflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",33,{"inputs":[{"name":"self"},{"name":"gstaudioresamplerflags"}],"output":{"name":"gstaudioresamplerflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",33,{"inputs":[{"name":"self"},{"name":"gstaudioresamplerflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",33,{"inputs":[{"name":"self"}],"output":{"name":"gstaudioresamplerflags"}}],[11,"extend","","",33,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",33,{"inputs":[{"name":"t"}],"output":{"name":"gstaudioresamplerflags"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"GstAudioBaseSinkClass"],[3,"GstAudioBaseSrcClass"],[3,"GstAudioCdSrcClass"],[3,"GstAudioCdSrcTrack"],[3,"GstAudioClippingMeta"],[3,"GstAudioClockClass"],[3,"GstAudioDecoderClass"],[3,"GstAudioDownmixMeta"],[3,"GstAudioEncoderClass"],[3,"GstAudioFilterClass"],[3,"GstAudioFormatInfo"],[3,"GstAudioInfo"],[3,"GstAudioRingBufferClass"],[3,"GstAudioRingBufferSpec"],[3,"GstAudioSinkClass"],[3,"GstAudioSrcClass"],[3,"GstStreamVolumeInterface"],[3,"GstAudioBaseSink"],[3,"GstAudioBaseSrc"],[3,"GstAudioCdSrc"],[3,"GstAudioClock"],[3,"GstAudioDecoder"],[3,"GstAudioEncoder"],[3,"GstAudioFilter"],[3,"GstAudioRingBuffer"],[3,"GstAudioSink"],[3,"GstAudioSrc"],[3,"GstAudioChannelMixerFlags"],[3,"GstAudioConverterFlags"],[3,"GstAudioFlags"],[3,"GstAudioFormatFlags"],[3,"GstAudioPackFlags"],[3,"GstAudioQuantizeFlags"],[3,"GstAudioResamplerFlags"],[3,"GstAudioBaseSinkPrivate"],[3,"GstAudioBaseSrcPrivate"],[3,"GstAudioCdSrcPrivate"],[3,"GstAudioChannelMixer"],[3,"GstAudioConverter"],[3,"GstAudioDecoderPrivate"],[3,"GstAudioEncoderPrivate"],[3,"GstAudioQuantize"],[3,"GstAudioResampler"],[3,"GstStreamVolume"]]};
searchIndex["gstreamer_base"] = {"doc":"","items":[[8,"Cast","gstreamer_base","Upcasting and downcasting support.",null,null],[11,"upcast","","Upcasts an object to a superclass or interface `T`.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"downcast","","Tries to downcast to a subclass or interface implementor `T`.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"is","","Returns `true` if the object is an instance of (can be cast to) `T`.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"dynamic_cast","","Tries to cast to an object of type `T`. This handles upcasting, downcasting and casting between interface and interface implementors. All checks are performed at runtime, while `downcast` and `upcast` will do many checks at compile-time already.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[3,"Continue","","Continue calling the closure in the future iterations or drop it.",null,null],[12,"0","","",1,null],[3,"Error","","A generic error capable of representing various error domains (types).",null,null],[8,"IsA","","Declares the \"is a\" relationship.",null,null],[8,"StaticType","","Types that are supported by GLib dynamic typing.",null,null],[10,"static_type","","Returns the type identifier of `Self`.",2,{"inputs":[],"output":{"name":"type"}}],[8,"ToValue","","Converts to `Value`.",null,null],[10,"to_value","","Returns a `Value` clone of `self`.",3,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[10,"to_value_type","","Returns the type identifer of `self`.",3,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[4,"Type","","A GLib or GLib-based library type",null,null],[13,"Invalid","","An invalid `Type` used as error return value in some functions",4,null],[13,"Unit","","The fundamental type corresponding to the unit type `()`",4,null],[13,"I8","","The fundamental type corresponding to `i8`",4,null],[13,"U8","","The fundamental type corresponding to `u8`",4,null],[13,"Bool","","The fundamental type corresponding to `bool`",4,null],[13,"I32","","The fundamental type corresponding to `i32`",4,null],[13,"U32","","The fundamental type corresponding to `u32`",4,null],[13,"ILong","","The fundamental type corresponding to C `long`",4,null],[13,"ULong","","The fundamental type corresponding to C `unsigned long`",4,null],[13,"I64","","The fundamental type corresponding to `i64`",4,null],[13,"U64","","The fundamental type corresponding to `u64`",4,null],[13,"F32","","The fundamental type corresponding to `f32`",4,null],[13,"F64","","The fundamental type corresponding to `f64`",4,null],[13,"String","","The fundamental type corresponding to `String`",4,null],[13,"Pointer","","The fundamental type corresponding to a pointer",4,null],[13,"Variant","","The fundamental type of GVariant",4,null],[13,"BaseInterface","","The fundamental type from which all interfaces are derived",4,null],[13,"BaseEnum","","The fundamental type from which all enumeration types are derived",4,null],[13,"BaseFlags","","The fundamental type from which all flags types are derived",4,null],[13,"BaseBoxed","","The fundamental type from which all boxed types are derived",4,null],[13,"BaseParamSpec","","The fundamental type from which all `GParamSpec` types are derived",4,null],[13,"BaseObject","","The fundamental type from which all objects are derived",4,null],[13,"Other","","A non-fundamental type identified by value of type `usize`",4,null],[3,"TypedValue","","A statically typed `Value`.",null,null],[3,"Value","","A generic value capable of carrying various types.",null,null],[3,"Adapter","","This class is for elements that receive buffers in an undesired size. While for example raw video contains one image per buffer, the same is not true for a lot of other formats, especially those that come directly from a file. So if you have undefined buffer sizes and require a specific size, this object is for you.",null,null],[3,"BaseSink","","`BaseSink` is the base class for sink elements in GStreamer, such as xvimagesink or filesink. It is a layer on top of `gst::Element` that provides a simplified interface to plugin writers. `BaseSink` handles many details for you, for example: preroll, clock synchronization, state changes, activation in push or pull mode, and queries.",null,null],[3,"BaseSrc","","This is a generic base class for source elements. The following types of sources are supported:",null,null],[3,"BaseTransform","","This base class is for filter elements that process data. Elements that are suitable for implementation using `BaseTransform` are ones where the size and caps of the output is known entirely from the input caps and buffer sizes. These include elements that directly transform one buffer into another, modify the contents of a buffer in-place, as well as elements that collate multiple input buffers into one output buffer, or that expand one input buffer into multiple output buffers. See below for more concrete use cases.",null,null],[3,"PushSrc","","This class is mostly useful for elements that cannot do random access, or at least very slowly. The source usually prefers to push out a fixed size buffer.",null,null],[3,"FlowCombiner","","Utility struct to help handling `gst::FlowReturn` combination. Useful for `gst::Element`s that have multiple source pads and need to combine the different `gst::FlowReturn` for those pads.",null,null],[5,"type_find_helper","","",null,{"inputs":[{"name":"p"},{"name":"u64"}],"output":{"generics":["caps"],"name":"option"}}],[5,"type_find_helper_for_buffer","","",null,null],[5,"type_find_helper_for_extension","","",null,{"inputs":[{"name":"q"},{"name":"str"}],"output":{"generics":["caps"],"name":"option"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"adapter"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",5,null],[11,"static_type","","",5,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `Adapter`. Free with `gobject::ObjectExt::unref`.",5,{"inputs":[],"output":{"name":"adapter"}}],[11,"available","","Gets the maximum amount of bytes available, that is it returns the maximum value that can be supplied to `Adapter::map` without that function returning `None`.",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"available_fast","","Gets the maximum number of bytes that are immediately available without requiring any expensive operations (like copying the data into a temporary buffer).",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clear","","Removes all buffers from `self`.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"copy_bytes","","Similar to gst_adapter_copy, but more suitable for language bindings. `size` bytes of data starting at `offset` will be copied out of the buffers contained in `self` and into a new `glib::Bytes` structure which is returned. Depending on the value of the `size` argument an empty `glib::Bytes` structure may be returned. ## `offset` the bytes offset in the adapter to start from ## `size` the number of bytes to copy",5,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"generics":["bytes"],"name":"option"}}],[11,"distance_from_discont","","",5,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"dts_at_discont","","Get the DTS that was on the last buffer with the GST_BUFFER_FLAG_DISCONT flag, or GST_CLOCK_TIME_NONE.",5,{"inputs":[{"name":"self"}],"output":{"name":"clocktime"}}],[11,"flush","","Flushes the first `flush` bytes in the `self`. The caller must ensure that at least this many bytes are available.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"get_buffer","","Returns a `gst::Buffer` containing the first `nbytes` of the `self`, but does not flush them from the adapter. See `Adapter::take_buffer` for details.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["buffer"],"name":"option"}}],[11,"get_buffer_fast","","Returns a `gst::Buffer` containing the first `nbytes` of the `self`, but does not flush them from the adapter. See `Adapter::take_buffer_fast` for details.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["buffer"],"name":"option"}}],[11,"get_buffer_list","","Returns a `gst::BufferList` of buffers containing the first `nbytes` bytes of the `self` but does not flush them from the adapter. See `Adapter::take_buffer_list` for details.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["bufferlist"],"name":"option"}}],[11,"get_list","","Returns a `glib::List` of buffers containing the first `nbytes` bytes of the `self`, but does not flush them from the adapter. See `Adapter::take_list` for details.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["buffer"],"name":"vec"}}],[11,"masked_scan_uint32","","Scan for pattern `pattern` with applied mask `mask` in the adapter data, starting from offset `offset`.",5,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"usize"},{"name":"usize"}],"output":{"name":"isize"}}],[11,"masked_scan_uint32_peek","","Scan for pattern `pattern` with applied mask `mask` in the adapter data, starting from offset `offset`. If a match is found, the value that matched is returned through `value`, otherwise `value` is left untouched.",5,null],[11,"offset_at_discont","","Get the offset that was on the last buffer with the GST_BUFFER_FLAG_DISCONT flag, or GST_BUFFER_OFFSET_NONE.",5,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"prev_dts","","Get the dts that was before the current byte in the adapter. When `distance` is given, the amount of bytes between the dts and the current position is returned.",5,null],[11,"prev_dts_at_offset","","Get the dts that was before the byte at offset `offset` in the adapter. When `distance` is given, the amount of bytes between the dts and the current position is returned.",5,null],[11,"prev_offset","","Get the offset that was before the current byte in the adapter. When `distance` is given, the amount of bytes between the offset and the current position is returned.",5,null],[11,"prev_pts","","Get the pts that was before the current byte in the adapter. When `distance` is given, the amount of bytes between the pts and the current position is returned.",5,null],[11,"prev_pts_at_offset","","Get the pts that was before the byte at offset `offset` in the adapter. When `distance` is given, the amount of bytes between the pts and the current position is returned.",5,null],[11,"pts_at_discont","","Get the PTS that was on the last buffer with the GST_BUFFER_FLAG_DISCONT flag, or GST_CLOCK_TIME_NONE.",5,{"inputs":[{"name":"self"}],"output":{"name":"clocktime"}}],[11,"take_buffer","","Returns a `gst::Buffer` containing the first `nbytes` bytes of the `self`. The returned bytes will be flushed from the adapter. This function is potentially more performant than `Adapter::take` since it can reuse the memory in pushed buffers by subbuffering or merging. This function will always return a buffer with a single memory region.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["buffer"],"name":"option"}}],[11,"take_buffer_fast","","Returns a `gst::Buffer` containing the first `nbytes` of the `self`. The returned bytes will be flushed from the adapter. This function is potentially more performant than `Adapter::take_buffer` since it can reuse the memory in pushed buffers by subbuffering or merging. Unlike `Adapter::take_buffer`, the returned buffer may be composed of multiple non-contiguous `gst::Memory` objects, no copies are made.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["buffer"],"name":"option"}}],[11,"take_buffer_list","","Returns a `gst::BufferList` of buffers containing the first `nbytes` bytes of the `self`. The returned bytes will be flushed from the adapter. When the caller can deal with individual buffers, this function is more performant because no memory should be copied.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["bufferlist"],"name":"option"}}],[11,"take_list","","Returns a `glib::List` of buffers containing the first `nbytes` bytes of the `self`. The returned bytes will be flushed from the adapter. When the caller can deal with individual buffers, this function is more performant because no memory should be copied.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["buffer"],"name":"vec"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"basesink"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",6,null],[11,"static_type","","",6,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"basesrc"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",7,null],[11,"static_type","","",7,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"basetransform"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",8,null],[11,"static_type","","",8,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"pushsrc"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",9,null],[11,"static_type","","",9,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[0,"functions","","",null,null],[5,"type_find_helper","gstreamer_base::functions","",null,{"inputs":[{"name":"p"},{"name":"u64"}],"output":{"generics":["caps"],"name":"option"}}],[5,"type_find_helper_for_buffer","","",null,null],[5,"type_find_helper_for_extension","","",null,{"inputs":[{"name":"q"},{"name":"str"}],"output":{"generics":["caps"],"name":"option"}}],[0,"functions","gstreamer_base","",null,null],[5,"type_find_helper_for_data","gstreamer_base::functions","",null,null],[11,"copy","gstreamer_base","Copies `size` bytes of data starting at `offset` out of the buffers contained in `Adapter` into an array `dest` provided by the caller.",5,null],[11,"push","","Adds the data from `buf` to the data stored inside `self` and takes ownership of the buffer. ## `buf` a `gst::Buffer` to add to queue in the adapter",5,{"inputs":[{"name":"self"},{"name":"buffer"}],"output":null}],[11,"read","","",5,null],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"flowcombiner"}}],[11,"static_type","","",10,{"inputs":[],"output":{"name":"type"}}],[11,"new","","Creates a new `FlowCombiner`, use `FlowCombiner::free` to free it.",10,{"inputs":[],"output":{"name":"flowcombiner"}}],[11,"add_pad","","Adds a new `gst::Pad` to the `FlowCombiner`. ## `pad` the `gst::Pad` that is being added",10,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[11,"clear","","Removes all pads from a `FlowCombiner` and resets it to its initial state.",10,{"inputs":[{"name":"self"}],"output":null}],[11,"remove_pad","","Removes a `gst::Pad` from the `FlowCombiner`. ## `pad` the `gst::Pad` to remove",10,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[11,"reset","","Reset flow combiner and all pads to their initial state without removing pads.",10,{"inputs":[{"name":"self"}],"output":null}],[11,"update_flow","","Computes the combined flow return for the pads in it.",10,{"inputs":[{"name":"self"},{"name":"flowreturn"}],"output":{"name":"flowreturn"}}],[11,"update_pad_flow","","Sets the provided pad's last flow return to provided value and computes the combined flow return for the pads in it.",10,{"inputs":[{"name":"self"},{"name":"p"},{"name":"flowreturn"}],"output":{"name":"flowreturn"}}],[11,"default","","",10,{"inputs":[],"output":{"name":"self"}}],[0,"prelude","","",null,null],[8,"BaseSinkExt","gstreamer_base::prelude","Trait containing all `BaseSink` methods.",null,null],[10,"get_blocksize","","Get the number of bytes that the sink will pull when it is operating in pull mode.",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"get_drop_out_of_segment","","Checks if `self` is currently configured to drop buffers which are outside the current segment",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_last_sample","","Get the last sample that arrived in the sink and was used for preroll or for rendering. This property can be used to generate thumbnails.",11,{"inputs":[{"name":"self"}],"output":{"generics":["sample"],"name":"option"}}],[10,"get_latency","","Get the currently configured latency.",11,{"inputs":[{"name":"self"}],"output":{"name":"clocktime"}}],[10,"get_max_bitrate","","Get the maximum amount of bits per second that the sink will render.",11,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"get_max_lateness","","Gets the max lateness value. See `BaseSinkExt::set_max_lateness` for more details.",11,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"get_render_delay","","Get the render delay of `self`. see `BaseSinkExt::set_render_delay` for more information about the render delay.",11,{"inputs":[{"name":"self"}],"output":{"name":"clocktime"}}],[10,"get_sync","","Checks if `self` is currently configured to synchronize against the clock.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_throttle_time","","Get the time that will be inserted between frames to control the maximum buffers per second.",11,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"get_ts_offset","","Get the synchronisation offset of `self`.",11,{"inputs":[{"name":"self"}],"output":{"name":"clocktimediff"}}],[10,"is_async_enabled","","Checks if `self` is currently configured to perform asynchronous state changes to PAUSED.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_last_sample_enabled","","Checks if `self` is currently configured to store the last received sample in the last-sample property.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_qos_enabled","","Checks if `self` is currently configured to send Quality-of-Service events upstream.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"query_latency","","Query the sink for the latency parameters. The latency will be queried from the upstream elements. `live` will be `true` if `self` is configured to synchronize against the clock. `upstream_live` will be `true` if an upstream element is live.",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"set_async_enabled","","Configures `self` to perform all state changes asynchronously. When async is disabled, the sink will immediately go to PAUSED instead of waiting for a preroll buffer. This feature is useful if the sink does not synchronize against the clock or when it is dealing with sparse streams. ## `enabled` the new async value.",11,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_blocksize","","Set the number of bytes that the sink will pull when it is operating in pull mode. ## `blocksize` the blocksize in bytes",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"set_drop_out_of_segment","","Configure `self` to drop buffers which are outside the current segment",11,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_last_sample_enabled","","Configures `self` to store the last received sample in the last-sample property. ## `enabled` the new enable-last-sample value.",11,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_max_bitrate","","Set the maximum amount of bits per second that the sink will render. ## `max_bitrate` the max_bitrate in bits per second",11,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[10,"set_max_lateness","","Sets the new max lateness value to `max_lateness`. This value is used to decide if a buffer should be dropped or not based on the buffer timestamp and the current clock time. A value of -1 means an unlimited time. ## `max_lateness` the new max lateness value.",11,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[10,"set_qos_enabled","","Configures `self` to send Quality-of-Service events upstream. ## `enabled` the new qos value.",11,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_render_delay","","Set the render delay in `self` to `delay`. The render delay is the time between actual rendering of a buffer and its synchronisation time. Some devices might delay media rendering which can be compensated for with this function.",11,{"inputs":[{"name":"self"},{"name":"clocktime"}],"output":null}],[10,"set_sync","","Configures `self` to synchronize on the clock or not. When `sync` is `false`, incoming samples will be played as fast as possible. If `sync` is `true`, the timestamps of the incoming buffers will be used to schedule the exact render time of its contents. ## `sync` the new sync value.",11,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_throttle_time","","Set the time that will be inserted between rendered buffers. This can be used to control the maximum buffers per second that the sink will render. ## `throttle` the throttle time in nanoseconds",11,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[10,"set_ts_offset","","Adjust the synchronisation of `self` with `offset`. A negative value will render buffers earlier than their timestamp. A positive value will delay rendering. This function can be used to fix playback of badly timestamped buffers. ## `offset` the new offset",11,{"inputs":[{"name":"self"},{"name":"clocktimediff"}],"output":null}],[10,"wait","","This function will wait for preroll to complete and will then block until `time` is reached. It is usually called by subclasses that use their own internal synchronisation but want to let some synchronization (like EOS) be handled by the base class.",11,null],[10,"wait_clock","","This function will block until `time` is reached. It is usually called by subclasses that use their own internal synchronisation.",11,null],[10,"wait_preroll","","If the `BaseSinkClass.render`() method performs its own synchronisation against the clock it must unblock when going from PLAYING to the PAUSED state and call this method before continuing to render the remaining data.",11,{"inputs":[{"name":"self"}],"output":{"name":"flowreturn"}}],[10,"get_property_async","","If set to `true`, the basesink will perform asynchronous state changes. When set to `false`, the sink will not signal the parent when it prerolls. Use this option when dealing with sparse streams or when synchronisation is not required.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_async","","If set to `true`, the basesink will perform asynchronous state changes. When set to `false`, the sink will not signal the parent when it prerolls. Use this option when dealing with sparse streams or when synchronisation is not required.",11,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_enable_last_sample","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_enable_last_sample","","",11,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_qos","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_qos","","",11,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_property_async_notify","","",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_blocksize_notify","","",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_enable_last_sample_notify","","",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_last_sample_notify","","",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_max_bitrate_notify","","",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_max_lateness_notify","","",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_qos_notify","","",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_render_delay_notify","","",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_sync_notify","","",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_throttle_time_notify","","",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_ts_offset_notify","","",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"BaseSrcExt","","Trait containing all `BaseSrc` methods.",null,null],[10,"get_blocksize","","Get the number of bytes that `self` will push out with each buffer.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"get_do_timestamp","","Query if `self` timestamps outgoing buffers based on the current running_time.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_async","","Get the current async behaviour of `self`. See also `BaseSrcExt::set_async`.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_live","","Check if an element is in live mode.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"new_seamless_segment","","Prepare a new seamless segment for emission downstream. This function must only be called by derived sub-classes, and only from the `create` function, as the stream-lock needs to be held.",12,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"i64"},{"name":"i64"}],"output":{"name":"bool"}}],[10,"query_latency","","Query the source for the latency parameters. `live` will be `true` when `self` is configured as a live source. `min_latency` and `max_latency` will be set to the difference between the running time and the timestamp of the first buffer.",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"set_async","","Configure async behaviour in `self`, no state change will block. The open, close, start, stop, play and pause virtual methods will be executed in a different thread and are thus allowed to perform blocking operations. Any blocking operation should be unblocked with the unlock vmethod. ## `async` new async mode",12,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_automatic_eos","","If `automatic_eos` is `true`, `self` will automatically go EOS if a buffer after the total size is returned. By default this is `true` but sources that can't return an authoritative size and only know that they're EOS when trying to read more should set this to `false`. ## `automatic_eos` automatic eos",12,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_blocksize","","Set the number of bytes that `self` will push out with each buffer. When `blocksize` is set to -1, a default length will be used. ## `blocksize` the new blocksize in bytes",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"set_caps","","Set new caps on the basesrc source pad. ## `caps` a `gst::Caps`",12,{"inputs":[{"name":"self"},{"name":"caps"}],"output":{"name":"bool"}}],[10,"set_do_timestamp","","Configure `self` to automatically timestamp outgoing buffers based on the current running_time of the pipeline. This property is mostly useful for live sources. ## `timestamp` enable or disable timestamping",12,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_dynamic_size","","If not `dynamic`, size is only updated when needed, such as when trying to read past current tracked size. Otherwise, size is checked for upon each read. ## `dynamic` new dynamic size mode",12,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_format","","Sets the default format of the source. This will be the format used for sending SEGMENT events and for performing seeks.",12,{"inputs":[{"name":"self"},{"name":"format"}],"output":null}],[10,"set_live","","If the element listens to a live source, `live` should be set to `true`.",12,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"start_complete","","Complete an asynchronous start operation. When the subclass overrides the start method, it should call `BaseSrcExt::start_complete` when the start operation completes either from the same thread or from an asynchronous helper thread. ## `ret` a `gst::FlowReturn`",12,{"inputs":[{"name":"self"},{"name":"flowreturn"}],"output":null}],[10,"start_wait","","Wait until the start operation completes.",12,{"inputs":[{"name":"self"}],"output":{"name":"flowreturn"}}],[10,"wait_playing","","If the `BaseSrcClass.create`() method performs its own synchronisation against the clock it must unblock when going from PLAYING to the PAUSED state and call this method before continuing to produce the remaining data.",12,{"inputs":[{"name":"self"}],"output":{"name":"flowreturn"}}],[10,"get_property_num_buffers","","",12,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_num_buffers","","",12,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_typefind","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_typefind","","",12,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_property_blocksize_notify","","",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_do_timestamp_notify","","",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_num_buffers_notify","","",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_typefind_notify","","",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"BaseTransformExt","","Trait containing all `BaseTransform` methods.",null,null],[10,"is_in_place","","See if `self` is configured as a in_place transform.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_passthrough","","See if `self` is configured as a passthrough transform.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_qos_enabled","","Queries if the transform will handle QoS.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"reconfigure_sink","","Instructs `self` to request renegotiation upstream. This function is typically called after properties on the transform were set that influence the input format.",13,{"inputs":[{"name":"self"}],"output":null}],[10,"reconfigure_src","","Instructs `self` to renegotiate a new downstream transform on the next buffer. This function is typically called after properties on the transform were set that influence the output format.",13,{"inputs":[{"name":"self"}],"output":null}],[10,"set_gap_aware","","If `gap_aware` is `false` (the default), output buffers will have the `gst::BufferFlags::Gap` flag unset.",13,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_in_place","","Determines whether a non-writable buffer will be copied before passing to the transform_ip function.",13,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_passthrough","","Set passthrough mode for this filter by default. This is mostly useful for filters that do not care about negotiation.",13,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_prefer_passthrough","","If `prefer_passthrough` is `true` (the default), `self` will check and prefer passthrough caps from the list of caps returned by the transform_caps vmethod.",13,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_qos_enabled","","Enable or disable QoS handling in the transform.",13,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"update_qos","","Set the QoS parameters in the transform. This function is called internally when a QOS event is received but subclasses can provide custom information when needed.",13,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"clocktimediff"},{"name":"clocktime"}],"output":null}],[10,"update_src_caps","","Updates the srcpad caps and send the caps downstream. This function can be used by subclasses when they have already negotiated their caps but found a change in them (or computed new informations). This way, they can notify downstream about that change without loosing any buffer. ## `updated_caps` An updated version of the srcpad caps to be pushed downstream",13,{"inputs":[{"name":"self"},{"name":"caps"}],"output":{"name":"bool"}}],[10,"get_property_qos","","",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_qos","","",13,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_property_qos_notify","","",13,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"BaseSinkExt","gstreamer_base","Trait containing all `BaseSink` methods.",null,null],[10,"get_blocksize","","Get the number of bytes that the sink will pull when it is operating in pull mode.",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"get_drop_out_of_segment","","Checks if `self` is currently configured to drop buffers which are outside the current segment",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_last_sample","","Get the last sample that arrived in the sink and was used for preroll or for rendering. This property can be used to generate thumbnails.",11,{"inputs":[{"name":"self"}],"output":{"generics":["sample"],"name":"option"}}],[10,"get_latency","","Get the currently configured latency.",11,{"inputs":[{"name":"self"}],"output":{"name":"clocktime"}}],[10,"get_max_bitrate","","Get the maximum amount of bits per second that the sink will render.",11,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"get_max_lateness","","Gets the max lateness value. See `BaseSinkExt::set_max_lateness` for more details.",11,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"get_render_delay","","Get the render delay of `self`. see `BaseSinkExt::set_render_delay` for more information about the render delay.",11,{"inputs":[{"name":"self"}],"output":{"name":"clocktime"}}],[10,"get_sync","","Checks if `self` is currently configured to synchronize against the clock.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_throttle_time","","Get the time that will be inserted between frames to control the maximum buffers per second.",11,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"get_ts_offset","","Get the synchronisation offset of `self`.",11,{"inputs":[{"name":"self"}],"output":{"name":"clocktimediff"}}],[10,"is_async_enabled","","Checks if `self` is currently configured to perform asynchronous state changes to PAUSED.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_last_sample_enabled","","Checks if `self` is currently configured to store the last received sample in the last-sample property.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_qos_enabled","","Checks if `self` is currently configured to send Quality-of-Service events upstream.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"query_latency","","Query the sink for the latency parameters. The latency will be queried from the upstream elements. `live` will be `true` if `self` is configured to synchronize against the clock. `upstream_live` will be `true` if an upstream element is live.",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"set_async_enabled","","Configures `self` to perform all state changes asynchronously. When async is disabled, the sink will immediately go to PAUSED instead of waiting for a preroll buffer. This feature is useful if the sink does not synchronize against the clock or when it is dealing with sparse streams. ## `enabled` the new async value.",11,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_blocksize","","Set the number of bytes that the sink will pull when it is operating in pull mode. ## `blocksize` the blocksize in bytes",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"set_drop_out_of_segment","","Configure `self` to drop buffers which are outside the current segment",11,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_last_sample_enabled","","Configures `self` to store the last received sample in the last-sample property. ## `enabled` the new enable-last-sample value.",11,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_max_bitrate","","Set the maximum amount of bits per second that the sink will render. ## `max_bitrate` the max_bitrate in bits per second",11,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[10,"set_max_lateness","","Sets the new max lateness value to `max_lateness`. This value is used to decide if a buffer should be dropped or not based on the buffer timestamp and the current clock time. A value of -1 means an unlimited time. ## `max_lateness` the new max lateness value.",11,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[10,"set_qos_enabled","","Configures `self` to send Quality-of-Service events upstream. ## `enabled` the new qos value.",11,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_render_delay","","Set the render delay in `self` to `delay`. The render delay is the time between actual rendering of a buffer and its synchronisation time. Some devices might delay media rendering which can be compensated for with this function.",11,{"inputs":[{"name":"self"},{"name":"clocktime"}],"output":null}],[10,"set_sync","","Configures `self` to synchronize on the clock or not. When `sync` is `false`, incoming samples will be played as fast as possible. If `sync` is `true`, the timestamps of the incoming buffers will be used to schedule the exact render time of its contents. ## `sync` the new sync value.",11,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_throttle_time","","Set the time that will be inserted between rendered buffers. This can be used to control the maximum buffers per second that the sink will render. ## `throttle` the throttle time in nanoseconds",11,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[10,"set_ts_offset","","Adjust the synchronisation of `self` with `offset`. A negative value will render buffers earlier than their timestamp. A positive value will delay rendering. This function can be used to fix playback of badly timestamped buffers. ## `offset` the new offset",11,{"inputs":[{"name":"self"},{"name":"clocktimediff"}],"output":null}],[10,"wait","","This function will wait for preroll to complete and will then block until `time` is reached. It is usually called by subclasses that use their own internal synchronisation but want to let some synchronization (like EOS) be handled by the base class.",11,null],[10,"wait_clock","","This function will block until `time` is reached. It is usually called by subclasses that use their own internal synchronisation.",11,null],[10,"wait_preroll","","If the `BaseSinkClass.render`() method performs its own synchronisation against the clock it must unblock when going from PLAYING to the PAUSED state and call this method before continuing to render the remaining data.",11,{"inputs":[{"name":"self"}],"output":{"name":"flowreturn"}}],[10,"get_property_async","","If set to `true`, the basesink will perform asynchronous state changes. When set to `false`, the sink will not signal the parent when it prerolls. Use this option when dealing with sparse streams or when synchronisation is not required.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_async","","If set to `true`, the basesink will perform asynchronous state changes. When set to `false`, the sink will not signal the parent when it prerolls. Use this option when dealing with sparse streams or when synchronisation is not required.",11,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_enable_last_sample","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_enable_last_sample","","",11,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_qos","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_qos","","",11,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_property_async_notify","","",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_blocksize_notify","","",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_enable_last_sample_notify","","",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_last_sample_notify","","",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_max_bitrate_notify","","",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_max_lateness_notify","","",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_qos_notify","","",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_render_delay_notify","","",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_sync_notify","","",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_throttle_time_notify","","",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_ts_offset_notify","","",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"BaseSrcExt","","Trait containing all `BaseSrc` methods.",null,null],[10,"get_blocksize","","Get the number of bytes that `self` will push out with each buffer.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"get_do_timestamp","","Query if `self` timestamps outgoing buffers based on the current running_time.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_async","","Get the current async behaviour of `self`. See also `BaseSrcExt::set_async`.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_live","","Check if an element is in live mode.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"new_seamless_segment","","Prepare a new seamless segment for emission downstream. This function must only be called by derived sub-classes, and only from the `create` function, as the stream-lock needs to be held.",12,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"i64"},{"name":"i64"}],"output":{"name":"bool"}}],[10,"query_latency","","Query the source for the latency parameters. `live` will be `true` when `self` is configured as a live source. `min_latency` and `max_latency` will be set to the difference between the running time and the timestamp of the first buffer.",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"set_async","","Configure async behaviour in `self`, no state change will block. The open, close, start, stop, play and pause virtual methods will be executed in a different thread and are thus allowed to perform blocking operations. Any blocking operation should be unblocked with the unlock vmethod. ## `async` new async mode",12,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_automatic_eos","","If `automatic_eos` is `true`, `self` will automatically go EOS if a buffer after the total size is returned. By default this is `true` but sources that can't return an authoritative size and only know that they're EOS when trying to read more should set this to `false`. ## `automatic_eos` automatic eos",12,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_blocksize","","Set the number of bytes that `self` will push out with each buffer. When `blocksize` is set to -1, a default length will be used. ## `blocksize` the new blocksize in bytes",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"set_caps","","Set new caps on the basesrc source pad. ## `caps` a `gst::Caps`",12,{"inputs":[{"name":"self"},{"name":"caps"}],"output":{"name":"bool"}}],[10,"set_do_timestamp","","Configure `self` to automatically timestamp outgoing buffers based on the current running_time of the pipeline. This property is mostly useful for live sources. ## `timestamp` enable or disable timestamping",12,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_dynamic_size","","If not `dynamic`, size is only updated when needed, such as when trying to read past current tracked size. Otherwise, size is checked for upon each read. ## `dynamic` new dynamic size mode",12,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_format","","Sets the default format of the source. This will be the format used for sending SEGMENT events and for performing seeks.",12,{"inputs":[{"name":"self"},{"name":"format"}],"output":null}],[10,"set_live","","If the element listens to a live source, `live` should be set to `true`.",12,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"start_complete","","Complete an asynchronous start operation. When the subclass overrides the start method, it should call `BaseSrcExt::start_complete` when the start operation completes either from the same thread or from an asynchronous helper thread. ## `ret` a `gst::FlowReturn`",12,{"inputs":[{"name":"self"},{"name":"flowreturn"}],"output":null}],[10,"start_wait","","Wait until the start operation completes.",12,{"inputs":[{"name":"self"}],"output":{"name":"flowreturn"}}],[10,"wait_playing","","If the `BaseSrcClass.create`() method performs its own synchronisation against the clock it must unblock when going from PLAYING to the PAUSED state and call this method before continuing to produce the remaining data.",12,{"inputs":[{"name":"self"}],"output":{"name":"flowreturn"}}],[10,"get_property_num_buffers","","",12,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_num_buffers","","",12,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_typefind","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_typefind","","",12,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_property_blocksize_notify","","",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_do_timestamp_notify","","",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_num_buffers_notify","","",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_typefind_notify","","",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"BaseTransformExt","","Trait containing all `BaseTransform` methods.",null,null],[10,"is_in_place","","See if `self` is configured as a in_place transform.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_passthrough","","See if `self` is configured as a passthrough transform.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_qos_enabled","","Queries if the transform will handle QoS.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"reconfigure_sink","","Instructs `self` to request renegotiation upstream. This function is typically called after properties on the transform were set that influence the input format.",13,{"inputs":[{"name":"self"}],"output":null}],[10,"reconfigure_src","","Instructs `self` to renegotiate a new downstream transform on the next buffer. This function is typically called after properties on the transform were set that influence the output format.",13,{"inputs":[{"name":"self"}],"output":null}],[10,"set_gap_aware","","If `gap_aware` is `false` (the default), output buffers will have the `gst::BufferFlags::Gap` flag unset.",13,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_in_place","","Determines whether a non-writable buffer will be copied before passing to the transform_ip function.",13,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_passthrough","","Set passthrough mode for this filter by default. This is mostly useful for filters that do not care about negotiation.",13,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_prefer_passthrough","","If `prefer_passthrough` is `true` (the default), `self` will check and prefer passthrough caps from the list of caps returned by the transform_caps vmethod.",13,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_qos_enabled","","Enable or disable QoS handling in the transform.",13,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"update_qos","","Set the QoS parameters in the transform. This function is called internally when a QOS event is received but subclasses can provide custom information when needed.",13,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"clocktimediff"},{"name":"clocktime"}],"output":null}],[10,"update_src_caps","","Updates the srcpad caps and send the caps downstream. This function can be used by subclasses when they have already negotiated their caps but found a change in them (or computed new informations). This way, they can notify downstream about that change without loosing any buffer. ## `updated_caps` An updated version of the srcpad caps to be pushed downstream",13,{"inputs":[{"name":"self"},{"name":"caps"}],"output":{"name":"bool"}}],[10,"get_property_qos","","",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_qos","","",13,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_property_qos_notify","","",13,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"can_compare","","",14,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"compare","","",14,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"valueorder"}}],[11,"can_intersect","","",14,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"intersect","","",14,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"generics":["value"],"name":"option"}}],[11,"can_subtract","","",14,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"subtract","","",14,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"generics":["value"],"name":"option"}}],[11,"can_union","","",14,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"union","","",14,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"generics":["value"],"name":"option"}}],[11,"fixate","","",14,{"inputs":[{"name":"self"}],"output":{"generics":["value"],"name":"option"}}],[11,"is_fixed","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_subset","","",14,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"serialize","","",14,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"deserialize","","",14,{"inputs":[{"name":"t"}],"output":{"generics":["value"],"name":"option"}}],[11,"from_glib_none","","",14,null],[11,"from_glib_none","","",14,null],[11,"from_glib","","",4,{"inputs":[{"name":"usize"}],"output":{"name":"type"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"typedvalue"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"downcast","","Tries to downcast to a `TypedValue`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["typedvalue","value"],"name":"result"}}],[11,"get","","Tries to get a value of type `T`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is","","Returns `true` if the type of the value corresponds to `T`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"type_","","Returns the type of the value.",14,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"type_transformable","","Returns whether `Value`s of type `src` can be transformed to type `dst`.",14,{"inputs":[{"name":"type"},{"name":"type"}],"output":{"name":"bool"}}],[11,"try_into_send_value","","",14,{"inputs":[{"name":"self"}],"output":{"generics":["sendvalue","value"],"name":"result"}}],[11,"deref","","",15,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"description","","",16,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"to_glib_none_mut","","",15,{"inputs":[{"name":"self"}],"output":{"generics":["typedvalue"],"name":"stashmut"}}],[11,"to_glib_none_mut","","",14,{"inputs":[{"name":"self"}],"output":{"generics":["value"],"name":"stashmut"}}],[11,"from_glib_full","","",14,null],[11,"from_glib_none_as_vec","","",14,null],[11,"from_glib_container_as_vec","","",14,null],[11,"from_glib_full_as_vec","","",14,null],[11,"from_glib_none_as_vec","","",14,null],[11,"from_glib_container_as_vec","","",14,null],[11,"from_glib_full_as_vec","","",14,null],[11,"to_glib_none","","",14,{"inputs":[{"name":"self"}],"output":{"generics":["value"],"name":"stash"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from","","",15,{"inputs":[{"generics":["str"],"name":"option"}],"output":{"generics":["string"],"name":"typedvalue"}}],[11,"from","","",14,{"inputs":[{"name":"typedvalue"}],"output":{"name":"value"}}],[11,"from","","",15,{"inputs":[{"name":"t"}],"output":{"name":"typedvalue"}}],[11,"from","","",15,{"inputs":[{"generics":["string"],"name":"typedvalue"}],"output":{"generics":["str"],"name":"typedvalue"}}],[11,"from","","",14,{"inputs":[{"name":"t"}],"output":{"name":"value"}}],[11,"from","","",15,{"inputs":[{"name":"option"}],"output":{"name":"typedvalue"}}],[11,"from","","",14,{"inputs":[{"name":"option"}],"output":{"name":"value"}}],[11,"from","","",14,{"inputs":[{"name":"sendvalue"}],"output":{"name":"value"}}],[11,"from","","",15,{"inputs":[{"generics":["str"],"name":"typedvalue"}],"output":{"generics":["string"],"name":"typedvalue"}}],[11,"from","","",15,{"inputs":[{"name":"str"}],"output":{"generics":["string"],"name":"typedvalue"}}],[11,"static_type","","",16,{"inputs":[],"output":{"name":"type"}}],[11,"from_glib_none_num_as_vec","","",14,null],[11,"from_glib_container_num_as_vec","","",14,null],[11,"from_glib_full_num_as_vec","","",14,null],[11,"from_glib_none_num_as_vec","","",4,null],[11,"from_glib_container_num_as_vec","","",4,null],[11,"from_glib_full_num_as_vec","","",4,null],[11,"from_glib_none_num_as_vec","","",4,null],[11,"from_glib_container_num_as_vec","","",4,null],[11,"from_glib_full_num_as_vec","","",4,null],[11,"from_glib_none_num_as_vec","","",14,null],[11,"from_glib_container_num_as_vec","","",14,null],[11,"from_glib_full_num_as_vec","","",14,null],[11,"drop","","",14,null],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"to_glib_none_from_slice","","",4,null],[11,"to_glib_container_from_slice","","",4,null],[11,"to_glib_full_from_slice","","",4,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"to_glib","","",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_glib","","",1,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"uninitialized","","",14,{"inputs":[],"output":{"name":"value"}}],[11,"to_value","","",14,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"to_value_type","","",14,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"new","","Creates an error with supplied error enum variant and message.",16,{"inputs":[{"name":"t"},{"name":"str"}],"output":{"name":"error"}}],[11,"is","","Checks if the error domain matches `T`.",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"kind","","Tries to convert to a specific error enum.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"wrap","","",16,null],[11,"name","","",4,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"is_a","","",4,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"parent","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["type"],"name":"option"}}],[11,"children","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["type"],"name":"vec"}}],[11,"interfaces","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["type"],"name":"vec"}}],[11,"interface_prerequisites","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["type"],"name":"vec"}}],[11,"from_name","","",4,{"inputs":[{"name":"p"}],"output":{"generics":["type"],"name":"option"}}],[11,"get","","Returns the value.",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_some","","Returns the value.",15,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set","","Sets the value.",15,null],[11,"set_none","","Sets the value to `None`.",15,null],[11,"set_some","","Sets the value.",15,null],[11,"into_send_value","","",15,{"inputs":[{"name":"self"}],"output":{"name":"sendvalue"}}]],"paths":[[8,"Cast"],[3,"Continue"],[8,"StaticType"],[8,"ToValue"],[4,"Type"],[3,"Adapter"],[3,"BaseSink"],[3,"BaseSrc"],[3,"BaseTransform"],[3,"PushSrc"],[3,"FlowCombiner"],[8,"BaseSinkExt"],[8,"BaseSrcExt"],[8,"BaseTransformExt"],[3,"Value"],[3,"TypedValue"],[3,"Error"]]};
searchIndex["gstreamer_base_sys"] = {"doc":"","items":[[3,"GstBaseParseFrameFlags","gstreamer_base_sys","",null,null],[3,"GstBaseSrcFlags","","",null,null],[3,"GstCollectPadsStateFlags","","",null,null],[3,"GstAdapterClass","","",null,null],[3,"GstBaseParseClass","","",null,null],[12,"parent_class","","",0,null],[12,"start","","",0,null],[12,"stop","","",0,null],[12,"set_sink_caps","","",0,null],[12,"handle_frame","","",0,null],[12,"pre_push_frame","","",0,null],[12,"convert","","",0,null],[12,"sink_event","","",0,null],[12,"src_event","","",0,null],[12,"get_sink_caps","","",0,null],[12,"detect","","",0,null],[12,"sink_query","","",0,null],[12,"src_query","","",0,null],[12,"_gst_reserved","","",0,null],[3,"GstBaseParseFrame","","",null,null],[12,"buffer","","",1,null],[12,"out_buffer","","",1,null],[12,"flags","","",1,null],[12,"offset","","",1,null],[12,"overhead","","",1,null],[12,"size","","",1,null],[12,"_gst_reserved_i","","",1,null],[12,"_gst_reserved_p","","",1,null],[12,"_private_flags","","",1,null],[3,"GstBaseParsePrivate","","",null,null],[3,"GstBaseSinkClass","","",null,null],[12,"parent_class","","",2,null],[12,"get_caps","","",2,null],[12,"set_caps","","",2,null],[12,"fixate","","",2,null],[12,"activate_pull","","",2,null],[12,"get_times","","",2,null],[12,"propose_allocation","","",2,null],[12,"start","","",2,null],[12,"stop","","",2,null],[12,"unlock","","",2,null],[12,"unlock_stop","","",2,null],[12,"query","","",2,null],[12,"event","","",2,null],[12,"wait_event","","",2,null],[12,"prepare","","",2,null],[12,"prepare_list","","",2,null],[12,"preroll","","",2,null],[12,"render","","",2,null],[12,"render_list","","",2,null],[12,"_gst_reserved","","",2,null],[3,"GstBaseSinkPrivate","","",null,null],[3,"GstBaseSrcClass","","",null,null],[12,"parent_class","","",3,null],[12,"get_caps","","",3,null],[12,"negotiate","","",3,null],[12,"fixate","","",3,null],[12,"set_caps","","",3,null],[12,"decide_allocation","","",3,null],[12,"start","","",3,null],[12,"stop","","",3,null],[12,"get_times","","",3,null],[12,"get_size","","",3,null],[12,"is_seekable","","",3,null],[12,"prepare_seek_segment","","",3,null],[12,"do_seek","","",3,null],[12,"unlock","","",3,null],[12,"unlock_stop","","",3,null],[12,"query","","",3,null],[12,"event","","",3,null],[12,"create","","",3,null],[12,"alloc","","",3,null],[12,"fill","","",3,null],[12,"_gst_reserved","","",3,null],[3,"GstBaseSrcPrivate","","",null,null],[3,"GstBaseTransformClass","","",null,null],[12,"parent_class","","",4,null],[12,"passthrough_on_same_caps","","",4,null],[12,"transform_ip_on_passthrough","","",4,null],[12,"transform_caps","","",4,null],[12,"fixate_caps","","",4,null],[12,"accept_caps","","",4,null],[12,"set_caps","","",4,null],[12,"query","","",4,null],[12,"decide_allocation","","",4,null],[12,"filter_meta","","",4,null],[12,"propose_allocation","","",4,null],[12,"transform_size","","",4,null],[12,"get_unit_size","","",4,null],[12,"start","","",4,null],[12,"stop","","",4,null],[12,"sink_event","","",4,null],[12,"src_event","","",4,null],[12,"prepare_output_buffer","","",4,null],[12,"copy_metadata","","",4,null],[12,"transform_meta","","",4,null],[12,"before_transform","","",4,null],[12,"transform","","",4,null],[12,"transform_ip","","",4,null],[12,"submit_input_buffer","","",4,null],[12,"generate_output","","",4,null],[12,"_gst_reserved","","",4,null],[3,"GstBaseTransformPrivate","","",null,null],[3,"GstBitReader","","",null,null],[12,"data","","",5,null],[12,"size","","",5,null],[12,"byte","","",5,null],[12,"bit","","",5,null],[12,"_gst_reserved","","",5,null],[3,"GstByteReader","","",null,null],[12,"data","","",6,null],[12,"size","","",6,null],[12,"byte","","",6,null],[12,"_gst_reserved","","",6,null],[3,"GstByteWriter","","",null,null],[12,"parent","","",7,null],[12,"alloc_size","","",7,null],[12,"fixed","","",7,null],[12,"owned","","",7,null],[12,"_gst_reserved","","",7,null],[3,"GstCollectData","","",null,null],[12,"collect","","",8,null],[12,"pad","","",8,null],[12,"buffer","","",8,null],[12,"pos","","",8,null],[12,"segment","","",8,null],[12,"state","","",8,null],[12,"priv_","","",8,null],[12,"_gst_reserved","","",8,null],[3,"GstCollectDataPrivate","","",null,null],[3,"GstCollectPadsClass","","",null,null],[12,"parent_class","","",9,null],[12,"_gst_reserved","","",9,null],[3,"GstCollectPadsPrivate","","",null,null],[3,"GstDataQueueClass","","",null,null],[12,"parent_class","","",10,null],[12,"empty","","",10,null],[12,"full","","",10,null],[12,"_gst_reserved","","",10,null],[3,"GstDataQueueItem","","",null,null],[12,"object","","",11,null],[12,"size","","",11,null],[12,"duration","","",11,null],[12,"visible","","",11,null],[12,"destroy","","",11,null],[12,"_gst_reserved","","",11,null],[3,"GstDataQueuePrivate","","",null,null],[3,"GstDataQueueSize","","",null,null],[12,"visible","","",12,null],[12,"bytes","","",12,null],[12,"time","","",12,null],[3,"GstFlowCombiner","","",null,null],[3,"GstPushSrcClass","","",null,null],[12,"parent_class","","",13,null],[12,"create","","",13,null],[12,"alloc","","",13,null],[12,"fill","","",13,null],[12,"_gst_reserved","","",13,null],[3,"GstQueueArray","","",null,null],[3,"GstAdapter","","",null,null],[3,"GstBaseParse","","",null,null],[12,"element","","",14,null],[12,"sinkpad","","",14,null],[12,"srcpad","","",14,null],[12,"flags","","",14,null],[12,"segment","","",14,null],[12,"_gst_reserved","","",14,null],[12,"priv_","","",14,null],[3,"GstBaseSink","","",null,null],[12,"element","","",15,null],[12,"sinkpad","","",15,null],[12,"pad_mode","","",15,null],[12,"offset","","",15,null],[12,"can_activate_pull","","",15,null],[12,"can_activate_push","","",15,null],[12,"preroll_lock","","",15,null],[12,"preroll_cond","","",15,null],[12,"eos","","",15,null],[12,"need_preroll","","",15,null],[12,"have_preroll","","",15,null],[12,"playing_async","","",15,null],[12,"have_newsegment","","",15,null],[12,"segment","","",15,null],[12,"clock_id","","",15,null],[12,"sync","","",15,null],[12,"flushing","","",15,null],[12,"running","","",15,null],[12,"max_lateness","","",15,null],[12,"priv_","","",15,null],[12,"_gst_reserved","","",15,null],[3,"GstBaseSrc","","",null,null],[12,"element","","",16,null],[12,"srcpad","","",16,null],[12,"live_lock","","",16,null],[12,"live_cond","","",16,null],[12,"is_live","","",16,null],[12,"live_running","","",16,null],[12,"blocksize","","",16,null],[12,"can_activate_push","","",16,null],[12,"random_access","","",16,null],[12,"clock_id","","",16,null],[12,"segment","","",16,null],[12,"need_newsegment","","",16,null],[12,"num_buffers","","",16,null],[12,"num_buffers_left","","",16,null],[12,"typefind","","",16,null],[12,"running","","",16,null],[12,"pending_seek","","",16,null],[12,"priv_","","",16,null],[12,"_gst_reserved","","",16,null],[3,"GstBaseTransform","","",null,null],[12,"element","","",17,null],[12,"sinkpad","","",17,null],[12,"srcpad","","",17,null],[12,"have_segment","","",17,null],[12,"segment","","",17,null],[12,"queued_buf","","",17,null],[12,"priv_","","",17,null],[12,"_gst_reserved","","",17,null],[3,"GstCollectPads","","",null,null],[12,"object","","",18,null],[12,"data","","",18,null],[12,"stream_lock","","",18,null],[12,"priv_","","",18,null],[12,"_gst_reserved","","",18,null],[3,"GstDataQueue","","",null,null],[12,"object","","",19,null],[12,"priv_","","",19,null],[12,"_gst_reserved","","",19,null],[3,"GstPushSrc","","",null,null],[12,"parent","","",20,null],[12,"_gst_reserved","","",20,null],[5,"gst_base_parse_frame_get_type","","",null,null],[5,"gst_base_parse_frame_new","","",null,null],[5,"gst_base_parse_frame_copy","","",null,null],[5,"gst_base_parse_frame_free","","",null,null],[5,"gst_base_parse_frame_init","","",null,null],[5,"gst_bit_reader_free","","",null,null],[5,"gst_bit_reader_get_bits_uint16","","",null,null],[5,"gst_bit_reader_get_bits_uint32","","",null,null],[5,"gst_bit_reader_get_bits_uint64","","",null,null],[5,"gst_bit_reader_get_bits_uint8","","",null,null],[5,"gst_bit_reader_get_pos","","",null,null],[5,"gst_bit_reader_get_remaining","","",null,null],[5,"gst_bit_reader_get_size","","",null,null],[5,"gst_bit_reader_init","","",null,null],[5,"gst_bit_reader_peek_bits_uint16","","",null,null],[5,"gst_bit_reader_peek_bits_uint32","","",null,null],[5,"gst_bit_reader_peek_bits_uint64","","",null,null],[5,"gst_bit_reader_peek_bits_uint8","","",null,null],[5,"gst_bit_reader_set_pos","","",null,null],[5,"gst_bit_reader_skip","","",null,null],[5,"gst_bit_reader_skip_to_byte","","",null,null],[5,"gst_bit_reader_new","","",null,null],[5,"gst_byte_reader_dup_data","","",null,null],[5,"gst_byte_reader_dup_string_utf16","","",null,null],[5,"gst_byte_reader_dup_string_utf32","","",null,null],[5,"gst_byte_reader_dup_string_utf8","","",null,null],[5,"gst_byte_reader_free","","",null,null],[5,"gst_byte_reader_get_data","","",null,null],[5,"gst_byte_reader_get_float32_be","","",null,null],[5,"gst_byte_reader_get_float32_le","","",null,null],[5,"gst_byte_reader_get_float64_be","","",null,null],[5,"gst_byte_reader_get_float64_le","","",null,null],[5,"gst_byte_reader_get_int16_be","","",null,null],[5,"gst_byte_reader_get_int16_le","","",null,null],[5,"gst_byte_reader_get_int24_be","","",null,null],[5,"gst_byte_reader_get_int24_le","","",null,null],[5,"gst_byte_reader_get_int32_be","","",null,null],[5,"gst_byte_reader_get_int32_le","","",null,null],[5,"gst_byte_reader_get_int64_be","","",null,null],[5,"gst_byte_reader_get_int64_le","","",null,null],[5,"gst_byte_reader_get_int8","","",null,null],[5,"gst_byte_reader_get_pos","","",null,null],[5,"gst_byte_reader_get_remaining","","",null,null],[5,"gst_byte_reader_get_size","","",null,null],[5,"gst_byte_reader_get_string_utf8","","",null,null],[5,"gst_byte_reader_get_sub_reader","","",null,null],[5,"gst_byte_reader_get_uint16_be","","",null,null],[5,"gst_byte_reader_get_uint16_le","","",null,null],[5,"gst_byte_reader_get_uint24_be","","",null,null],[5,"gst_byte_reader_get_uint24_le","","",null,null],[5,"gst_byte_reader_get_uint32_be","","",null,null],[5,"gst_byte_reader_get_uint32_le","","",null,null],[5,"gst_byte_reader_get_uint64_be","","",null,null],[5,"gst_byte_reader_get_uint64_le","","",null,null],[5,"gst_byte_reader_get_uint8","","",null,null],[5,"gst_byte_reader_init","","",null,null],[5,"gst_byte_reader_masked_scan_uint32","","",null,null],[5,"gst_byte_reader_masked_scan_uint32_peek","","",null,null],[5,"gst_byte_reader_peek_data","","",null,null],[5,"gst_byte_reader_peek_float32_be","","",null,null],[5,"gst_byte_reader_peek_float32_le","","",null,null],[5,"gst_byte_reader_peek_float64_be","","",null,null],[5,"gst_byte_reader_peek_float64_le","","",null,null],[5,"gst_byte_reader_peek_int16_be","","",null,null],[5,"gst_byte_reader_peek_int16_le","","",null,null],[5,"gst_byte_reader_peek_int24_be","","",null,null],[5,"gst_byte_reader_peek_int24_le","","",null,null],[5,"gst_byte_reader_peek_int32_be","","",null,null],[5,"gst_byte_reader_peek_int32_le","","",null,null],[5,"gst_byte_reader_peek_int64_be","","",null,null],[5,"gst_byte_reader_peek_int64_le","","",null,null],[5,"gst_byte_reader_peek_int8","","",null,null],[5,"gst_byte_reader_peek_string_utf8","","",null,null],[5,"gst_byte_reader_peek_sub_reader","","",null,null],[5,"gst_byte_reader_peek_uint16_be","","",null,null],[5,"gst_byte_reader_peek_uint16_le","","",null,null],[5,"gst_byte_reader_peek_uint24_be","","",null,null],[5,"gst_byte_reader_peek_uint24_le","","",null,null],[5,"gst_byte_reader_peek_uint32_be","","",null,null],[5,"gst_byte_reader_peek_uint32_le","","",null,null],[5,"gst_byte_reader_peek_uint64_be","","",null,null],[5,"gst_byte_reader_peek_uint64_le","","",null,null],[5,"gst_byte_reader_peek_uint8","","",null,null],[5,"gst_byte_reader_set_pos","","",null,null],[5,"gst_byte_reader_skip","","",null,null],[5,"gst_byte_reader_skip_string_utf16","","",null,null],[5,"gst_byte_reader_skip_string_utf32","","",null,null],[5,"gst_byte_reader_skip_string_utf8","","",null,null],[5,"gst_byte_reader_new","","",null,null],[5,"gst_byte_writer_ensure_free_space","","",null,null],[5,"gst_byte_writer_fill","","",null,null],[5,"gst_byte_writer_free","","",null,null],[5,"gst_byte_writer_free_and_get_buffer","","",null,null],[5,"gst_byte_writer_free_and_get_data","","",null,null],[5,"gst_byte_writer_get_remaining","","",null,null],[5,"gst_byte_writer_init","","",null,null],[5,"gst_byte_writer_init_with_data","","",null,null],[5,"gst_byte_writer_init_with_size","","",null,null],[5,"gst_byte_writer_put_buffer","","",null,null],[5,"gst_byte_writer_put_data","","",null,null],[5,"gst_byte_writer_put_float32_be","","",null,null],[5,"gst_byte_writer_put_float32_le","","",null,null],[5,"gst_byte_writer_put_float64_be","","",null,null],[5,"gst_byte_writer_put_float64_le","","",null,null],[5,"gst_byte_writer_put_int16_be","","",null,null],[5,"gst_byte_writer_put_int16_le","","",null,null],[5,"gst_byte_writer_put_int24_be","","",null,null],[5,"gst_byte_writer_put_int24_le","","",null,null],[5,"gst_byte_writer_put_int32_be","","",null,null],[5,"gst_byte_writer_put_int32_le","","",null,null],[5,"gst_byte_writer_put_int64_be","","",null,null],[5,"gst_byte_writer_put_int64_le","","",null,null],[5,"gst_byte_writer_put_int8","","",null,null],[5,"gst_byte_writer_put_string_utf16","","",null,null],[5,"gst_byte_writer_put_string_utf32","","",null,null],[5,"gst_byte_writer_put_string_utf8","","",null,null],[5,"gst_byte_writer_put_uint16_be","","",null,null],[5,"gst_byte_writer_put_uint16_le","","",null,null],[5,"gst_byte_writer_put_uint24_be","","",null,null],[5,"gst_byte_writer_put_uint24_le","","",null,null],[5,"gst_byte_writer_put_uint32_be","","",null,null],[5,"gst_byte_writer_put_uint32_le","","",null,null],[5,"gst_byte_writer_put_uint64_be","","",null,null],[5,"gst_byte_writer_put_uint64_le","","",null,null],[5,"gst_byte_writer_put_uint8","","",null,null],[5,"gst_byte_writer_reset","","",null,null],[5,"gst_byte_writer_reset_and_get_buffer","","",null,null],[5,"gst_byte_writer_reset_and_get_data","","",null,null],[5,"gst_byte_writer_new","","",null,null],[5,"gst_byte_writer_new_with_data","","",null,null],[5,"gst_byte_writer_new_with_size","","",null,null],[5,"gst_flow_combiner_get_type","","",null,null],[5,"gst_flow_combiner_new","","",null,null],[5,"gst_flow_combiner_add_pad","","",null,null],[5,"gst_flow_combiner_clear","","",null,null],[5,"gst_flow_combiner_free","","",null,null],[5,"gst_flow_combiner_ref","","",null,null],[5,"gst_flow_combiner_remove_pad","","",null,null],[5,"gst_flow_combiner_reset","","",null,null],[5,"gst_flow_combiner_unref","","",null,null],[5,"gst_flow_combiner_update_flow","","",null,null],[5,"gst_flow_combiner_update_pad_flow","","",null,null],[5,"gst_queue_array_drop_element","","",null,null],[5,"gst_queue_array_drop_struct","","",null,null],[5,"gst_queue_array_find","","",null,null],[5,"gst_queue_array_free","","",null,null],[5,"gst_queue_array_get_length","","",null,null],[5,"gst_queue_array_is_empty","","",null,null],[5,"gst_queue_array_peek_head","","",null,null],[5,"gst_queue_array_peek_head_struct","","",null,null],[5,"gst_queue_array_pop_head","","",null,null],[5,"gst_queue_array_pop_head_struct","","",null,null],[5,"gst_queue_array_push_tail","","",null,null],[5,"gst_queue_array_push_tail_struct","","",null,null],[5,"gst_queue_array_new","","",null,null],[5,"gst_queue_array_new_for_struct","","",null,null],[5,"gst_adapter_get_type","","",null,null],[5,"gst_adapter_new","","",null,null],[5,"gst_adapter_available","","",null,null],[5,"gst_adapter_available_fast","","",null,null],[5,"gst_adapter_clear","","",null,null],[5,"gst_adapter_copy","","",null,null],[5,"gst_adapter_copy_bytes","","",null,null],[5,"gst_adapter_distance_from_discont","","",null,null],[5,"gst_adapter_dts_at_discont","","",null,null],[5,"gst_adapter_flush","","",null,null],[5,"gst_adapter_get_buffer","","",null,null],[5,"gst_adapter_get_buffer_fast","","",null,null],[5,"gst_adapter_get_buffer_list","","",null,null],[5,"gst_adapter_get_list","","",null,null],[5,"gst_adapter_map","","",null,null],[5,"gst_adapter_masked_scan_uint32","","",null,null],[5,"gst_adapter_masked_scan_uint32_peek","","",null,null],[5,"gst_adapter_offset_at_discont","","",null,null],[5,"gst_adapter_prev_dts","","",null,null],[5,"gst_adapter_prev_dts_at_offset","","",null,null],[5,"gst_adapter_prev_offset","","",null,null],[5,"gst_adapter_prev_pts","","",null,null],[5,"gst_adapter_prev_pts_at_offset","","",null,null],[5,"gst_adapter_pts_at_discont","","",null,null],[5,"gst_adapter_push","","",null,null],[5,"gst_adapter_take","","",null,null],[5,"gst_adapter_take_buffer","","",null,null],[5,"gst_adapter_take_buffer_fast","","",null,null],[5,"gst_adapter_take_buffer_list","","",null,null],[5,"gst_adapter_take_list","","",null,null],[5,"gst_adapter_unmap","","",null,null],[5,"gst_base_parse_get_type","","",null,null],[5,"gst_base_parse_add_index_entry","","",null,null],[5,"gst_base_parse_convert_default","","",null,null],[5,"gst_base_parse_drain","","",null,null],[5,"gst_base_parse_finish_frame","","",null,null],[5,"gst_base_parse_merge_tags","","",null,null],[5,"gst_base_parse_push_frame","","",null,null],[5,"gst_base_parse_set_average_bitrate","","",null,null],[5,"gst_base_parse_set_duration","","",null,null],[5,"gst_base_parse_set_frame_rate","","",null,null],[5,"gst_base_parse_set_has_timing_info","","",null,null],[5,"gst_base_parse_set_infer_ts","","",null,null],[5,"gst_base_parse_set_latency","","",null,null],[5,"gst_base_parse_set_min_frame_size","","",null,null],[5,"gst_base_parse_set_passthrough","","",null,null],[5,"gst_base_parse_set_pts_interpolation","","",null,null],[5,"gst_base_parse_set_syncable","","",null,null],[5,"gst_base_parse_set_ts_at_offset","","",null,null],[5,"gst_base_sink_get_type","","",null,null],[5,"gst_base_sink_do_preroll","","",null,null],[5,"gst_base_sink_get_blocksize","","",null,null],[5,"gst_base_sink_get_drop_out_of_segment","","",null,null],[5,"gst_base_sink_get_last_sample","","",null,null],[5,"gst_base_sink_get_latency","","",null,null],[5,"gst_base_sink_get_max_bitrate","","",null,null],[5,"gst_base_sink_get_max_lateness","","",null,null],[5,"gst_base_sink_get_render_delay","","",null,null],[5,"gst_base_sink_get_sync","","",null,null],[5,"gst_base_sink_get_throttle_time","","",null,null],[5,"gst_base_sink_get_ts_offset","","",null,null],[5,"gst_base_sink_is_async_enabled","","",null,null],[5,"gst_base_sink_is_last_sample_enabled","","",null,null],[5,"gst_base_sink_is_qos_enabled","","",null,null],[5,"gst_base_sink_query_latency","","",null,null],[5,"gst_base_sink_set_async_enabled","","",null,null],[5,"gst_base_sink_set_blocksize","","",null,null],[5,"gst_base_sink_set_drop_out_of_segment","","",null,null],[5,"gst_base_sink_set_last_sample_enabled","","",null,null],[5,"gst_base_sink_set_max_bitrate","","",null,null],[5,"gst_base_sink_set_max_lateness","","",null,null],[5,"gst_base_sink_set_qos_enabled","","",null,null],[5,"gst_base_sink_set_render_delay","","",null,null],[5,"gst_base_sink_set_sync","","",null,null],[5,"gst_base_sink_set_throttle_time","","",null,null],[5,"gst_base_sink_set_ts_offset","","",null,null],[5,"gst_base_sink_wait","","",null,null],[5,"gst_base_sink_wait_clock","","",null,null],[5,"gst_base_sink_wait_preroll","","",null,null],[5,"gst_base_src_get_type","","",null,null],[5,"gst_base_src_get_allocator","","",null,null],[5,"gst_base_src_get_blocksize","","",null,null],[5,"gst_base_src_get_buffer_pool","","",null,null],[5,"gst_base_src_get_do_timestamp","","",null,null],[5,"gst_base_src_is_async","","",null,null],[5,"gst_base_src_is_live","","",null,null],[5,"gst_base_src_new_seamless_segment","","",null,null],[5,"gst_base_src_query_latency","","",null,null],[5,"gst_base_src_set_async","","",null,null],[5,"gst_base_src_set_automatic_eos","","",null,null],[5,"gst_base_src_set_blocksize","","",null,null],[5,"gst_base_src_set_caps","","",null,null],[5,"gst_base_src_set_do_timestamp","","",null,null],[5,"gst_base_src_set_dynamic_size","","",null,null],[5,"gst_base_src_set_format","","",null,null],[5,"gst_base_src_set_live","","",null,null],[5,"gst_base_src_start_complete","","",null,null],[5,"gst_base_src_start_wait","","",null,null],[5,"gst_base_src_wait_playing","","",null,null],[5,"gst_base_transform_get_type","","",null,null],[5,"gst_base_transform_get_allocator","","",null,null],[5,"gst_base_transform_get_buffer_pool","","",null,null],[5,"gst_base_transform_is_in_place","","",null,null],[5,"gst_base_transform_is_passthrough","","",null,null],[5,"gst_base_transform_is_qos_enabled","","",null,null],[5,"gst_base_transform_reconfigure_sink","","",null,null],[5,"gst_base_transform_reconfigure_src","","",null,null],[5,"gst_base_transform_set_gap_aware","","",null,null],[5,"gst_base_transform_set_in_place","","",null,null],[5,"gst_base_transform_set_passthrough","","",null,null],[5,"gst_base_transform_set_prefer_passthrough","","",null,null],[5,"gst_base_transform_set_qos_enabled","","",null,null],[5,"gst_base_transform_update_qos","","",null,null],[5,"gst_base_transform_update_src_caps","","",null,null],[5,"gst_collect_pads_get_type","","",null,null],[5,"gst_collect_pads_new","","",null,null],[5,"gst_collect_pads_add_pad","","",null,null],[5,"gst_collect_pads_available","","",null,null],[5,"gst_collect_pads_clip_running_time","","",null,null],[5,"gst_collect_pads_event_default","","",null,null],[5,"gst_collect_pads_flush","","",null,null],[5,"gst_collect_pads_peek","","",null,null],[5,"gst_collect_pads_pop","","",null,null],[5,"gst_collect_pads_query_default","","",null,null],[5,"gst_collect_pads_read_buffer","","",null,null],[5,"gst_collect_pads_remove_pad","","",null,null],[5,"gst_collect_pads_set_buffer_function","","",null,null],[5,"gst_collect_pads_set_clip_function","","",null,null],[5,"gst_collect_pads_set_compare_function","","",null,null],[5,"gst_collect_pads_set_event_function","","",null,null],[5,"gst_collect_pads_set_flush_function","","",null,null],[5,"gst_collect_pads_set_flushing","","",null,null],[5,"gst_collect_pads_set_function","","",null,null],[5,"gst_collect_pads_set_query_function","","",null,null],[5,"gst_collect_pads_set_waiting","","",null,null],[5,"gst_collect_pads_src_event_default","","",null,null],[5,"gst_collect_pads_start","","",null,null],[5,"gst_collect_pads_stop","","",null,null],[5,"gst_collect_pads_take_buffer","","",null,null],[5,"gst_data_queue_get_type","","",null,null],[5,"gst_data_queue_new","","",null,null],[5,"gst_data_queue_drop_head","","",null,null],[5,"gst_data_queue_flush","","",null,null],[5,"gst_data_queue_get_level","","",null,null],[5,"gst_data_queue_is_empty","","",null,null],[5,"gst_data_queue_is_full","","",null,null],[5,"gst_data_queue_limits_changed","","",null,null],[5,"gst_data_queue_peek","","",null,null],[5,"gst_data_queue_pop","","",null,null],[5,"gst_data_queue_push","","",null,null],[5,"gst_data_queue_push_force","","",null,null],[5,"gst_data_queue_set_flushing","","",null,null],[5,"gst_push_src_get_type","","",null,null],[5,"gst_type_find_helper","","",null,null],[5,"gst_type_find_helper_for_buffer","","",null,null],[5,"gst_type_find_helper_for_data","","",null,null],[5,"gst_type_find_helper_for_extension","","",null,null],[5,"gst_type_find_helper_get_range","","",null,null],[6,"GstCollectDataDestroyNotify","","",null,null],[6,"GstCollectPadsBufferFunction","","",null,null],[6,"GstCollectPadsClipFunction","","",null,null],[6,"GstCollectPadsCompareFunction","","",null,null],[6,"GstCollectPadsEventFunction","","",null,null],[6,"GstCollectPadsFlushFunction","","",null,null],[6,"GstCollectPadsFunction","","",null,null],[6,"GstCollectPadsQueryFunction","","",null,null],[6,"GstDataQueueCheckFullFunction","","",null,null],[6,"GstDataQueueEmptyCallback","","",null,null],[6,"GstDataQueueFullCallback","","",null,null],[6,"GstTypeFindHelperGetRangeFunction","","",null,null],[17,"GST_BASE_PARSE_FLAG_DRAINING","","",null,null],[17,"GST_BASE_PARSE_FLAG_LOST_SYNC","","",null,null],[17,"GST_BASE_TRANSFORM_SINK_NAME","","",null,null],[17,"GST_BASE_TRANSFORM_SRC_NAME","","",null,null],[17,"GST_BASE_PARSE_FRAME_FLAG_NONE","","",null,null],[17,"GST_BASE_PARSE_FRAME_FLAG_NEW_FRAME","","",null,null],[17,"GST_BASE_PARSE_FRAME_FLAG_NO_FRAME","","",null,null],[17,"GST_BASE_PARSE_FRAME_FLAG_CLIP","","",null,null],[17,"GST_BASE_PARSE_FRAME_FLAG_DROP","","",null,null],[17,"GST_BASE_PARSE_FRAME_FLAG_QUEUE","","",null,null],[17,"GST_BASE_SRC_FLAG_STARTING","","",null,null],[17,"GST_BASE_SRC_FLAG_STARTED","","",null,null],[17,"GST_BASE_SRC_FLAG_LAST","","",null,null],[17,"GST_COLLECT_PADS_STATE_EOS","","",null,null],[17,"GST_COLLECT_PADS_STATE_FLUSHING","","",null,null],[17,"GST_COLLECT_PADS_STATE_NEW_SEGMENT","","",null,null],[17,"GST_COLLECT_PADS_STATE_WAITING","","",null,null],[17,"GST_COLLECT_PADS_STATE_LOCKED","","",null,null],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"gstbaseparseframeflags"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"gstbaseparseframeflags"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"gstbaseparseframeflags"}}],[11,"partial_cmp","","",21,{"inputs":[{"name":"self"},{"name":"gstbaseparseframeflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",21,{"inputs":[{"name":"self"},{"name":"gstbaseparseframeflags"}],"output":{"name":"bool"}}],[11,"le","","",21,{"inputs":[{"name":"self"},{"name":"gstbaseparseframeflags"}],"output":{"name":"bool"}}],[11,"gt","","",21,{"inputs":[{"name":"self"},{"name":"gstbaseparseframeflags"}],"output":{"name":"bool"}}],[11,"ge","","",21,{"inputs":[{"name":"self"},{"name":"gstbaseparseframeflags"}],"output":{"name":"bool"}}],[11,"cmp","","",21,{"inputs":[{"name":"self"},{"name":"gstbaseparseframeflags"}],"output":{"name":"ordering"}}],[11,"hash","","",21,null],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",21,null],[18,"NEW_FRAME","","",21,null],[18,"NO_FRAME","","",21,null],[18,"CLIP","","",21,null],[18,"DROP","","",21,null],[18,"QUEUE","","",21,null],[11,"empty","","Returns an empty set of flags.",21,{"inputs":[],"output":{"name":"gstbaseparseframeflags"}}],[11,"all","","Returns the set containing all flags.",21,{"inputs":[],"output":{"name":"gstbaseparseframeflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",21,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",21,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gstbaseparseframeflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",21,{"inputs":[{"name":"c_uint"}],"output":{"name":"gstbaseparseframeflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",21,{"inputs":[{"name":"self"},{"name":"gstbaseparseframeflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",21,{"inputs":[{"name":"self"},{"name":"gstbaseparseframeflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",21,{"inputs":[{"name":"self"},{"name":"gstbaseparseframeflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",21,{"inputs":[{"name":"self"},{"name":"gstbaseparseframeflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",21,{"inputs":[{"name":"self"},{"name":"gstbaseparseframeflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",21,{"inputs":[{"name":"self"},{"name":"gstbaseparseframeflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",21,{"inputs":[{"name":"self"},{"name":"gstbaseparseframeflags"}],"output":{"name":"gstbaseparseframeflags"}}],[11,"bitor_assign","","Adds the set of flags.",21,{"inputs":[{"name":"self"},{"name":"gstbaseparseframeflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",21,{"inputs":[{"name":"self"},{"name":"gstbaseparseframeflags"}],"output":{"name":"gstbaseparseframeflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",21,{"inputs":[{"name":"self"},{"name":"gstbaseparseframeflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",21,{"inputs":[{"name":"self"},{"name":"gstbaseparseframeflags"}],"output":{"name":"gstbaseparseframeflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",21,{"inputs":[{"name":"self"},{"name":"gstbaseparseframeflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",21,{"inputs":[{"name":"self"},{"name":"gstbaseparseframeflags"}],"output":{"name":"gstbaseparseframeflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",21,{"inputs":[{"name":"self"},{"name":"gstbaseparseframeflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",21,{"inputs":[{"name":"self"}],"output":{"name":"gstbaseparseframeflags"}}],[11,"extend","","",21,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",21,{"inputs":[{"name":"t"}],"output":{"name":"gstbaseparseframeflags"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"gstbasesrcflags"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"gstbasesrcflags"}],"output":{"name":"bool"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"gstbasesrcflags"}}],[11,"partial_cmp","","",22,{"inputs":[{"name":"self"},{"name":"gstbasesrcflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",22,{"inputs":[{"name":"self"},{"name":"gstbasesrcflags"}],"output":{"name":"bool"}}],[11,"le","","",22,{"inputs":[{"name":"self"},{"name":"gstbasesrcflags"}],"output":{"name":"bool"}}],[11,"gt","","",22,{"inputs":[{"name":"self"},{"name":"gstbasesrcflags"}],"output":{"name":"bool"}}],[11,"ge","","",22,{"inputs":[{"name":"self"},{"name":"gstbasesrcflags"}],"output":{"name":"bool"}}],[11,"cmp","","",22,{"inputs":[{"name":"self"},{"name":"gstbasesrcflags"}],"output":{"name":"ordering"}}],[11,"hash","","",22,null],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"STARTING","","",22,null],[18,"STARTED","","",22,null],[18,"LAST","","",22,null],[11,"empty","","Returns an empty set of flags.",22,{"inputs":[],"output":{"name":"gstbasesrcflags"}}],[11,"all","","Returns the set containing all flags.",22,{"inputs":[],"output":{"name":"gstbasesrcflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",22,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",22,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gstbasesrcflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",22,{"inputs":[{"name":"c_uint"}],"output":{"name":"gstbasesrcflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",22,{"inputs":[{"name":"self"},{"name":"gstbasesrcflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",22,{"inputs":[{"name":"self"},{"name":"gstbasesrcflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",22,{"inputs":[{"name":"self"},{"name":"gstbasesrcflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",22,{"inputs":[{"name":"self"},{"name":"gstbasesrcflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",22,{"inputs":[{"name":"self"},{"name":"gstbasesrcflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",22,{"inputs":[{"name":"self"},{"name":"gstbasesrcflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",22,{"inputs":[{"name":"self"},{"name":"gstbasesrcflags"}],"output":{"name":"gstbasesrcflags"}}],[11,"bitor_assign","","Adds the set of flags.",22,{"inputs":[{"name":"self"},{"name":"gstbasesrcflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",22,{"inputs":[{"name":"self"},{"name":"gstbasesrcflags"}],"output":{"name":"gstbasesrcflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",22,{"inputs":[{"name":"self"},{"name":"gstbasesrcflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",22,{"inputs":[{"name":"self"},{"name":"gstbasesrcflags"}],"output":{"name":"gstbasesrcflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",22,{"inputs":[{"name":"self"},{"name":"gstbasesrcflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",22,{"inputs":[{"name":"self"},{"name":"gstbasesrcflags"}],"output":{"name":"gstbasesrcflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",22,{"inputs":[{"name":"self"},{"name":"gstbasesrcflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",22,{"inputs":[{"name":"self"}],"output":{"name":"gstbasesrcflags"}}],[11,"extend","","",22,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",22,{"inputs":[{"name":"t"}],"output":{"name":"gstbasesrcflags"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"gstcollectpadsstateflags"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"gstcollectpadsstateflags"}],"output":{"name":"bool"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"gstcollectpadsstateflags"}}],[11,"partial_cmp","","",23,{"inputs":[{"name":"self"},{"name":"gstcollectpadsstateflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",23,{"inputs":[{"name":"self"},{"name":"gstcollectpadsstateflags"}],"output":{"name":"bool"}}],[11,"le","","",23,{"inputs":[{"name":"self"},{"name":"gstcollectpadsstateflags"}],"output":{"name":"bool"}}],[11,"gt","","",23,{"inputs":[{"name":"self"},{"name":"gstcollectpadsstateflags"}],"output":{"name":"bool"}}],[11,"ge","","",23,{"inputs":[{"name":"self"},{"name":"gstcollectpadsstateflags"}],"output":{"name":"bool"}}],[11,"cmp","","",23,{"inputs":[{"name":"self"},{"name":"gstcollectpadsstateflags"}],"output":{"name":"ordering"}}],[11,"hash","","",23,null],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"EOS","","",23,null],[18,"FLUSHING","","",23,null],[18,"NEW_SEGMENT","","",23,null],[18,"WAITING","","",23,null],[18,"LOCKED","","",23,null],[11,"empty","","Returns an empty set of flags.",23,{"inputs":[],"output":{"name":"gstcollectpadsstateflags"}}],[11,"all","","Returns the set containing all flags.",23,{"inputs":[],"output":{"name":"gstcollectpadsstateflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",23,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",23,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gstcollectpadsstateflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",23,{"inputs":[{"name":"c_uint"}],"output":{"name":"gstcollectpadsstateflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",23,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",23,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",23,{"inputs":[{"name":"self"},{"name":"gstcollectpadsstateflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",23,{"inputs":[{"name":"self"},{"name":"gstcollectpadsstateflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",23,{"inputs":[{"name":"self"},{"name":"gstcollectpadsstateflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",23,{"inputs":[{"name":"self"},{"name":"gstcollectpadsstateflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",23,{"inputs":[{"name":"self"},{"name":"gstcollectpadsstateflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",23,{"inputs":[{"name":"self"},{"name":"gstcollectpadsstateflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",23,{"inputs":[{"name":"self"},{"name":"gstcollectpadsstateflags"}],"output":{"name":"gstcollectpadsstateflags"}}],[11,"bitor_assign","","Adds the set of flags.",23,{"inputs":[{"name":"self"},{"name":"gstcollectpadsstateflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",23,{"inputs":[{"name":"self"},{"name":"gstcollectpadsstateflags"}],"output":{"name":"gstcollectpadsstateflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",23,{"inputs":[{"name":"self"},{"name":"gstcollectpadsstateflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",23,{"inputs":[{"name":"self"},{"name":"gstcollectpadsstateflags"}],"output":{"name":"gstcollectpadsstateflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",23,{"inputs":[{"name":"self"},{"name":"gstcollectpadsstateflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",23,{"inputs":[{"name":"self"},{"name":"gstcollectpadsstateflags"}],"output":{"name":"gstcollectpadsstateflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",23,{"inputs":[{"name":"self"},{"name":"gstcollectpadsstateflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",23,{"inputs":[{"name":"self"}],"output":{"name":"gstcollectpadsstateflags"}}],[11,"extend","","",23,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",23,{"inputs":[{"name":"t"}],"output":{"name":"gstcollectpadsstateflags"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"GstBaseParseClass"],[3,"GstBaseParseFrame"],[3,"GstBaseSinkClass"],[3,"GstBaseSrcClass"],[3,"GstBaseTransformClass"],[3,"GstBitReader"],[3,"GstByteReader"],[3,"GstByteWriter"],[3,"GstCollectData"],[3,"GstCollectPadsClass"],[3,"GstDataQueueClass"],[3,"GstDataQueueItem"],[3,"GstDataQueueSize"],[3,"GstPushSrcClass"],[3,"GstBaseParse"],[3,"GstBaseSink"],[3,"GstBaseSrc"],[3,"GstBaseTransform"],[3,"GstCollectPads"],[3,"GstDataQueue"],[3,"GstPushSrc"],[3,"GstBaseParseFrameFlags"],[3,"GstBaseSrcFlags"],[3,"GstCollectPadsStateFlags"],[3,"GstAdapterClass"],[3,"GstBaseParsePrivate"],[3,"GstBaseSinkPrivate"],[3,"GstBaseSrcPrivate"],[3,"GstBaseTransformPrivate"],[3,"GstCollectDataPrivate"],[3,"GstCollectPadsPrivate"],[3,"GstDataQueuePrivate"],[3,"GstFlowCombiner"],[3,"GstQueueArray"],[3,"GstAdapter"]]};
searchIndex["gstreamer_net"] = {"doc":"","items":[[8,"Cast","gstreamer_net","Upcasting and downcasting support.",null,null],[11,"upcast","","Upcasts an object to a superclass or interface `T`.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"downcast","","Tries to downcast to a subclass or interface implementor `T`.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"is","","Returns `true` if the object is an instance of (can be cast to) `T`.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"dynamic_cast","","Tries to cast to an object of type `T`. This handles upcasting, downcasting and casting between interface and interface implementors. All checks are performed at runtime, while `downcast` and `upcast` will do many checks at compile-time already.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[3,"Continue","","Continue calling the closure in the future iterations or drop it.",null,null],[12,"0","","",1,null],[3,"Error","","A generic error capable of representing various error domains (types).",null,null],[8,"IsA","","Declares the \"is a\" relationship.",null,null],[8,"StaticType","","Types that are supported by GLib dynamic typing.",null,null],[10,"static_type","","Returns the type identifier of `Self`.",2,{"inputs":[],"output":{"name":"type"}}],[8,"ToValue","","Converts to `Value`.",null,null],[10,"to_value","","Returns a `Value` clone of `self`.",3,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[10,"to_value_type","","Returns the type identifer of `self`.",3,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[4,"Type","","A GLib or GLib-based library type",null,null],[13,"Invalid","","An invalid `Type` used as error return value in some functions",4,null],[13,"Unit","","The fundamental type corresponding to the unit type `()`",4,null],[13,"I8","","The fundamental type corresponding to `i8`",4,null],[13,"U8","","The fundamental type corresponding to `u8`",4,null],[13,"Bool","","The fundamental type corresponding to `bool`",4,null],[13,"I32","","The fundamental type corresponding to `i32`",4,null],[13,"U32","","The fundamental type corresponding to `u32`",4,null],[13,"ILong","","The fundamental type corresponding to C `long`",4,null],[13,"ULong","","The fundamental type corresponding to C `unsigned long`",4,null],[13,"I64","","The fundamental type corresponding to `i64`",4,null],[13,"U64","","The fundamental type corresponding to `u64`",4,null],[13,"F32","","The fundamental type corresponding to `f32`",4,null],[13,"F64","","The fundamental type corresponding to `f64`",4,null],[13,"String","","The fundamental type corresponding to `String`",4,null],[13,"Pointer","","The fundamental type corresponding to a pointer",4,null],[13,"Variant","","The fundamental type of GVariant",4,null],[13,"BaseInterface","","The fundamental type from which all interfaces are derived",4,null],[13,"BaseEnum","","The fundamental type from which all enumeration types are derived",4,null],[13,"BaseFlags","","The fundamental type from which all flags types are derived",4,null],[13,"BaseBoxed","","The fundamental type from which all boxed types are derived",4,null],[13,"BaseParamSpec","","The fundamental type from which all `GParamSpec` types are derived",4,null],[13,"BaseObject","","The fundamental type from which all objects are derived",4,null],[13,"Other","","A non-fundamental type identified by value of type `usize`",4,null],[3,"TypedValue","","A statically typed `Value`.",null,null],[3,"Value","","A generic value capable of carrying various types.",null,null],[3,"NetClientClock","","`NetClientClock` implements a custom `gst::Clock` that synchronizes its time to a remote time provider such as `NetTimeProvider`. `NtpClock` implements a `gst::Clock` that synchronizes its time to a remote NTPv4 server.",null,null],[3,"NetTimeProvider","","This object exposes the time of a `gst::Clock` on the network.",null,null],[3,"NtpClock","","Implements",null,null],[3,"PtpClock","","GstPtpClock implements a PTP (IEEE1588:2008) ordinary clock in slave-only mode, that allows a GStreamer pipeline to synchronize to a PTP network clock in some specific domain.",null,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"netclientclock"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",5,null],[11,"static_type","","",5,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Create a new `GstNetClientInternalClock` that will report the time provided by the `NetTimeProvider` on `remote_address` and `remote_port`. ## `name` a name for the clock ## `remote_address` the address or hostname of the remote clock provider ## `remote_port` the port of the remote clock provider ## `base_time` initial time of the clock",5,{"inputs":[{"name":"p"},{"name":"str"},{"name":"i32"},{"name":"clocktime"}],"output":{"name":"netclientclock"}}],[11,"get_property_address","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"set_property_address","","",5,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[11,"get_property_base_time","","",5,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"get_property_bus","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["bus"],"name":"option"}}],[11,"set_property_bus","","",5,{"inputs":[{"name":"self"},{"generics":["bus"],"name":"option"}],"output":null}],[11,"get_property_internal_clock","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["clock"],"name":"option"}}],[11,"get_property_minimum_update_interval","","",5,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"set_property_minimum_update_interval","","",5,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"get_property_port","","",5,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"set_property_port","","",5,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"get_property_round_trip_limit","","",5,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"set_property_round_trip_limit","","",5,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"connect_property_address_notify","","",5,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_property_base_time_notify","","",5,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_property_bus_notify","","",5,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_property_internal_clock_notify","","",5,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_property_minimum_update_interval_notify","","",5,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_property_port_notify","","",5,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_property_round_trip_limit_notify","","",5,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"nettimeprovider"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",6,null],[11,"static_type","","",6,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Allows network clients to get the current time of `clock`. ## `clock` a `gst::Clock` to export over the network ## `address` an address to bind on as a dotted quad  (xxx.xxx.xxx.xxx), IPv6 address, or NULL to bind to all addresses ## `port` a port to bind on, or 0 to let the kernel choose",6,{"inputs":[{"name":"p"},{"name":"q"},{"name":"i32"}],"output":{"name":"nettimeprovider"}}],[11,"get_property_active","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_property_active","","",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_property_address","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"get_property_clock","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["clock"],"name":"option"}}],[11,"get_property_port","","",6,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"connect_property_active_notify","","",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_property_address_notify","","",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_property_clock_notify","","",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_property_port_notify","","",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"ntpclock"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",7,null],[11,"static_type","","",7,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Create a new `NtpClock` that will report the time provided by the NTPv4 server on `remote_address` and `remote_port`. ## `name` a name for the clock ## `remote_address` the address or hostname of the remote clock provider ## `remote_port` the port of the remote clock provider ## `base_time` initial time of the clock",7,{"inputs":[{"name":"p"},{"name":"str"},{"name":"i32"},{"name":"clocktime"}],"output":{"name":"ntpclock"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"ptpclock"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",8,null],[11,"static_type","","",8,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new PTP clock instance that exports the PTP time of the master clock in `domain`. This clock can be slaved to other clocks as needed.",8,{"inputs":[{"name":"p"},{"name":"u32"}],"output":{"name":"ptpclock"}}],[11,"get_property_domain","","",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_property_grandmaster_clock_id","","",8,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"get_property_internal_clock","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["clock"],"name":"option"}}],[11,"get_property_master_clock_id","","",8,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"connect_property_domain_notify","","",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_property_grandmaster_clock_id_notify","","",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_property_internal_clock_notify","","",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_property_master_clock_id_notify","","",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[0,"prelude","","",null,null],[11,"can_compare","","",9,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"compare","","",9,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"valueorder"}}],[11,"can_intersect","","",9,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"intersect","","",9,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"generics":["value"],"name":"option"}}],[11,"can_subtract","","",9,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"subtract","","",9,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"generics":["value"],"name":"option"}}],[11,"can_union","","",9,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"union","","",9,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"generics":["value"],"name":"option"}}],[11,"fixate","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["value"],"name":"option"}}],[11,"is_fixed","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_subset","","",9,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"serialize","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"deserialize","","",9,{"inputs":[{"name":"t"}],"output":{"generics":["value"],"name":"option"}}],[11,"from_glib_none","","",9,null],[11,"from_glib_none","","",9,null],[11,"from_glib","","",4,{"inputs":[{"name":"usize"}],"output":{"name":"type"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"typedvalue"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"downcast","","Tries to downcast to a `TypedValue`.",9,{"inputs":[{"name":"self"}],"output":{"generics":["typedvalue","value"],"name":"result"}}],[11,"get","","Tries to get a value of type `T`.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is","","Returns `true` if the type of the value corresponds to `T`.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"type_","","Returns the type of the value.",9,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"type_transformable","","Returns whether `Value`s of type `src` can be transformed to type `dst`.",9,{"inputs":[{"name":"type"},{"name":"type"}],"output":{"name":"bool"}}],[11,"try_into_send_value","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["sendvalue","value"],"name":"result"}}],[11,"deref","","",10,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"description","","",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"to_glib_none_mut","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["typedvalue"],"name":"stashmut"}}],[11,"to_glib_none_mut","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["value"],"name":"stashmut"}}],[11,"from_glib_full","","",9,null],[11,"from_glib_none_as_vec","","",9,null],[11,"from_glib_container_as_vec","","",9,null],[11,"from_glib_full_as_vec","","",9,null],[11,"from_glib_none_as_vec","","",9,null],[11,"from_glib_container_as_vec","","",9,null],[11,"from_glib_full_as_vec","","",9,null],[11,"to_glib_none","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["value"],"name":"stash"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from","","",10,{"inputs":[{"generics":["str"],"name":"option"}],"output":{"generics":["string"],"name":"typedvalue"}}],[11,"from","","",9,{"inputs":[{"name":"typedvalue"}],"output":{"name":"value"}}],[11,"from","","",10,{"inputs":[{"name":"t"}],"output":{"name":"typedvalue"}}],[11,"from","","",10,{"inputs":[{"generics":["string"],"name":"typedvalue"}],"output":{"generics":["str"],"name":"typedvalue"}}],[11,"from","","",9,{"inputs":[{"name":"t"}],"output":{"name":"value"}}],[11,"from","","",10,{"inputs":[{"name":"option"}],"output":{"name":"typedvalue"}}],[11,"from","","",9,{"inputs":[{"name":"option"}],"output":{"name":"value"}}],[11,"from","","",9,{"inputs":[{"name":"sendvalue"}],"output":{"name":"value"}}],[11,"from","","",10,{"inputs":[{"generics":["str"],"name":"typedvalue"}],"output":{"generics":["string"],"name":"typedvalue"}}],[11,"from","","",10,{"inputs":[{"name":"str"}],"output":{"generics":["string"],"name":"typedvalue"}}],[11,"static_type","","",11,{"inputs":[],"output":{"name":"type"}}],[11,"from_glib_none_num_as_vec","","",9,null],[11,"from_glib_container_num_as_vec","","",9,null],[11,"from_glib_full_num_as_vec","","",9,null],[11,"from_glib_none_num_as_vec","","",4,null],[11,"from_glib_container_num_as_vec","","",4,null],[11,"from_glib_full_num_as_vec","","",4,null],[11,"from_glib_none_num_as_vec","","",4,null],[11,"from_glib_container_num_as_vec","","",4,null],[11,"from_glib_full_num_as_vec","","",4,null],[11,"from_glib_none_num_as_vec","","",9,null],[11,"from_glib_container_num_as_vec","","",9,null],[11,"from_glib_full_num_as_vec","","",9,null],[11,"drop","","",9,null],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"to_glib_none_from_slice","","",4,null],[11,"to_glib_container_from_slice","","",4,null],[11,"to_glib_full_from_slice","","",4,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"to_glib","","",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_glib","","",1,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"uninitialized","","",9,{"inputs":[],"output":{"name":"value"}}],[11,"to_value","","",9,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"to_value_type","","",9,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"new","","Creates an error with supplied error enum variant and message.",11,{"inputs":[{"name":"t"},{"name":"str"}],"output":{"name":"error"}}],[11,"is","","Checks if the error domain matches `T`.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"kind","","Tries to convert to a specific error enum.",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"wrap","","",11,null],[11,"name","","",4,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"is_a","","",4,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"parent","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["type"],"name":"option"}}],[11,"children","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["type"],"name":"vec"}}],[11,"interfaces","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["type"],"name":"vec"}}],[11,"interface_prerequisites","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["type"],"name":"vec"}}],[11,"from_name","","",4,{"inputs":[{"name":"p"}],"output":{"generics":["type"],"name":"option"}}],[11,"get","","Returns the value.",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_some","","Returns the value.",10,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set","","Sets the value.",10,null],[11,"set_none","","Sets the value to `None`.",10,null],[11,"set_some","","Sets the value.",10,null],[11,"into_send_value","","",10,{"inputs":[{"name":"self"}],"output":{"name":"sendvalue"}}]],"paths":[[8,"Cast"],[3,"Continue"],[8,"StaticType"],[8,"ToValue"],[4,"Type"],[3,"NetClientClock"],[3,"NetTimeProvider"],[3,"NtpClock"],[3,"PtpClock"],[3,"Value"],[3,"TypedValue"],[3,"Error"]]};
searchIndex["gstreamer_net_sys"] = {"doc":"","items":[[3,"GstNetAddressMeta","gstreamer_net_sys","",null,null],[12,"meta","","",0,null],[12,"addr","","",0,null],[3,"GstNetClientClockClass","","",null,null],[12,"parent_class","","",1,null],[12,"_gst_reserved","","",1,null],[3,"GstNetClientClockPrivate","","",null,null],[3,"GstNetControlMessageMeta","","",null,null],[12,"meta","","",2,null],[12,"message","","",2,null],[3,"GstNetTimePacket","","",null,null],[12,"local_time","","",3,null],[12,"remote_time","","",3,null],[3,"GstNetTimeProviderClass","","",null,null],[12,"parent_class","","",4,null],[12,"_gst_reserved","","",4,null],[3,"GstNetTimeProviderPrivate","","",null,null],[3,"GstNtpClockClass","","",null,null],[12,"parent_class","","",5,null],[12,"_gst_reserved","","",5,null],[3,"GstPtpClockClass","","",null,null],[12,"parent_class","","",6,null],[12,"_gst_reserved","","",6,null],[3,"GstPtpClockPrivate","","",null,null],[3,"GstNetClientClock","","",null,null],[12,"clock","","",7,null],[12,"priv_","","",7,null],[12,"_gst_reserved","","",7,null],[3,"GstNetTimeProvider","","",null,null],[12,"parent","","",8,null],[12,"priv_","","",8,null],[12,"_gst_reserved","","",8,null],[3,"GstNtpClock","","",null,null],[12,"clock","","",9,null],[12,"priv_","","",9,null],[12,"_gst_reserved","","",9,null],[3,"GstPtpClock","","",null,null],[12,"clock","","",10,null],[12,"priv_","","",10,null],[12,"_gst_reserved","","",10,null],[5,"gst_net_address_meta_get_info","","",null,null],[5,"gst_net_control_message_meta_get_info","","",null,null],[5,"gst_net_time_packet_get_type","","",null,null],[5,"gst_net_time_packet_new","","",null,null],[5,"gst_net_time_packet_copy","","",null,null],[5,"gst_net_time_packet_free","","",null,null],[5,"gst_net_time_packet_send","","",null,null],[5,"gst_net_time_packet_serialize","","",null,null],[5,"gst_net_time_packet_receive","","",null,null],[5,"gst_net_client_clock_get_type","","",null,null],[5,"gst_net_client_clock_new","","",null,null],[5,"gst_net_time_provider_get_type","","",null,null],[5,"gst_net_time_provider_new","","",null,null],[5,"gst_ntp_clock_get_type","","",null,null],[5,"gst_ntp_clock_new","","",null,null],[5,"gst_ptp_clock_get_type","","",null,null],[5,"gst_ptp_clock_new","","",null,null],[5,"gst_buffer_add_net_address_meta","","",null,null],[5,"gst_buffer_add_net_control_message_meta","","",null,null],[5,"gst_buffer_get_net_address_meta","","",null,null],[5,"gst_net_address_meta_api_get_type","","",null,null],[5,"gst_net_control_message_meta_api_get_type","","",null,null],[5,"gst_ptp_deinit","","",null,null],[5,"gst_ptp_init","","",null,null],[5,"gst_ptp_is_initialized","","",null,null],[5,"gst_ptp_is_supported","","",null,null],[5,"gst_ptp_statistics_callback_add","","",null,null],[5,"gst_ptp_statistics_callback_remove","","",null,null],[6,"GstPtpStatisticsCallback","","",null,null],[17,"GST_NET_TIME_PACKET_SIZE","","",null,null],[17,"GST_PTP_CLOCK_ID_NONE","","",null,null],[17,"GST_PTP_STATISTICS_BEST_MASTER_CLOCK_SELECTED","","",null,null],[17,"GST_PTP_STATISTICS_NEW_DOMAIN_FOUND","","",null,null],[17,"GST_PTP_STATISTICS_PATH_DELAY_MEASURED","","",null,null],[17,"GST_PTP_STATISTICS_TIME_UPDATED","","",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"GstNetAddressMeta"],[3,"GstNetClientClockClass"],[3,"GstNetControlMessageMeta"],[3,"GstNetTimePacket"],[3,"GstNetTimeProviderClass"],[3,"GstNtpClockClass"],[3,"GstPtpClockClass"],[3,"GstNetClientClock"],[3,"GstNetTimeProvider"],[3,"GstNtpClock"],[3,"GstPtpClock"],[3,"GstNetClientClockPrivate"],[3,"GstNetTimeProviderPrivate"],[3,"GstPtpClockPrivate"]]};
searchIndex["gstreamer_player"] = {"doc":"","items":[[8,"Cast","gstreamer_player","Upcasting and downcasting support.",null,null],[11,"upcast","","Upcasts an object to a superclass or interface `T`.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"downcast","","Tries to downcast to a subclass or interface implementor `T`.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"is","","Returns `true` if the object is an instance of (can be cast to) `T`.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"dynamic_cast","","Tries to cast to an object of type `T`. This handles upcasting, downcasting and casting between interface and interface implementors. All checks are performed at runtime, while `downcast` and `upcast` will do many checks at compile-time already.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[3,"Continue","","Continue calling the closure in the future iterations or drop it.",null,null],[12,"0","","",1,null],[3,"Error","","A generic error capable of representing various error domains (types).",null,null],[8,"IsA","","Declares the \"is a\" relationship.",null,null],[8,"StaticType","","Types that are supported by GLib dynamic typing.",null,null],[10,"static_type","","Returns the type identifier of `Self`.",2,{"inputs":[],"output":{"name":"type"}}],[8,"ToValue","","Converts to `Value`.",null,null],[10,"to_value","","Returns a `Value` clone of `self`.",3,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[10,"to_value_type","","Returns the type identifer of `self`.",3,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[4,"Type","","A GLib or GLib-based library type",null,null],[13,"Invalid","","An invalid `Type` used as error return value in some functions",4,null],[13,"Unit","","The fundamental type corresponding to the unit type `()`",4,null],[13,"I8","","The fundamental type corresponding to `i8`",4,null],[13,"U8","","The fundamental type corresponding to `u8`",4,null],[13,"Bool","","The fundamental type corresponding to `bool`",4,null],[13,"I32","","The fundamental type corresponding to `i32`",4,null],[13,"U32","","The fundamental type corresponding to `u32`",4,null],[13,"ILong","","The fundamental type corresponding to C `long`",4,null],[13,"ULong","","The fundamental type corresponding to C `unsigned long`",4,null],[13,"I64","","The fundamental type corresponding to `i64`",4,null],[13,"U64","","The fundamental type corresponding to `u64`",4,null],[13,"F32","","The fundamental type corresponding to `f32`",4,null],[13,"F64","","The fundamental type corresponding to `f64`",4,null],[13,"String","","The fundamental type corresponding to `String`",4,null],[13,"Pointer","","The fundamental type corresponding to a pointer",4,null],[13,"Variant","","The fundamental type of GVariant",4,null],[13,"BaseInterface","","The fundamental type from which all interfaces are derived",4,null],[13,"BaseEnum","","The fundamental type from which all enumeration types are derived",4,null],[13,"BaseFlags","","The fundamental type from which all flags types are derived",4,null],[13,"BaseBoxed","","The fundamental type from which all boxed types are derived",4,null],[13,"BaseParamSpec","","The fundamental type from which all `GParamSpec` types are derived",4,null],[13,"BaseObject","","The fundamental type from which all objects are derived",4,null],[13,"Other","","A non-fundamental type identified by value of type `usize`",4,null],[3,"TypedValue","","A statically typed `Value`.",null,null],[3,"Value","","A generic value capable of carrying various types.",null,null],[3,"Player","","Implements",null,null],[3,"PlayerAudioInfo","","`PlayerStreamInfo` specific to audio streams.",null,null],[3,"PlayerGMainContextSignalDispatcher","","Implements",null,null],[3,"PlayerMediaInfo","","Structure containing the media information of a URI.",null,null],[3,"PlayerSignalDispatcher","","Implements",null,null],[3,"PlayerStreamInfo","","Base structure for information concering a media stream. Depending on the stream type, one can find more media-specific information in `PlayerVideoInfo`, `PlayerAudioInfo`, `PlayerSubtitleInfo`.",null,null],[3,"PlayerSubtitleInfo","","`PlayerStreamInfo` specific to subtitle streams.",null,null],[3,"PlayerVideoInfo","","`PlayerStreamInfo` specific to video streams.",null,null],[3,"PlayerVideoOverlayVideoRenderer","","Implements",null,null],[3,"PlayerVideoRenderer","","Implements",null,null],[3,"PlayerVisualization","","A `PlayerVisualization` descriptor.",null,null],[3,"PlayerConfig","","",null,null],[4,"PlayerColorBalanceType","","",null,null],[13,"Hue","","",5,null],[13,"Brightness","","",5,null],[13,"Saturation","","",5,null],[13,"Contrast","","",5,null],[4,"PlayerError","","",null,null],[13,"Failed","","",6,null],[4,"PlayerSnapshotFormat","","",null,null],[13,"RawNative","","",7,null],[13,"RawXrgb","","",7,null],[13,"RawBgrx","","",7,null],[13,"Jpg","","",7,null],[13,"Png","","",7,null],[4,"PlayerState","","",null,null],[13,"Stopped","","",8,null],[13,"Buffering","","",8,null],[13,"Paused","","",8,null],[13,"Playing","","",8,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"player"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",9,null],[11,"static_type","","",9,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"get_audio_video_offset","","Retrieve the current value of audio-video-offset property",9,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"get_color_balance","","Retrieve the current value of the indicated `type_`. ## `type_` `PlayerColorBalanceType`",9,{"inputs":[{"name":"self"},{"name":"playercolorbalancetype"}],"output":{"name":"f64"}}],[11,"get_current_audio_track","","A Function to get current audio `PlayerAudioInfo` instance.",9,{"inputs":[{"name":"self"}],"output":{"generics":["playeraudioinfo"],"name":"option"}}],[11,"get_current_subtitle_track","","A Function to get current subtitle `PlayerSubtitleInfo` instance.",9,{"inputs":[{"name":"self"}],"output":{"generics":["playersubtitleinfo"],"name":"option"}}],[11,"get_current_video_track","","A Function to get current video `PlayerVideoInfo` instance.",9,{"inputs":[{"name":"self"}],"output":{"generics":["playervideoinfo"],"name":"option"}}],[11,"get_current_visualization","","Returns",9,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"get_duration","","Retrieves the duration of the media stream that self represents.",9,{"inputs":[{"name":"self"}],"output":{"name":"clocktime"}}],[11,"get_media_info","","A Function to get the current media info `PlayerMediaInfo` instance.",9,{"inputs":[{"name":"self"}],"output":{"generics":["playermediainfo"],"name":"option"}}],[11,"get_multiview_flags","","Retrieve the current value of the indicated `type_`.",9,{"inputs":[{"name":"self"}],"output":{"name":"videomultiviewflags"}}],[11,"get_multiview_mode","","Retrieve the current value of the indicated `type_`.",9,{"inputs":[{"name":"self"}],"output":{"name":"videomultiviewframepacking"}}],[11,"get_mute","","Returns",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_pipeline","","Returns",9,{"inputs":[{"name":"self"}],"output":{"name":"element"}}],[11,"get_position","","Returns",9,{"inputs":[{"name":"self"}],"output":{"name":"clocktime"}}],[11,"get_rate","","Returns",9,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"get_subtitle_uri","","current subtitle URI",9,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"get_uri","","Gets the URI of the currently-playing stream.",9,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"get_video_snapshot","","Get a snapshot of the currently selected video stream, if any. The format can be selected with `format` and optional configuration is possible with `config` Currently supported settings are: - width, height of type G_TYPE_INT - pixel-aspect-ratio of type GST_TYPE_FRACTION  Except for GST_PLAYER_THUMBNAIL_RAW_NATIVE format, if no config is set, pixel-aspect-ratio would be 1/1 ## `format` output format of the video snapshot ## `config` Additional configuration",9,{"inputs":[{"name":"self"},{"name":"playersnapshotformat"},{"name":"p"}],"output":{"generics":["sample"],"name":"option"}}],[11,"get_volume","","Returns the current volume level, as a percentage between 0 and 1.",9,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"has_color_balance","","Checks whether the `self` has color balance support available.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"pause","","Pauses the current stream.",9,{"inputs":[{"name":"self"}],"output":null}],[11,"play","","Request to play the loaded stream.",9,{"inputs":[{"name":"self"}],"output":null}],[11,"seek","","Seeks the currently-playing stream to the absolute `position` time in nanoseconds. ## `position` position to seek in nanoseconds",9,{"inputs":[{"name":"self"},{"name":"clocktime"}],"output":null}],[11,"set_audio_track","","`stream_index` stream index",9,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["boolerror"],"name":"result"}}],[11,"set_audio_track_enabled","","Enable or disable the current audio track. ## `enabled` TRUE or FALSE",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"set_audio_video_offset","","Sets audio-video-offset property by value of `offset`",9,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"set_color_balance","","Sets the current value of the indicated channel `type_` to the passed value. ## `type_` `PlayerColorBalanceType` ## `value` The new value for the `type_`, ranged [0,1]",9,{"inputs":[{"name":"self"},{"name":"playercolorbalancetype"},{"name":"f64"}],"output":null}],[11,"set_multiview_flags","","Sets the current value of the indicated mode `type_` to the passed value. ## `flags` The new value for the `type_`",9,{"inputs":[{"name":"self"},{"name":"videomultiviewflags"}],"output":null}],[11,"set_multiview_mode","","Sets the current value of the indicated mode `type_` to the passed value. ## `mode` The new value for the `type_`",9,{"inputs":[{"name":"self"},{"name":"videomultiviewframepacking"}],"output":null}],[11,"set_mute","","`true` if the currently-playing stream should be muted. ## `val` Mute state the should be set",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"set_rate","","Playback at specified rate ## `rate` playback rate",9,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"set_subtitle_track","","`stream_index` stream index",9,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["boolerror"],"name":"result"}}],[11,"set_subtitle_track_enabled","","Enable or disable the current subtitle track. ## `enabled` TRUE or FALSE",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"set_subtitle_uri","","Sets the external subtitle URI. ## `uri` subtitle URI",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"set_uri","","Sets the next URI to play. ## `uri` next URI to play.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"set_video_track","","`stream_index` stream index",9,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["boolerror"],"name":"result"}}],[11,"set_video_track_enabled","","Enable or disable the current video track. ## `enabled` TRUE or FALSE",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"set_visualization","","`name` visualization element obtained from `Player::visualizations_get`()",9,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["boolerror"],"name":"result"}}],[11,"set_visualization_enabled","","Enable or disable the visualization. ## `enabled` TRUE or FALSE",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"set_volume","","Sets the volume level of the stream as a percentage between 0 and 1. ## `val` the new volume level, as a percentage between 0 and 1",9,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"stop","","Stops playing the current stream and resets to the first position in the stream.",9,{"inputs":[{"name":"self"}],"output":null}],[11,"get_property_suburi","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"set_property_suburi","","",9,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[11,"get_property_video_multiview_flags","","",9,{"inputs":[{"name":"self"}],"output":{"name":"videomultiviewflags"}}],[11,"set_property_video_multiview_flags","","",9,{"inputs":[{"name":"self"},{"name":"videomultiviewflags"}],"output":null}],[11,"get_property_video_multiview_mode","","",9,{"inputs":[{"name":"self"}],"output":{"name":"videomultiviewframepacking"}}],[11,"set_property_video_multiview_mode","","",9,{"inputs":[{"name":"self"},{"name":"videomultiviewframepacking"}],"output":null}],[11,"get_audio_streams","","`info` a `PlayerMediaInfo`",9,{"inputs":[{"name":"playermediainfo"}],"output":{"generics":["playeraudioinfo"],"name":"vec"}}],[11,"get_subtitle_streams","","`info` a `PlayerMediaInfo`",9,{"inputs":[{"name":"playermediainfo"}],"output":{"generics":["playersubtitleinfo"],"name":"vec"}}],[11,"get_video_streams","","`info` a `PlayerMediaInfo`",9,{"inputs":[{"name":"playermediainfo"}],"output":{"generics":["playervideoinfo"],"name":"vec"}}],[11,"visualizations_get","","Returns",9,{"inputs":[],"output":{"generics":["playervisualization"],"name":"vec"}}],[11,"connect_buffering","","",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_end_of_stream","","",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_error","","",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_media_info_updated","","",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_mute_changed","","",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_state_changed","","",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_uri_loaded","","",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_video_dimensions_changed","","",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_volume_changed","","",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_warning","","",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_property_audio_video_offset_notify","","",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_property_current_audio_track_notify","","",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_property_current_subtitle_track_notify","","",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_property_current_video_track_notify","","",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_property_duration_notify","","",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_property_media_info_notify","","",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_property_mute_notify","","",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_property_pipeline_notify","","",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_property_position_notify","","",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_property_rate_notify","","",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_property_signal_dispatcher_notify","","",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_property_suburi_notify","","",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_property_uri_notify","","",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_property_video_multiview_flags_notify","","",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_property_video_multiview_mode_notify","","",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_property_video_renderer_notify","","",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_property_volume_notify","","",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"playeraudioinfo"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",10,null],[11,"static_type","","",10,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"get_bitrate","","Returns",10,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_channels","","Returns",10,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_language","","Returns",10,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"get_max_bitrate","","Returns",10,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_sample_rate","","Returns",10,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"playergmaincontextsignaldispatcher"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",11,null],[11,"static_type","","",11,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"get_property_application_context","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["maincontext"],"name":"option"}}],[11,"connect_property_application_context_notify","","",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"playermediainfo"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",12,null],[11,"static_type","","",12,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"get_audio_streams","","Returns",12,{"inputs":[{"name":"self"}],"output":{"generics":["playeraudioinfo"],"name":"vec"}}],[11,"get_container_format","","Returns",12,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"get_duration","","Returns",12,{"inputs":[{"name":"self"}],"output":{"name":"clocktime"}}],[11,"get_image_sample","","Function to get the image (or preview-image) stored in taglist. Application can use gst_sample_*`_` API's to get caps, buffer etc.",12,{"inputs":[{"name":"self"}],"output":{"generics":["sample"],"name":"option"}}],[11,"get_number_of_audio_streams","","Returns",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_number_of_streams","","Returns",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_number_of_subtitle_streams","","Returns",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_number_of_video_streams","","Returns",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_stream_list","","Returns",12,{"inputs":[{"name":"self"}],"output":{"generics":["playerstreaminfo"],"name":"vec"}}],[11,"get_subtitle_streams","","Returns",12,{"inputs":[{"name":"self"}],"output":{"generics":["playersubtitleinfo"],"name":"vec"}}],[11,"get_tags","","Returns",12,{"inputs":[{"name":"self"}],"output":{"generics":["taglist"],"name":"option"}}],[11,"get_title","","Returns",12,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"get_uri","","Returns",12,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_video_streams","","Returns",12,{"inputs":[{"name":"self"}],"output":{"generics":["playervideoinfo"],"name":"vec"}}],[11,"is_live","","Returns",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_seekable","","Returns",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"playersignaldispatcher"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",13,null],[11,"static_type","","",13,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"playerstreaminfo"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",14,null],[11,"static_type","","",14,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"playersubtitleinfo"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",15,null],[11,"static_type","","",15,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"get_language","","Returns",15,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"playervideoinfo"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",16,null],[11,"static_type","","",16,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"get_bitrate","","Returns",16,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_height","","Returns",16,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_max_bitrate","","Returns",16,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_width","","Returns",16,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"playervideooverlayvideorenderer"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",17,null],[11,"static_type","","",17,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"expose","","Tell an overlay that it has been exposed. This will redraw the current frame in the drawable even if the pipeline is PAUSED.",17,{"inputs":[{"name":"self"}],"output":null}],[11,"get_render_rectangle","","Return the currently configured render rectangle. See `PlayerVideoOverlayVideoRenderer::set_render_rectangle` for details. ## `x` the horizontal offset of the render area inside the window ## `y` the vertical offset of the render area inside the window ## `width` the width of the render area inside the window ## `height` the height of the render area inside the window",17,null],[11,"set_render_rectangle","","Configure a subregion as a video target within the window set by `PlayerVideoOverlayVideoRenderer::set_window_handle`. If this is not used or not supported the video will fill the area of the window set as the overlay to 100%. By specifying the rectangle, the video can be overlaid to a specific region of that window only. After setting the new rectangle one should call `PlayerVideoOverlayVideoRenderer::expose` to force a redraw. To unset the region pass -1 for the `width` and `height` parameters.",17,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":null}],[11,"get_property_video_sink","","",17,{"inputs":[{"name":"self"}],"output":{"generics":["element"],"name":"option"}}],[11,"set_property_video_sink","","",17,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"connect_property_video_sink_notify","","",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_property_window_handle_notify","","",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"playervideorenderer"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",18,null],[11,"static_type","","",18,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"playervisualization"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"static_type","","",19,{"inputs":[],"output":{"name":"type"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"playercolorbalancetype"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"playercolorbalancetype"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"playercolorbalancetype"}],"output":{"name":"bool"}}],[11,"hash","","",5,null],[11,"static_type","","",5,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",5,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",5,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",5,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"playererror"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"playererror"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"playererror"}],"output":{"name":"bool"}}],[11,"hash","","",6,null],[11,"domain","","",6,{"inputs":[],"output":{"name":"gquark"}}],[11,"code","","",6,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from","","",6,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"static_type","","",6,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",6,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",6,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",6,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"playersnapshotformat"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"playersnapshotformat"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"playersnapshotformat"}],"output":{"name":"bool"}}],[11,"hash","","",7,null],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"playerstate"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"playerstate"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"playerstate"}],"output":{"name":"bool"}}],[11,"hash","","",8,null],[11,"static_type","","",8,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",8,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",8,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",8,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"new","","Creates a new `Player` instance that uses `signal_dispatcher` to dispatch signals to some event loop system, or emits signals directly if NULL is passed. See `PlayerGMainContextSignalDispatcher::new`.",9,{"inputs":[{"generics":["playervideorenderer"],"name":"option"},{"generics":["playersignaldispatcher"],"name":"option"}],"output":{"name":"player"}}],[11,"get_config","","",9,{"inputs":[{"name":"self"}],"output":{"name":"playerconfig"}}],[11,"set_config","","",9,{"inputs":[{"name":"self"},{"name":"playerconfig"}],"output":{"generics":["boolerror"],"name":"result"}}],[11,"connect_duration_changed","","",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_position_updated","","",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_seek_done","","",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"playerconfig"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"playerconfig"}],"output":{"name":"bool"}}],[11,"deref","","",20,{"inputs":[{"name":"self"}],"output":{"name":"structureref"}}],[11,"deref_mut","","",20,{"inputs":[{"name":"self"}],"output":{"name":"structureref"}}],[11,"as_ref","","",20,{"inputs":[{"name":"self"}],"output":{"name":"structureref"}}],[11,"as_mut","","",20,{"inputs":[{"name":"self"}],"output":{"name":"structureref"}}],[11,"get_position_update_interval","","",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_seek_accurate","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_user_agent","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"set_position_update_interval","","",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"set_seek_accurate","","",20,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"set_user_agent","","",20,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"into_ptr","","",20,null],[11,"from_glib_full","","",20,null],[11,"get_framerate","","`fps_n` Numerator of frame rate ## `fps_d` Denominator of frame rate",16,{"inputs":[{"name":"self"}],"output":{"name":"fraction"}}],[11,"get_pixel_aspect_ratio","","Returns the pixel aspect ratio in `par_n` and `par_d` ## `par_n` numerator ## `par_d` denominator",16,{"inputs":[{"name":"self"}],"output":{"name":"fraction"}}],[11,"new","","`window_handle` Window handle to use or `None`",17,{"inputs":[{"name":"uintptr_t"}],"output":{"name":"playervideooverlayvideorenderer"}}],[11,"new_with_handle_and_sink","","",17,{"inputs":[{"name":"uintptr_t"},{"name":"p"}],"output":{"name":"playervideooverlayvideorenderer"}}],[11,"new_with_sink","","`window_handle` Window handle to use or `None` ## `video_sink` the custom video_sink element to be set for the video renderer",17,{"inputs":[{"name":"p"}],"output":{"name":"playervideooverlayvideorenderer"}}],[11,"get_window_handle","","Returns",17,{"inputs":[{"name":"self"}],"output":{"name":"uintptr_t"}}],[11,"set_window_handle","","Sets the platform specific window handle into which the video should be rendered ## `window_handle` handle referencing to the platform specific window",17,{"inputs":[{"name":"self"},{"name":"uintptr_t"}],"output":null}],[11,"new","","Creates a new GstPlayerSignalDispatcher that uses `application_context`, or the thread default one if `None` is used. See `gst_player_new_full`. ## `application_context` GMainContext to use or `None`",11,{"inputs":[{"name":"p"}],"output":{"name":"playergmaincontextsignaldispatcher"}}],[0,"prelude","","",null,null],[8,"PlayerSignalDispatcherExt","gstreamer_player::prelude","Trait containing all `PlayerSignalDispatcher` methods.",null,null],[8,"PlayerStreamInfoExt","","Trait containing all `PlayerStreamInfo` methods.",null,null],[10,"get_caps","","Returns",21,{"inputs":[{"name":"self"}],"output":{"generics":["caps"],"name":"option"}}],[10,"get_codec","","A string describing codec used in `PlayerStreamInfo`.",21,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_index","","Function to get stream index from `PlayerStreamInfo` instance.",21,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_stream_type","","Function to return human readable name for the stream type of the given `self` (ex: \"audio\", \"video\", \"subtitle\")",21,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[10,"get_tags","","Returns",21,{"inputs":[{"name":"self"}],"output":{"generics":["taglist"],"name":"option"}}],[8,"PlayerVideoRendererExt","","Trait containing all `PlayerVideoRenderer` methods.",null,null],[8,"PlayerSignalDispatcherExt","gstreamer_player","Trait containing all `PlayerSignalDispatcher` methods.",null,null],[8,"PlayerStreamInfoExt","","Trait containing all `PlayerStreamInfo` methods.",null,null],[10,"get_caps","","Returns",21,{"inputs":[{"name":"self"}],"output":{"generics":["caps"],"name":"option"}}],[10,"get_codec","","A string describing codec used in `PlayerStreamInfo`.",21,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_index","","Function to get stream index from `PlayerStreamInfo` instance.",21,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_stream_type","","Function to return human readable name for the stream type of the given `self` (ex: \"audio\", \"video\", \"subtitle\")",21,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[10,"get_tags","","Returns",21,{"inputs":[{"name":"self"}],"output":{"generics":["taglist"],"name":"option"}}],[8,"PlayerVideoRendererExt","","Trait containing all `PlayerVideoRenderer` methods.",null,null],[11,"can_compare","","",22,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"compare","","",22,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"valueorder"}}],[11,"can_intersect","","",22,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"intersect","","",22,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"generics":["value"],"name":"option"}}],[11,"can_subtract","","",22,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"subtract","","",22,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"generics":["value"],"name":"option"}}],[11,"can_union","","",22,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"union","","",22,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"generics":["value"],"name":"option"}}],[11,"fixate","","",22,{"inputs":[{"name":"self"}],"output":{"generics":["value"],"name":"option"}}],[11,"is_fixed","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_subset","","",22,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"serialize","","",22,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"deserialize","","",22,{"inputs":[{"name":"t"}],"output":{"generics":["value"],"name":"option"}}],[11,"from_glib_none","","",22,null],[11,"from_glib_none","","",22,null],[11,"from_glib","","",4,{"inputs":[{"name":"usize"}],"output":{"name":"type"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"typedvalue"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"downcast","","Tries to downcast to a `TypedValue`.",22,{"inputs":[{"name":"self"}],"output":{"generics":["typedvalue","value"],"name":"result"}}],[11,"get","","Tries to get a value of type `T`.",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is","","Returns `true` if the type of the value corresponds to `T`.",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"type_","","Returns the type of the value.",22,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"type_transformable","","Returns whether `Value`s of type `src` can be transformed to type `dst`.",22,{"inputs":[{"name":"type"},{"name":"type"}],"output":{"name":"bool"}}],[11,"try_into_send_value","","",22,{"inputs":[{"name":"self"}],"output":{"generics":["sendvalue","value"],"name":"result"}}],[11,"deref","","",23,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"description","","",24,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"to_glib_none_mut","","",23,{"inputs":[{"name":"self"}],"output":{"generics":["typedvalue"],"name":"stashmut"}}],[11,"to_glib_none_mut","","",22,{"inputs":[{"name":"self"}],"output":{"generics":["value"],"name":"stashmut"}}],[11,"from_glib_full","","",22,null],[11,"from_glib_none_as_vec","","",22,null],[11,"from_glib_container_as_vec","","",22,null],[11,"from_glib_full_as_vec","","",22,null],[11,"from_glib_none_as_vec","","",22,null],[11,"from_glib_container_as_vec","","",22,null],[11,"from_glib_full_as_vec","","",22,null],[11,"to_glib_none","","",22,{"inputs":[{"name":"self"}],"output":{"generics":["value"],"name":"stash"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from","","",23,{"inputs":[{"generics":["str"],"name":"option"}],"output":{"generics":["string"],"name":"typedvalue"}}],[11,"from","","",22,{"inputs":[{"name":"typedvalue"}],"output":{"name":"value"}}],[11,"from","","",23,{"inputs":[{"name":"t"}],"output":{"name":"typedvalue"}}],[11,"from","","",23,{"inputs":[{"generics":["string"],"name":"typedvalue"}],"output":{"generics":["str"],"name":"typedvalue"}}],[11,"from","","",22,{"inputs":[{"name":"t"}],"output":{"name":"value"}}],[11,"from","","",23,{"inputs":[{"name":"option"}],"output":{"name":"typedvalue"}}],[11,"from","","",22,{"inputs":[{"name":"option"}],"output":{"name":"value"}}],[11,"from","","",22,{"inputs":[{"name":"sendvalue"}],"output":{"name":"value"}}],[11,"from","","",23,{"inputs":[{"generics":["str"],"name":"typedvalue"}],"output":{"generics":["string"],"name":"typedvalue"}}],[11,"from","","",23,{"inputs":[{"name":"str"}],"output":{"generics":["string"],"name":"typedvalue"}}],[11,"static_type","","",24,{"inputs":[],"output":{"name":"type"}}],[11,"from_glib_none_num_as_vec","","",22,null],[11,"from_glib_container_num_as_vec","","",22,null],[11,"from_glib_full_num_as_vec","","",22,null],[11,"from_glib_none_num_as_vec","","",4,null],[11,"from_glib_container_num_as_vec","","",4,null],[11,"from_glib_full_num_as_vec","","",4,null],[11,"from_glib_none_num_as_vec","","",4,null],[11,"from_glib_container_num_as_vec","","",4,null],[11,"from_glib_full_num_as_vec","","",4,null],[11,"from_glib_none_num_as_vec","","",22,null],[11,"from_glib_container_num_as_vec","","",22,null],[11,"from_glib_full_num_as_vec","","",22,null],[11,"drop","","",22,null],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"to_glib_none_from_slice","","",4,null],[11,"to_glib_container_from_slice","","",4,null],[11,"to_glib_full_from_slice","","",4,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"to_glib","","",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_glib","","",1,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"uninitialized","","",22,{"inputs":[],"output":{"name":"value"}}],[11,"to_value","","",22,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"to_value_type","","",22,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"new","","Creates an error with supplied error enum variant and message.",24,{"inputs":[{"name":"t"},{"name":"str"}],"output":{"name":"error"}}],[11,"is","","Checks if the error domain matches `T`.",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"kind","","Tries to convert to a specific error enum.",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"wrap","","",24,null],[11,"name","","",4,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"is_a","","",4,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"parent","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["type"],"name":"option"}}],[11,"children","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["type"],"name":"vec"}}],[11,"interfaces","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["type"],"name":"vec"}}],[11,"interface_prerequisites","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["type"],"name":"vec"}}],[11,"from_name","","",4,{"inputs":[{"name":"p"}],"output":{"generics":["type"],"name":"option"}}],[11,"get","","Returns the value.",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_some","","Returns the value.",23,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set","","Sets the value.",23,null],[11,"set_none","","Sets the value to `None`.",23,null],[11,"set_some","","Sets the value.",23,null],[11,"into_send_value","","",23,{"inputs":[{"name":"self"}],"output":{"name":"sendvalue"}}]],"paths":[[8,"Cast"],[3,"Continue"],[8,"StaticType"],[8,"ToValue"],[4,"Type"],[4,"PlayerColorBalanceType"],[4,"PlayerError"],[4,"PlayerSnapshotFormat"],[4,"PlayerState"],[3,"Player"],[3,"PlayerAudioInfo"],[3,"PlayerGMainContextSignalDispatcher"],[3,"PlayerMediaInfo"],[3,"PlayerSignalDispatcher"],[3,"PlayerStreamInfo"],[3,"PlayerSubtitleInfo"],[3,"PlayerVideoInfo"],[3,"PlayerVideoOverlayVideoRenderer"],[3,"PlayerVideoRenderer"],[3,"PlayerVisualization"],[3,"PlayerConfig"],[8,"PlayerStreamInfoExt"],[3,"Value"],[3,"TypedValue"],[3,"Error"]]};
searchIndex["gstreamer_player_sys"] = {"doc":"","items":[[3,"GstPlayerAudioInfoClass","gstreamer_player_sys","",null,null],[3,"GstPlayerClass","","",null,null],[3,"GstPlayerGMainContextSignalDispatcherClass","","",null,null],[3,"GstPlayerMediaInfoClass","","",null,null],[3,"GstPlayerSignalDispatcherInterface","","",null,null],[12,"parent_iface","","",0,null],[12,"dispatch","","",0,null],[3,"GstPlayerStreamInfoClass","","",null,null],[3,"GstPlayerSubtitleInfoClass","","",null,null],[3,"GstPlayerVideoInfoClass","","",null,null],[3,"GstPlayerVideoOverlayVideoRendererClass","","",null,null],[3,"GstPlayerVideoRendererInterface","","",null,null],[12,"parent_iface","","",1,null],[12,"create_video_sink","","",1,null],[3,"GstPlayerVisualization","","",null,null],[12,"name","","",2,null],[12,"description","","",2,null],[3,"GstPlayer","","",null,null],[3,"GstPlayerAudioInfo","","",null,null],[3,"GstPlayerGMainContextSignalDispatcher","","",null,null],[3,"GstPlayerMediaInfo","","",null,null],[3,"GstPlayerStreamInfo","","",null,null],[3,"GstPlayerSubtitleInfo","","",null,null],[3,"GstPlayerVideoInfo","","",null,null],[3,"GstPlayerVideoOverlayVideoRenderer","","",null,null],[3,"GstPlayerSignalDispatcher","","",null,null],[3,"GstPlayerVideoRenderer","","",null,null],[5,"gst_player_color_balance_type_get_type","","",null,null],[5,"gst_player_color_balance_type_get_name","","",null,null],[5,"gst_player_error_get_type","","",null,null],[5,"gst_player_error_get_name","","",null,null],[5,"gst_player_error_quark","","",null,null],[5,"gst_player_state_get_type","","",null,null],[5,"gst_player_state_get_name","","",null,null],[5,"gst_player_visualization_get_type","","",null,null],[5,"gst_player_visualization_copy","","",null,null],[5,"gst_player_visualization_free","","",null,null],[5,"gst_player_get_type","","",null,null],[5,"gst_player_new","","",null,null],[5,"gst_player_config_get_position_update_interval","","",null,null],[5,"gst_player_config_get_seek_accurate","","",null,null],[5,"gst_player_config_get_user_agent","","",null,null],[5,"gst_player_config_set_position_update_interval","","",null,null],[5,"gst_player_config_set_user_agent","","",null,null],[5,"gst_player_get_audio_streams","","",null,null],[5,"gst_player_get_subtitle_streams","","",null,null],[5,"gst_player_get_video_streams","","",null,null],[5,"gst_player_visualizations_free","","",null,null],[5,"gst_player_visualizations_get","","",null,null],[5,"gst_player_config_set_seek_accurate","","",null,null],[5,"gst_player_get_audio_video_offset","","",null,null],[5,"gst_player_get_color_balance","","",null,null],[5,"gst_player_get_config","","",null,null],[5,"gst_player_get_current_audio_track","","",null,null],[5,"gst_player_get_current_subtitle_track","","",null,null],[5,"gst_player_get_current_video_track","","",null,null],[5,"gst_player_get_current_visualization","","",null,null],[5,"gst_player_get_duration","","",null,null],[5,"gst_player_get_media_info","","",null,null],[5,"gst_player_get_multiview_flags","","",null,null],[5,"gst_player_get_multiview_mode","","",null,null],[5,"gst_player_get_mute","","",null,null],[5,"gst_player_get_pipeline","","",null,null],[5,"gst_player_get_position","","",null,null],[5,"gst_player_get_rate","","",null,null],[5,"gst_player_get_subtitle_uri","","",null,null],[5,"gst_player_get_uri","","",null,null],[5,"gst_player_get_video_snapshot","","",null,null],[5,"gst_player_get_volume","","",null,null],[5,"gst_player_has_color_balance","","",null,null],[5,"gst_player_pause","","",null,null],[5,"gst_player_play","","",null,null],[5,"gst_player_seek","","",null,null],[5,"gst_player_set_audio_track","","",null,null],[5,"gst_player_set_audio_track_enabled","","",null,null],[5,"gst_player_set_audio_video_offset","","",null,null],[5,"gst_player_set_color_balance","","",null,null],[5,"gst_player_set_config","","",null,null],[5,"gst_player_set_multiview_flags","","",null,null],[5,"gst_player_set_multiview_mode","","",null,null],[5,"gst_player_set_mute","","",null,null],[5,"gst_player_set_rate","","",null,null],[5,"gst_player_set_subtitle_track","","",null,null],[5,"gst_player_set_subtitle_track_enabled","","",null,null],[5,"gst_player_set_subtitle_uri","","",null,null],[5,"gst_player_set_uri","","",null,null],[5,"gst_player_set_video_track","","",null,null],[5,"gst_player_set_video_track_enabled","","",null,null],[5,"gst_player_set_visualization","","",null,null],[5,"gst_player_set_visualization_enabled","","",null,null],[5,"gst_player_set_volume","","",null,null],[5,"gst_player_stop","","",null,null],[5,"gst_player_audio_info_get_type","","",null,null],[5,"gst_player_audio_info_get_bitrate","","",null,null],[5,"gst_player_audio_info_get_channels","","",null,null],[5,"gst_player_audio_info_get_language","","",null,null],[5,"gst_player_audio_info_get_max_bitrate","","",null,null],[5,"gst_player_audio_info_get_sample_rate","","",null,null],[5,"gst_player_g_main_context_signal_dispatcher_get_type","","",null,null],[5,"gst_player_g_main_context_signal_dispatcher_new","","",null,null],[5,"gst_player_media_info_get_type","","",null,null],[5,"gst_player_media_info_get_audio_streams","","",null,null],[5,"gst_player_media_info_get_container_format","","",null,null],[5,"gst_player_media_info_get_duration","","",null,null],[5,"gst_player_media_info_get_image_sample","","",null,null],[5,"gst_player_media_info_get_number_of_audio_streams","","",null,null],[5,"gst_player_media_info_get_number_of_streams","","",null,null],[5,"gst_player_media_info_get_number_of_subtitle_streams","","",null,null],[5,"gst_player_media_info_get_number_of_video_streams","","",null,null],[5,"gst_player_media_info_get_stream_list","","",null,null],[5,"gst_player_media_info_get_subtitle_streams","","",null,null],[5,"gst_player_media_info_get_tags","","",null,null],[5,"gst_player_media_info_get_title","","",null,null],[5,"gst_player_media_info_get_uri","","",null,null],[5,"gst_player_media_info_get_video_streams","","",null,null],[5,"gst_player_media_info_is_live","","",null,null],[5,"gst_player_media_info_is_seekable","","",null,null],[5,"gst_player_stream_info_get_type","","",null,null],[5,"gst_player_stream_info_get_caps","","",null,null],[5,"gst_player_stream_info_get_codec","","",null,null],[5,"gst_player_stream_info_get_index","","",null,null],[5,"gst_player_stream_info_get_stream_type","","",null,null],[5,"gst_player_stream_info_get_tags","","",null,null],[5,"gst_player_subtitle_info_get_type","","",null,null],[5,"gst_player_subtitle_info_get_language","","",null,null],[5,"gst_player_video_info_get_type","","",null,null],[5,"gst_player_video_info_get_bitrate","","",null,null],[5,"gst_player_video_info_get_framerate","","",null,null],[5,"gst_player_video_info_get_height","","",null,null],[5,"gst_player_video_info_get_max_bitrate","","",null,null],[5,"gst_player_video_info_get_pixel_aspect_ratio","","",null,null],[5,"gst_player_video_info_get_width","","",null,null],[5,"gst_player_video_overlay_video_renderer_get_type","","",null,null],[5,"gst_player_video_overlay_video_renderer_new","","",null,null],[5,"gst_player_video_overlay_video_renderer_new_with_sink","","",null,null],[5,"gst_player_video_overlay_video_renderer_expose","","",null,null],[5,"gst_player_video_overlay_video_renderer_get_render_rectangle","","",null,null],[5,"gst_player_video_overlay_video_renderer_get_window_handle","","",null,null],[5,"gst_player_video_overlay_video_renderer_set_render_rectangle","","",null,null],[5,"gst_player_video_overlay_video_renderer_set_window_handle","","",null,null],[5,"gst_player_signal_dispatcher_get_type","","",null,null],[5,"gst_player_video_renderer_get_type","","",null,null],[6,"GstPlayerColorBalanceType","","",null,null],[6,"PlayerError","","",null,null],[6,"GstPlayerError","","",null,null],[6,"GstPlayerSnapshotFormat","","",null,null],[6,"GstPlayerState","","",null,null],[6,"GstPlayerSignalDispatcherFunc","","",null,null],[17,"GST_PLAYER_COLOR_BALANCE_HUE","","",null,null],[17,"GST_PLAYER_COLOR_BALANCE_BRIGHTNESS","","",null,null],[17,"GST_PLAYER_COLOR_BALANCE_SATURATION","","",null,null],[17,"GST_PLAYER_COLOR_BALANCE_CONTRAST","","",null,null],[17,"GST_PLAYER_ERROR_FAILED","","",null,null],[17,"GST_PLAYER_THUMBNAIL_RAW_NATIVE","","",null,null],[17,"GST_PLAYER_THUMBNAIL_RAW_xRGB","","",null,null],[17,"GST_PLAYER_THUMBNAIL_RAW_BGRx","","",null,null],[17,"GST_PLAYER_THUMBNAIL_JPG","","",null,null],[17,"GST_PLAYER_THUMBNAIL_PNG","","",null,null],[17,"GST_PLAYER_STATE_STOPPED","","",null,null],[17,"GST_PLAYER_STATE_BUFFERING","","",null,null],[17,"GST_PLAYER_STATE_PAUSED","","",null,null],[17,"GST_PLAYER_STATE_PLAYING","","",null,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"GstPlayerSignalDispatcherInterface"],[3,"GstPlayerVideoRendererInterface"],[3,"GstPlayerVisualization"],[3,"GstPlayerAudioInfoClass"],[3,"GstPlayerClass"],[3,"GstPlayerGMainContextSignalDispatcherClass"],[3,"GstPlayerMediaInfoClass"],[3,"GstPlayerStreamInfoClass"],[3,"GstPlayerSubtitleInfoClass"],[3,"GstPlayerVideoInfoClass"],[3,"GstPlayerVideoOverlayVideoRendererClass"],[3,"GstPlayer"],[3,"GstPlayerAudioInfo"],[3,"GstPlayerGMainContextSignalDispatcher"],[3,"GstPlayerMediaInfo"],[3,"GstPlayerStreamInfo"],[3,"GstPlayerSubtitleInfo"],[3,"GstPlayerVideoInfo"],[3,"GstPlayerVideoOverlayVideoRenderer"],[3,"GstPlayerSignalDispatcher"],[3,"GstPlayerVideoRenderer"]]};
searchIndex["gstreamer_sys"] = {"doc":"","items":[[3,"GstAllocatorFlags","gstreamer_sys","",null,null],[3,"GstBinFlags","","",null,null],[3,"GstBufferCopyFlags","","",null,null],[3,"GstBufferFlags","","",null,null],[3,"GstBufferPoolAcquireFlags","","",null,null],[3,"GstBusFlags","","",null,null],[3,"GstCapsFlags","","",null,null],[3,"GstClockFlags","","",null,null],[3,"GstDebugColorFlags","","",null,null],[3,"GstDebugGraphDetails","","",null,null],[3,"GstElementFlags","","",null,null],[3,"GstEventTypeFlags","","",null,null],[3,"GstLockFlags","","",null,null],[3,"GstMapFlags","","",null,null],[3,"GstMemoryFlags","","",null,null],[3,"GstMessageType","","",null,null],[3,"GstMetaFlags","","",null,null],[3,"GstMiniObjectFlags","","",null,null],[3,"GstObjectFlags","","",null,null],[3,"GstPadFlags","","",null,null],[3,"GstPadLinkCheck","","",null,null],[3,"GstPadProbeType","","",null,null],[3,"GstPadTemplateFlags","","",null,null],[3,"GstParseFlags","","",null,null],[3,"GstPipelineFlags","","",null,null],[3,"GstPluginDependencyFlags","","",null,null],[3,"GstPluginFlags","","",null,null],[3,"GstQueryTypeFlags","","",null,null],[3,"GstSchedulingFlags","","",null,null],[3,"GstSeekFlags","","",null,null],[3,"GstSegmentFlags","","",null,null],[3,"GstStackTraceFlags","","",null,null],[3,"GstStreamFlags","","",null,null],[3,"GstStreamType","","",null,null],[3,"GstTracerValueFlags","","",null,null],[3,"GstAllocationParams","","",null,null],[12,"flags","","",0,null],[12,"align","","",0,null],[12,"prefix","","",0,null],[12,"padding","","",0,null],[12,"_gst_reserved","","",0,null],[3,"GstAllocatorClass","","",null,null],[12,"object_class","","",1,null],[12,"alloc","","",1,null],[12,"free","","",1,null],[12,"_gst_reserved","","",1,null],[3,"GstAllocatorPrivate","","",null,null],[3,"GstAtomicQueue","","",null,null],[3,"GstBinClass","","",null,null],[12,"parent_class","","",2,null],[12,"pool","","",2,null],[12,"element_added","","",2,null],[12,"element_removed","","",2,null],[12,"add_element","","",2,null],[12,"remove_element","","",2,null],[12,"handle_message","","",2,null],[12,"do_latency","","",2,null],[12,"deep_element_added","","",2,null],[12,"deep_element_removed","","",2,null],[12,"_gst_reserved","","",2,null],[3,"GstBinPrivate","","",null,null],[3,"GstBuffer","","",null,null],[12,"mini_object","","",3,null],[12,"pool","","",3,null],[12,"pts","","",3,null],[12,"dts","","",3,null],[12,"duration","","",3,null],[12,"offset","","",3,null],[12,"offset_end","","",3,null],[3,"GstBufferList","","",null,null],[3,"GstBufferPoolAcquireParams","","",null,null],[12,"format","","",4,null],[12,"start","","",4,null],[12,"stop","","",4,null],[12,"flags","","",4,null],[12,"_gst_reserved","","",4,null],[3,"GstBufferPoolClass","","",null,null],[12,"object_class","","",5,null],[12,"get_options","","",5,null],[12,"set_config","","",5,null],[12,"start","","",5,null],[12,"stop","","",5,null],[12,"acquire_buffer","","",5,null],[12,"alloc_buffer","","",5,null],[12,"reset_buffer","","",5,null],[12,"release_buffer","","",5,null],[12,"free_buffer","","",5,null],[12,"flush_start","","",5,null],[12,"flush_stop","","",5,null],[12,"_gst_reserved","","",5,null],[3,"GstBufferPoolPrivate","","",null,null],[3,"GstBusClass","","",null,null],[12,"parent_class","","",6,null],[12,"message","","",6,null],[12,"sync_message","","",6,null],[12,"_gst_reserved","","",6,null],[3,"GstBusPrivate","","",null,null],[3,"GstCaps","","",null,null],[12,"mini_object","","",7,null],[3,"GstCapsFeatures","","",null,null],[3,"GstChildProxyInterface","","",null,null],[12,"parent","","",8,null],[12,"get_child_by_name","","",8,null],[12,"get_child_by_index","","",8,null],[12,"get_children_count","","",8,null],[12,"child_added","","",8,null],[12,"child_removed","","",8,null],[12,"_gst_reserved","","",8,null],[3,"GstClockClass","","",null,null],[12,"parent_class","","",9,null],[12,"change_resolution","","",9,null],[12,"get_resolution","","",9,null],[12,"get_internal_time","","",9,null],[12,"wait","","",9,null],[12,"wait_async","","",9,null],[12,"unschedule","","",9,null],[12,"_gst_reserved","","",9,null],[3,"GstClockEntry","","",null,null],[12,"refcount","","",10,null],[12,"clock","","",10,null],[12,"type_","","",10,null],[12,"time","","",10,null],[12,"interval","","",10,null],[12,"status","","",10,null],[12,"func","","",10,null],[12,"user_data","","",10,null],[12,"destroy_data","","",10,null],[12,"unscheduled","","",10,null],[12,"woken_up","","",10,null],[12,"_gst_reserved","","",10,null],[3,"GstClockPrivate","","",null,null],[3,"GstContext","","",null,null],[3,"GstControlBindingClass","","",null,null],[12,"parent_class","","",11,null],[12,"sync_values","","",11,null],[12,"get_value","","",11,null],[12,"get_value_array","","",11,null],[12,"get_g_value_array","","",11,null],[12,"_gst_reserved","","",11,null],[3,"GstControlBindingPrivate","","",null,null],[3,"GstControlSourceClass","","",null,null],[12,"parent_class","","",12,null],[12,"_gst_reserved","","",12,null],[3,"GstDateTime","","",null,null],[3,"GstDebugCategory","","",null,null],[12,"threshold","","",13,null],[12,"color","","",13,null],[12,"name","","",13,null],[12,"description","","",13,null],[3,"GstDebugMessage","","",null,null],[3,"GstDeviceClass","","",null,null],[12,"parent_class","","",14,null],[12,"create_element","","",14,null],[12,"reconfigure_element","","",14,null],[12,"_gst_reserved","","",14,null],[3,"GstDeviceMonitorClass","","",null,null],[12,"parent_class","","",15,null],[12,"_gst_reserved","","",15,null],[3,"GstDeviceMonitorPrivate","","",null,null],[3,"GstDevicePrivate","","",null,null],[3,"GstDeviceProviderClass","","",null,null],[12,"parent_class","","",16,null],[12,"factory","","",16,null],[12,"probe","","",16,null],[12,"start","","",16,null],[12,"stop","","",16,null],[12,"metadata","","",16,null],[12,"_gst_reserved","","",16,null],[3,"GstDeviceProviderFactoryClass","","",null,null],[3,"GstDeviceProviderPrivate","","",null,null],[3,"GstDynamicTypeFactoryClass","","",null,null],[3,"GstElementClass","","",null,null],[12,"parent_class","","",17,null],[12,"metadata","","",17,null],[12,"elementfactory","","",17,null],[12,"padtemplates","","",17,null],[12,"numpadtemplates","","",17,null],[12,"pad_templ_cookie","","",17,null],[12,"pad_added","","",17,null],[12,"pad_removed","","",17,null],[12,"no_more_pads","","",17,null],[12,"request_new_pad","","",17,null],[12,"release_pad","","",17,null],[12,"get_state","","",17,null],[12,"set_state","","",17,null],[12,"change_state","","",17,null],[12,"state_changed","","",17,null],[12,"set_bus","","",17,null],[12,"provide_clock","","",17,null],[12,"set_clock","","",17,null],[12,"send_event","","",17,null],[12,"query","","",17,null],[12,"post_message","","",17,null],[12,"set_context","","",17,null],[12,"_gst_reserved","","",17,null],[3,"GstElementFactoryClass","","",null,null],[3,"GstEvent","","",null,null],[12,"mini_object","","",18,null],[12,"type_","","",18,null],[12,"timestamp","","",18,null],[12,"seqnum","","",18,null],[3,"GstFormatDefinition","","",null,null],[12,"value","","",19,null],[12,"nick","","",19,null],[12,"description","","",19,null],[12,"quark","","",19,null],[3,"GstGhostPadClass","","",null,null],[12,"parent_class","","",20,null],[12,"_gst_reserved","","",20,null],[3,"GstGhostPadPrivate","","",null,null],[3,"GstIterator","","",null,null],[12,"copy","","",21,null],[12,"next","","",21,null],[12,"item","","",21,null],[12,"resync","","",21,null],[12,"free","","",21,null],[12,"pushed","","",21,null],[12,"type_","","",21,null],[12,"lock","","",21,null],[12,"cookie","","",21,null],[12,"master_cookie","","",21,null],[12,"size","","",21,null],[12,"_gst_reserved","","",21,null],[3,"GstMapInfo","","",null,null],[12,"memory","","",22,null],[12,"flags","","",22,null],[12,"data","","",22,null],[12,"size","","",22,null],[12,"maxsize","","",22,null],[12,"user_data","","",22,null],[12,"_gst_reserved","","",22,null],[3,"GstMemory","","",null,null],[12,"mini_object","","",23,null],[12,"allocator","","",23,null],[12,"parent","","",23,null],[12,"maxsize","","",23,null],[12,"align","","",23,null],[12,"offset","","",23,null],[12,"size","","",23,null],[3,"GstMessage","","",null,null],[12,"mini_object","","",24,null],[12,"type_","","",24,null],[12,"timestamp","","",24,null],[12,"src","","",24,null],[12,"seqnum","","",24,null],[12,"lock","","",24,null],[12,"cond","","",24,null],[3,"GstMeta","","",null,null],[12,"flags","","",25,null],[12,"info","","",25,null],[3,"GstMetaInfo","","",null,null],[12,"api","","",26,null],[12,"type_","","",26,null],[12,"size","","",26,null],[12,"init_func","","",26,null],[12,"free_func","","",26,null],[12,"transform_func","","",26,null],[3,"GstMetaTransformCopy","","",null,null],[12,"region","","",27,null],[12,"offset","","",27,null],[12,"size","","",27,null],[3,"GstMiniObject","","",null,null],[12,"type_","","",28,null],[12,"refcount","","",28,null],[12,"lockstate","","",28,null],[12,"flags","","",28,null],[12,"copy","","",28,null],[12,"dispose","","",28,null],[12,"free","","",28,null],[12,"n_qdata","","",28,null],[12,"qdata","","",28,null],[3,"GstObjectClass","","",null,null],[12,"parent_class","","",29,null],[12,"path_string_separator","","",29,null],[12,"deep_notify","","",29,null],[12,"_gst_reserved","","",29,null],[3,"GstPadClass","","",null,null],[12,"parent_class","","",30,null],[12,"linked","","",30,null],[12,"unlinked","","",30,null],[12,"_gst_reserved","","",30,null],[3,"GstPadPrivate","","",null,null],[3,"GstPadProbeInfo","","",null,null],[12,"type_","","",31,null],[12,"id","","",31,null],[12,"data","","",31,null],[12,"offset","","",31,null],[12,"size","","",31,null],[12,"_gst_reserved","","",31,null],[3,"GstPadTemplateClass","","",null,null],[12,"parent_class","","",32,null],[12,"pad_created","","",32,null],[12,"_gst_reserved","","",32,null],[3,"GstParamSpecArray","","",null,null],[12,"parent_instance","","",33,null],[12,"element_spec","","",33,null],[3,"GstParamSpecFraction","","",null,null],[12,"parent_instance","","",34,null],[12,"min_num","","",34,null],[12,"min_den","","",34,null],[12,"max_num","","",34,null],[12,"max_den","","",34,null],[12,"def_num","","",34,null],[12,"def_den","","",34,null],[3,"GstParentBufferMeta","","",null,null],[12,"parent","","",35,null],[12,"buffer","","",35,null],[3,"GstParseContext","","",null,null],[3,"GstPipelineClass","","",null,null],[12,"parent_class","","",36,null],[12,"_gst_reserved","","",36,null],[3,"GstPipelinePrivate","","",null,null],[3,"GstPluginClass","","",null,null],[3,"GstPluginDesc","","",null,null],[12,"major_version","","",37,null],[12,"minor_version","","",37,null],[12,"name","","",37,null],[12,"description","","",37,null],[12,"plugin_init","","",37,null],[12,"version","","",37,null],[12,"license","","",37,null],[12,"source","","",37,null],[12,"package","","",37,null],[12,"origin","","",37,null],[12,"release_datetime","","",37,null],[12,"_gst_reserved","","",37,null],[3,"GstPluginFeatureClass","","",null,null],[3,"GstPoll","","",null,null],[3,"GstPollFD","","",null,null],[12,"fd","","",38,null],[12,"idx","","",38,null],[3,"GstPresetInterface","","",null,null],[12,"parent","","",39,null],[12,"get_preset_names","","",39,null],[12,"get_property_names","","",39,null],[12,"load_preset","","",39,null],[12,"save_preset","","",39,null],[12,"rename_preset","","",39,null],[12,"delete_preset","","",39,null],[12,"set_meta","","",39,null],[12,"get_meta","","",39,null],[12,"_gst_reserved","","",39,null],[3,"GstProtectionMeta","","",null,null],[12,"meta","","",40,null],[12,"info","","",40,null],[3,"GstProxyPadClass","","",null,null],[12,"parent_class","","",41,null],[12,"_gst_reserved","","",41,null],[3,"GstProxyPadPrivate","","",null,null],[3,"GstQuery","","",null,null],[12,"mini_object","","",42,null],[12,"type_","","",42,null],[3,"GstRegistryClass","","",null,null],[12,"parent_class","","",43,null],[3,"GstRegistryPrivate","","",null,null],[3,"GstSample","","",null,null],[3,"GstSegment","","",null,null],[12,"flags","","",44,null],[12,"rate","","",44,null],[12,"applied_rate","","",44,null],[12,"format","","",44,null],[12,"base","","",44,null],[12,"offset","","",44,null],[12,"start","","",44,null],[12,"stop","","",44,null],[12,"time","","",44,null],[12,"position","","",44,null],[12,"duration","","",44,null],[12,"_gst_reserved","","",44,null],[3,"GstStaticCaps","","",null,null],[12,"caps","","",45,null],[12,"string","","",45,null],[12,"_gst_reserved","","",45,null],[3,"GstStaticPadTemplate","","",null,null],[12,"name_template","","",46,null],[12,"direction","","",46,null],[12,"presence","","",46,null],[12,"static_caps","","",46,null],[3,"GstStreamClass","","",null,null],[12,"parent_class","","",47,null],[12,"_gst_reserved","","",47,null],[3,"GstStreamCollectionClass","","",null,null],[12,"parent_class","","",48,null],[12,"stream_notify","","",48,null],[12,"_gst_reserved","","",48,null],[3,"GstStreamCollectionPrivate","","",null,null],[3,"GstStreamPrivate","","",null,null],[3,"GstStructure","","",null,null],[12,"type_","","",49,null],[12,"name","","",49,null],[3,"GstSystemClockClass","","",null,null],[12,"parent_class","","",50,null],[12,"_gst_reserved","","",50,null],[3,"GstSystemClockPrivate","","",null,null],[3,"GstTagList","","",null,null],[12,"mini_object","","",51,null],[3,"GstTagSetterInterface","","",null,null],[12,"g_iface","","",52,null],[3,"GstTaskClass","","",null,null],[12,"parent_class","","",53,null],[12,"pool","","",53,null],[12,"_gst_reserved","","",53,null],[3,"GstTaskPoolClass","","",null,null],[12,"parent_class","","",54,null],[12,"prepare","","",54,null],[12,"cleanup","","",54,null],[12,"push","","",54,null],[12,"join","","",54,null],[12,"_gst_reserved","","",54,null],[3,"GstTaskPrivate","","",null,null],[3,"GstTimedValue","","",null,null],[12,"timestamp","","",55,null],[12,"value","","",55,null],[3,"GstToc","","",null,null],[3,"GstTocEntry","","",null,null],[3,"GstTocSetterInterface","","",null,null],[12,"g_iface","","",56,null],[3,"GstTracerClass","","",null,null],[12,"parent_class","","",57,null],[12,"_gst_reserved","","",57,null],[3,"GstTracerFactoryClass","","",null,null],[3,"GstTracerPrivate","","",null,null],[3,"GstTracerRecordClass","","",null,null],[3,"GstTypeFind","","",null,null],[12,"peek","","",58,null],[12,"suggest","","",58,null],[12,"data","","",58,null],[12,"get_length","","",58,null],[12,"_gst_reserved","","",58,null],[3,"GstTypeFindFactoryClass","","",null,null],[3,"GstURIHandlerInterface","","",null,null],[12,"parent","","",59,null],[12,"get_type","","",59,null],[12,"get_protocols","","",59,null],[12,"get_uri","","",59,null],[12,"set_uri","","",59,null],[3,"GstUri","","",null,null],[3,"GstValueTable","","",null,null],[12,"type_","","",60,null],[12,"compare","","",60,null],[12,"serialize","","",60,null],[12,"deserialize","","",60,null],[12,"_gst_reserved","","",60,null],[3,"GstAllocator","","",null,null],[12,"object","","",61,null],[12,"mem_type","","",61,null],[12,"mem_map","","",61,null],[12,"mem_unmap","","",61,null],[12,"mem_copy","","",61,null],[12,"mem_share","","",61,null],[12,"mem_is_span","","",61,null],[12,"mem_map_full","","",61,null],[12,"mem_unmap_full","","",61,null],[12,"_gst_reserved","","",61,null],[12,"priv_","","",61,null],[3,"GstBin","","",null,null],[12,"element","","",62,null],[12,"numchildren","","",62,null],[12,"children","","",62,null],[12,"children_cookie","","",62,null],[12,"child_bus","","",62,null],[12,"messages","","",62,null],[12,"polling","","",62,null],[12,"state_dirty","","",62,null],[12,"clock_dirty","","",62,null],[12,"provided_clock","","",62,null],[12,"clock_provider","","",62,null],[12,"priv_","","",62,null],[12,"_gst_reserved","","",62,null],[3,"GstBitmask","","",null,null],[3,"GstBufferPool","","",null,null],[12,"object","","",63,null],[12,"flushing","","",63,null],[12,"priv_","","",63,null],[12,"_gst_reserved","","",63,null],[3,"GstBus","","",null,null],[12,"object","","",64,null],[12,"priv_","","",64,null],[12,"_gst_reserved","","",64,null],[3,"GstClock","","",null,null],[12,"object","","",65,null],[12,"priv_","","",65,null],[12,"_gst_reserved","","",65,null],[3,"GstControlBinding","","",null,null],[12,"parent","","",66,null],[12,"name","","",66,null],[12,"pspec","","",66,null],[12,"object","","",66,null],[12,"disabled","","",66,null],[12,"_gst_reserved","","",66,null],[3,"GstControlSource","","",null,null],[12,"parent","","",67,null],[12,"get_value","","",67,null],[12,"get_value_array","","",67,null],[12,"_gst_reserved","","",67,null],[3,"GstDevice","","",null,null],[12,"parent","","",68,null],[12,"priv_","","",68,null],[12,"_gst_reserved","","",68,null],[3,"GstDeviceMonitor","","",null,null],[12,"parent","","",69,null],[12,"priv_","","",69,null],[12,"_gst_reserved","","",69,null],[3,"GstDeviceProvider","","",null,null],[12,"parent","","",70,null],[12,"devices","","",70,null],[12,"priv_","","",70,null],[12,"_gst_reserved","","",70,null],[3,"GstDeviceProviderFactory","","",null,null],[3,"GstDoubleRange","","",null,null],[3,"GstDynamicTypeFactory","","",null,null],[3,"GstElement","","",null,null],[12,"object","","",71,null],[12,"state_lock","","",71,null],[12,"state_cond","","",71,null],[12,"state_cookie","","",71,null],[12,"target_state","","",71,null],[12,"current_state","","",71,null],[12,"next_state","","",71,null],[12,"pending_state","","",71,null],[12,"last_return","","",71,null],[12,"bus","","",71,null],[12,"clock","","",71,null],[12,"base_time","","",71,null],[12,"start_time","","",71,null],[12,"numpads","","",71,null],[12,"pads","","",71,null],[12,"numsrcpads","","",71,null],[12,"srcpads","","",71,null],[12,"numsinkpads","","",71,null],[12,"sinkpads","","",71,null],[12,"pads_cookie","","",71,null],[12,"contexts","","",71,null],[12,"_gst_reserved","","",71,null],[3,"GstElementFactory","","",null,null],[3,"GstFlagSet","","",null,null],[3,"GstFraction","","",null,null],[3,"GstFractionRange","","",null,null],[3,"GstGhostPad","","",null,null],[12,"pad","","",72,null],[12,"priv_","","",72,null],[3,"GstInt64Range","","",null,null],[3,"GstIntRange","","",null,null],[3,"GstObject","","",null,null],[12,"object","","",73,null],[12,"lock","","",73,null],[12,"name","","",73,null],[12,"parent","","",73,null],[12,"flags","","",73,null],[12,"control_bindings","","",73,null],[12,"control_rate","","",73,null],[12,"last_sync","","",73,null],[12,"_gst_reserved","","",73,null],[3,"GstPad","","",null,null],[12,"object","","",74,null],[12,"element_private","","",74,null],[12,"padtemplate","","",74,null],[12,"direction","","",74,null],[12,"stream_rec_lock","","",74,null],[12,"task","","",74,null],[12,"block_cond","","",74,null],[12,"probes","","",74,null],[12,"mode","","",74,null],[12,"activatefunc","","",74,null],[12,"activatedata","","",74,null],[12,"activatenotify","","",74,null],[12,"activatemodefunc","","",74,null],[12,"activatemodedata","","",74,null],[12,"activatemodenotify","","",74,null],[12,"peer","","",74,null],[12,"linkfunc","","",74,null],[12,"linkdata","","",74,null],[12,"linknotify","","",74,null],[12,"unlinkfunc","","",74,null],[12,"unlinkdata","","",74,null],[12,"unlinknotify","","",74,null],[12,"chainfunc","","",74,null],[12,"chaindata","","",74,null],[12,"chainnotify","","",74,null],[12,"chainlistfunc","","",74,null],[12,"chainlistdata","","",74,null],[12,"chainlistnotify","","",74,null],[12,"getrangefunc","","",74,null],[12,"getrangedata","","",74,null],[12,"getrangenotify","","",74,null],[12,"eventfunc","","",74,null],[12,"eventdata","","",74,null],[12,"eventnotify","","",74,null],[12,"offset","","",74,null],[12,"queryfunc","","",74,null],[12,"querydata","","",74,null],[12,"querynotify","","",74,null],[12,"iterintlinkfunc","","",74,null],[12,"iterintlinkdata","","",74,null],[12,"iterintlinknotify","","",74,null],[12,"num_probes","","",74,null],[12,"num_blocked","","",74,null],[12,"priv_","","",74,null],[12,"_gst_reserved","","",74,null],[3,"GstPadTemplate","","",null,null],[12,"object","","",75,null],[12,"name_template","","",75,null],[12,"direction","","",75,null],[12,"presence","","",75,null],[12,"caps","","",75,null],[12,"_gst_reserved","","",75,null],[3,"GstParamArray","","",null,null],[3,"GstParamFraction","","",null,null],[3,"GstPipeline","","",null,null],[12,"bin","","",76,null],[12,"fixed_clock","","",76,null],[12,"stream_time","","",76,null],[12,"delay","","",76,null],[12,"priv_","","",76,null],[12,"_gst_reserved","","",76,null],[3,"GstPlugin","","",null,null],[3,"GstPluginFeature","","",null,null],[3,"GstProxyPad","","",null,null],[12,"pad","","",77,null],[12,"priv_","","",77,null],[3,"GstRegistry","","",null,null],[12,"object","","",78,null],[12,"priv_","","",78,null],[3,"GstStream","","",null,null],[12,"object","","",79,null],[12,"stream_id","","",79,null],[12,"priv_","","",79,null],[12,"_gst_reserved","","",79,null],[3,"GstStreamCollection","","",null,null],[12,"object","","",80,null],[12,"upstream_id","","",80,null],[12,"priv_","","",80,null],[12,"_gst_reserved","","",80,null],[3,"GstSystemClock","","",null,null],[12,"clock","","",81,null],[12,"priv_","","",81,null],[12,"_gst_reserved","","",81,null],[3,"GstTask","","",null,null],[12,"object","","",82,null],[12,"state","","",82,null],[12,"cond","","",82,null],[12,"lock","","",82,null],[12,"func","","",82,null],[12,"user_data","","",82,null],[12,"notify","","",82,null],[12,"running","","",82,null],[12,"thread","","",82,null],[12,"priv_","","",82,null],[12,"_gst_reserved","","",82,null],[3,"GstTaskPool","","",null,null],[12,"object","","",83,null],[12,"pool","","",83,null],[12,"_gst_reserved","","",83,null],[3,"GstTracer","","",null,null],[12,"parent","","",84,null],[12,"priv_","","",84,null],[12,"_gst_reserved","","",84,null],[3,"GstTracerFactory","","",null,null],[3,"GstTracerRecord","","",null,null],[3,"GstTypeFindFactory","","",null,null],[3,"GstValueArray","","",null,null],[3,"GstValueList","","",null,null],[3,"GstChildProxy","","",null,null],[3,"GstPreset","","",null,null],[3,"GstTagSetter","","",null,null],[3,"GstTocSetter","","",null,null],[3,"GstURIHandler","","",null,null],[5,"gst_buffering_mode_get_type","","",null,null],[5,"gst_bus_sync_reply_get_type","","",null,null],[5,"gst_caps_intersect_mode_get_type","","",null,null],[5,"gst_clock_entry_type_get_type","","",null,null],[5,"gst_clock_return_get_type","","",null,null],[5,"gst_clock_type_get_type","","",null,null],[5,"gst_core_error_get_type","","",null,null],[5,"gst_core_error_quark","","",null,null],[5,"gst_debug_color_mode_get_type","","",null,null],[5,"gst_debug_level_get_type","","",null,null],[5,"gst_debug_level_get_name","","",null,null],[5,"gst_event_type_get_type","","",null,null],[5,"gst_event_type_get_flags","","",null,null],[5,"gst_event_type_get_name","","",null,null],[5,"gst_event_type_to_quark","","",null,null],[5,"gst_flow_return_get_type","","",null,null],[5,"gst_format_get_type","","",null,null],[5,"gst_format_get_by_nick","","",null,null],[5,"gst_format_get_details","","",null,null],[5,"gst_format_get_name","","",null,null],[5,"gst_format_iterate_definitions","","",null,null],[5,"gst_format_register","","",null,null],[5,"gst_format_to_quark","","",null,null],[5,"gst_iterator_item_get_type","","",null,null],[5,"gst_iterator_result_get_type","","",null,null],[5,"gst_library_error_get_type","","",null,null],[5,"gst_library_error_quark","","",null,null],[5,"gst_pad_direction_get_type","","",null,null],[5,"gst_pad_link_return_get_type","","",null,null],[5,"gst_pad_mode_get_type","","",null,null],[5,"gst_pad_mode_get_name","","",null,null],[5,"gst_pad_presence_get_type","","",null,null],[5,"gst_pad_probe_return_get_type","","",null,null],[5,"gst_parse_error_get_type","","",null,null],[5,"gst_parse_error_quark","","",null,null],[5,"gst_plugin_error_get_type","","",null,null],[5,"gst_plugin_error_quark","","",null,null],[5,"gst_progress_type_get_type","","",null,null],[5,"gst_qos_type_get_type","","",null,null],[5,"gst_query_type_get_type","","",null,null],[5,"gst_query_type_get_flags","","",null,null],[5,"gst_query_type_get_name","","",null,null],[5,"gst_query_type_to_quark","","",null,null],[5,"gst_rank_get_type","","",null,null],[5,"gst_resource_error_get_type","","",null,null],[5,"gst_resource_error_quark","","",null,null],[5,"gst_search_mode_get_type","","",null,null],[5,"gst_seek_type_get_type","","",null,null],[5,"gst_state_get_type","","",null,null],[5,"gst_state_change_get_type","","",null,null],[5,"gst_state_change_return_get_type","","",null,null],[5,"gst_stream_error_get_type","","",null,null],[5,"gst_stream_error_quark","","",null,null],[5,"gst_stream_status_type_get_type","","",null,null],[5,"gst_structure_change_type_get_type","","",null,null],[5,"gst_tag_flag_get_type","","",null,null],[5,"gst_tag_merge_mode_get_type","","",null,null],[5,"gst_tag_scope_get_type","","",null,null],[5,"gst_task_state_get_type","","",null,null],[5,"gst_toc_entry_type_get_type","","",null,null],[5,"gst_toc_entry_type_get_nick","","",null,null],[5,"gst_toc_loop_type_get_type","","",null,null],[5,"gst_toc_scope_get_type","","",null,null],[5,"gst_tracer_value_scope_get_type","","",null,null],[5,"gst_type_find_probability_get_type","","",null,null],[5,"gst_uri_error_get_type","","",null,null],[5,"gst_uri_error_quark","","",null,null],[5,"gst_uri_type_get_type","","",null,null],[5,"gst_allocator_flags_get_type","","",null,null],[5,"gst_bin_flags_get_type","","",null,null],[5,"gst_buffer_copy_flags_get_type","","",null,null],[5,"gst_buffer_flags_get_type","","",null,null],[5,"gst_buffer_pool_acquire_flags_get_type","","",null,null],[5,"gst_bus_flags_get_type","","",null,null],[5,"gst_caps_flags_get_type","","",null,null],[5,"gst_clock_flags_get_type","","",null,null],[5,"gst_debug_color_flags_get_type","","",null,null],[5,"gst_debug_graph_details_get_type","","",null,null],[5,"gst_element_flags_get_type","","",null,null],[5,"gst_event_type_flags_get_type","","",null,null],[5,"gst_lock_flags_get_type","","",null,null],[5,"gst_map_flags_get_type","","",null,null],[5,"gst_memory_flags_get_type","","",null,null],[5,"gst_message_type_get_type","","",null,null],[5,"gst_message_type_get_name","","",null,null],[5,"gst_message_type_to_quark","","",null,null],[5,"gst_meta_flags_get_type","","",null,null],[5,"gst_mini_object_flags_get_type","","",null,null],[5,"gst_object_flags_get_type","","",null,null],[5,"gst_pad_flags_get_type","","",null,null],[5,"gst_pad_link_check_get_type","","",null,null],[5,"gst_pad_probe_type_get_type","","",null,null],[5,"gst_pad_template_flags_get_type","","",null,null],[5,"gst_parse_flags_get_type","","",null,null],[5,"gst_pipeline_flags_get_type","","",null,null],[5,"gst_plugin_dependency_flags_get_type","","",null,null],[5,"gst_plugin_flags_get_type","","",null,null],[5,"gst_query_type_flags_get_type","","",null,null],[5,"gst_scheduling_flags_get_type","","",null,null],[5,"gst_seek_flags_get_type","","",null,null],[5,"gst_segment_flags_get_type","","",null,null],[5,"gst_stack_trace_flags_get_type","","",null,null],[5,"gst_stream_flags_get_type","","",null,null],[5,"gst_stream_type_get_type","","",null,null],[5,"gst_stream_type_get_name","","",null,null],[5,"gst_tracer_value_flags_get_type","","",null,null],[5,"gst_allocation_params_get_type","","",null,null],[5,"gst_allocation_params_copy","","",null,null],[5,"gst_allocation_params_free","","",null,null],[5,"gst_allocation_params_init","","",null,null],[5,"gst_atomic_queue_get_type","","",null,null],[5,"gst_atomic_queue_new","","",null,null],[5,"gst_atomic_queue_length","","",null,null],[5,"gst_atomic_queue_peek","","",null,null],[5,"gst_atomic_queue_pop","","",null,null],[5,"gst_atomic_queue_push","","",null,null],[5,"gst_atomic_queue_ref","","",null,null],[5,"gst_atomic_queue_unref","","",null,null],[5,"gst_buffer_get_type","","",null,null],[5,"gst_buffer_new","","",null,null],[5,"gst_buffer_new_allocate","","",null,null],[5,"gst_buffer_new_wrapped","","",null,null],[5,"gst_buffer_new_wrapped_full","","",null,null],[5,"gst_buffer_add_meta","","",null,null],[5,"gst_buffer_add_parent_buffer_meta","","",null,null],[5,"gst_buffer_add_protection_meta","","",null,null],[5,"gst_buffer_append","","",null,null],[5,"gst_buffer_append_memory","","",null,null],[5,"gst_buffer_append_region","","",null,null],[5,"gst_buffer_copy_deep","","",null,null],[5,"gst_buffer_copy_into","","",null,null],[5,"gst_buffer_copy_region","","",null,null],[5,"gst_buffer_extract","","",null,null],[5,"gst_buffer_extract_dup","","",null,null],[5,"gst_buffer_fill","","",null,null],[5,"gst_buffer_find_memory","","",null,null],[5,"gst_buffer_foreach_meta","","",null,null],[5,"gst_buffer_get_all_memory","","",null,null],[5,"gst_buffer_get_flags","","",null,null],[5,"gst_buffer_get_memory","","",null,null],[5,"gst_buffer_get_memory_range","","",null,null],[5,"gst_buffer_get_meta","","",null,null],[5,"gst_buffer_get_size","","",null,null],[5,"gst_buffer_get_sizes","","",null,null],[5,"gst_buffer_get_sizes_range","","",null,null],[5,"gst_buffer_has_flags","","",null,null],[5,"gst_buffer_insert_memory","","",null,null],[5,"gst_buffer_is_all_memory_writable","","",null,null],[5,"gst_buffer_is_memory_range_writable","","",null,null],[5,"gst_buffer_iterate_meta","","",null,null],[5,"gst_buffer_iterate_meta_filtered","","",null,null],[5,"gst_buffer_map","","",null,null],[5,"gst_buffer_map_range","","",null,null],[5,"gst_buffer_memcmp","","",null,null],[5,"gst_buffer_memset","","",null,null],[5,"gst_buffer_n_memory","","",null,null],[5,"gst_buffer_peek_memory","","",null,null],[5,"gst_buffer_prepend_memory","","",null,null],[5,"gst_buffer_remove_all_memory","","",null,null],[5,"gst_buffer_remove_memory","","",null,null],[5,"gst_buffer_remove_memory_range","","",null,null],[5,"gst_buffer_remove_meta","","",null,null],[5,"gst_buffer_replace_all_memory","","",null,null],[5,"gst_buffer_replace_memory","","",null,null],[5,"gst_buffer_replace_memory_range","","",null,null],[5,"gst_buffer_resize","","",null,null],[5,"gst_buffer_resize_range","","",null,null],[5,"gst_buffer_set_flags","","",null,null],[5,"gst_buffer_set_size","","",null,null],[5,"gst_buffer_unmap","","",null,null],[5,"gst_buffer_unset_flags","","",null,null],[5,"gst_buffer_get_max_memory","","",null,null],[5,"gst_buffer_list_get_type","","",null,null],[5,"gst_buffer_list_new","","",null,null],[5,"gst_buffer_list_new_sized","","",null,null],[5,"gst_buffer_list_copy_deep","","",null,null],[5,"gst_buffer_list_foreach","","",null,null],[5,"gst_buffer_list_get","","",null,null],[5,"gst_buffer_list_insert","","",null,null],[5,"gst_buffer_list_length","","",null,null],[5,"gst_buffer_list_remove","","",null,null],[5,"gst_caps_get_type","","",null,null],[5,"gst_caps_new_any","","",null,null],[5,"gst_caps_new_empty","","",null,null],[5,"gst_caps_new_empty_simple","","",null,null],[5,"gst_caps_new_full","","",null,null],[5,"gst_caps_new_simple","","",null,null],[5,"gst_caps_append","","",null,null],[5,"gst_caps_append_structure","","",null,null],[5,"gst_caps_append_structure_full","","",null,null],[5,"gst_caps_can_intersect","","",null,null],[5,"gst_caps_copy_nth","","",null,null],[5,"gst_caps_filter_and_map_in_place","","",null,null],[5,"gst_caps_fixate","","",null,null],[5,"gst_caps_foreach","","",null,null],[5,"gst_caps_get_features","","",null,null],[5,"gst_caps_get_size","","",null,null],[5,"gst_caps_get_structure","","",null,null],[5,"gst_caps_intersect","","",null,null],[5,"gst_caps_intersect_full","","",null,null],[5,"gst_caps_is_always_compatible","","",null,null],[5,"gst_caps_is_any","","",null,null],[5,"gst_caps_is_empty","","",null,null],[5,"gst_caps_is_equal","","",null,null],[5,"gst_caps_is_equal_fixed","","",null,null],[5,"gst_caps_is_fixed","","",null,null],[5,"gst_caps_is_strictly_equal","","",null,null],[5,"gst_caps_is_subset","","",null,null],[5,"gst_caps_is_subset_structure","","",null,null],[5,"gst_caps_is_subset_structure_full","","",null,null],[5,"gst_caps_map_in_place","","",null,null],[5,"gst_caps_merge","","",null,null],[5,"gst_caps_merge_structure","","",null,null],[5,"gst_caps_merge_structure_full","","",null,null],[5,"gst_caps_normalize","","",null,null],[5,"gst_caps_remove_structure","","",null,null],[5,"gst_caps_set_features","","",null,null],[5,"gst_caps_set_simple","","",null,null],[5,"gst_caps_set_value","","",null,null],[5,"gst_caps_simplify","","",null,null],[5,"gst_caps_steal_structure","","",null,null],[5,"gst_caps_subtract","","",null,null],[5,"gst_caps_to_string","","",null,null],[5,"gst_caps_truncate","","",null,null],[5,"gst_caps_from_string","","",null,null],[5,"gst_caps_features_get_type","","",null,null],[5,"gst_caps_features_new","","",null,null],[5,"gst_caps_features_new_any","","",null,null],[5,"gst_caps_features_new_empty","","",null,null],[5,"gst_caps_features_new_id","","",null,null],[5,"gst_caps_features_add","","",null,null],[5,"gst_caps_features_add_id","","",null,null],[5,"gst_caps_features_contains","","",null,null],[5,"gst_caps_features_contains_id","","",null,null],[5,"gst_caps_features_copy","","",null,null],[5,"gst_caps_features_free","","",null,null],[5,"gst_caps_features_get_nth","","",null,null],[5,"gst_caps_features_get_nth_id","","",null,null],[5,"gst_caps_features_get_size","","",null,null],[5,"gst_caps_features_is_any","","",null,null],[5,"gst_caps_features_is_equal","","",null,null],[5,"gst_caps_features_remove","","",null,null],[5,"gst_caps_features_remove_id","","",null,null],[5,"gst_caps_features_set_parent_refcount","","",null,null],[5,"gst_caps_features_to_string","","",null,null],[5,"gst_caps_features_from_string","","",null,null],[5,"gst_context_get_type","","",null,null],[5,"gst_context_new","","",null,null],[5,"gst_context_get_context_type","","",null,null],[5,"gst_context_get_structure","","",null,null],[5,"gst_context_has_context_type","","",null,null],[5,"gst_context_is_persistent","","",null,null],[5,"gst_context_writable_structure","","",null,null],[5,"gst_date_time_get_type","","",null,null],[5,"gst_date_time_new","","",null,null],[5,"gst_date_time_new_from_g_date_time","","",null,null],[5,"gst_date_time_new_from_iso8601_string","","",null,null],[5,"gst_date_time_new_from_unix_epoch_local_time","","",null,null],[5,"gst_date_time_new_from_unix_epoch_utc","","",null,null],[5,"gst_date_time_new_local_time","","",null,null],[5,"gst_date_time_new_now_local_time","","",null,null],[5,"gst_date_time_new_now_utc","","",null,null],[5,"gst_date_time_new_y","","",null,null],[5,"gst_date_time_new_ym","","",null,null],[5,"gst_date_time_new_ymd","","",null,null],[5,"gst_date_time_get_day","","",null,null],[5,"gst_date_time_get_hour","","",null,null],[5,"gst_date_time_get_microsecond","","",null,null],[5,"gst_date_time_get_minute","","",null,null],[5,"gst_date_time_get_month","","",null,null],[5,"gst_date_time_get_second","","",null,null],[5,"gst_date_time_get_time_zone_offset","","",null,null],[5,"gst_date_time_get_year","","",null,null],[5,"gst_date_time_has_day","","",null,null],[5,"gst_date_time_has_month","","",null,null],[5,"gst_date_time_has_second","","",null,null],[5,"gst_date_time_has_time","","",null,null],[5,"gst_date_time_has_year","","",null,null],[5,"gst_date_time_ref","","",null,null],[5,"gst_date_time_to_g_date_time","","",null,null],[5,"gst_date_time_to_iso8601_string","","",null,null],[5,"gst_date_time_unref","","",null,null],[5,"gst_debug_category_free","","",null,null],[5,"gst_debug_category_get_color","","",null,null],[5,"gst_debug_category_get_description","","",null,null],[5,"gst_debug_category_get_name","","",null,null],[5,"gst_debug_category_get_threshold","","",null,null],[5,"gst_debug_category_reset_threshold","","",null,null],[5,"gst_debug_category_set_threshold","","",null,null],[5,"gst_debug_message_get","","",null,null],[5,"gst_device_provider_class_add_metadata","","",null,null],[5,"gst_device_provider_class_add_static_metadata","","",null,null],[5,"gst_device_provider_class_get_metadata","","",null,null],[5,"gst_device_provider_class_set_metadata","","",null,null],[5,"gst_device_provider_class_set_static_metadata","","",null,null],[5,"gst_element_class_add_metadata","","",null,null],[5,"gst_element_class_add_pad_template","","",null,null],[5,"gst_element_class_add_static_metadata","","",null,null],[5,"gst_element_class_add_static_pad_template","","",null,null],[5,"gst_element_class_get_metadata","","",null,null],[5,"gst_element_class_get_pad_template","","",null,null],[5,"gst_element_class_get_pad_template_list","","",null,null],[5,"gst_element_class_set_metadata","","",null,null],[5,"gst_element_class_set_static_metadata","","",null,null],[5,"gst_event_get_type","","",null,null],[5,"gst_event_new_buffer_size","","",null,null],[5,"gst_event_new_caps","","",null,null],[5,"gst_event_new_custom","","",null,null],[5,"gst_event_new_eos","","",null,null],[5,"gst_event_new_flush_start","","",null,null],[5,"gst_event_new_flush_stop","","",null,null],[5,"gst_event_new_gap","","",null,null],[5,"gst_event_new_latency","","",null,null],[5,"gst_event_new_navigation","","",null,null],[5,"gst_event_new_protection","","",null,null],[5,"gst_event_new_qos","","",null,null],[5,"gst_event_new_reconfigure","","",null,null],[5,"gst_event_new_seek","","",null,null],[5,"gst_event_new_segment","","",null,null],[5,"gst_event_new_segment_done","","",null,null],[5,"gst_event_new_select_streams","","",null,null],[5,"gst_event_new_sink_message","","",null,null],[5,"gst_event_new_step","","",null,null],[5,"gst_event_new_stream_collection","","",null,null],[5,"gst_event_new_stream_group_done","","",null,null],[5,"gst_event_new_stream_start","","",null,null],[5,"gst_event_new_tag","","",null,null],[5,"gst_event_new_toc","","",null,null],[5,"gst_event_new_toc_select","","",null,null],[5,"gst_event_copy_segment","","",null,null],[5,"gst_event_get_running_time_offset","","",null,null],[5,"gst_event_get_seqnum","","",null,null],[5,"gst_event_get_structure","","",null,null],[5,"gst_event_has_name","","",null,null],[5,"gst_event_parse_buffer_size","","",null,null],[5,"gst_event_parse_caps","","",null,null],[5,"gst_event_parse_flush_stop","","",null,null],[5,"gst_event_parse_gap","","",null,null],[5,"gst_event_parse_group_id","","",null,null],[5,"gst_event_parse_latency","","",null,null],[5,"gst_event_parse_protection","","",null,null],[5,"gst_event_parse_qos","","",null,null],[5,"gst_event_parse_seek","","",null,null],[5,"gst_event_parse_segment","","",null,null],[5,"gst_event_parse_segment_done","","",null,null],[5,"gst_event_parse_select_streams","","",null,null],[5,"gst_event_parse_sink_message","","",null,null],[5,"gst_event_parse_step","","",null,null],[5,"gst_event_parse_stream","","",null,null],[5,"gst_event_parse_stream_collection","","",null,null],[5,"gst_event_parse_stream_flags","","",null,null],[5,"gst_event_parse_stream_group_done","","",null,null],[5,"gst_event_parse_stream_start","","",null,null],[5,"gst_event_parse_tag","","",null,null],[5,"gst_event_parse_toc","","",null,null],[5,"gst_event_parse_toc_select","","",null,null],[5,"gst_event_set_group_id","","",null,null],[5,"gst_event_set_running_time_offset","","",null,null],[5,"gst_event_set_seqnum","","",null,null],[5,"gst_event_set_stream","","",null,null],[5,"gst_event_set_stream_flags","","",null,null],[5,"gst_event_writable_structure","","",null,null],[5,"gst_iterator_get_type","","",null,null],[5,"gst_iterator_new","","",null,null],[5,"gst_iterator_new_list","","",null,null],[5,"gst_iterator_new_single","","",null,null],[5,"gst_iterator_copy","","",null,null],[5,"gst_iterator_filter","","",null,null],[5,"gst_iterator_find_custom","","",null,null],[5,"gst_iterator_fold","","",null,null],[5,"gst_iterator_foreach","","",null,null],[5,"gst_iterator_free","","",null,null],[5,"gst_iterator_next","","",null,null],[5,"gst_iterator_push","","",null,null],[5,"gst_iterator_resync","","",null,null],[5,"gst_memory_get_type","","",null,null],[5,"gst_memory_new_wrapped","","",null,null],[5,"gst_memory_copy","","",null,null],[5,"gst_memory_get_sizes","","",null,null],[5,"gst_memory_init","","",null,null],[5,"gst_memory_is_span","","",null,null],[5,"gst_memory_is_type","","",null,null],[5,"gst_memory_make_mapped","","",null,null],[5,"gst_memory_map","","",null,null],[5,"gst_memory_resize","","",null,null],[5,"gst_memory_share","","",null,null],[5,"gst_memory_unmap","","",null,null],[5,"gst_message_get_type","","",null,null],[5,"gst_message_new_application","","",null,null],[5,"gst_message_new_async_done","","",null,null],[5,"gst_message_new_async_start","","",null,null],[5,"gst_message_new_buffering","","",null,null],[5,"gst_message_new_clock_lost","","",null,null],[5,"gst_message_new_clock_provide","","",null,null],[5,"gst_message_new_custom","","",null,null],[5,"gst_message_new_device_added","","",null,null],[5,"gst_message_new_device_removed","","",null,null],[5,"gst_message_new_duration_changed","","",null,null],[5,"gst_message_new_element","","",null,null],[5,"gst_message_new_eos","","",null,null],[5,"gst_message_new_error","","",null,null],[5,"gst_message_new_error_with_details","","",null,null],[5,"gst_message_new_have_context","","",null,null],[5,"gst_message_new_info","","",null,null],[5,"gst_message_new_info_with_details","","",null,null],[5,"gst_message_new_latency","","",null,null],[5,"gst_message_new_need_context","","",null,null],[5,"gst_message_new_new_clock","","",null,null],[5,"gst_message_new_progress","","",null,null],[5,"gst_message_new_property_notify","","",null,null],[5,"gst_message_new_qos","","",null,null],[5,"gst_message_new_redirect","","",null,null],[5,"gst_message_new_request_state","","",null,null],[5,"gst_message_new_reset_time","","",null,null],[5,"gst_message_new_segment_done","","",null,null],[5,"gst_message_new_segment_start","","",null,null],[5,"gst_message_new_state_changed","","",null,null],[5,"gst_message_new_state_dirty","","",null,null],[5,"gst_message_new_step_done","","",null,null],[5,"gst_message_new_step_start","","",null,null],[5,"gst_message_new_stream_collection","","",null,null],[5,"gst_message_new_stream_start","","",null,null],[5,"gst_message_new_stream_status","","",null,null],[5,"gst_message_new_streams_selected","","",null,null],[5,"gst_message_new_structure_change","","",null,null],[5,"gst_message_new_tag","","",null,null],[5,"gst_message_new_toc","","",null,null],[5,"gst_message_new_warning","","",null,null],[5,"gst_message_new_warning_with_details","","",null,null],[5,"gst_message_add_redirect_entry","","",null,null],[5,"gst_message_get_num_redirect_entries","","",null,null],[5,"gst_message_get_seqnum","","",null,null],[5,"gst_message_get_stream_status_object","","",null,null],[5,"gst_message_get_structure","","",null,null],[5,"gst_message_has_name","","",null,null],[5,"gst_message_parse_async_done","","",null,null],[5,"gst_message_parse_buffering","","",null,null],[5,"gst_message_parse_buffering_stats","","",null,null],[5,"gst_message_parse_clock_lost","","",null,null],[5,"gst_message_parse_clock_provide","","",null,null],[5,"gst_message_parse_context_type","","",null,null],[5,"gst_message_parse_device_added","","",null,null],[5,"gst_message_parse_device_removed","","",null,null],[5,"gst_message_parse_error","","",null,null],[5,"gst_message_parse_error_details","","",null,null],[5,"gst_message_parse_group_id","","",null,null],[5,"gst_message_parse_have_context","","",null,null],[5,"gst_message_parse_info","","",null,null],[5,"gst_message_parse_info_details","","",null,null],[5,"gst_message_parse_new_clock","","",null,null],[5,"gst_message_parse_progress","","",null,null],[5,"gst_message_parse_property_notify","","",null,null],[5,"gst_message_parse_qos","","",null,null],[5,"gst_message_parse_qos_stats","","",null,null],[5,"gst_message_parse_qos_values","","",null,null],[5,"gst_message_parse_redirect_entry","","",null,null],[5,"gst_message_parse_request_state","","",null,null],[5,"gst_message_parse_reset_time","","",null,null],[5,"gst_message_parse_segment_done","","",null,null],[5,"gst_message_parse_segment_start","","",null,null],[5,"gst_message_parse_state_changed","","",null,null],[5,"gst_message_parse_step_done","","",null,null],[5,"gst_message_parse_step_start","","",null,null],[5,"gst_message_parse_stream_collection","","",null,null],[5,"gst_message_parse_stream_status","","",null,null],[5,"gst_message_parse_streams_selected","","",null,null],[5,"gst_message_parse_structure_change","","",null,null],[5,"gst_message_parse_tag","","",null,null],[5,"gst_message_parse_toc","","",null,null],[5,"gst_message_parse_warning","","",null,null],[5,"gst_message_parse_warning_details","","",null,null],[5,"gst_message_set_buffering_stats","","",null,null],[5,"gst_message_set_group_id","","",null,null],[5,"gst_message_set_qos_stats","","",null,null],[5,"gst_message_set_qos_values","","",null,null],[5,"gst_message_set_seqnum","","",null,null],[5,"gst_message_set_stream_status_object","","",null,null],[5,"gst_message_streams_selected_add","","",null,null],[5,"gst_message_streams_selected_get_size","","",null,null],[5,"gst_message_streams_selected_get_stream","","",null,null],[5,"gst_meta_api_type_get_tags","","",null,null],[5,"gst_meta_api_type_has_tag","","",null,null],[5,"gst_meta_api_type_register","","",null,null],[5,"gst_meta_get_info","","",null,null],[5,"gst_meta_register","","",null,null],[5,"gst_mini_object_copy","","",null,null],[5,"gst_mini_object_get_qdata","","",null,null],[5,"gst_mini_object_init","","",null,null],[5,"gst_mini_object_is_writable","","",null,null],[5,"gst_mini_object_lock","","",null,null],[5,"gst_mini_object_make_writable","","",null,null],[5,"gst_mini_object_ref","","",null,null],[5,"gst_mini_object_set_qdata","","",null,null],[5,"gst_mini_object_steal_qdata","","",null,null],[5,"gst_mini_object_unlock","","",null,null],[5,"gst_mini_object_unref","","",null,null],[5,"gst_mini_object_weak_ref","","",null,null],[5,"gst_mini_object_weak_unref","","",null,null],[5,"gst_mini_object_replace","","",null,null],[5,"gst_mini_object_steal","","",null,null],[5,"gst_mini_object_take","","",null,null],[5,"gst_pad_probe_info_get_buffer","","",null,null],[5,"gst_pad_probe_info_get_buffer_list","","",null,null],[5,"gst_pad_probe_info_get_event","","",null,null],[5,"gst_pad_probe_info_get_query","","",null,null],[5,"gst_parent_buffer_meta_get_info","","",null,null],[5,"gst_parse_context_get_type","","",null,null],[5,"gst_parse_context_new","","",null,null],[5,"gst_parse_context_copy","","",null,null],[5,"gst_parse_context_free","","",null,null],[5,"gst_parse_context_get_missing_elements","","",null,null],[5,"gst_poll_add_fd","","",null,null],[5,"gst_poll_fd_can_read","","",null,null],[5,"gst_poll_fd_can_write","","",null,null],[5,"gst_poll_fd_ctl_read","","",null,null],[5,"gst_poll_fd_ctl_write","","",null,null],[5,"gst_poll_fd_has_closed","","",null,null],[5,"gst_poll_fd_has_error","","",null,null],[5,"gst_poll_fd_ignored","","",null,null],[5,"gst_poll_free","","",null,null],[5,"gst_poll_get_read_gpollfd","","",null,null],[5,"gst_poll_read_control","","",null,null],[5,"gst_poll_remove_fd","","",null,null],[5,"gst_poll_restart","","",null,null],[5,"gst_poll_set_controllable","","",null,null],[5,"gst_poll_set_flushing","","",null,null],[5,"gst_poll_wait","","",null,null],[5,"gst_poll_write_control","","",null,null],[5,"gst_poll_new","","",null,null],[5,"gst_poll_new_timer","","",null,null],[5,"gst_poll_fd_init","","",null,null],[5,"gst_protection_meta_get_info","","",null,null],[5,"gst_query_get_type","","",null,null],[5,"gst_query_new_accept_caps","","",null,null],[5,"gst_query_new_allocation","","",null,null],[5,"gst_query_new_buffering","","",null,null],[5,"gst_query_new_caps","","",null,null],[5,"gst_query_new_context","","",null,null],[5,"gst_query_new_convert","","",null,null],[5,"gst_query_new_custom","","",null,null],[5,"gst_query_new_drain","","",null,null],[5,"gst_query_new_duration","","",null,null],[5,"gst_query_new_formats","","",null,null],[5,"gst_query_new_latency","","",null,null],[5,"gst_query_new_position","","",null,null],[5,"gst_query_new_scheduling","","",null,null],[5,"gst_query_new_seeking","","",null,null],[5,"gst_query_new_segment","","",null,null],[5,"gst_query_new_uri","","",null,null],[5,"gst_query_add_allocation_meta","","",null,null],[5,"gst_query_add_allocation_param","","",null,null],[5,"gst_query_add_allocation_pool","","",null,null],[5,"gst_query_add_buffering_range","","",null,null],[5,"gst_query_add_scheduling_mode","","",null,null],[5,"gst_query_find_allocation_meta","","",null,null],[5,"gst_query_get_n_allocation_metas","","",null,null],[5,"gst_query_get_n_allocation_params","","",null,null],[5,"gst_query_get_n_allocation_pools","","",null,null],[5,"gst_query_get_n_buffering_ranges","","",null,null],[5,"gst_query_get_n_scheduling_modes","","",null,null],[5,"gst_query_get_structure","","",null,null],[5,"gst_query_has_scheduling_mode","","",null,null],[5,"gst_query_has_scheduling_mode_with_flags","","",null,null],[5,"gst_query_parse_accept_caps","","",null,null],[5,"gst_query_parse_accept_caps_result","","",null,null],[5,"gst_query_parse_allocation","","",null,null],[5,"gst_query_parse_buffering_percent","","",null,null],[5,"gst_query_parse_buffering_range","","",null,null],[5,"gst_query_parse_buffering_stats","","",null,null],[5,"gst_query_parse_caps","","",null,null],[5,"gst_query_parse_caps_result","","",null,null],[5,"gst_query_parse_context","","",null,null],[5,"gst_query_parse_context_type","","",null,null],[5,"gst_query_parse_convert","","",null,null],[5,"gst_query_parse_duration","","",null,null],[5,"gst_query_parse_latency","","",null,null],[5,"gst_query_parse_n_formats","","",null,null],[5,"gst_query_parse_nth_allocation_meta","","",null,null],[5,"gst_query_parse_nth_allocation_param","","",null,null],[5,"gst_query_parse_nth_allocation_pool","","",null,null],[5,"gst_query_parse_nth_buffering_range","","",null,null],[5,"gst_query_parse_nth_format","","",null,null],[5,"gst_query_parse_nth_scheduling_mode","","",null,null],[5,"gst_query_parse_position","","",null,null],[5,"gst_query_parse_scheduling","","",null,null],[5,"gst_query_parse_seeking","","",null,null],[5,"gst_query_parse_segment","","",null,null],[5,"gst_query_parse_uri","","",null,null],[5,"gst_query_parse_uri_redirection","","",null,null],[5,"gst_query_parse_uri_redirection_permanent","","",null,null],[5,"gst_query_remove_nth_allocation_meta","","",null,null],[5,"gst_query_remove_nth_allocation_param","","",null,null],[5,"gst_query_remove_nth_allocation_pool","","",null,null],[5,"gst_query_set_accept_caps_result","","",null,null],[5,"gst_query_set_buffering_percent","","",null,null],[5,"gst_query_set_buffering_range","","",null,null],[5,"gst_query_set_buffering_stats","","",null,null],[5,"gst_query_set_caps_result","","",null,null],[5,"gst_query_set_context","","",null,null],[5,"gst_query_set_convert","","",null,null],[5,"gst_query_set_duration","","",null,null],[5,"gst_query_set_formats","","",null,null],[5,"gst_query_set_formatsv","","",null,null],[5,"gst_query_set_latency","","",null,null],[5,"gst_query_set_nth_allocation_param","","",null,null],[5,"gst_query_set_nth_allocation_pool","","",null,null],[5,"gst_query_set_position","","",null,null],[5,"gst_query_set_scheduling","","",null,null],[5,"gst_query_set_seeking","","",null,null],[5,"gst_query_set_segment","","",null,null],[5,"gst_query_set_uri","","",null,null],[5,"gst_query_set_uri_redirection","","",null,null],[5,"gst_query_set_uri_redirection_permanent","","",null,null],[5,"gst_query_writable_structure","","",null,null],[5,"gst_sample_get_type","","",null,null],[5,"gst_sample_new","","",null,null],[5,"gst_sample_get_buffer","","",null,null],[5,"gst_sample_get_buffer_list","","",null,null],[5,"gst_sample_get_caps","","",null,null],[5,"gst_sample_get_info","","",null,null],[5,"gst_sample_get_segment","","",null,null],[5,"gst_sample_set_buffer_list","","",null,null],[5,"gst_segment_get_type","","",null,null],[5,"gst_segment_new","","",null,null],[5,"gst_segment_clip","","",null,null],[5,"gst_segment_copy","","",null,null],[5,"gst_segment_copy_into","","",null,null],[5,"gst_segment_do_seek","","",null,null],[5,"gst_segment_free","","",null,null],[5,"gst_segment_init","","",null,null],[5,"gst_segment_is_equal","","",null,null],[5,"gst_segment_offset_running_time","","",null,null],[5,"gst_segment_position_from_running_time","","",null,null],[5,"gst_segment_position_from_running_time_full","","",null,null],[5,"gst_segment_position_from_stream_time","","",null,null],[5,"gst_segment_position_from_stream_time_full","","",null,null],[5,"gst_segment_set_running_time","","",null,null],[5,"gst_segment_to_position","","",null,null],[5,"gst_segment_to_running_time","","",null,null],[5,"gst_segment_to_running_time_full","","",null,null],[5,"gst_segment_to_stream_time","","",null,null],[5,"gst_segment_to_stream_time_full","","",null,null],[5,"gst_static_caps_cleanup","","",null,null],[5,"gst_static_caps_get","","",null,null],[5,"gst_static_pad_template_get","","",null,null],[5,"gst_static_pad_template_get_caps","","",null,null],[5,"gst_structure_get_type","","",null,null],[5,"gst_structure_new","","",null,null],[5,"gst_structure_new_empty","","",null,null],[5,"gst_structure_new_from_string","","",null,null],[5,"gst_structure_new_id","","",null,null],[5,"gst_structure_new_id_empty","","",null,null],[5,"gst_structure_can_intersect","","",null,null],[5,"gst_structure_copy","","",null,null],[5,"gst_structure_filter_and_map_in_place","","",null,null],[5,"gst_structure_fixate","","",null,null],[5,"gst_structure_fixate_field","","",null,null],[5,"gst_structure_fixate_field_boolean","","",null,null],[5,"gst_structure_fixate_field_nearest_double","","",null,null],[5,"gst_structure_fixate_field_nearest_fraction","","",null,null],[5,"gst_structure_fixate_field_nearest_int","","",null,null],[5,"gst_structure_fixate_field_string","","",null,null],[5,"gst_structure_foreach","","",null,null],[5,"gst_structure_free","","",null,null],[5,"gst_structure_get","","",null,null],[5,"gst_structure_get_array","","",null,null],[5,"gst_structure_get_boolean","","",null,null],[5,"gst_structure_get_clock_time","","",null,null],[5,"gst_structure_get_date","","",null,null],[5,"gst_structure_get_date_time","","",null,null],[5,"gst_structure_get_double","","",null,null],[5,"gst_structure_get_enum","","",null,null],[5,"gst_structure_get_field_type","","",null,null],[5,"gst_structure_get_flagset","","",null,null],[5,"gst_structure_get_fraction","","",null,null],[5,"gst_structure_get_int","","",null,null],[5,"gst_structure_get_int64","","",null,null],[5,"gst_structure_get_list","","",null,null],[5,"gst_structure_get_name","","",null,null],[5,"gst_structure_get_name_id","","",null,null],[5,"gst_structure_get_string","","",null,null],[5,"gst_structure_get_uint","","",null,null],[5,"gst_structure_get_uint64","","",null,null],[5,"gst_structure_get_value","","",null,null],[5,"gst_structure_has_field","","",null,null],[5,"gst_structure_has_field_typed","","",null,null],[5,"gst_structure_has_name","","",null,null],[5,"gst_structure_id_get","","",null,null],[5,"gst_structure_id_get_value","","",null,null],[5,"gst_structure_id_has_field","","",null,null],[5,"gst_structure_id_has_field_typed","","",null,null],[5,"gst_structure_id_set","","",null,null],[5,"gst_structure_id_set_value","","",null,null],[5,"gst_structure_id_take_value","","",null,null],[5,"gst_structure_intersect","","",null,null],[5,"gst_structure_is_equal","","",null,null],[5,"gst_structure_is_subset","","",null,null],[5,"gst_structure_map_in_place","","",null,null],[5,"gst_structure_n_fields","","",null,null],[5,"gst_structure_nth_field_name","","",null,null],[5,"gst_structure_remove_all_fields","","",null,null],[5,"gst_structure_remove_field","","",null,null],[5,"gst_structure_remove_fields","","",null,null],[5,"gst_structure_set","","",null,null],[5,"gst_structure_set_array","","",null,null],[5,"gst_structure_set_list","","",null,null],[5,"gst_structure_set_name","","",null,null],[5,"gst_structure_set_parent_refcount","","",null,null],[5,"gst_structure_set_value","","",null,null],[5,"gst_structure_take_value","","",null,null],[5,"gst_structure_to_string","","",null,null],[5,"gst_structure_from_string","","",null,null],[5,"gst_tag_list_get_type","","",null,null],[5,"gst_tag_list_new","","",null,null],[5,"gst_tag_list_new_empty","","",null,null],[5,"gst_tag_list_new_from_string","","",null,null],[5,"gst_tag_list_add","","",null,null],[5,"gst_tag_list_add_value","","",null,null],[5,"gst_tag_list_add_values","","",null,null],[5,"gst_tag_list_foreach","","",null,null],[5,"gst_tag_list_get_boolean","","",null,null],[5,"gst_tag_list_get_boolean_index","","",null,null],[5,"gst_tag_list_get_date","","",null,null],[5,"gst_tag_list_get_date_index","","",null,null],[5,"gst_tag_list_get_date_time","","",null,null],[5,"gst_tag_list_get_date_time_index","","",null,null],[5,"gst_tag_list_get_double","","",null,null],[5,"gst_tag_list_get_double_index","","",null,null],[5,"gst_tag_list_get_float","","",null,null],[5,"gst_tag_list_get_float_index","","",null,null],[5,"gst_tag_list_get_int","","",null,null],[5,"gst_tag_list_get_int64","","",null,null],[5,"gst_tag_list_get_int64_index","","",null,null],[5,"gst_tag_list_get_int_index","","",null,null],[5,"gst_tag_list_get_pointer","","",null,null],[5,"gst_tag_list_get_pointer_index","","",null,null],[5,"gst_tag_list_get_sample","","",null,null],[5,"gst_tag_list_get_sample_index","","",null,null],[5,"gst_tag_list_get_scope","","",null,null],[5,"gst_tag_list_get_string","","",null,null],[5,"gst_tag_list_get_string_index","","",null,null],[5,"gst_tag_list_get_tag_size","","",null,null],[5,"gst_tag_list_get_uint","","",null,null],[5,"gst_tag_list_get_uint64","","",null,null],[5,"gst_tag_list_get_uint64_index","","",null,null],[5,"gst_tag_list_get_uint_index","","",null,null],[5,"gst_tag_list_get_value_index","","",null,null],[5,"gst_tag_list_insert","","",null,null],[5,"gst_tag_list_is_empty","","",null,null],[5,"gst_tag_list_is_equal","","",null,null],[5,"gst_tag_list_merge","","",null,null],[5,"gst_tag_list_n_tags","","",null,null],[5,"gst_tag_list_nth_tag_name","","",null,null],[5,"gst_tag_list_peek_string_index","","",null,null],[5,"gst_tag_list_remove_tag","","",null,null],[5,"gst_tag_list_set_scope","","",null,null],[5,"gst_tag_list_to_string","","",null,null],[5,"gst_tag_list_copy_value","","",null,null],[5,"gst_toc_get_type","","",null,null],[5,"gst_toc_new","","",null,null],[5,"gst_toc_append_entry","","",null,null],[5,"gst_toc_dump","","",null,null],[5,"gst_toc_find_entry","","",null,null],[5,"gst_toc_get_entries","","",null,null],[5,"gst_toc_get_scope","","",null,null],[5,"gst_toc_get_tags","","",null,null],[5,"gst_toc_merge_tags","","",null,null],[5,"gst_toc_set_tags","","",null,null],[5,"gst_toc_entry_get_type","","",null,null],[5,"gst_toc_entry_new","","",null,null],[5,"gst_toc_entry_append_sub_entry","","",null,null],[5,"gst_toc_entry_get_entry_type","","",null,null],[5,"gst_toc_entry_get_loop","","",null,null],[5,"gst_toc_entry_get_parent","","",null,null],[5,"gst_toc_entry_get_start_stop_times","","",null,null],[5,"gst_toc_entry_get_sub_entries","","",null,null],[5,"gst_toc_entry_get_tags","","",null,null],[5,"gst_toc_entry_get_toc","","",null,null],[5,"gst_toc_entry_get_uid","","",null,null],[5,"gst_toc_entry_is_alternative","","",null,null],[5,"gst_toc_entry_is_sequence","","",null,null],[5,"gst_toc_entry_merge_tags","","",null,null],[5,"gst_toc_entry_set_loop","","",null,null],[5,"gst_toc_entry_set_start_stop_times","","",null,null],[5,"gst_toc_entry_set_tags","","",null,null],[5,"gst_type_find_get_length","","",null,null],[5,"gst_type_find_peek","","",null,null],[5,"gst_type_find_suggest","","",null,null],[5,"gst_type_find_suggest_simple","","",null,null],[5,"gst_type_find_register","","",null,null],[5,"gst_uri_get_type","","",null,null],[5,"gst_uri_new","","",null,null],[5,"gst_uri_append_path","","",null,null],[5,"gst_uri_append_path_segment","","",null,null],[5,"gst_uri_equal","","",null,null],[5,"gst_uri_from_string_with_base","","",null,null],[5,"gst_uri_get_fragment","","",null,null],[5,"gst_uri_get_host","","",null,null],[5,"gst_uri_get_media_fragment_table","","",null,null],[5,"gst_uri_get_path","","",null,null],[5,"gst_uri_get_path_segments","","",null,null],[5,"gst_uri_get_path_string","","",null,null],[5,"gst_uri_get_port","","",null,null],[5,"gst_uri_get_query_keys","","",null,null],[5,"gst_uri_get_query_string","","",null,null],[5,"gst_uri_get_query_table","","",null,null],[5,"gst_uri_get_query_value","","",null,null],[5,"gst_uri_get_scheme","","",null,null],[5,"gst_uri_get_userinfo","","",null,null],[5,"gst_uri_is_normalized","","",null,null],[5,"gst_uri_is_writable","","",null,null],[5,"gst_uri_join","","",null,null],[5,"gst_uri_make_writable","","",null,null],[5,"gst_uri_new_with_base","","",null,null],[5,"gst_uri_normalize","","",null,null],[5,"gst_uri_query_has_key","","",null,null],[5,"gst_uri_remove_query_key","","",null,null],[5,"gst_uri_set_fragment","","",null,null],[5,"gst_uri_set_host","","",null,null],[5,"gst_uri_set_path","","",null,null],[5,"gst_uri_set_path_segments","","",null,null],[5,"gst_uri_set_path_string","","",null,null],[5,"gst_uri_set_port","","",null,null],[5,"gst_uri_set_query_string","","",null,null],[5,"gst_uri_set_query_table","","",null,null],[5,"gst_uri_set_query_value","","",null,null],[5,"gst_uri_set_scheme","","",null,null],[5,"gst_uri_set_userinfo","","",null,null],[5,"gst_uri_to_string","","",null,null],[5,"gst_uri_construct","","",null,null],[5,"gst_uri_from_string","","",null,null],[5,"gst_uri_get_location","","",null,null],[5,"gst_uri_get_protocol","","",null,null],[5,"gst_uri_has_protocol","","",null,null],[5,"gst_uri_is_valid","","",null,null],[5,"gst_uri_join_strings","","",null,null],[5,"gst_uri_protocol_is_supported","","",null,null],[5,"gst_uri_protocol_is_valid","","",null,null],[5,"gst_allocator_get_type","","",null,null],[5,"gst_allocator_find","","",null,null],[5,"gst_allocator_register","","",null,null],[5,"gst_allocator_alloc","","",null,null],[5,"gst_allocator_free","","",null,null],[5,"gst_allocator_set_default","","",null,null],[5,"gst_bin_get_type","","",null,null],[5,"gst_bin_new","","",null,null],[5,"gst_bin_add","","",null,null],[5,"gst_bin_add_many","","",null,null],[5,"gst_bin_find_unlinked_pad","","",null,null],[5,"gst_bin_get_by_interface","","",null,null],[5,"gst_bin_get_by_name","","",null,null],[5,"gst_bin_get_by_name_recurse_up","","",null,null],[5,"gst_bin_get_suppressed_flags","","",null,null],[5,"gst_bin_iterate_all_by_interface","","",null,null],[5,"gst_bin_iterate_elements","","",null,null],[5,"gst_bin_iterate_recurse","","",null,null],[5,"gst_bin_iterate_sinks","","",null,null],[5,"gst_bin_iterate_sorted","","",null,null],[5,"gst_bin_iterate_sources","","",null,null],[5,"gst_bin_recalculate_latency","","",null,null],[5,"gst_bin_remove","","",null,null],[5,"gst_bin_remove_many","","",null,null],[5,"gst_bin_set_suppressed_flags","","",null,null],[5,"gst_bin_sync_children_states","","",null,null],[5,"gst_bitmask_get_type","","",null,null],[5,"gst_buffer_pool_get_type","","",null,null],[5,"gst_buffer_pool_new","","",null,null],[5,"gst_buffer_pool_config_add_option","","",null,null],[5,"gst_buffer_pool_config_get_allocator","","",null,null],[5,"gst_buffer_pool_config_get_option","","",null,null],[5,"gst_buffer_pool_config_get_params","","",null,null],[5,"gst_buffer_pool_config_has_option","","",null,null],[5,"gst_buffer_pool_config_n_options","","",null,null],[5,"gst_buffer_pool_config_set_allocator","","",null,null],[5,"gst_buffer_pool_config_set_params","","",null,null],[5,"gst_buffer_pool_config_validate_params","","",null,null],[5,"gst_buffer_pool_acquire_buffer","","",null,null],[5,"gst_buffer_pool_get_config","","",null,null],[5,"gst_buffer_pool_get_options","","",null,null],[5,"gst_buffer_pool_has_option","","",null,null],[5,"gst_buffer_pool_is_active","","",null,null],[5,"gst_buffer_pool_release_buffer","","",null,null],[5,"gst_buffer_pool_set_active","","",null,null],[5,"gst_buffer_pool_set_config","","",null,null],[5,"gst_buffer_pool_set_flushing","","",null,null],[5,"gst_bus_get_type","","",null,null],[5,"gst_bus_new","","",null,null],[5,"gst_bus_add_signal_watch","","",null,null],[5,"gst_bus_add_signal_watch_full","","",null,null],[5,"gst_bus_add_watch","","",null,null],[5,"gst_bus_add_watch_full","","",null,null],[5,"gst_bus_async_signal_func","","",null,null],[5,"gst_bus_create_watch","","",null,null],[5,"gst_bus_disable_sync_message_emission","","",null,null],[5,"gst_bus_enable_sync_message_emission","","",null,null],[5,"gst_bus_have_pending","","",null,null],[5,"gst_bus_peek","","",null,null],[5,"gst_bus_poll","","",null,null],[5,"gst_bus_pop","","",null,null],[5,"gst_bus_pop_filtered","","",null,null],[5,"gst_bus_post","","",null,null],[5,"gst_bus_remove_signal_watch","","",null,null],[5,"gst_bus_remove_watch","","",null,null],[5,"gst_bus_set_flushing","","",null,null],[5,"gst_bus_set_sync_handler","","",null,null],[5,"gst_bus_sync_signal_handler","","",null,null],[5,"gst_bus_timed_pop","","",null,null],[5,"gst_bus_timed_pop_filtered","","",null,null],[5,"gst_clock_get_type","","",null,null],[5,"gst_clock_id_compare_func","","",null,null],[5,"gst_clock_id_get_time","","",null,null],[5,"gst_clock_id_ref","","",null,null],[5,"gst_clock_id_unref","","",null,null],[5,"gst_clock_id_unschedule","","",null,null],[5,"gst_clock_id_wait","","",null,null],[5,"gst_clock_id_wait_async","","",null,null],[5,"gst_clock_add_observation","","",null,null],[5,"gst_clock_add_observation_unapplied","","",null,null],[5,"gst_clock_adjust_unlocked","","",null,null],[5,"gst_clock_adjust_with_calibration","","",null,null],[5,"gst_clock_get_calibration","","",null,null],[5,"gst_clock_get_internal_time","","",null,null],[5,"gst_clock_get_master","","",null,null],[5,"gst_clock_get_resolution","","",null,null],[5,"gst_clock_get_time","","",null,null],[5,"gst_clock_get_timeout","","",null,null],[5,"gst_clock_is_synced","","",null,null],[5,"gst_clock_new_periodic_id","","",null,null],[5,"gst_clock_new_single_shot_id","","",null,null],[5,"gst_clock_periodic_id_reinit","","",null,null],[5,"gst_clock_set_calibration","","",null,null],[5,"gst_clock_set_master","","",null,null],[5,"gst_clock_set_resolution","","",null,null],[5,"gst_clock_set_synced","","",null,null],[5,"gst_clock_set_timeout","","",null,null],[5,"gst_clock_single_shot_id_reinit","","",null,null],[5,"gst_clock_unadjust_unlocked","","",null,null],[5,"gst_clock_unadjust_with_calibration","","",null,null],[5,"gst_clock_wait_for_sync","","",null,null],[5,"gst_control_binding_get_type","","",null,null],[5,"gst_control_binding_get_g_value_array","","",null,null],[5,"gst_control_binding_get_value","","",null,null],[5,"gst_control_binding_get_value_array","","",null,null],[5,"gst_control_binding_is_disabled","","",null,null],[5,"gst_control_binding_set_disabled","","",null,null],[5,"gst_control_binding_sync_values","","",null,null],[5,"gst_control_source_get_type","","",null,null],[5,"gst_control_source_get_value","","",null,null],[5,"gst_control_source_get_value_array","","",null,null],[5,"gst_device_get_type","","",null,null],[5,"gst_device_create_element","","",null,null],[5,"gst_device_get_caps","","",null,null],[5,"gst_device_get_device_class","","",null,null],[5,"gst_device_get_display_name","","",null,null],[5,"gst_device_get_properties","","",null,null],[5,"gst_device_has_classes","","",null,null],[5,"gst_device_has_classesv","","",null,null],[5,"gst_device_reconfigure_element","","",null,null],[5,"gst_device_monitor_get_type","","",null,null],[5,"gst_device_monitor_new","","",null,null],[5,"gst_device_monitor_add_filter","","",null,null],[5,"gst_device_monitor_get_bus","","",null,null],[5,"gst_device_monitor_get_devices","","",null,null],[5,"gst_device_monitor_get_providers","","",null,null],[5,"gst_device_monitor_get_show_all_devices","","",null,null],[5,"gst_device_monitor_remove_filter","","",null,null],[5,"gst_device_monitor_set_show_all_devices","","",null,null],[5,"gst_device_monitor_start","","",null,null],[5,"gst_device_monitor_stop","","",null,null],[5,"gst_device_provider_get_type","","",null,null],[5,"gst_device_provider_register","","",null,null],[5,"gst_device_provider_can_monitor","","",null,null],[5,"gst_device_provider_device_add","","",null,null],[5,"gst_device_provider_device_remove","","",null,null],[5,"gst_device_provider_get_bus","","",null,null],[5,"gst_device_provider_get_devices","","",null,null],[5,"gst_device_provider_get_factory","","",null,null],[5,"gst_device_provider_get_hidden_providers","","",null,null],[5,"gst_device_provider_hide_provider","","",null,null],[5,"gst_device_provider_start","","",null,null],[5,"gst_device_provider_stop","","",null,null],[5,"gst_device_provider_unhide_provider","","",null,null],[5,"gst_device_provider_factory_get_type","","",null,null],[5,"gst_device_provider_factory_find","","",null,null],[5,"gst_device_provider_factory_get_by_name","","",null,null],[5,"gst_device_provider_factory_list_get_device_providers","","",null,null],[5,"gst_device_provider_factory_get","","",null,null],[5,"gst_device_provider_factory_get_device_provider_type","","",null,null],[5,"gst_device_provider_factory_get_metadata","","",null,null],[5,"gst_device_provider_factory_get_metadata_keys","","",null,null],[5,"gst_device_provider_factory_has_classes","","",null,null],[5,"gst_device_provider_factory_has_classesv","","",null,null],[5,"gst_double_range_get_type","","",null,null],[5,"gst_dynamic_type_factory_get_type","","",null,null],[5,"gst_dynamic_type_factory_load","","",null,null],[5,"gst_element_get_type","","",null,null],[5,"gst_element_make_from_uri","","",null,null],[5,"gst_element_register","","",null,null],[5,"gst_element_state_change_return_get_name","","",null,null],[5,"gst_element_state_get_name","","",null,null],[5,"gst_element_abort_state","","",null,null],[5,"gst_element_add_pad","","",null,null],[5,"gst_element_add_property_deep_notify_watch","","",null,null],[5,"gst_element_add_property_notify_watch","","",null,null],[5,"gst_element_call_async","","",null,null],[5,"gst_element_change_state","","",null,null],[5,"gst_element_continue_state","","",null,null],[5,"gst_element_create_all_pads","","",null,null],[5,"gst_element_get_base_time","","",null,null],[5,"gst_element_get_bus","","",null,null],[5,"gst_element_get_clock","","",null,null],[5,"gst_element_get_compatible_pad","","",null,null],[5,"gst_element_get_compatible_pad_template","","",null,null],[5,"gst_element_get_context","","",null,null],[5,"gst_element_get_context_unlocked","","",null,null],[5,"gst_element_get_contexts","","",null,null],[5,"gst_element_get_factory","","",null,null],[5,"gst_element_get_request_pad","","",null,null],[5,"gst_element_get_start_time","","",null,null],[5,"gst_element_get_state","","",null,null],[5,"gst_element_get_static_pad","","",null,null],[5,"gst_element_is_locked_state","","",null,null],[5,"gst_element_iterate_pads","","",null,null],[5,"gst_element_iterate_sink_pads","","",null,null],[5,"gst_element_iterate_src_pads","","",null,null],[5,"gst_element_link","","",null,null],[5,"gst_element_link_filtered","","",null,null],[5,"gst_element_link_many","","",null,null],[5,"gst_element_link_pads","","",null,null],[5,"gst_element_link_pads_filtered","","",null,null],[5,"gst_element_link_pads_full","","",null,null],[5,"gst_element_lost_state","","",null,null],[5,"gst_element_message_full","","",null,null],[5,"gst_element_message_full_with_details","","",null,null],[5,"gst_element_no_more_pads","","",null,null],[5,"gst_element_post_message","","",null,null],[5,"gst_element_provide_clock","","",null,null],[5,"gst_element_query","","",null,null],[5,"gst_element_query_convert","","",null,null],[5,"gst_element_query_duration","","",null,null],[5,"gst_element_query_position","","",null,null],[5,"gst_element_release_request_pad","","",null,null],[5,"gst_element_remove_pad","","",null,null],[5,"gst_element_remove_property_notify_watch","","",null,null],[5,"gst_element_request_pad","","",null,null],[5,"gst_element_seek","","",null,null],[5,"gst_element_seek_simple","","",null,null],[5,"gst_element_send_event","","",null,null],[5,"gst_element_set_base_time","","",null,null],[5,"gst_element_set_bus","","",null,null],[5,"gst_element_set_clock","","",null,null],[5,"gst_element_set_context","","",null,null],[5,"gst_element_set_locked_state","","",null,null],[5,"gst_element_set_start_time","","",null,null],[5,"gst_element_set_state","","",null,null],[5,"gst_element_sync_state_with_parent","","",null,null],[5,"gst_element_unlink","","",null,null],[5,"gst_element_unlink_many","","",null,null],[5,"gst_element_unlink_pads","","",null,null],[5,"gst_element_factory_get_type","","",null,null],[5,"gst_element_factory_find","","",null,null],[5,"gst_element_factory_list_filter","","",null,null],[5,"gst_element_factory_list_get_elements","","",null,null],[5,"gst_element_factory_make","","",null,null],[5,"gst_element_factory_can_sink_all_caps","","",null,null],[5,"gst_element_factory_can_sink_any_caps","","",null,null],[5,"gst_element_factory_can_src_all_caps","","",null,null],[5,"gst_element_factory_can_src_any_caps","","",null,null],[5,"gst_element_factory_create","","",null,null],[5,"gst_element_factory_get_element_type","","",null,null],[5,"gst_element_factory_get_metadata","","",null,null],[5,"gst_element_factory_get_metadata_keys","","",null,null],[5,"gst_element_factory_get_num_pad_templates","","",null,null],[5,"gst_element_factory_get_static_pad_templates","","",null,null],[5,"gst_element_factory_get_uri_protocols","","",null,null],[5,"gst_element_factory_get_uri_type","","",null,null],[5,"gst_element_factory_has_interface","","",null,null],[5,"gst_element_factory_list_is_type","","",null,null],[5,"gst_flagset_get_type","","",null,null],[5,"gst_flagset_register","","",null,null],[5,"gst_fraction_get_type","","",null,null],[5,"gst_fraction_range_get_type","","",null,null],[5,"gst_ghost_pad_get_type","","",null,null],[5,"gst_ghost_pad_new","","",null,null],[5,"gst_ghost_pad_new_from_template","","",null,null],[5,"gst_ghost_pad_new_no_target","","",null,null],[5,"gst_ghost_pad_new_no_target_from_template","","",null,null],[5,"gst_ghost_pad_activate_mode_default","","",null,null],[5,"gst_ghost_pad_internal_activate_mode_default","","",null,null],[5,"gst_ghost_pad_construct","","",null,null],[5,"gst_ghost_pad_get_target","","",null,null],[5,"gst_ghost_pad_set_target","","",null,null],[5,"gst_int64_range_get_type","","",null,null],[5,"gst_int_range_get_type","","",null,null],[5,"gst_object_get_type","","",null,null],[5,"gst_object_check_uniqueness","","",null,null],[5,"gst_object_default_deep_notify","","",null,null],[5,"gst_object_ref_sink","","",null,null],[5,"gst_object_replace","","",null,null],[5,"gst_object_add_control_binding","","",null,null],[5,"gst_object_default_error","","",null,null],[5,"gst_object_get_control_binding","","",null,null],[5,"gst_object_get_control_rate","","",null,null],[5,"gst_object_get_g_value_array","","",null,null],[5,"gst_object_get_name","","",null,null],[5,"gst_object_get_parent","","",null,null],[5,"gst_object_get_path_string","","",null,null],[5,"gst_object_get_value","","",null,null],[5,"gst_object_get_value_array","","",null,null],[5,"gst_object_has_active_control_bindings","","",null,null],[5,"gst_object_has_ancestor","","",null,null],[5,"gst_object_has_as_ancestor","","",null,null],[5,"gst_object_has_as_parent","","",null,null],[5,"gst_object_ref","","",null,null],[5,"gst_object_remove_control_binding","","",null,null],[5,"gst_object_set_control_binding_disabled","","",null,null],[5,"gst_object_set_control_bindings_disabled","","",null,null],[5,"gst_object_set_control_rate","","",null,null],[5,"gst_object_set_name","","",null,null],[5,"gst_object_set_parent","","",null,null],[5,"gst_object_suggest_next_sync","","",null,null],[5,"gst_object_sync_values","","",null,null],[5,"gst_object_unparent","","",null,null],[5,"gst_object_unref","","",null,null],[5,"gst_pad_get_type","","",null,null],[5,"gst_pad_new","","",null,null],[5,"gst_pad_new_from_static_template","","",null,null],[5,"gst_pad_new_from_template","","",null,null],[5,"gst_pad_link_get_name","","",null,null],[5,"gst_pad_activate_mode","","",null,null],[5,"gst_pad_add_probe","","",null,null],[5,"gst_pad_can_link","","",null,null],[5,"gst_pad_chain","","",null,null],[5,"gst_pad_chain_list","","",null,null],[5,"gst_pad_check_reconfigure","","",null,null],[5,"gst_pad_create_stream_id","","",null,null],[5,"gst_pad_create_stream_id_printf","","",null,null],[5,"gst_pad_event_default","","",null,null],[5,"gst_pad_forward","","",null,null],[5,"gst_pad_get_allowed_caps","","",null,null],[5,"gst_pad_get_current_caps","","",null,null],[5,"gst_pad_get_direction","","",null,null],[5,"gst_pad_get_element_private","","",null,null],[5,"gst_pad_get_last_flow_return","","",null,null],[5,"gst_pad_get_offset","","",null,null],[5,"gst_pad_get_pad_template","","",null,null],[5,"gst_pad_get_pad_template_caps","","",null,null],[5,"gst_pad_get_parent_element","","",null,null],[5,"gst_pad_get_peer","","",null,null],[5,"gst_pad_get_range","","",null,null],[5,"gst_pad_get_sticky_event","","",null,null],[5,"gst_pad_get_stream","","",null,null],[5,"gst_pad_get_stream_id","","",null,null],[5,"gst_pad_get_task_state","","",null,null],[5,"gst_pad_has_current_caps","","",null,null],[5,"gst_pad_is_active","","",null,null],[5,"gst_pad_is_blocked","","",null,null],[5,"gst_pad_is_blocking","","",null,null],[5,"gst_pad_is_linked","","",null,null],[5,"gst_pad_iterate_internal_links","","",null,null],[5,"gst_pad_iterate_internal_links_default","","",null,null],[5,"gst_pad_link","","",null,null],[5,"gst_pad_link_full","","",null,null],[5,"gst_pad_link_maybe_ghosting","","",null,null],[5,"gst_pad_link_maybe_ghosting_full","","",null,null],[5,"gst_pad_mark_reconfigure","","",null,null],[5,"gst_pad_needs_reconfigure","","",null,null],[5,"gst_pad_pause_task","","",null,null],[5,"gst_pad_peer_query","","",null,null],[5,"gst_pad_peer_query_accept_caps","","",null,null],[5,"gst_pad_peer_query_caps","","",null,null],[5,"gst_pad_peer_query_convert","","",null,null],[5,"gst_pad_peer_query_duration","","",null,null],[5,"gst_pad_peer_query_position","","",null,null],[5,"gst_pad_proxy_query_accept_caps","","",null,null],[5,"gst_pad_proxy_query_caps","","",null,null],[5,"gst_pad_pull_range","","",null,null],[5,"gst_pad_push","","",null,null],[5,"gst_pad_push_event","","",null,null],[5,"gst_pad_push_list","","",null,null],[5,"gst_pad_query","","",null,null],[5,"gst_pad_query_accept_caps","","",null,null],[5,"gst_pad_query_caps","","",null,null],[5,"gst_pad_query_convert","","",null,null],[5,"gst_pad_query_default","","",null,null],[5,"gst_pad_query_duration","","",null,null],[5,"gst_pad_query_position","","",null,null],[5,"gst_pad_remove_probe","","",null,null],[5,"gst_pad_send_event","","",null,null],[5,"gst_pad_set_activate_function_full","","",null,null],[5,"gst_pad_set_activatemode_function_full","","",null,null],[5,"gst_pad_set_active","","",null,null],[5,"gst_pad_set_chain_function_full","","",null,null],[5,"gst_pad_set_chain_list_function_full","","",null,null],[5,"gst_pad_set_element_private","","",null,null],[5,"gst_pad_set_event_full_function_full","","",null,null],[5,"gst_pad_set_event_function_full","","",null,null],[5,"gst_pad_set_getrange_function_full","","",null,null],[5,"gst_pad_set_iterate_internal_links_function_full","","",null,null],[5,"gst_pad_set_link_function_full","","",null,null],[5,"gst_pad_set_offset","","",null,null],[5,"gst_pad_set_query_function_full","","",null,null],[5,"gst_pad_set_unlink_function_full","","",null,null],[5,"gst_pad_start_task","","",null,null],[5,"gst_pad_sticky_events_foreach","","",null,null],[5,"gst_pad_stop_task","","",null,null],[5,"gst_pad_store_sticky_event","","",null,null],[5,"gst_pad_unlink","","",null,null],[5,"gst_pad_use_fixed_caps","","",null,null],[5,"gst_pad_template_get_type","","",null,null],[5,"gst_pad_template_new","","",null,null],[5,"gst_pad_template_get_caps","","",null,null],[5,"gst_pad_template_pad_created","","",null,null],[5,"gst_param_spec_array_get_type","","",null,null],[5,"gst_param_spec_fraction_get_type","","",null,null],[5,"gst_pipeline_get_type","","",null,null],[5,"gst_pipeline_new","","",null,null],[5,"gst_pipeline_auto_clock","","",null,null],[5,"gst_pipeline_get_auto_flush_bus","","",null,null],[5,"gst_pipeline_get_bus","","",null,null],[5,"gst_pipeline_get_clock","","",null,null],[5,"gst_pipeline_get_delay","","",null,null],[5,"gst_pipeline_get_latency","","",null,null],[5,"gst_pipeline_get_pipeline_clock","","",null,null],[5,"gst_pipeline_set_auto_flush_bus","","",null,null],[5,"gst_pipeline_set_clock","","",null,null],[5,"gst_pipeline_set_delay","","",null,null],[5,"gst_pipeline_set_latency","","",null,null],[5,"gst_pipeline_use_clock","","",null,null],[5,"gst_plugin_get_type","","",null,null],[5,"gst_plugin_list_free","","",null,null],[5,"gst_plugin_load_by_name","","",null,null],[5,"gst_plugin_load_file","","",null,null],[5,"gst_plugin_register_static","","",null,null],[5,"gst_plugin_register_static_full","","",null,null],[5,"gst_plugin_add_dependency","","",null,null],[5,"gst_plugin_add_dependency_simple","","",null,null],[5,"gst_plugin_get_cache_data","","",null,null],[5,"gst_plugin_get_description","","",null,null],[5,"gst_plugin_get_filename","","",null,null],[5,"gst_plugin_get_license","","",null,null],[5,"gst_plugin_get_name","","",null,null],[5,"gst_plugin_get_origin","","",null,null],[5,"gst_plugin_get_package","","",null,null],[5,"gst_plugin_get_release_date_string","","",null,null],[5,"gst_plugin_get_source","","",null,null],[5,"gst_plugin_get_version","","",null,null],[5,"gst_plugin_is_loaded","","",null,null],[5,"gst_plugin_load","","",null,null],[5,"gst_plugin_set_cache_data","","",null,null],[5,"gst_plugin_feature_get_type","","",null,null],[5,"gst_plugin_feature_list_copy","","",null,null],[5,"gst_plugin_feature_list_debug","","",null,null],[5,"gst_plugin_feature_list_free","","",null,null],[5,"gst_plugin_feature_rank_compare_func","","",null,null],[5,"gst_plugin_feature_check_version","","",null,null],[5,"gst_plugin_feature_get_plugin","","",null,null],[5,"gst_plugin_feature_get_plugin_name","","",null,null],[5,"gst_plugin_feature_get_rank","","",null,null],[5,"gst_plugin_feature_load","","",null,null],[5,"gst_plugin_feature_set_rank","","",null,null],[5,"gst_proxy_pad_get_type","","",null,null],[5,"gst_proxy_pad_chain_default","","",null,null],[5,"gst_proxy_pad_chain_list_default","","",null,null],[5,"gst_proxy_pad_getrange_default","","",null,null],[5,"gst_proxy_pad_iterate_internal_links_default","","",null,null],[5,"gst_proxy_pad_get_internal","","",null,null],[5,"gst_registry_get_type","","",null,null],[5,"gst_registry_fork_is_enabled","","",null,null],[5,"gst_registry_fork_set_enabled","","",null,null],[5,"gst_registry_get","","",null,null],[5,"gst_registry_add_feature","","",null,null],[5,"gst_registry_add_plugin","","",null,null],[5,"gst_registry_check_feature_version","","",null,null],[5,"gst_registry_feature_filter","","",null,null],[5,"gst_registry_find_feature","","",null,null],[5,"gst_registry_find_plugin","","",null,null],[5,"gst_registry_get_feature_list","","",null,null],[5,"gst_registry_get_feature_list_by_plugin","","",null,null],[5,"gst_registry_get_feature_list_cookie","","",null,null],[5,"gst_registry_get_plugin_list","","",null,null],[5,"gst_registry_lookup","","",null,null],[5,"gst_registry_lookup_feature","","",null,null],[5,"gst_registry_plugin_filter","","",null,null],[5,"gst_registry_remove_feature","","",null,null],[5,"gst_registry_remove_plugin","","",null,null],[5,"gst_registry_scan_path","","",null,null],[5,"gst_stream_get_type","","",null,null],[5,"gst_stream_new","","",null,null],[5,"gst_stream_get_caps","","",null,null],[5,"gst_stream_get_stream_flags","","",null,null],[5,"gst_stream_get_stream_id","","",null,null],[5,"gst_stream_get_stream_type","","",null,null],[5,"gst_stream_get_tags","","",null,null],[5,"gst_stream_set_caps","","",null,null],[5,"gst_stream_set_stream_flags","","",null,null],[5,"gst_stream_set_stream_type","","",null,null],[5,"gst_stream_set_tags","","",null,null],[5,"gst_stream_collection_get_type","","",null,null],[5,"gst_stream_collection_new","","",null,null],[5,"gst_stream_collection_add_stream","","",null,null],[5,"gst_stream_collection_get_size","","",null,null],[5,"gst_stream_collection_get_stream","","",null,null],[5,"gst_stream_collection_get_upstream_id","","",null,null],[5,"gst_system_clock_get_type","","",null,null],[5,"gst_system_clock_obtain","","",null,null],[5,"gst_system_clock_set_default","","",null,null],[5,"gst_task_get_type","","",null,null],[5,"gst_task_new","","",null,null],[5,"gst_task_cleanup_all","","",null,null],[5,"gst_task_get_pool","","",null,null],[5,"gst_task_get_state","","",null,null],[5,"gst_task_join","","",null,null],[5,"gst_task_pause","","",null,null],[5,"gst_task_set_enter_callback","","",null,null],[5,"gst_task_set_leave_callback","","",null,null],[5,"gst_task_set_lock","","",null,null],[5,"gst_task_set_pool","","",null,null],[5,"gst_task_set_state","","",null,null],[5,"gst_task_start","","",null,null],[5,"gst_task_stop","","",null,null],[5,"gst_task_pool_get_type","","",null,null],[5,"gst_task_pool_new","","",null,null],[5,"gst_task_pool_cleanup","","",null,null],[5,"gst_task_pool_join","","",null,null],[5,"gst_task_pool_prepare","","",null,null],[5,"gst_task_pool_push","","",null,null],[5,"gst_tracer_get_type","","",null,null],[5,"gst_tracer_factory_get_type","","",null,null],[5,"gst_tracer_factory_get_list","","",null,null],[5,"gst_tracer_record_get_type","","",null,null],[5,"gst_type_find_factory_get_type","","",null,null],[5,"gst_type_find_factory_get_list","","",null,null],[5,"gst_type_find_factory_call_function","","",null,null],[5,"gst_type_find_factory_get_caps","","",null,null],[5,"gst_type_find_factory_get_extensions","","",null,null],[5,"gst_type_find_factory_has_function","","",null,null],[5,"gst_value_array_get_type","","",null,null],[5,"gst_value_array_append_and_take_value","","",null,null],[5,"gst_value_array_append_value","","",null,null],[5,"gst_value_array_get_size","","",null,null],[5,"gst_value_array_get_value","","",null,null],[5,"gst_value_array_prepend_value","","",null,null],[5,"gst_value_list_get_type","","",null,null],[5,"gst_value_list_append_and_take_value","","",null,null],[5,"gst_value_list_append_value","","",null,null],[5,"gst_value_list_concat","","",null,null],[5,"gst_value_list_get_size","","",null,null],[5,"gst_value_list_get_value","","",null,null],[5,"gst_value_list_merge","","",null,null],[5,"gst_value_list_prepend_value","","",null,null],[5,"gst_child_proxy_get_type","","",null,null],[5,"gst_child_proxy_child_added","","",null,null],[5,"gst_child_proxy_child_removed","","",null,null],[5,"gst_child_proxy_get","","",null,null],[5,"gst_child_proxy_get_child_by_index","","",null,null],[5,"gst_child_proxy_get_child_by_name","","",null,null],[5,"gst_child_proxy_get_children_count","","",null,null],[5,"gst_child_proxy_get_property","","",null,null],[5,"gst_child_proxy_lookup","","",null,null],[5,"gst_child_proxy_set","","",null,null],[5,"gst_child_proxy_set_property","","",null,null],[5,"gst_preset_get_type","","",null,null],[5,"gst_preset_get_app_dir","","",null,null],[5,"gst_preset_set_app_dir","","",null,null],[5,"gst_preset_delete_preset","","",null,null],[5,"gst_preset_get_meta","","",null,null],[5,"gst_preset_get_preset_names","","",null,null],[5,"gst_preset_get_property_names","","",null,null],[5,"gst_preset_is_editable","","",null,null],[5,"gst_preset_load_preset","","",null,null],[5,"gst_preset_rename_preset","","",null,null],[5,"gst_preset_save_preset","","",null,null],[5,"gst_preset_set_meta","","",null,null],[5,"gst_tag_setter_get_type","","",null,null],[5,"gst_tag_setter_add_tag_value","","",null,null],[5,"gst_tag_setter_add_tag_values","","",null,null],[5,"gst_tag_setter_add_tags","","",null,null],[5,"gst_tag_setter_get_tag_list","","",null,null],[5,"gst_tag_setter_get_tag_merge_mode","","",null,null],[5,"gst_tag_setter_merge_tags","","",null,null],[5,"gst_tag_setter_reset_tags","","",null,null],[5,"gst_tag_setter_set_tag_merge_mode","","",null,null],[5,"gst_toc_setter_get_type","","",null,null],[5,"gst_toc_setter_get_toc","","",null,null],[5,"gst_toc_setter_reset","","",null,null],[5,"gst_toc_setter_set_toc","","",null,null],[5,"gst_uri_handler_get_type","","",null,null],[5,"gst_uri_handler_get_protocols","","",null,null],[5,"gst_uri_handler_get_uri","","",null,null],[5,"gst_uri_handler_get_uri_type","","",null,null],[5,"gst_uri_handler_set_uri","","",null,null],[5,"gst_calculate_linear_regression","","",null,null],[5,"gst_debug_add_log_function","","",null,null],[5,"gst_debug_bin_to_dot_data","","",null,null],[5,"gst_debug_bin_to_dot_file","","",null,null],[5,"gst_debug_bin_to_dot_file_with_ts","","",null,null],[5,"gst_debug_construct_term_color","","",null,null],[5,"gst_debug_construct_win_color","","",null,null],[5,"gst_debug_get_all_categories","","",null,null],[5,"gst_debug_get_color_mode","","",null,null],[5,"gst_debug_get_default_threshold","","",null,null],[5,"gst_debug_get_stack_trace","","",null,null],[5,"gst_debug_is_active","","",null,null],[5,"gst_debug_is_colored","","",null,null],[5,"gst_debug_log","","",null,null],[5,"gst_debug_log_default","","",null,null],[5,"gst_debug_print_stack_trace","","",null,null],[5,"gst_debug_remove_log_function","","",null,null],[5,"gst_debug_remove_log_function_by_data","","",null,null],[5,"gst_debug_set_active","","",null,null],[5,"gst_debug_set_color_mode","","",null,null],[5,"gst_debug_set_color_mode_from_string","","",null,null],[5,"gst_debug_set_colored","","",null,null],[5,"gst_debug_set_default_threshold","","",null,null],[5,"gst_debug_set_threshold_for_name","","",null,null],[5,"gst_debug_set_threshold_from_string","","",null,null],[5,"gst_debug_unset_threshold_for_name","","",null,null],[5,"gst_deinit","","",null,null],[5,"gst_dynamic_type_register","","",null,null],[5,"gst_error_get_message","","",null,null],[5,"gst_filename_to_uri","","",null,null],[5,"gst_flow_get_name","","",null,null],[5,"gst_flow_to_quark","","",null,null],[5,"gst_formats_contains","","",null,null],[5,"gst_info_strdup_printf","","",null,null],[5,"gst_init","","",null,null],[5,"gst_init_check","","",null,null],[5,"gst_init_get_option_group","","",null,null],[5,"gst_is_caps_features","","",null,null],[5,"gst_is_initialized","","",null,null],[5,"gst_make_element_message_details","","",null,null],[5,"gst_param_spec_array","","",null,null],[5,"gst_param_spec_fraction","","",null,null],[5,"gst_parent_buffer_meta_api_get_type","","",null,null],[5,"gst_parse_bin_from_description","","",null,null],[5,"gst_parse_bin_from_description_full","","",null,null],[5,"gst_parse_launch","","",null,null],[5,"gst_parse_launch_full","","",null,null],[5,"gst_parse_launchv","","",null,null],[5,"gst_parse_launchv_full","","",null,null],[5,"gst_print","","",null,null],[5,"gst_printerr","","",null,null],[5,"gst_printerrln","","",null,null],[5,"gst_println","","",null,null],[5,"gst_protection_meta_api_get_type","","",null,null],[5,"gst_protection_select_system","","",null,null],[5,"gst_segtrap_is_enabled","","",null,null],[5,"gst_segtrap_set_enabled","","",null,null],[5,"gst_static_caps_get_type","","",null,null],[5,"gst_static_pad_template_get_type","","",null,null],[5,"gst_tag_exists","","",null,null],[5,"gst_tag_get_description","","",null,null],[5,"gst_tag_get_flag","","",null,null],[5,"gst_tag_get_nick","","",null,null],[5,"gst_tag_get_type","","",null,null],[5,"gst_tag_is_fixed","","",null,null],[5,"gst_tag_merge_strings_with_comma","","",null,null],[5,"gst_tag_merge_use_first","","",null,null],[5,"gst_tag_register","","",null,null],[5,"gst_tag_register_static","","",null,null],[5,"gst_type_find_get_type","","",null,null],[5,"gst_update_registry","","",null,null],[5,"gst_util_array_binary_search","","",null,null],[5,"gst_util_double_to_fraction","","",null,null],[5,"gst_util_dump_mem","","",null,null],[5,"gst_util_fraction_add","","",null,null],[5,"gst_util_fraction_compare","","",null,null],[5,"gst_util_fraction_multiply","","",null,null],[5,"gst_util_fraction_to_double","","",null,null],[5,"gst_util_gdouble_to_guint64","","",null,null],[5,"gst_util_get_object_array","","",null,null],[5,"gst_util_get_timestamp","","",null,null],[5,"gst_util_greatest_common_divisor","","",null,null],[5,"gst_util_greatest_common_divisor_int64","","",null,null],[5,"gst_util_group_id_next","","",null,null],[5,"gst_util_guint64_to_gdouble","","",null,null],[5,"gst_util_seqnum_compare","","",null,null],[5,"gst_util_seqnum_next","","",null,null],[5,"gst_util_set_object_arg","","",null,null],[5,"gst_util_set_object_array","","",null,null],[5,"gst_util_set_value_from_string","","",null,null],[5,"gst_util_uint64_scale","","",null,null],[5,"gst_util_uint64_scale_ceil","","",null,null],[5,"gst_util_uint64_scale_int","","",null,null],[5,"gst_util_uint64_scale_int_ceil","","",null,null],[5,"gst_util_uint64_scale_int_round","","",null,null],[5,"gst_util_uint64_scale_round","","",null,null],[5,"gst_value_can_compare","","",null,null],[5,"gst_value_can_intersect","","",null,null],[5,"gst_value_can_subtract","","",null,null],[5,"gst_value_can_union","","",null,null],[5,"gst_value_compare","","",null,null],[5,"gst_value_deserialize","","",null,null],[5,"gst_value_fixate","","",null,null],[5,"gst_value_fraction_multiply","","",null,null],[5,"gst_value_fraction_subtract","","",null,null],[5,"gst_value_get_bitmask","","",null,null],[5,"gst_value_get_caps","","",null,null],[5,"gst_value_get_caps_features","","",null,null],[5,"gst_value_get_double_range_max","","",null,null],[5,"gst_value_get_double_range_min","","",null,null],[5,"gst_value_get_flagset_flags","","",null,null],[5,"gst_value_get_flagset_mask","","",null,null],[5,"gst_value_get_fraction_denominator","","",null,null],[5,"gst_value_get_fraction_numerator","","",null,null],[5,"gst_value_get_fraction_range_max","","",null,null],[5,"gst_value_get_fraction_range_min","","",null,null],[5,"gst_value_get_int64_range_max","","",null,null],[5,"gst_value_get_int64_range_min","","",null,null],[5,"gst_value_get_int64_range_step","","",null,null],[5,"gst_value_get_int_range_max","","",null,null],[5,"gst_value_get_int_range_min","","",null,null],[5,"gst_value_get_int_range_step","","",null,null],[5,"gst_value_get_structure","","",null,null],[5,"gst_value_init_and_copy","","",null,null],[5,"gst_value_intersect","","",null,null],[5,"gst_value_is_fixed","","",null,null],[5,"gst_value_is_subset","","",null,null],[5,"gst_value_register","","",null,null],[5,"gst_value_serialize","","",null,null],[5,"gst_value_set_bitmask","","",null,null],[5,"gst_value_set_caps","","",null,null],[5,"gst_value_set_caps_features","","",null,null],[5,"gst_value_set_double_range","","",null,null],[5,"gst_value_set_flagset","","",null,null],[5,"gst_value_set_fraction","","",null,null],[5,"gst_value_set_fraction_range","","",null,null],[5,"gst_value_set_fraction_range_full","","",null,null],[5,"gst_value_set_int64_range","","",null,null],[5,"gst_value_set_int64_range_step","","",null,null],[5,"gst_value_set_int_range","","",null,null],[5,"gst_value_set_int_range_step","","",null,null],[5,"gst_value_set_structure","","",null,null],[5,"gst_value_subtract","","",null,null],[5,"gst_value_union","","",null,null],[5,"gst_version","","",null,null],[5,"gst_version_string","","",null,null],[6,"GstClockID","","",null,null],[6,"GstClockTime","","",null,null],[6,"GstClockTimeDiff","","",null,null],[6,"GstElementFactoryListType","","",null,null],[6,"GstBufferingMode","","",null,null],[6,"GstBusSyncReply","","",null,null],[6,"GstCapsIntersectMode","","",null,null],[6,"GstClockEntryType","","",null,null],[6,"GstClockReturn","","",null,null],[6,"GstClockType","","",null,null],[6,"GstCoreError","","",null,null],[6,"GstDebugColorMode","","",null,null],[6,"GstDebugLevel","","",null,null],[6,"GstEventType","","",null,null],[6,"GstFlowReturn","","",null,null],[6,"GstFormat","","",null,null],[6,"GstIteratorItem","","",null,null],[6,"GstIteratorResult","","",null,null],[6,"GstLibraryError","","",null,null],[6,"GstPadDirection","","",null,null],[6,"GstPadLinkReturn","","",null,null],[6,"GstPadMode","","",null,null],[6,"GstPadPresence","","",null,null],[6,"GstPadProbeReturn","","",null,null],[6,"GstParseError","","",null,null],[6,"GstPluginError","","",null,null],[6,"GstProgressType","","",null,null],[6,"GstQOSType","","",null,null],[6,"GstQueryType","","",null,null],[6,"GstRank","","",null,null],[6,"GstResourceError","","",null,null],[6,"GstSearchMode","","",null,null],[6,"GstSeekType","","",null,null],[6,"GstState","","",null,null],[6,"GstStateChange","","",null,null],[6,"GstStateChangeReturn","","",null,null],[6,"GstStreamError","","",null,null],[6,"GstStreamStatusType","","",null,null],[6,"GstStructureChangeType","","",null,null],[6,"GstTagFlag","","",null,null],[6,"GstTagMergeMode","","",null,null],[6,"GstTagScope","","",null,null],[6,"GstTaskState","","",null,null],[6,"GstTocEntryType","","",null,null],[6,"GstTocLoopType","","",null,null],[6,"GstTocScope","","",null,null],[6,"GstTracerValueScope","","",null,null],[6,"GstTypeFindProbability","","",null,null],[6,"GstURIError","","",null,null],[6,"GstURIType","","",null,null],[6,"GstBufferForeachMetaFunc","","",null,null],[6,"GstBufferListFunc","","",null,null],[6,"GstBusFunc","","",null,null],[6,"GstBusSyncHandler","","",null,null],[6,"GstCapsFilterMapFunc","","",null,null],[6,"GstCapsForeachFunc","","",null,null],[6,"GstCapsMapFunc","","",null,null],[6,"GstClockCallback","","",null,null],[6,"GstControlBindingConvert","","",null,null],[6,"GstControlSourceGetValue","","",null,null],[6,"GstControlSourceGetValueArray","","",null,null],[6,"GstDebugFuncPtr","","",null,null],[6,"GstElementCallAsyncFunc","","",null,null],[6,"GstIteratorCopyFunction","","",null,null],[6,"GstIteratorFoldFunction","","",null,null],[6,"GstIteratorForeachFunction","","",null,null],[6,"GstIteratorFreeFunction","","",null,null],[6,"GstIteratorItemFunction","","",null,null],[6,"GstIteratorNextFunction","","",null,null],[6,"GstIteratorResyncFunction","","",null,null],[6,"GstLogFunction","","",null,null],[6,"GstMemoryCopyFunction","","",null,null],[6,"GstMemoryIsSpanFunction","","",null,null],[6,"GstMemoryMapFullFunction","","",null,null],[6,"GstMemoryMapFunction","","",null,null],[6,"GstMemoryShareFunction","","",null,null],[6,"GstMemoryUnmapFullFunction","","",null,null],[6,"GstMemoryUnmapFunction","","",null,null],[6,"GstMetaFreeFunction","","",null,null],[6,"GstMetaInitFunction","","",null,null],[6,"GstMetaTransformFunction","","",null,null],[6,"GstMiniObjectCopyFunction","","",null,null],[6,"GstMiniObjectDisposeFunction","","",null,null],[6,"GstMiniObjectFreeFunction","","",null,null],[6,"GstMiniObjectNotify","","",null,null],[6,"GstPadActivateFunction","","",null,null],[6,"GstPadActivateModeFunction","","",null,null],[6,"GstPadChainFunction","","",null,null],[6,"GstPadChainListFunction","","",null,null],[6,"GstPadEventFullFunction","","",null,null],[6,"GstPadEventFunction","","",null,null],[6,"GstPadForwardFunction","","",null,null],[6,"GstPadGetRangeFunction","","",null,null],[6,"GstPadIterIntLinkFunction","","",null,null],[6,"GstPadLinkFunction","","",null,null],[6,"GstPadProbeCallback","","",null,null],[6,"GstPadQueryFunction","","",null,null],[6,"GstPadStickyEventsForeachFunction","","",null,null],[6,"GstPadUnlinkFunction","","",null,null],[6,"GstPluginFeatureFilter","","",null,null],[6,"GstPluginFilter","","",null,null],[6,"GstPluginInitFullFunc","","",null,null],[6,"GstPluginInitFunc","","",null,null],[6,"GstStructureFilterMapFunc","","",null,null],[6,"GstStructureForeachFunc","","",null,null],[6,"GstStructureMapFunc","","",null,null],[6,"GstTagForeachFunc","","",null,null],[6,"GstTagMergeFunc","","",null,null],[6,"GstTaskFunction","","",null,null],[6,"GstTaskPoolFunction","","",null,null],[6,"GstTaskThreadFunc","","",null,null],[6,"GstTypeFindFunction","","",null,null],[6,"GstValueCompareFunc","","",null,null],[6,"GstValueDeserializeFunc","","",null,null],[6,"GstValueSerializeFunc","","",null,null],[17,"GST_BUFFERING_STREAM","","",null,null],[17,"GST_BUFFERING_DOWNLOAD","","",null,null],[17,"GST_BUFFERING_TIMESHIFT","","",null,null],[17,"GST_BUFFERING_LIVE","","",null,null],[17,"GST_BUS_DROP","","",null,null],[17,"GST_BUS_PASS","","",null,null],[17,"GST_BUS_ASYNC","","",null,null],[17,"GST_CAPS_INTERSECT_ZIG_ZAG","","",null,null],[17,"GST_CAPS_INTERSECT_FIRST","","",null,null],[17,"GST_CLOCK_ENTRY_SINGLE","","",null,null],[17,"GST_CLOCK_ENTRY_PERIODIC","","",null,null],[17,"GST_CLOCK_OK","","",null,null],[17,"GST_CLOCK_EARLY","","",null,null],[17,"GST_CLOCK_UNSCHEDULED","","",null,null],[17,"GST_CLOCK_BUSY","","",null,null],[17,"GST_CLOCK_BADTIME","","",null,null],[17,"GST_CLOCK_ERROR","","",null,null],[17,"GST_CLOCK_UNSUPPORTED","","",null,null],[17,"GST_CLOCK_DONE","","",null,null],[17,"GST_CLOCK_TYPE_REALTIME","","",null,null],[17,"GST_CLOCK_TYPE_MONOTONIC","","",null,null],[17,"GST_CLOCK_TYPE_OTHER","","",null,null],[17,"GST_CORE_ERROR_FAILED","","",null,null],[17,"GST_CORE_ERROR_TOO_LAZY","","",null,null],[17,"GST_CORE_ERROR_NOT_IMPLEMENTED","","",null,null],[17,"GST_CORE_ERROR_STATE_CHANGE","","",null,null],[17,"GST_CORE_ERROR_PAD","","",null,null],[17,"GST_CORE_ERROR_THREAD","","",null,null],[17,"GST_CORE_ERROR_NEGOTIATION","","",null,null],[17,"GST_CORE_ERROR_EVENT","","",null,null],[17,"GST_CORE_ERROR_SEEK","","",null,null],[17,"GST_CORE_ERROR_CAPS","","",null,null],[17,"GST_CORE_ERROR_TAG","","",null,null],[17,"GST_CORE_ERROR_MISSING_PLUGIN","","",null,null],[17,"GST_CORE_ERROR_CLOCK","","",null,null],[17,"GST_CORE_ERROR_DISABLED","","",null,null],[17,"GST_CORE_ERROR_NUM_ERRORS","","",null,null],[17,"GST_DEBUG_COLOR_MODE_OFF","","",null,null],[17,"GST_DEBUG_COLOR_MODE_ON","","",null,null],[17,"GST_DEBUG_COLOR_MODE_UNIX","","",null,null],[17,"GST_LEVEL_NONE","","",null,null],[17,"GST_LEVEL_ERROR","","",null,null],[17,"GST_LEVEL_WARNING","","",null,null],[17,"GST_LEVEL_FIXME","","",null,null],[17,"GST_LEVEL_INFO","","",null,null],[17,"GST_LEVEL_DEBUG","","",null,null],[17,"GST_LEVEL_LOG","","",null,null],[17,"GST_LEVEL_TRACE","","",null,null],[17,"GST_LEVEL_MEMDUMP","","",null,null],[17,"GST_LEVEL_COUNT","","",null,null],[17,"GST_EVENT_UNKNOWN","","",null,null],[17,"GST_EVENT_FLUSH_START","","",null,null],[17,"GST_EVENT_FLUSH_STOP","","",null,null],[17,"GST_EVENT_STREAM_START","","",null,null],[17,"GST_EVENT_CAPS","","",null,null],[17,"GST_EVENT_SEGMENT","","",null,null],[17,"GST_EVENT_STREAM_COLLECTION","","",null,null],[17,"GST_EVENT_TAG","","",null,null],[17,"GST_EVENT_BUFFERSIZE","","",null,null],[17,"GST_EVENT_SINK_MESSAGE","","",null,null],[17,"GST_EVENT_STREAM_GROUP_DONE","","",null,null],[17,"GST_EVENT_EOS","","",null,null],[17,"GST_EVENT_TOC","","",null,null],[17,"GST_EVENT_PROTECTION","","",null,null],[17,"GST_EVENT_SEGMENT_DONE","","",null,null],[17,"GST_EVENT_GAP","","",null,null],[17,"GST_EVENT_QOS","","",null,null],[17,"GST_EVENT_SEEK","","",null,null],[17,"GST_EVENT_NAVIGATION","","",null,null],[17,"GST_EVENT_LATENCY","","",null,null],[17,"GST_EVENT_STEP","","",null,null],[17,"GST_EVENT_RECONFIGURE","","",null,null],[17,"GST_EVENT_TOC_SELECT","","",null,null],[17,"GST_EVENT_SELECT_STREAMS","","",null,null],[17,"GST_EVENT_CUSTOM_UPSTREAM","","",null,null],[17,"GST_EVENT_CUSTOM_DOWNSTREAM","","",null,null],[17,"GST_EVENT_CUSTOM_DOWNSTREAM_OOB","","",null,null],[17,"GST_EVENT_CUSTOM_DOWNSTREAM_STICKY","","",null,null],[17,"GST_EVENT_CUSTOM_BOTH","","",null,null],[17,"GST_EVENT_CUSTOM_BOTH_OOB","","",null,null],[17,"GST_FLOW_CUSTOM_SUCCESS_2","","",null,null],[17,"GST_FLOW_CUSTOM_SUCCESS_1","","",null,null],[17,"GST_FLOW_CUSTOM_SUCCESS","","",null,null],[17,"GST_FLOW_OK","","",null,null],[17,"GST_FLOW_NOT_LINKED","","",null,null],[17,"GST_FLOW_FLUSHING","","",null,null],[17,"GST_FLOW_EOS","","",null,null],[17,"GST_FLOW_NOT_NEGOTIATED","","",null,null],[17,"GST_FLOW_ERROR","","",null,null],[17,"GST_FLOW_NOT_SUPPORTED","","",null,null],[17,"GST_FLOW_CUSTOM_ERROR","","",null,null],[17,"GST_FLOW_CUSTOM_ERROR_1","","",null,null],[17,"GST_FLOW_CUSTOM_ERROR_2","","",null,null],[17,"GST_FORMAT_UNDEFINED","","",null,null],[17,"GST_FORMAT_DEFAULT","","",null,null],[17,"GST_FORMAT_BYTES","","",null,null],[17,"GST_FORMAT_TIME","","",null,null],[17,"GST_FORMAT_BUFFERS","","",null,null],[17,"GST_FORMAT_PERCENT","","",null,null],[17,"GST_ITERATOR_ITEM_SKIP","","",null,null],[17,"GST_ITERATOR_ITEM_PASS","","",null,null],[17,"GST_ITERATOR_ITEM_END","","",null,null],[17,"GST_ITERATOR_DONE","","",null,null],[17,"GST_ITERATOR_OK","","",null,null],[17,"GST_ITERATOR_RESYNC","","",null,null],[17,"GST_ITERATOR_ERROR","","",null,null],[17,"GST_LIBRARY_ERROR_FAILED","","",null,null],[17,"GST_LIBRARY_ERROR_TOO_LAZY","","",null,null],[17,"GST_LIBRARY_ERROR_INIT","","",null,null],[17,"GST_LIBRARY_ERROR_SHUTDOWN","","",null,null],[17,"GST_LIBRARY_ERROR_SETTINGS","","",null,null],[17,"GST_LIBRARY_ERROR_ENCODE","","",null,null],[17,"GST_LIBRARY_ERROR_NUM_ERRORS","","",null,null],[17,"GST_PAD_UNKNOWN","","",null,null],[17,"GST_PAD_SRC","","",null,null],[17,"GST_PAD_SINK","","",null,null],[17,"GST_PAD_LINK_OK","","",null,null],[17,"GST_PAD_LINK_WRONG_HIERARCHY","","",null,null],[17,"GST_PAD_LINK_WAS_LINKED","","",null,null],[17,"GST_PAD_LINK_WRONG_DIRECTION","","",null,null],[17,"GST_PAD_LINK_NOFORMAT","","",null,null],[17,"GST_PAD_LINK_NOSCHED","","",null,null],[17,"GST_PAD_LINK_REFUSED","","",null,null],[17,"GST_PAD_MODE_NONE","","",null,null],[17,"GST_PAD_MODE_PUSH","","",null,null],[17,"GST_PAD_MODE_PULL","","",null,null],[17,"GST_PAD_ALWAYS","","",null,null],[17,"GST_PAD_SOMETIMES","","",null,null],[17,"GST_PAD_REQUEST","","",null,null],[17,"GST_PAD_PROBE_DROP","","",null,null],[17,"GST_PAD_PROBE_OK","","",null,null],[17,"GST_PAD_PROBE_REMOVE","","",null,null],[17,"GST_PAD_PROBE_PASS","","",null,null],[17,"GST_PAD_PROBE_HANDLED","","",null,null],[17,"GST_PARSE_ERROR_SYNTAX","","",null,null],[17,"GST_PARSE_ERROR_NO_SUCH_ELEMENT","","",null,null],[17,"GST_PARSE_ERROR_NO_SUCH_PROPERTY","","",null,null],[17,"GST_PARSE_ERROR_LINK","","",null,null],[17,"GST_PARSE_ERROR_COULD_NOT_SET_PROPERTY","","",null,null],[17,"GST_PARSE_ERROR_EMPTY_BIN","","",null,null],[17,"GST_PARSE_ERROR_EMPTY","","",null,null],[17,"GST_PARSE_ERROR_DELAYED_LINK","","",null,null],[17,"GST_PLUGIN_ERROR_MODULE","","",null,null],[17,"GST_PLUGIN_ERROR_DEPENDENCIES","","",null,null],[17,"GST_PLUGIN_ERROR_NAME_MISMATCH","","",null,null],[17,"GST_PROGRESS_TYPE_START","","",null,null],[17,"GST_PROGRESS_TYPE_CONTINUE","","",null,null],[17,"GST_PROGRESS_TYPE_COMPLETE","","",null,null],[17,"GST_PROGRESS_TYPE_CANCELED","","",null,null],[17,"GST_PROGRESS_TYPE_ERROR","","",null,null],[17,"GST_QOS_TYPE_OVERFLOW","","",null,null],[17,"GST_QOS_TYPE_UNDERFLOW","","",null,null],[17,"GST_QOS_TYPE_THROTTLE","","",null,null],[17,"GST_QUERY_UNKNOWN","","",null,null],[17,"GST_QUERY_POSITION","","",null,null],[17,"GST_QUERY_DURATION","","",null,null],[17,"GST_QUERY_LATENCY","","",null,null],[17,"GST_QUERY_JITTER","","",null,null],[17,"GST_QUERY_RATE","","",null,null],[17,"GST_QUERY_SEEKING","","",null,null],[17,"GST_QUERY_SEGMENT","","",null,null],[17,"GST_QUERY_CONVERT","","",null,null],[17,"GST_QUERY_FORMATS","","",null,null],[17,"GST_QUERY_BUFFERING","","",null,null],[17,"GST_QUERY_CUSTOM","","",null,null],[17,"GST_QUERY_URI","","",null,null],[17,"GST_QUERY_ALLOCATION","","",null,null],[17,"GST_QUERY_SCHEDULING","","",null,null],[17,"GST_QUERY_ACCEPT_CAPS","","",null,null],[17,"GST_QUERY_CAPS","","",null,null],[17,"GST_QUERY_DRAIN","","",null,null],[17,"GST_QUERY_CONTEXT","","",null,null],[17,"GST_RANK_NONE","","",null,null],[17,"GST_RANK_MARGINAL","","",null,null],[17,"GST_RANK_SECONDARY","","",null,null],[17,"GST_RANK_PRIMARY","","",null,null],[17,"GST_RESOURCE_ERROR_FAILED","","",null,null],[17,"GST_RESOURCE_ERROR_TOO_LAZY","","",null,null],[17,"GST_RESOURCE_ERROR_NOT_FOUND","","",null,null],[17,"GST_RESOURCE_ERROR_BUSY","","",null,null],[17,"GST_RESOURCE_ERROR_OPEN_READ","","",null,null],[17,"GST_RESOURCE_ERROR_OPEN_WRITE","","",null,null],[17,"GST_RESOURCE_ERROR_OPEN_READ_WRITE","","",null,null],[17,"GST_RESOURCE_ERROR_CLOSE","","",null,null],[17,"GST_RESOURCE_ERROR_READ","","",null,null],[17,"GST_RESOURCE_ERROR_WRITE","","",null,null],[17,"GST_RESOURCE_ERROR_SEEK","","",null,null],[17,"GST_RESOURCE_ERROR_SYNC","","",null,null],[17,"GST_RESOURCE_ERROR_SETTINGS","","",null,null],[17,"GST_RESOURCE_ERROR_NO_SPACE_LEFT","","",null,null],[17,"GST_RESOURCE_ERROR_NOT_AUTHORIZED","","",null,null],[17,"GST_RESOURCE_ERROR_NUM_ERRORS","","",null,null],[17,"GST_SEARCH_MODE_EXACT","","",null,null],[17,"GST_SEARCH_MODE_BEFORE","","",null,null],[17,"GST_SEARCH_MODE_AFTER","","",null,null],[17,"GST_SEEK_TYPE_NONE","","",null,null],[17,"GST_SEEK_TYPE_SET","","",null,null],[17,"GST_SEEK_TYPE_END","","",null,null],[17,"GST_STATE_VOID_PENDING","","",null,null],[17,"GST_STATE_NULL","","",null,null],[17,"GST_STATE_READY","","",null,null],[17,"GST_STATE_PAUSED","","",null,null],[17,"GST_STATE_PLAYING","","",null,null],[17,"GST_STATE_CHANGE_NULL_TO_READY","","",null,null],[17,"GST_STATE_CHANGE_READY_TO_PAUSED","","",null,null],[17,"GST_STATE_CHANGE_PAUSED_TO_PLAYING","","",null,null],[17,"GST_STATE_CHANGE_PLAYING_TO_PAUSED","","",null,null],[17,"GST_STATE_CHANGE_PAUSED_TO_READY","","",null,null],[17,"GST_STATE_CHANGE_READY_TO_NULL","","",null,null],[17,"GST_STATE_CHANGE_FAILURE","","",null,null],[17,"GST_STATE_CHANGE_SUCCESS","","",null,null],[17,"GST_STATE_CHANGE_ASYNC","","",null,null],[17,"GST_STATE_CHANGE_NO_PREROLL","","",null,null],[17,"GST_STREAM_ERROR_FAILED","","",null,null],[17,"GST_STREAM_ERROR_TOO_LAZY","","",null,null],[17,"GST_STREAM_ERROR_NOT_IMPLEMENTED","","",null,null],[17,"GST_STREAM_ERROR_TYPE_NOT_FOUND","","",null,null],[17,"GST_STREAM_ERROR_WRONG_TYPE","","",null,null],[17,"GST_STREAM_ERROR_CODEC_NOT_FOUND","","",null,null],[17,"GST_STREAM_ERROR_DECODE","","",null,null],[17,"GST_STREAM_ERROR_ENCODE","","",null,null],[17,"GST_STREAM_ERROR_DEMUX","","",null,null],[17,"GST_STREAM_ERROR_MUX","","",null,null],[17,"GST_STREAM_ERROR_FORMAT","","",null,null],[17,"GST_STREAM_ERROR_DECRYPT","","",null,null],[17,"GST_STREAM_ERROR_DECRYPT_NOKEY","","",null,null],[17,"GST_STREAM_ERROR_NUM_ERRORS","","",null,null],[17,"GST_STREAM_STATUS_TYPE_CREATE","","",null,null],[17,"GST_STREAM_STATUS_TYPE_ENTER","","",null,null],[17,"GST_STREAM_STATUS_TYPE_LEAVE","","",null,null],[17,"GST_STREAM_STATUS_TYPE_DESTROY","","",null,null],[17,"GST_STREAM_STATUS_TYPE_START","","",null,null],[17,"GST_STREAM_STATUS_TYPE_PAUSE","","",null,null],[17,"GST_STREAM_STATUS_TYPE_STOP","","",null,null],[17,"GST_STRUCTURE_CHANGE_TYPE_PAD_LINK","","",null,null],[17,"GST_STRUCTURE_CHANGE_TYPE_PAD_UNLINK","","",null,null],[17,"GST_TAG_FLAG_UNDEFINED","","",null,null],[17,"GST_TAG_FLAG_META","","",null,null],[17,"GST_TAG_FLAG_ENCODED","","",null,null],[17,"GST_TAG_FLAG_DECODED","","",null,null],[17,"GST_TAG_FLAG_COUNT","","",null,null],[17,"GST_TAG_MERGE_UNDEFINED","","",null,null],[17,"GST_TAG_MERGE_REPLACE_ALL","","",null,null],[17,"GST_TAG_MERGE_REPLACE","","",null,null],[17,"GST_TAG_MERGE_APPEND","","",null,null],[17,"GST_TAG_MERGE_PREPEND","","",null,null],[17,"GST_TAG_MERGE_KEEP","","",null,null],[17,"GST_TAG_MERGE_KEEP_ALL","","",null,null],[17,"GST_TAG_MERGE_COUNT","","",null,null],[17,"GST_TAG_SCOPE_STREAM","","",null,null],[17,"GST_TAG_SCOPE_GLOBAL","","",null,null],[17,"GST_TASK_STARTED","","",null,null],[17,"GST_TASK_STOPPED","","",null,null],[17,"GST_TASK_PAUSED","","",null,null],[17,"GST_TOC_ENTRY_TYPE_ANGLE","","",null,null],[17,"GST_TOC_ENTRY_TYPE_VERSION","","",null,null],[17,"GST_TOC_ENTRY_TYPE_EDITION","","",null,null],[17,"GST_TOC_ENTRY_TYPE_INVALID","","",null,null],[17,"GST_TOC_ENTRY_TYPE_TITLE","","",null,null],[17,"GST_TOC_ENTRY_TYPE_TRACK","","",null,null],[17,"GST_TOC_ENTRY_TYPE_CHAPTER","","",null,null],[17,"GST_TOC_LOOP_NONE","","",null,null],[17,"GST_TOC_LOOP_FORWARD","","",null,null],[17,"GST_TOC_LOOP_REVERSE","","",null,null],[17,"GST_TOC_LOOP_PING_PONG","","",null,null],[17,"GST_TOC_SCOPE_GLOBAL","","",null,null],[17,"GST_TOC_SCOPE_CURRENT","","",null,null],[17,"GST_TRACER_VALUE_SCOPE_PROCESS","","",null,null],[17,"GST_TRACER_VALUE_SCOPE_THREAD","","",null,null],[17,"GST_TRACER_VALUE_SCOPE_ELEMENT","","",null,null],[17,"GST_TRACER_VALUE_SCOPE_PAD","","",null,null],[17,"GST_TYPE_FIND_NONE","","",null,null],[17,"GST_TYPE_FIND_MINIMUM","","",null,null],[17,"GST_TYPE_FIND_POSSIBLE","","",null,null],[17,"GST_TYPE_FIND_LIKELY","","",null,null],[17,"GST_TYPE_FIND_NEARLY_CERTAIN","","",null,null],[17,"GST_TYPE_FIND_MAXIMUM","","",null,null],[17,"GST_URI_ERROR_UNSUPPORTED_PROTOCOL","","",null,null],[17,"GST_URI_ERROR_BAD_URI","","",null,null],[17,"GST_URI_ERROR_BAD_STATE","","",null,null],[17,"GST_URI_ERROR_BAD_REFERENCE","","",null,null],[17,"GST_URI_UNKNOWN","","",null,null],[17,"GST_URI_SINK","","",null,null],[17,"GST_URI_SRC","","",null,null],[17,"GST_ALLOCATOR_SYSMEM","","",null,null],[17,"GST_BUFFER_COPY_ALL","","",null,null],[17,"GST_BUFFER_COPY_METADATA","","",null,null],[17,"GST_BUFFER_OFFSET_NONE","","",null,null],[17,"GST_CAN_INLINE","","",null,null],[17,"GST_CAPS_FEATURE_MEMORY_SYSTEM_MEMORY","","",null,null],[17,"GST_CLOCK_TIME_NONE","","",null,null],[17,"GST_DEBUG_BG_MASK","","",null,null],[17,"GST_DEBUG_FG_MASK","","",null,null],[17,"GST_DEBUG_FORMAT_MASK","","",null,null],[17,"GST_ELEMENT_FACTORY_KLASS_DECODER","","",null,null],[17,"GST_ELEMENT_FACTORY_KLASS_DECRYPTOR","","",null,null],[17,"GST_ELEMENT_FACTORY_KLASS_DEMUXER","","",null,null],[17,"GST_ELEMENT_FACTORY_KLASS_DEPAYLOADER","","",null,null],[17,"GST_ELEMENT_FACTORY_KLASS_ENCODER","","",null,null],[17,"GST_ELEMENT_FACTORY_KLASS_ENCRYPTOR","","",null,null],[17,"GST_ELEMENT_FACTORY_KLASS_FORMATTER","","",null,null],[17,"GST_ELEMENT_FACTORY_KLASS_MEDIA_AUDIO","","",null,null],[17,"GST_ELEMENT_FACTORY_KLASS_MEDIA_IMAGE","","",null,null],[17,"GST_ELEMENT_FACTORY_KLASS_MEDIA_METADATA","","",null,null],[17,"GST_ELEMENT_FACTORY_KLASS_MEDIA_SUBTITLE","","",null,null],[17,"GST_ELEMENT_FACTORY_KLASS_MEDIA_VIDEO","","",null,null],[17,"GST_ELEMENT_FACTORY_KLASS_MUXER","","",null,null],[17,"GST_ELEMENT_FACTORY_KLASS_PARSER","","",null,null],[17,"GST_ELEMENT_FACTORY_KLASS_PAYLOADER","","",null,null],[17,"GST_ELEMENT_FACTORY_KLASS_SINK","","",null,null],[17,"GST_ELEMENT_FACTORY_KLASS_SRC","","",null,null],[17,"GST_ELEMENT_FACTORY_TYPE_ANY","","",null,null],[17,"GST_ELEMENT_FACTORY_TYPE_AUDIOVIDEO_SINKS","","",null,null],[17,"GST_ELEMENT_FACTORY_TYPE_AUDIO_ENCODER","","",null,null],[17,"GST_ELEMENT_FACTORY_TYPE_DECODABLE","","",null,null],[17,"GST_ELEMENT_FACTORY_TYPE_DECODER","","",null,null],[17,"GST_ELEMENT_FACTORY_TYPE_DECRYPTOR","","",null,null],[17,"GST_ELEMENT_FACTORY_TYPE_DEMUXER","","",null,null],[17,"GST_ELEMENT_FACTORY_TYPE_DEPAYLOADER","","",null,null],[17,"GST_ELEMENT_FACTORY_TYPE_ENCODER","","",null,null],[17,"GST_ELEMENT_FACTORY_TYPE_ENCRYPTOR","","",null,null],[17,"GST_ELEMENT_FACTORY_TYPE_FORMATTER","","",null,null],[17,"GST_ELEMENT_FACTORY_TYPE_MAX_ELEMENTS","","",null,null],[17,"GST_ELEMENT_FACTORY_TYPE_MEDIA_ANY","","",null,null],[17,"GST_ELEMENT_FACTORY_TYPE_MEDIA_AUDIO","","",null,null],[17,"GST_ELEMENT_FACTORY_TYPE_MEDIA_IMAGE","","",null,null],[17,"GST_ELEMENT_FACTORY_TYPE_MEDIA_METADATA","","",null,null],[17,"GST_ELEMENT_FACTORY_TYPE_MEDIA_SUBTITLE","","",null,null],[17,"GST_ELEMENT_FACTORY_TYPE_MEDIA_VIDEO","","",null,null],[17,"GST_ELEMENT_FACTORY_TYPE_MUXER","","",null,null],[17,"GST_ELEMENT_FACTORY_TYPE_PARSER","","",null,null],[17,"GST_ELEMENT_FACTORY_TYPE_PAYLOADER","","",null,null],[17,"GST_ELEMENT_FACTORY_TYPE_SINK","","",null,null],[17,"GST_ELEMENT_FACTORY_TYPE_SRC","","",null,null],[17,"GST_ELEMENT_FACTORY_TYPE_VIDEO_ENCODER","","",null,null],[17,"GST_ELEMENT_METADATA_AUTHOR","","",null,null],[17,"GST_ELEMENT_METADATA_DESCRIPTION","","",null,null],[17,"GST_ELEMENT_METADATA_DOC_URI","","",null,null],[17,"GST_ELEMENT_METADATA_ICON_NAME","","",null,null],[17,"GST_ELEMENT_METADATA_KLASS","","",null,null],[17,"GST_ELEMENT_METADATA_LONGNAME","","",null,null],[17,"GST_ERROR_SYSTEM","","",null,null],[17,"GST_EVENT_NUM_SHIFT","","",null,null],[17,"GST_EVENT_TYPE_BOTH","","",null,null],[17,"GST_FLAG_SET_MASK_EXACT","","",null,null],[17,"GST_FORMAT_PERCENT_MAX","","",null,null],[17,"GST_FORMAT_PERCENT_SCALE","","",null,null],[17,"GST_FOURCC_FORMAT","","",null,null],[17,"GST_LICENSE_UNKNOWN","","",null,null],[17,"GST_LOCK_FLAG_READWRITE","","",null,null],[17,"GST_MAP_READWRITE","","",null,null],[17,"GST_META_TAG_MEMORY_STR","","",null,null],[17,"GST_MSECOND","","",null,null],[17,"GST_NSECOND","","",null,null],[17,"GST_PARAM_CONTROLLABLE","","",null,null],[17,"GST_PARAM_MUTABLE_PAUSED","","",null,null],[17,"GST_PARAM_MUTABLE_PLAYING","","",null,null],[17,"GST_PARAM_MUTABLE_READY","","",null,null],[17,"GST_PARAM_USER_SHIFT","","",null,null],[17,"GST_PROTECTION_SYSTEM_ID_CAPS_FIELD","","",null,null],[17,"GST_PTR_FORMAT","","",null,null],[17,"GST_QUERY_NUM_SHIFT","","",null,null],[17,"GST_QUERY_TYPE_BOTH","","",null,null],[17,"GST_SECOND","","",null,null],[17,"GST_SEGMENT_FORMAT","","",null,null],[17,"GST_STIME_FORMAT","","",null,null],[17,"GST_TAG_ALBUM","","",null,null],[17,"GST_TAG_ALBUM_ARTIST","","",null,null],[17,"GST_TAG_ALBUM_ARTIST_SORTNAME","","",null,null],[17,"GST_TAG_ALBUM_GAIN","","",null,null],[17,"GST_TAG_ALBUM_PEAK","","",null,null],[17,"GST_TAG_ALBUM_SORTNAME","","",null,null],[17,"GST_TAG_ALBUM_VOLUME_COUNT","","",null,null],[17,"GST_TAG_ALBUM_VOLUME_NUMBER","","",null,null],[17,"GST_TAG_APPLICATION_DATA","","",null,null],[17,"GST_TAG_APPLICATION_NAME","","",null,null],[17,"GST_TAG_ARTIST","","",null,null],[17,"GST_TAG_ARTIST_SORTNAME","","",null,null],[17,"GST_TAG_ATTACHMENT","","",null,null],[17,"GST_TAG_AUDIO_CODEC","","",null,null],[17,"GST_TAG_BEATS_PER_MINUTE","","",null,null],[17,"GST_TAG_BITRATE","","",null,null],[17,"GST_TAG_CODEC","","",null,null],[17,"GST_TAG_COMMENT","","",null,null],[17,"GST_TAG_COMPOSER","","",null,null],[17,"GST_TAG_COMPOSER_SORTNAME","","",null,null],[17,"GST_TAG_CONDUCTOR","","",null,null],[17,"GST_TAG_CONTACT","","",null,null],[17,"GST_TAG_CONTAINER_FORMAT","","",null,null],[17,"GST_TAG_COPYRIGHT","","",null,null],[17,"GST_TAG_COPYRIGHT_URI","","",null,null],[17,"GST_TAG_DATE","","",null,null],[17,"GST_TAG_DATE_TIME","","",null,null],[17,"GST_TAG_DESCRIPTION","","",null,null],[17,"GST_TAG_DEVICE_MANUFACTURER","","",null,null],[17,"GST_TAG_DEVICE_MODEL","","",null,null],[17,"GST_TAG_DURATION","","",null,null],[17,"GST_TAG_ENCODED_BY","","",null,null],[17,"GST_TAG_ENCODER","","",null,null],[17,"GST_TAG_ENCODER_VERSION","","",null,null],[17,"GST_TAG_EXTENDED_COMMENT","","",null,null],[17,"GST_TAG_GENRE","","",null,null],[17,"GST_TAG_GEO_LOCATION_CAPTURE_DIRECTION","","",null,null],[17,"GST_TAG_GEO_LOCATION_CITY","","",null,null],[17,"GST_TAG_GEO_LOCATION_COUNTRY","","",null,null],[17,"GST_TAG_GEO_LOCATION_ELEVATION","","",null,null],[17,"GST_TAG_GEO_LOCATION_HORIZONTAL_ERROR","","",null,null],[17,"GST_TAG_GEO_LOCATION_LATITUDE","","",null,null],[17,"GST_TAG_GEO_LOCATION_LONGITUDE","","",null,null],[17,"GST_TAG_GEO_LOCATION_MOVEMENT_DIRECTION","","",null,null],[17,"GST_TAG_GEO_LOCATION_MOVEMENT_SPEED","","",null,null],[17,"GST_TAG_GEO_LOCATION_NAME","","",null,null],[17,"GST_TAG_GEO_LOCATION_SUBLOCATION","","",null,null],[17,"GST_TAG_GROUPING","","",null,null],[17,"GST_TAG_HOMEPAGE","","",null,null],[17,"GST_TAG_IMAGE","","",null,null],[17,"GST_TAG_IMAGE_ORIENTATION","","",null,null],[17,"GST_TAG_INTERPRETED_BY","","",null,null],[17,"GST_TAG_ISRC","","",null,null],[17,"GST_TAG_KEYWORDS","","",null,null],[17,"GST_TAG_LANGUAGE_CODE","","",null,null],[17,"GST_TAG_LANGUAGE_NAME","","",null,null],[17,"GST_TAG_LICENSE","","",null,null],[17,"GST_TAG_LICENSE_URI","","",null,null],[17,"GST_TAG_LOCATION","","",null,null],[17,"GST_TAG_LYRICS","","",null,null],[17,"GST_TAG_MAXIMUM_BITRATE","","",null,null],[17,"GST_TAG_MIDI_BASE_NOTE","","",null,null],[17,"GST_TAG_MINIMUM_BITRATE","","",null,null],[17,"GST_TAG_NOMINAL_BITRATE","","",null,null],[17,"GST_TAG_ORGANIZATION","","",null,null],[17,"GST_TAG_PERFORMER","","",null,null],[17,"GST_TAG_PREVIEW_IMAGE","","",null,null],[17,"GST_TAG_PRIVATE_DATA","","",null,null],[17,"GST_TAG_PUBLISHER","","",null,null],[17,"GST_TAG_REFERENCE_LEVEL","","",null,null],[17,"GST_TAG_SERIAL","","",null,null],[17,"GST_TAG_SHOW_EPISODE_NUMBER","","",null,null],[17,"GST_TAG_SHOW_NAME","","",null,null],[17,"GST_TAG_SHOW_SEASON_NUMBER","","",null,null],[17,"GST_TAG_SHOW_SORTNAME","","",null,null],[17,"GST_TAG_SUBTITLE_CODEC","","",null,null],[17,"GST_TAG_TITLE","","",null,null],[17,"GST_TAG_TITLE_SORTNAME","","",null,null],[17,"GST_TAG_TRACK_COUNT","","",null,null],[17,"GST_TAG_TRACK_GAIN","","",null,null],[17,"GST_TAG_TRACK_NUMBER","","",null,null],[17,"GST_TAG_TRACK_PEAK","","",null,null],[17,"GST_TAG_USER_RATING","","",null,null],[17,"GST_TAG_VERSION","","",null,null],[17,"GST_TAG_VIDEO_CODEC","","",null,null],[17,"GST_TIME_FORMAT","","",null,null],[17,"GST_TOC_REPEAT_COUNT_INFINITE","","",null,null],[17,"GST_URI_NO_PORT","","",null,null],[17,"GST_USECOND","","",null,null],[17,"GST_VALUE_EQUAL","","",null,null],[17,"GST_VALUE_GREATER_THAN","","",null,null],[17,"GST_VALUE_LESS_THAN","","",null,null],[17,"GST_VALUE_UNORDERED","","",null,null],[17,"GST_VERSION_MAJOR","","",null,null],[17,"GST_VERSION_MICRO","","",null,null],[17,"GST_VERSION_MINOR","","",null,null],[17,"GST_VERSION_NANO","","",null,null],[17,"GST_ALLOCATOR_FLAG_CUSTOM_ALLOC","","",null,null],[17,"GST_ALLOCATOR_FLAG_LAST","","",null,null],[17,"GST_BIN_FLAG_NO_RESYNC","","",null,null],[17,"GST_BIN_FLAG_STREAMS_AWARE","","",null,null],[17,"GST_BIN_FLAG_LAST","","",null,null],[17,"GST_BUFFER_COPY_NONE","","",null,null],[17,"GST_BUFFER_COPY_FLAGS","","",null,null],[17,"GST_BUFFER_COPY_TIMESTAMPS","","",null,null],[17,"GST_BUFFER_COPY_META","","",null,null],[17,"GST_BUFFER_COPY_MEMORY","","",null,null],[17,"GST_BUFFER_COPY_MERGE","","",null,null],[17,"GST_BUFFER_COPY_DEEP","","",null,null],[17,"GST_BUFFER_FLAG_LIVE","","",null,null],[17,"GST_BUFFER_FLAG_DECODE_ONLY","","",null,null],[17,"GST_BUFFER_FLAG_DISCONT","","",null,null],[17,"GST_BUFFER_FLAG_RESYNC","","",null,null],[17,"GST_BUFFER_FLAG_CORRUPTED","","",null,null],[17,"GST_BUFFER_FLAG_MARKER","","",null,null],[17,"GST_BUFFER_FLAG_HEADER","","",null,null],[17,"GST_BUFFER_FLAG_GAP","","",null,null],[17,"GST_BUFFER_FLAG_DROPPABLE","","",null,null],[17,"GST_BUFFER_FLAG_DELTA_UNIT","","",null,null],[17,"GST_BUFFER_FLAG_TAG_MEMORY","","",null,null],[17,"GST_BUFFER_FLAG_SYNC_AFTER","","",null,null],[17,"GST_BUFFER_FLAG_LAST","","",null,null],[17,"GST_BUFFER_POOL_ACQUIRE_FLAG_NONE","","",null,null],[17,"GST_BUFFER_POOL_ACQUIRE_FLAG_KEY_UNIT","","",null,null],[17,"GST_BUFFER_POOL_ACQUIRE_FLAG_DONTWAIT","","",null,null],[17,"GST_BUFFER_POOL_ACQUIRE_FLAG_DISCONT","","",null,null],[17,"GST_BUFFER_POOL_ACQUIRE_FLAG_LAST","","",null,null],[17,"GST_BUS_FLUSHING","","",null,null],[17,"GST_BUS_FLAG_LAST","","",null,null],[17,"GST_CAPS_FLAG_ANY","","",null,null],[17,"GST_CLOCK_FLAG_CAN_DO_SINGLE_SYNC","","",null,null],[17,"GST_CLOCK_FLAG_CAN_DO_SINGLE_ASYNC","","",null,null],[17,"GST_CLOCK_FLAG_CAN_DO_PERIODIC_SYNC","","",null,null],[17,"GST_CLOCK_FLAG_CAN_DO_PERIODIC_ASYNC","","",null,null],[17,"GST_CLOCK_FLAG_CAN_SET_RESOLUTION","","",null,null],[17,"GST_CLOCK_FLAG_CAN_SET_MASTER","","",null,null],[17,"GST_CLOCK_FLAG_NEEDS_STARTUP_SYNC","","",null,null],[17,"GST_CLOCK_FLAG_LAST","","",null,null],[17,"GST_DEBUG_FG_BLACK","","",null,null],[17,"GST_DEBUG_FG_RED","","",null,null],[17,"GST_DEBUG_FG_GREEN","","",null,null],[17,"GST_DEBUG_FG_YELLOW","","",null,null],[17,"GST_DEBUG_FG_BLUE","","",null,null],[17,"GST_DEBUG_FG_MAGENTA","","",null,null],[17,"GST_DEBUG_FG_CYAN","","",null,null],[17,"GST_DEBUG_FG_WHITE","","",null,null],[17,"GST_DEBUG_BG_BLACK","","",null,null],[17,"GST_DEBUG_BG_RED","","",null,null],[17,"GST_DEBUG_BG_GREEN","","",null,null],[17,"GST_DEBUG_BG_YELLOW","","",null,null],[17,"GST_DEBUG_BG_BLUE","","",null,null],[17,"GST_DEBUG_BG_MAGENTA","","",null,null],[17,"GST_DEBUG_BG_CYAN","","",null,null],[17,"GST_DEBUG_BG_WHITE","","",null,null],[17,"GST_DEBUG_BOLD","","",null,null],[17,"GST_DEBUG_UNDERLINE","","",null,null],[17,"GST_DEBUG_GRAPH_SHOW_MEDIA_TYPE","","",null,null],[17,"GST_DEBUG_GRAPH_SHOW_CAPS_DETAILS","","",null,null],[17,"GST_DEBUG_GRAPH_SHOW_NON_DEFAULT_PARAMS","","",null,null],[17,"GST_DEBUG_GRAPH_SHOW_STATES","","",null,null],[17,"GST_DEBUG_GRAPH_SHOW_FULL_PARAMS","","",null,null],[17,"GST_DEBUG_GRAPH_SHOW_ALL","","",null,null],[17,"GST_DEBUG_GRAPH_SHOW_VERBOSE","","",null,null],[17,"GST_ELEMENT_FLAG_LOCKED_STATE","","",null,null],[17,"GST_ELEMENT_FLAG_SINK","","",null,null],[17,"GST_ELEMENT_FLAG_SOURCE","","",null,null],[17,"GST_ELEMENT_FLAG_PROVIDE_CLOCK","","",null,null],[17,"GST_ELEMENT_FLAG_REQUIRE_CLOCK","","",null,null],[17,"GST_ELEMENT_FLAG_INDEXABLE","","",null,null],[17,"GST_ELEMENT_FLAG_LAST","","",null,null],[17,"GST_EVENT_TYPE_UPSTREAM","","",null,null],[17,"GST_EVENT_TYPE_DOWNSTREAM","","",null,null],[17,"GST_EVENT_TYPE_SERIALIZED","","",null,null],[17,"GST_EVENT_TYPE_STICKY","","",null,null],[17,"GST_EVENT_TYPE_STICKY_MULTI","","",null,null],[17,"GST_LOCK_FLAG_READ","","",null,null],[17,"GST_LOCK_FLAG_WRITE","","",null,null],[17,"GST_LOCK_FLAG_EXCLUSIVE","","",null,null],[17,"GST_LOCK_FLAG_LAST","","",null,null],[17,"GST_MAP_READ","","",null,null],[17,"GST_MAP_WRITE","","",null,null],[17,"GST_MAP_FLAG_LAST","","",null,null],[17,"GST_MEMORY_FLAG_READONLY","","",null,null],[17,"GST_MEMORY_FLAG_NO_SHARE","","",null,null],[17,"GST_MEMORY_FLAG_ZERO_PREFIXED","","",null,null],[17,"GST_MEMORY_FLAG_ZERO_PADDED","","",null,null],[17,"GST_MEMORY_FLAG_PHYSICALLY_CONTIGUOUS","","",null,null],[17,"GST_MEMORY_FLAG_NOT_MAPPABLE","","",null,null],[17,"GST_MEMORY_FLAG_LAST","","",null,null],[17,"GST_MESSAGE_UNKNOWN","","",null,null],[17,"GST_MESSAGE_EOS","","",null,null],[17,"GST_MESSAGE_ERROR","","",null,null],[17,"GST_MESSAGE_WARNING","","",null,null],[17,"GST_MESSAGE_INFO","","",null,null],[17,"GST_MESSAGE_TAG","","",null,null],[17,"GST_MESSAGE_BUFFERING","","",null,null],[17,"GST_MESSAGE_STATE_CHANGED","","",null,null],[17,"GST_MESSAGE_STATE_DIRTY","","",null,null],[17,"GST_MESSAGE_STEP_DONE","","",null,null],[17,"GST_MESSAGE_CLOCK_PROVIDE","","",null,null],[17,"GST_MESSAGE_CLOCK_LOST","","",null,null],[17,"GST_MESSAGE_NEW_CLOCK","","",null,null],[17,"GST_MESSAGE_STRUCTURE_CHANGE","","",null,null],[17,"GST_MESSAGE_STREAM_STATUS","","",null,null],[17,"GST_MESSAGE_APPLICATION","","",null,null],[17,"GST_MESSAGE_ELEMENT","","",null,null],[17,"GST_MESSAGE_SEGMENT_START","","",null,null],[17,"GST_MESSAGE_SEGMENT_DONE","","",null,null],[17,"GST_MESSAGE_DURATION_CHANGED","","",null,null],[17,"GST_MESSAGE_LATENCY","","",null,null],[17,"GST_MESSAGE_ASYNC_START","","",null,null],[17,"GST_MESSAGE_ASYNC_DONE","","",null,null],[17,"GST_MESSAGE_REQUEST_STATE","","",null,null],[17,"GST_MESSAGE_STEP_START","","",null,null],[17,"GST_MESSAGE_QOS","","",null,null],[17,"GST_MESSAGE_PROGRESS","","",null,null],[17,"GST_MESSAGE_TOC","","",null,null],[17,"GST_MESSAGE_RESET_TIME","","",null,null],[17,"GST_MESSAGE_STREAM_START","","",null,null],[17,"GST_MESSAGE_NEED_CONTEXT","","",null,null],[17,"GST_MESSAGE_HAVE_CONTEXT","","",null,null],[17,"GST_MESSAGE_EXTENDED","","",null,null],[17,"GST_MESSAGE_DEVICE_ADDED","","",null,null],[17,"GST_MESSAGE_DEVICE_REMOVED","","",null,null],[17,"GST_MESSAGE_PROPERTY_NOTIFY","","",null,null],[17,"GST_MESSAGE_STREAM_COLLECTION","","",null,null],[17,"GST_MESSAGE_STREAMS_SELECTED","","",null,null],[17,"GST_MESSAGE_REDIRECT","","",null,null],[17,"GST_MESSAGE_ANY","","",null,null],[17,"GST_META_FLAG_NONE","","",null,null],[17,"GST_META_FLAG_READONLY","","",null,null],[17,"GST_META_FLAG_POOLED","","",null,null],[17,"GST_META_FLAG_LOCKED","","",null,null],[17,"GST_META_FLAG_LAST","","",null,null],[17,"GST_MINI_OBJECT_FLAG_LOCKABLE","","",null,null],[17,"GST_MINI_OBJECT_FLAG_LOCK_READONLY","","",null,null],[17,"GST_MINI_OBJECT_FLAG_MAY_BE_LEAKED","","",null,null],[17,"GST_MINI_OBJECT_FLAG_LAST","","",null,null],[17,"GST_OBJECT_FLAG_MAY_BE_LEAKED","","",null,null],[17,"GST_OBJECT_FLAG_LAST","","",null,null],[17,"GST_PAD_FLAG_BLOCKED","","",null,null],[17,"GST_PAD_FLAG_FLUSHING","","",null,null],[17,"GST_PAD_FLAG_EOS","","",null,null],[17,"GST_PAD_FLAG_BLOCKING","","",null,null],[17,"GST_PAD_FLAG_NEED_PARENT","","",null,null],[17,"GST_PAD_FLAG_NEED_RECONFIGURE","","",null,null],[17,"GST_PAD_FLAG_PENDING_EVENTS","","",null,null],[17,"GST_PAD_FLAG_FIXED_CAPS","","",null,null],[17,"GST_PAD_FLAG_PROXY_CAPS","","",null,null],[17,"GST_PAD_FLAG_PROXY_ALLOCATION","","",null,null],[17,"GST_PAD_FLAG_PROXY_SCHEDULING","","",null,null],[17,"GST_PAD_FLAG_ACCEPT_INTERSECT","","",null,null],[17,"GST_PAD_FLAG_ACCEPT_TEMPLATE","","",null,null],[17,"GST_PAD_FLAG_LAST","","",null,null],[17,"GST_PAD_LINK_CHECK_NOTHING","","",null,null],[17,"GST_PAD_LINK_CHECK_HIERARCHY","","",null,null],[17,"GST_PAD_LINK_CHECK_TEMPLATE_CAPS","","",null,null],[17,"GST_PAD_LINK_CHECK_CAPS","","",null,null],[17,"GST_PAD_LINK_CHECK_NO_RECONFIGURE","","",null,null],[17,"GST_PAD_LINK_CHECK_DEFAULT","","",null,null],[17,"GST_PAD_PROBE_TYPE_INVALID","","",null,null],[17,"GST_PAD_PROBE_TYPE_IDLE","","",null,null],[17,"GST_PAD_PROBE_TYPE_BLOCK","","",null,null],[17,"GST_PAD_PROBE_TYPE_BUFFER","","",null,null],[17,"GST_PAD_PROBE_TYPE_BUFFER_LIST","","",null,null],[17,"GST_PAD_PROBE_TYPE_EVENT_DOWNSTREAM","","",null,null],[17,"GST_PAD_PROBE_TYPE_EVENT_UPSTREAM","","",null,null],[17,"GST_PAD_PROBE_TYPE_EVENT_FLUSH","","",null,null],[17,"GST_PAD_PROBE_TYPE_QUERY_DOWNSTREAM","","",null,null],[17,"GST_PAD_PROBE_TYPE_QUERY_UPSTREAM","","",null,null],[17,"GST_PAD_PROBE_TYPE_PUSH","","",null,null],[17,"GST_PAD_PROBE_TYPE_PULL","","",null,null],[17,"GST_PAD_PROBE_TYPE_BLOCKING","","",null,null],[17,"GST_PAD_PROBE_TYPE_DATA_DOWNSTREAM","","",null,null],[17,"GST_PAD_PROBE_TYPE_DATA_UPSTREAM","","",null,null],[17,"GST_PAD_PROBE_TYPE_DATA_BOTH","","",null,null],[17,"GST_PAD_PROBE_TYPE_BLOCK_DOWNSTREAM","","",null,null],[17,"GST_PAD_PROBE_TYPE_BLOCK_UPSTREAM","","",null,null],[17,"GST_PAD_PROBE_TYPE_EVENT_BOTH","","",null,null],[17,"GST_PAD_PROBE_TYPE_QUERY_BOTH","","",null,null],[17,"GST_PAD_PROBE_TYPE_ALL_BOTH","","",null,null],[17,"GST_PAD_PROBE_TYPE_SCHEDULING","","",null,null],[17,"GST_PAD_TEMPLATE_FLAG_LAST","","",null,null],[17,"GST_PARSE_FLAG_NONE","","",null,null],[17,"GST_PARSE_FLAG_FATAL_ERRORS","","",null,null],[17,"GST_PARSE_FLAG_NO_SINGLE_ELEMENT_BINS","","",null,null],[17,"GST_PARSE_FLAG_PLACE_IN_BIN","","",null,null],[17,"GST_PIPELINE_FLAG_FIXED_CLOCK","","",null,null],[17,"GST_PIPELINE_FLAG_LAST","","",null,null],[17,"GST_PLUGIN_DEPENDENCY_FLAG_NONE","","",null,null],[17,"GST_PLUGIN_DEPENDENCY_FLAG_RECURSE","","",null,null],[17,"GST_PLUGIN_DEPENDENCY_FLAG_PATHS_ARE_DEFAULT_ONLY","","",null,null],[17,"GST_PLUGIN_DEPENDENCY_FLAG_FILE_NAME_IS_SUFFIX","","",null,null],[17,"GST_PLUGIN_DEPENDENCY_FLAG_FILE_NAME_IS_PREFIX","","",null,null],[17,"GST_PLUGIN_FLAG_CACHED","","",null,null],[17,"GST_PLUGIN_FLAG_BLACKLISTED","","",null,null],[17,"GST_QUERY_TYPE_UPSTREAM","","",null,null],[17,"GST_QUERY_TYPE_DOWNSTREAM","","",null,null],[17,"GST_QUERY_TYPE_SERIALIZED","","",null,null],[17,"GST_SCHEDULING_FLAG_SEEKABLE","","",null,null],[17,"GST_SCHEDULING_FLAG_SEQUENTIAL","","",null,null],[17,"GST_SCHEDULING_FLAG_BANDWIDTH_LIMITED","","",null,null],[17,"GST_SEEK_FLAG_NONE","","",null,null],[17,"GST_SEEK_FLAG_FLUSH","","",null,null],[17,"GST_SEEK_FLAG_ACCURATE","","",null,null],[17,"GST_SEEK_FLAG_KEY_UNIT","","",null,null],[17,"GST_SEEK_FLAG_SEGMENT","","",null,null],[17,"GST_SEEK_FLAG_TRICKMODE","","",null,null],[17,"GST_SEEK_FLAG_SKIP","","",null,null],[17,"GST_SEEK_FLAG_SNAP_BEFORE","","",null,null],[17,"GST_SEEK_FLAG_SNAP_AFTER","","",null,null],[17,"GST_SEEK_FLAG_SNAP_NEAREST","","",null,null],[17,"GST_SEEK_FLAG_TRICKMODE_KEY_UNITS","","",null,null],[17,"GST_SEEK_FLAG_TRICKMODE_NO_AUDIO","","",null,null],[17,"GST_SEGMENT_FLAG_NONE","","",null,null],[17,"GST_SEGMENT_FLAG_RESET","","",null,null],[17,"GST_SEGMENT_FLAG_TRICKMODE","","",null,null],[17,"GST_SEGMENT_FLAG_SKIP","","",null,null],[17,"GST_SEGMENT_FLAG_SEGMENT","","",null,null],[17,"GST_SEGMENT_FLAG_TRICKMODE_KEY_UNITS","","",null,null],[17,"GST_SEGMENT_FLAG_TRICKMODE_NO_AUDIO","","",null,null],[17,"GST_STACK_TRACE_SHOW_FULL","","",null,null],[17,"GST_STREAM_FLAG_NONE","","",null,null],[17,"GST_STREAM_FLAG_SPARSE","","",null,null],[17,"GST_STREAM_FLAG_SELECT","","",null,null],[17,"GST_STREAM_FLAG_UNSELECT","","",null,null],[17,"GST_STREAM_TYPE_UNKNOWN","","",null,null],[17,"GST_STREAM_TYPE_AUDIO","","",null,null],[17,"GST_STREAM_TYPE_VIDEO","","",null,null],[17,"GST_STREAM_TYPE_CONTAINER","","",null,null],[17,"GST_STREAM_TYPE_TEXT","","",null,null],[17,"GST_TRACER_VALUE_FLAGS_NONE","","",null,null],[17,"GST_TRACER_VALUE_FLAGS_OPTIONAL","","",null,null],[17,"GST_TRACER_VALUE_FLAGS_AGGREGATED","","",null,null],[11,"eq","","",85,{"inputs":[{"name":"self"},{"name":"gstallocatorflags"}],"output":{"name":"bool"}}],[11,"ne","","",85,{"inputs":[{"name":"self"},{"name":"gstallocatorflags"}],"output":{"name":"bool"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"gstallocatorflags"}}],[11,"partial_cmp","","",85,{"inputs":[{"name":"self"},{"name":"gstallocatorflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",85,{"inputs":[{"name":"self"},{"name":"gstallocatorflags"}],"output":{"name":"bool"}}],[11,"le","","",85,{"inputs":[{"name":"self"},{"name":"gstallocatorflags"}],"output":{"name":"bool"}}],[11,"gt","","",85,{"inputs":[{"name":"self"},{"name":"gstallocatorflags"}],"output":{"name":"bool"}}],[11,"ge","","",85,{"inputs":[{"name":"self"},{"name":"gstallocatorflags"}],"output":{"name":"bool"}}],[11,"cmp","","",85,{"inputs":[{"name":"self"},{"name":"gstallocatorflags"}],"output":{"name":"ordering"}}],[11,"hash","","",85,null],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"CUSTOM_ALLOC","","",85,null],[18,"LAST","","",85,null],[11,"empty","","Returns an empty set of flags.",85,{"inputs":[],"output":{"name":"gstallocatorflags"}}],[11,"all","","Returns the set containing all flags.",85,{"inputs":[],"output":{"name":"gstallocatorflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",85,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",85,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gstallocatorflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",85,{"inputs":[{"name":"c_uint"}],"output":{"name":"gstallocatorflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",85,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",85,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",85,{"inputs":[{"name":"self"},{"name":"gstallocatorflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",85,{"inputs":[{"name":"self"},{"name":"gstallocatorflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",85,{"inputs":[{"name":"self"},{"name":"gstallocatorflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",85,{"inputs":[{"name":"self"},{"name":"gstallocatorflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",85,{"inputs":[{"name":"self"},{"name":"gstallocatorflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",85,{"inputs":[{"name":"self"},{"name":"gstallocatorflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",85,{"inputs":[{"name":"self"},{"name":"gstallocatorflags"}],"output":{"name":"gstallocatorflags"}}],[11,"bitor_assign","","Adds the set of flags.",85,{"inputs":[{"name":"self"},{"name":"gstallocatorflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",85,{"inputs":[{"name":"self"},{"name":"gstallocatorflags"}],"output":{"name":"gstallocatorflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",85,{"inputs":[{"name":"self"},{"name":"gstallocatorflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",85,{"inputs":[{"name":"self"},{"name":"gstallocatorflags"}],"output":{"name":"gstallocatorflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",85,{"inputs":[{"name":"self"},{"name":"gstallocatorflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",85,{"inputs":[{"name":"self"},{"name":"gstallocatorflags"}],"output":{"name":"gstallocatorflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",85,{"inputs":[{"name":"self"},{"name":"gstallocatorflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",85,{"inputs":[{"name":"self"}],"output":{"name":"gstallocatorflags"}}],[11,"extend","","",85,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",85,{"inputs":[{"name":"t"}],"output":{"name":"gstallocatorflags"}}],[11,"eq","","",86,{"inputs":[{"name":"self"},{"name":"gstbinflags"}],"output":{"name":"bool"}}],[11,"ne","","",86,{"inputs":[{"name":"self"},{"name":"gstbinflags"}],"output":{"name":"bool"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"gstbinflags"}}],[11,"partial_cmp","","",86,{"inputs":[{"name":"self"},{"name":"gstbinflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",86,{"inputs":[{"name":"self"},{"name":"gstbinflags"}],"output":{"name":"bool"}}],[11,"le","","",86,{"inputs":[{"name":"self"},{"name":"gstbinflags"}],"output":{"name":"bool"}}],[11,"gt","","",86,{"inputs":[{"name":"self"},{"name":"gstbinflags"}],"output":{"name":"bool"}}],[11,"ge","","",86,{"inputs":[{"name":"self"},{"name":"gstbinflags"}],"output":{"name":"bool"}}],[11,"cmp","","",86,{"inputs":[{"name":"self"},{"name":"gstbinflags"}],"output":{"name":"ordering"}}],[11,"hash","","",86,null],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NO_RESYNC","","",86,null],[18,"STREAMS_AWARE","","",86,null],[18,"LAST","","",86,null],[11,"empty","","Returns an empty set of flags.",86,{"inputs":[],"output":{"name":"gstbinflags"}}],[11,"all","","Returns the set containing all flags.",86,{"inputs":[],"output":{"name":"gstbinflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",86,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",86,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gstbinflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",86,{"inputs":[{"name":"c_uint"}],"output":{"name":"gstbinflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",86,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",86,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",86,{"inputs":[{"name":"self"},{"name":"gstbinflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",86,{"inputs":[{"name":"self"},{"name":"gstbinflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",86,{"inputs":[{"name":"self"},{"name":"gstbinflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",86,{"inputs":[{"name":"self"},{"name":"gstbinflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",86,{"inputs":[{"name":"self"},{"name":"gstbinflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",86,{"inputs":[{"name":"self"},{"name":"gstbinflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",86,{"inputs":[{"name":"self"},{"name":"gstbinflags"}],"output":{"name":"gstbinflags"}}],[11,"bitor_assign","","Adds the set of flags.",86,{"inputs":[{"name":"self"},{"name":"gstbinflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",86,{"inputs":[{"name":"self"},{"name":"gstbinflags"}],"output":{"name":"gstbinflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",86,{"inputs":[{"name":"self"},{"name":"gstbinflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",86,{"inputs":[{"name":"self"},{"name":"gstbinflags"}],"output":{"name":"gstbinflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",86,{"inputs":[{"name":"self"},{"name":"gstbinflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",86,{"inputs":[{"name":"self"},{"name":"gstbinflags"}],"output":{"name":"gstbinflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",86,{"inputs":[{"name":"self"},{"name":"gstbinflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",86,{"inputs":[{"name":"self"}],"output":{"name":"gstbinflags"}}],[11,"extend","","",86,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",86,{"inputs":[{"name":"t"}],"output":{"name":"gstbinflags"}}],[11,"eq","","",87,{"inputs":[{"name":"self"},{"name":"gstbuffercopyflags"}],"output":{"name":"bool"}}],[11,"ne","","",87,{"inputs":[{"name":"self"},{"name":"gstbuffercopyflags"}],"output":{"name":"bool"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"gstbuffercopyflags"}}],[11,"partial_cmp","","",87,{"inputs":[{"name":"self"},{"name":"gstbuffercopyflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",87,{"inputs":[{"name":"self"},{"name":"gstbuffercopyflags"}],"output":{"name":"bool"}}],[11,"le","","",87,{"inputs":[{"name":"self"},{"name":"gstbuffercopyflags"}],"output":{"name":"bool"}}],[11,"gt","","",87,{"inputs":[{"name":"self"},{"name":"gstbuffercopyflags"}],"output":{"name":"bool"}}],[11,"ge","","",87,{"inputs":[{"name":"self"},{"name":"gstbuffercopyflags"}],"output":{"name":"bool"}}],[11,"cmp","","",87,{"inputs":[{"name":"self"},{"name":"gstbuffercopyflags"}],"output":{"name":"ordering"}}],[11,"hash","","",87,null],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",87,null],[18,"FLAGS","","",87,null],[18,"TIMESTAMPS","","",87,null],[18,"META","","",87,null],[18,"MEMORY","","",87,null],[18,"MERGE","","",87,null],[18,"DEEP","","",87,null],[11,"empty","","Returns an empty set of flags.",87,{"inputs":[],"output":{"name":"gstbuffercopyflags"}}],[11,"all","","Returns the set containing all flags.",87,{"inputs":[],"output":{"name":"gstbuffercopyflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",87,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",87,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gstbuffercopyflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",87,{"inputs":[{"name":"c_uint"}],"output":{"name":"gstbuffercopyflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",87,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",87,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",87,{"inputs":[{"name":"self"},{"name":"gstbuffercopyflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",87,{"inputs":[{"name":"self"},{"name":"gstbuffercopyflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",87,{"inputs":[{"name":"self"},{"name":"gstbuffercopyflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",87,{"inputs":[{"name":"self"},{"name":"gstbuffercopyflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",87,{"inputs":[{"name":"self"},{"name":"gstbuffercopyflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",87,{"inputs":[{"name":"self"},{"name":"gstbuffercopyflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",87,{"inputs":[{"name":"self"},{"name":"gstbuffercopyflags"}],"output":{"name":"gstbuffercopyflags"}}],[11,"bitor_assign","","Adds the set of flags.",87,{"inputs":[{"name":"self"},{"name":"gstbuffercopyflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",87,{"inputs":[{"name":"self"},{"name":"gstbuffercopyflags"}],"output":{"name":"gstbuffercopyflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",87,{"inputs":[{"name":"self"},{"name":"gstbuffercopyflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",87,{"inputs":[{"name":"self"},{"name":"gstbuffercopyflags"}],"output":{"name":"gstbuffercopyflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",87,{"inputs":[{"name":"self"},{"name":"gstbuffercopyflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",87,{"inputs":[{"name":"self"},{"name":"gstbuffercopyflags"}],"output":{"name":"gstbuffercopyflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",87,{"inputs":[{"name":"self"},{"name":"gstbuffercopyflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",87,{"inputs":[{"name":"self"}],"output":{"name":"gstbuffercopyflags"}}],[11,"extend","","",87,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",87,{"inputs":[{"name":"t"}],"output":{"name":"gstbuffercopyflags"}}],[11,"eq","","",88,{"inputs":[{"name":"self"},{"name":"gstbufferflags"}],"output":{"name":"bool"}}],[11,"ne","","",88,{"inputs":[{"name":"self"},{"name":"gstbufferflags"}],"output":{"name":"bool"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"gstbufferflags"}}],[11,"partial_cmp","","",88,{"inputs":[{"name":"self"},{"name":"gstbufferflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",88,{"inputs":[{"name":"self"},{"name":"gstbufferflags"}],"output":{"name":"bool"}}],[11,"le","","",88,{"inputs":[{"name":"self"},{"name":"gstbufferflags"}],"output":{"name":"bool"}}],[11,"gt","","",88,{"inputs":[{"name":"self"},{"name":"gstbufferflags"}],"output":{"name":"bool"}}],[11,"ge","","",88,{"inputs":[{"name":"self"},{"name":"gstbufferflags"}],"output":{"name":"bool"}}],[11,"cmp","","",88,{"inputs":[{"name":"self"},{"name":"gstbufferflags"}],"output":{"name":"ordering"}}],[11,"hash","","",88,null],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"LIVE","","",88,null],[18,"DECODE_ONLY","","",88,null],[18,"DISCONT","","",88,null],[18,"RESYNC","","",88,null],[18,"CORRUPTED","","",88,null],[18,"MARKER","","",88,null],[18,"HEADER","","",88,null],[18,"GAP","","",88,null],[18,"DROPPABLE","","",88,null],[18,"DELTA_UNIT","","",88,null],[18,"TAG_MEMORY","","",88,null],[18,"SYNC_AFTER","","",88,null],[18,"LAST","","",88,null],[11,"empty","","Returns an empty set of flags.",88,{"inputs":[],"output":{"name":"gstbufferflags"}}],[11,"all","","Returns the set containing all flags.",88,{"inputs":[],"output":{"name":"gstbufferflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",88,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",88,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gstbufferflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",88,{"inputs":[{"name":"c_uint"}],"output":{"name":"gstbufferflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",88,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",88,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",88,{"inputs":[{"name":"self"},{"name":"gstbufferflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",88,{"inputs":[{"name":"self"},{"name":"gstbufferflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",88,{"inputs":[{"name":"self"},{"name":"gstbufferflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",88,{"inputs":[{"name":"self"},{"name":"gstbufferflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",88,{"inputs":[{"name":"self"},{"name":"gstbufferflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",88,{"inputs":[{"name":"self"},{"name":"gstbufferflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",88,{"inputs":[{"name":"self"},{"name":"gstbufferflags"}],"output":{"name":"gstbufferflags"}}],[11,"bitor_assign","","Adds the set of flags.",88,{"inputs":[{"name":"self"},{"name":"gstbufferflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",88,{"inputs":[{"name":"self"},{"name":"gstbufferflags"}],"output":{"name":"gstbufferflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",88,{"inputs":[{"name":"self"},{"name":"gstbufferflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",88,{"inputs":[{"name":"self"},{"name":"gstbufferflags"}],"output":{"name":"gstbufferflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",88,{"inputs":[{"name":"self"},{"name":"gstbufferflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",88,{"inputs":[{"name":"self"},{"name":"gstbufferflags"}],"output":{"name":"gstbufferflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",88,{"inputs":[{"name":"self"},{"name":"gstbufferflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",88,{"inputs":[{"name":"self"}],"output":{"name":"gstbufferflags"}}],[11,"extend","","",88,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",88,{"inputs":[{"name":"t"}],"output":{"name":"gstbufferflags"}}],[11,"eq","","",89,{"inputs":[{"name":"self"},{"name":"gstbufferpoolacquireflags"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"self"},{"name":"gstbufferpoolacquireflags"}],"output":{"name":"bool"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"gstbufferpoolacquireflags"}}],[11,"partial_cmp","","",89,{"inputs":[{"name":"self"},{"name":"gstbufferpoolacquireflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",89,{"inputs":[{"name":"self"},{"name":"gstbufferpoolacquireflags"}],"output":{"name":"bool"}}],[11,"le","","",89,{"inputs":[{"name":"self"},{"name":"gstbufferpoolacquireflags"}],"output":{"name":"bool"}}],[11,"gt","","",89,{"inputs":[{"name":"self"},{"name":"gstbufferpoolacquireflags"}],"output":{"name":"bool"}}],[11,"ge","","",89,{"inputs":[{"name":"self"},{"name":"gstbufferpoolacquireflags"}],"output":{"name":"bool"}}],[11,"cmp","","",89,{"inputs":[{"name":"self"},{"name":"gstbufferpoolacquireflags"}],"output":{"name":"ordering"}}],[11,"hash","","",89,null],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",89,null],[18,"KEY_UNIT","","",89,null],[18,"DONTWAIT","","",89,null],[18,"DISCONT","","",89,null],[18,"LAST","","",89,null],[11,"empty","","Returns an empty set of flags.",89,{"inputs":[],"output":{"name":"gstbufferpoolacquireflags"}}],[11,"all","","Returns the set containing all flags.",89,{"inputs":[],"output":{"name":"gstbufferpoolacquireflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",89,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",89,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gstbufferpoolacquireflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",89,{"inputs":[{"name":"c_uint"}],"output":{"name":"gstbufferpoolacquireflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",89,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",89,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",89,{"inputs":[{"name":"self"},{"name":"gstbufferpoolacquireflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",89,{"inputs":[{"name":"self"},{"name":"gstbufferpoolacquireflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",89,{"inputs":[{"name":"self"},{"name":"gstbufferpoolacquireflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",89,{"inputs":[{"name":"self"},{"name":"gstbufferpoolacquireflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",89,{"inputs":[{"name":"self"},{"name":"gstbufferpoolacquireflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",89,{"inputs":[{"name":"self"},{"name":"gstbufferpoolacquireflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",89,{"inputs":[{"name":"self"},{"name":"gstbufferpoolacquireflags"}],"output":{"name":"gstbufferpoolacquireflags"}}],[11,"bitor_assign","","Adds the set of flags.",89,{"inputs":[{"name":"self"},{"name":"gstbufferpoolacquireflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",89,{"inputs":[{"name":"self"},{"name":"gstbufferpoolacquireflags"}],"output":{"name":"gstbufferpoolacquireflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",89,{"inputs":[{"name":"self"},{"name":"gstbufferpoolacquireflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",89,{"inputs":[{"name":"self"},{"name":"gstbufferpoolacquireflags"}],"output":{"name":"gstbufferpoolacquireflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",89,{"inputs":[{"name":"self"},{"name":"gstbufferpoolacquireflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",89,{"inputs":[{"name":"self"},{"name":"gstbufferpoolacquireflags"}],"output":{"name":"gstbufferpoolacquireflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",89,{"inputs":[{"name":"self"},{"name":"gstbufferpoolacquireflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",89,{"inputs":[{"name":"self"}],"output":{"name":"gstbufferpoolacquireflags"}}],[11,"extend","","",89,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",89,{"inputs":[{"name":"t"}],"output":{"name":"gstbufferpoolacquireflags"}}],[11,"eq","","",90,{"inputs":[{"name":"self"},{"name":"gstbusflags"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"self"},{"name":"gstbusflags"}],"output":{"name":"bool"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"gstbusflags"}}],[11,"partial_cmp","","",90,{"inputs":[{"name":"self"},{"name":"gstbusflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",90,{"inputs":[{"name":"self"},{"name":"gstbusflags"}],"output":{"name":"bool"}}],[11,"le","","",90,{"inputs":[{"name":"self"},{"name":"gstbusflags"}],"output":{"name":"bool"}}],[11,"gt","","",90,{"inputs":[{"name":"self"},{"name":"gstbusflags"}],"output":{"name":"bool"}}],[11,"ge","","",90,{"inputs":[{"name":"self"},{"name":"gstbusflags"}],"output":{"name":"bool"}}],[11,"cmp","","",90,{"inputs":[{"name":"self"},{"name":"gstbusflags"}],"output":{"name":"ordering"}}],[11,"hash","","",90,null],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"FLUSHING","","",90,null],[18,"FLAG_LAST","","",90,null],[11,"empty","","Returns an empty set of flags.",90,{"inputs":[],"output":{"name":"gstbusflags"}}],[11,"all","","Returns the set containing all flags.",90,{"inputs":[],"output":{"name":"gstbusflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",90,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",90,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gstbusflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",90,{"inputs":[{"name":"c_uint"}],"output":{"name":"gstbusflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",90,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",90,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",90,{"inputs":[{"name":"self"},{"name":"gstbusflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",90,{"inputs":[{"name":"self"},{"name":"gstbusflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",90,{"inputs":[{"name":"self"},{"name":"gstbusflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",90,{"inputs":[{"name":"self"},{"name":"gstbusflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",90,{"inputs":[{"name":"self"},{"name":"gstbusflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",90,{"inputs":[{"name":"self"},{"name":"gstbusflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",90,{"inputs":[{"name":"self"},{"name":"gstbusflags"}],"output":{"name":"gstbusflags"}}],[11,"bitor_assign","","Adds the set of flags.",90,{"inputs":[{"name":"self"},{"name":"gstbusflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",90,{"inputs":[{"name":"self"},{"name":"gstbusflags"}],"output":{"name":"gstbusflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",90,{"inputs":[{"name":"self"},{"name":"gstbusflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",90,{"inputs":[{"name":"self"},{"name":"gstbusflags"}],"output":{"name":"gstbusflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",90,{"inputs":[{"name":"self"},{"name":"gstbusflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",90,{"inputs":[{"name":"self"},{"name":"gstbusflags"}],"output":{"name":"gstbusflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",90,{"inputs":[{"name":"self"},{"name":"gstbusflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",90,{"inputs":[{"name":"self"}],"output":{"name":"gstbusflags"}}],[11,"extend","","",90,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",90,{"inputs":[{"name":"t"}],"output":{"name":"gstbusflags"}}],[11,"eq","","",91,{"inputs":[{"name":"self"},{"name":"gstcapsflags"}],"output":{"name":"bool"}}],[11,"ne","","",91,{"inputs":[{"name":"self"},{"name":"gstcapsflags"}],"output":{"name":"bool"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"gstcapsflags"}}],[11,"partial_cmp","","",91,{"inputs":[{"name":"self"},{"name":"gstcapsflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",91,{"inputs":[{"name":"self"},{"name":"gstcapsflags"}],"output":{"name":"bool"}}],[11,"le","","",91,{"inputs":[{"name":"self"},{"name":"gstcapsflags"}],"output":{"name":"bool"}}],[11,"gt","","",91,{"inputs":[{"name":"self"},{"name":"gstcapsflags"}],"output":{"name":"bool"}}],[11,"ge","","",91,{"inputs":[{"name":"self"},{"name":"gstcapsflags"}],"output":{"name":"bool"}}],[11,"cmp","","",91,{"inputs":[{"name":"self"},{"name":"gstcapsflags"}],"output":{"name":"ordering"}}],[11,"hash","","",91,null],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"ANY","","",91,null],[11,"empty","","Returns an empty set of flags.",91,{"inputs":[],"output":{"name":"gstcapsflags"}}],[11,"all","","Returns the set containing all flags.",91,{"inputs":[],"output":{"name":"gstcapsflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",91,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",91,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gstcapsflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",91,{"inputs":[{"name":"c_uint"}],"output":{"name":"gstcapsflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",91,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",91,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",91,{"inputs":[{"name":"self"},{"name":"gstcapsflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",91,{"inputs":[{"name":"self"},{"name":"gstcapsflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",91,{"inputs":[{"name":"self"},{"name":"gstcapsflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",91,{"inputs":[{"name":"self"},{"name":"gstcapsflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",91,{"inputs":[{"name":"self"},{"name":"gstcapsflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",91,{"inputs":[{"name":"self"},{"name":"gstcapsflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",91,{"inputs":[{"name":"self"},{"name":"gstcapsflags"}],"output":{"name":"gstcapsflags"}}],[11,"bitor_assign","","Adds the set of flags.",91,{"inputs":[{"name":"self"},{"name":"gstcapsflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",91,{"inputs":[{"name":"self"},{"name":"gstcapsflags"}],"output":{"name":"gstcapsflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",91,{"inputs":[{"name":"self"},{"name":"gstcapsflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",91,{"inputs":[{"name":"self"},{"name":"gstcapsflags"}],"output":{"name":"gstcapsflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",91,{"inputs":[{"name":"self"},{"name":"gstcapsflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",91,{"inputs":[{"name":"self"},{"name":"gstcapsflags"}],"output":{"name":"gstcapsflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",91,{"inputs":[{"name":"self"},{"name":"gstcapsflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",91,{"inputs":[{"name":"self"}],"output":{"name":"gstcapsflags"}}],[11,"extend","","",91,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",91,{"inputs":[{"name":"t"}],"output":{"name":"gstcapsflags"}}],[11,"eq","","",92,{"inputs":[{"name":"self"},{"name":"gstclockflags"}],"output":{"name":"bool"}}],[11,"ne","","",92,{"inputs":[{"name":"self"},{"name":"gstclockflags"}],"output":{"name":"bool"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"gstclockflags"}}],[11,"partial_cmp","","",92,{"inputs":[{"name":"self"},{"name":"gstclockflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",92,{"inputs":[{"name":"self"},{"name":"gstclockflags"}],"output":{"name":"bool"}}],[11,"le","","",92,{"inputs":[{"name":"self"},{"name":"gstclockflags"}],"output":{"name":"bool"}}],[11,"gt","","",92,{"inputs":[{"name":"self"},{"name":"gstclockflags"}],"output":{"name":"bool"}}],[11,"ge","","",92,{"inputs":[{"name":"self"},{"name":"gstclockflags"}],"output":{"name":"bool"}}],[11,"cmp","","",92,{"inputs":[{"name":"self"},{"name":"gstclockflags"}],"output":{"name":"ordering"}}],[11,"hash","","",92,null],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"CAN_DO_SINGLE_SYNC","","",92,null],[18,"CAN_DO_SINGLE_ASYNC","","",92,null],[18,"CAN_DO_PERIODIC_SYNC","","",92,null],[18,"CAN_DO_PERIODIC_ASYNC","","",92,null],[18,"CAN_SET_RESOLUTION","","",92,null],[18,"CAN_SET_MASTER","","",92,null],[18,"NEEDS_STARTUP_SYNC","","",92,null],[18,"LAST","","",92,null],[11,"empty","","Returns an empty set of flags.",92,{"inputs":[],"output":{"name":"gstclockflags"}}],[11,"all","","Returns the set containing all flags.",92,{"inputs":[],"output":{"name":"gstclockflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",92,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",92,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gstclockflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",92,{"inputs":[{"name":"c_uint"}],"output":{"name":"gstclockflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",92,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",92,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",92,{"inputs":[{"name":"self"},{"name":"gstclockflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",92,{"inputs":[{"name":"self"},{"name":"gstclockflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",92,{"inputs":[{"name":"self"},{"name":"gstclockflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",92,{"inputs":[{"name":"self"},{"name":"gstclockflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",92,{"inputs":[{"name":"self"},{"name":"gstclockflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",92,{"inputs":[{"name":"self"},{"name":"gstclockflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",92,{"inputs":[{"name":"self"},{"name":"gstclockflags"}],"output":{"name":"gstclockflags"}}],[11,"bitor_assign","","Adds the set of flags.",92,{"inputs":[{"name":"self"},{"name":"gstclockflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",92,{"inputs":[{"name":"self"},{"name":"gstclockflags"}],"output":{"name":"gstclockflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",92,{"inputs":[{"name":"self"},{"name":"gstclockflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",92,{"inputs":[{"name":"self"},{"name":"gstclockflags"}],"output":{"name":"gstclockflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",92,{"inputs":[{"name":"self"},{"name":"gstclockflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",92,{"inputs":[{"name":"self"},{"name":"gstclockflags"}],"output":{"name":"gstclockflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",92,{"inputs":[{"name":"self"},{"name":"gstclockflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",92,{"inputs":[{"name":"self"}],"output":{"name":"gstclockflags"}}],[11,"extend","","",92,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",92,{"inputs":[{"name":"t"}],"output":{"name":"gstclockflags"}}],[11,"eq","","",93,{"inputs":[{"name":"self"},{"name":"gstdebugcolorflags"}],"output":{"name":"bool"}}],[11,"ne","","",93,{"inputs":[{"name":"self"},{"name":"gstdebugcolorflags"}],"output":{"name":"bool"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"gstdebugcolorflags"}}],[11,"partial_cmp","","",93,{"inputs":[{"name":"self"},{"name":"gstdebugcolorflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",93,{"inputs":[{"name":"self"},{"name":"gstdebugcolorflags"}],"output":{"name":"bool"}}],[11,"le","","",93,{"inputs":[{"name":"self"},{"name":"gstdebugcolorflags"}],"output":{"name":"bool"}}],[11,"gt","","",93,{"inputs":[{"name":"self"},{"name":"gstdebugcolorflags"}],"output":{"name":"bool"}}],[11,"ge","","",93,{"inputs":[{"name":"self"},{"name":"gstdebugcolorflags"}],"output":{"name":"bool"}}],[11,"cmp","","",93,{"inputs":[{"name":"self"},{"name":"gstdebugcolorflags"}],"output":{"name":"ordering"}}],[11,"hash","","",93,null],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"FG_BLACK","","",93,null],[18,"FG_RED","","",93,null],[18,"FG_GREEN","","",93,null],[18,"FG_YELLOW","","",93,null],[18,"FG_BLUE","","",93,null],[18,"FG_MAGENTA","","",93,null],[18,"FG_CYAN","","",93,null],[18,"FG_WHITE","","",93,null],[18,"BG_BLACK","","",93,null],[18,"BG_RED","","",93,null],[18,"BG_GREEN","","",93,null],[18,"BG_YELLOW","","",93,null],[18,"BG_BLUE","","",93,null],[18,"BG_MAGENTA","","",93,null],[18,"BG_CYAN","","",93,null],[18,"BG_WHITE","","",93,null],[18,"BOLD","","",93,null],[18,"UNDERLINE","","",93,null],[11,"empty","","Returns an empty set of flags.",93,{"inputs":[],"output":{"name":"gstdebugcolorflags"}}],[11,"all","","Returns the set containing all flags.",93,{"inputs":[],"output":{"name":"gstdebugcolorflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",93,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",93,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gstdebugcolorflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",93,{"inputs":[{"name":"c_uint"}],"output":{"name":"gstdebugcolorflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",93,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",93,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",93,{"inputs":[{"name":"self"},{"name":"gstdebugcolorflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",93,{"inputs":[{"name":"self"},{"name":"gstdebugcolorflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",93,{"inputs":[{"name":"self"},{"name":"gstdebugcolorflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",93,{"inputs":[{"name":"self"},{"name":"gstdebugcolorflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",93,{"inputs":[{"name":"self"},{"name":"gstdebugcolorflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",93,{"inputs":[{"name":"self"},{"name":"gstdebugcolorflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",93,{"inputs":[{"name":"self"},{"name":"gstdebugcolorflags"}],"output":{"name":"gstdebugcolorflags"}}],[11,"bitor_assign","","Adds the set of flags.",93,{"inputs":[{"name":"self"},{"name":"gstdebugcolorflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",93,{"inputs":[{"name":"self"},{"name":"gstdebugcolorflags"}],"output":{"name":"gstdebugcolorflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",93,{"inputs":[{"name":"self"},{"name":"gstdebugcolorflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",93,{"inputs":[{"name":"self"},{"name":"gstdebugcolorflags"}],"output":{"name":"gstdebugcolorflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",93,{"inputs":[{"name":"self"},{"name":"gstdebugcolorflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",93,{"inputs":[{"name":"self"},{"name":"gstdebugcolorflags"}],"output":{"name":"gstdebugcolorflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",93,{"inputs":[{"name":"self"},{"name":"gstdebugcolorflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",93,{"inputs":[{"name":"self"}],"output":{"name":"gstdebugcolorflags"}}],[11,"extend","","",93,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",93,{"inputs":[{"name":"t"}],"output":{"name":"gstdebugcolorflags"}}],[11,"eq","","",94,{"inputs":[{"name":"self"},{"name":"gstdebuggraphdetails"}],"output":{"name":"bool"}}],[11,"ne","","",94,{"inputs":[{"name":"self"},{"name":"gstdebuggraphdetails"}],"output":{"name":"bool"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"gstdebuggraphdetails"}}],[11,"partial_cmp","","",94,{"inputs":[{"name":"self"},{"name":"gstdebuggraphdetails"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",94,{"inputs":[{"name":"self"},{"name":"gstdebuggraphdetails"}],"output":{"name":"bool"}}],[11,"le","","",94,{"inputs":[{"name":"self"},{"name":"gstdebuggraphdetails"}],"output":{"name":"bool"}}],[11,"gt","","",94,{"inputs":[{"name":"self"},{"name":"gstdebuggraphdetails"}],"output":{"name":"bool"}}],[11,"ge","","",94,{"inputs":[{"name":"self"},{"name":"gstdebuggraphdetails"}],"output":{"name":"bool"}}],[11,"cmp","","",94,{"inputs":[{"name":"self"},{"name":"gstdebuggraphdetails"}],"output":{"name":"ordering"}}],[11,"hash","","",94,null],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"MEDIA_TYPE","","",94,null],[18,"CAPS_DETAILS","","",94,null],[18,"NON_DEFAULT_PARAMS","","",94,null],[18,"STATES","","",94,null],[18,"FULL_PARAMS","","",94,null],[18,"ALL","","",94,null],[18,"VERBOSE","","",94,null],[11,"empty","","Returns an empty set of flags.",94,{"inputs":[],"output":{"name":"gstdebuggraphdetails"}}],[11,"all","","Returns the set containing all flags.",94,{"inputs":[],"output":{"name":"gstdebuggraphdetails"}}],[11,"bits","","Returns the raw value of the flags currently stored.",94,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",94,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gstdebuggraphdetails"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",94,{"inputs":[{"name":"c_uint"}],"output":{"name":"gstdebuggraphdetails"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",94,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",94,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",94,{"inputs":[{"name":"self"},{"name":"gstdebuggraphdetails"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",94,{"inputs":[{"name":"self"},{"name":"gstdebuggraphdetails"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",94,{"inputs":[{"name":"self"},{"name":"gstdebuggraphdetails"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",94,{"inputs":[{"name":"self"},{"name":"gstdebuggraphdetails"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",94,{"inputs":[{"name":"self"},{"name":"gstdebuggraphdetails"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",94,{"inputs":[{"name":"self"},{"name":"gstdebuggraphdetails"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",94,{"inputs":[{"name":"self"},{"name":"gstdebuggraphdetails"}],"output":{"name":"gstdebuggraphdetails"}}],[11,"bitor_assign","","Adds the set of flags.",94,{"inputs":[{"name":"self"},{"name":"gstdebuggraphdetails"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",94,{"inputs":[{"name":"self"},{"name":"gstdebuggraphdetails"}],"output":{"name":"gstdebuggraphdetails"}}],[11,"bitxor_assign","","Toggles the set of flags.",94,{"inputs":[{"name":"self"},{"name":"gstdebuggraphdetails"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",94,{"inputs":[{"name":"self"},{"name":"gstdebuggraphdetails"}],"output":{"name":"gstdebuggraphdetails"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",94,{"inputs":[{"name":"self"},{"name":"gstdebuggraphdetails"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",94,{"inputs":[{"name":"self"},{"name":"gstdebuggraphdetails"}],"output":{"name":"gstdebuggraphdetails"}}],[11,"sub_assign","","Disables all flags enabled in the set.",94,{"inputs":[{"name":"self"},{"name":"gstdebuggraphdetails"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",94,{"inputs":[{"name":"self"}],"output":{"name":"gstdebuggraphdetails"}}],[11,"extend","","",94,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",94,{"inputs":[{"name":"t"}],"output":{"name":"gstdebuggraphdetails"}}],[11,"eq","","",95,{"inputs":[{"name":"self"},{"name":"gstelementflags"}],"output":{"name":"bool"}}],[11,"ne","","",95,{"inputs":[{"name":"self"},{"name":"gstelementflags"}],"output":{"name":"bool"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"gstelementflags"}}],[11,"partial_cmp","","",95,{"inputs":[{"name":"self"},{"name":"gstelementflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",95,{"inputs":[{"name":"self"},{"name":"gstelementflags"}],"output":{"name":"bool"}}],[11,"le","","",95,{"inputs":[{"name":"self"},{"name":"gstelementflags"}],"output":{"name":"bool"}}],[11,"gt","","",95,{"inputs":[{"name":"self"},{"name":"gstelementflags"}],"output":{"name":"bool"}}],[11,"ge","","",95,{"inputs":[{"name":"self"},{"name":"gstelementflags"}],"output":{"name":"bool"}}],[11,"cmp","","",95,{"inputs":[{"name":"self"},{"name":"gstelementflags"}],"output":{"name":"ordering"}}],[11,"hash","","",95,null],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"LOCKED_STATE","","",95,null],[18,"SINK","","",95,null],[18,"SOURCE","","",95,null],[18,"PROVIDE_CLOCK","","",95,null],[18,"REQUIRE_CLOCK","","",95,null],[18,"INDEXABLE","","",95,null],[18,"LAST","","",95,null],[11,"empty","","Returns an empty set of flags.",95,{"inputs":[],"output":{"name":"gstelementflags"}}],[11,"all","","Returns the set containing all flags.",95,{"inputs":[],"output":{"name":"gstelementflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",95,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",95,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gstelementflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",95,{"inputs":[{"name":"c_uint"}],"output":{"name":"gstelementflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",95,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",95,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",95,{"inputs":[{"name":"self"},{"name":"gstelementflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",95,{"inputs":[{"name":"self"},{"name":"gstelementflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",95,{"inputs":[{"name":"self"},{"name":"gstelementflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",95,{"inputs":[{"name":"self"},{"name":"gstelementflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",95,{"inputs":[{"name":"self"},{"name":"gstelementflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",95,{"inputs":[{"name":"self"},{"name":"gstelementflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",95,{"inputs":[{"name":"self"},{"name":"gstelementflags"}],"output":{"name":"gstelementflags"}}],[11,"bitor_assign","","Adds the set of flags.",95,{"inputs":[{"name":"self"},{"name":"gstelementflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",95,{"inputs":[{"name":"self"},{"name":"gstelementflags"}],"output":{"name":"gstelementflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",95,{"inputs":[{"name":"self"},{"name":"gstelementflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",95,{"inputs":[{"name":"self"},{"name":"gstelementflags"}],"output":{"name":"gstelementflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",95,{"inputs":[{"name":"self"},{"name":"gstelementflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",95,{"inputs":[{"name":"self"},{"name":"gstelementflags"}],"output":{"name":"gstelementflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",95,{"inputs":[{"name":"self"},{"name":"gstelementflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",95,{"inputs":[{"name":"self"}],"output":{"name":"gstelementflags"}}],[11,"extend","","",95,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",95,{"inputs":[{"name":"t"}],"output":{"name":"gstelementflags"}}],[11,"eq","","",96,{"inputs":[{"name":"self"},{"name":"gsteventtypeflags"}],"output":{"name":"bool"}}],[11,"ne","","",96,{"inputs":[{"name":"self"},{"name":"gsteventtypeflags"}],"output":{"name":"bool"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"gsteventtypeflags"}}],[11,"partial_cmp","","",96,{"inputs":[{"name":"self"},{"name":"gsteventtypeflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",96,{"inputs":[{"name":"self"},{"name":"gsteventtypeflags"}],"output":{"name":"bool"}}],[11,"le","","",96,{"inputs":[{"name":"self"},{"name":"gsteventtypeflags"}],"output":{"name":"bool"}}],[11,"gt","","",96,{"inputs":[{"name":"self"},{"name":"gsteventtypeflags"}],"output":{"name":"bool"}}],[11,"ge","","",96,{"inputs":[{"name":"self"},{"name":"gsteventtypeflags"}],"output":{"name":"bool"}}],[11,"cmp","","",96,{"inputs":[{"name":"self"},{"name":"gsteventtypeflags"}],"output":{"name":"ordering"}}],[11,"hash","","",96,null],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"UPSTREAM","","",96,null],[18,"DOWNSTREAM","","",96,null],[18,"SERIALIZED","","",96,null],[18,"STICKY","","",96,null],[18,"STICKY_MULTI","","",96,null],[11,"empty","","Returns an empty set of flags.",96,{"inputs":[],"output":{"name":"gsteventtypeflags"}}],[11,"all","","Returns the set containing all flags.",96,{"inputs":[],"output":{"name":"gsteventtypeflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",96,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",96,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gsteventtypeflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",96,{"inputs":[{"name":"c_uint"}],"output":{"name":"gsteventtypeflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",96,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",96,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",96,{"inputs":[{"name":"self"},{"name":"gsteventtypeflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",96,{"inputs":[{"name":"self"},{"name":"gsteventtypeflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",96,{"inputs":[{"name":"self"},{"name":"gsteventtypeflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",96,{"inputs":[{"name":"self"},{"name":"gsteventtypeflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",96,{"inputs":[{"name":"self"},{"name":"gsteventtypeflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",96,{"inputs":[{"name":"self"},{"name":"gsteventtypeflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",96,{"inputs":[{"name":"self"},{"name":"gsteventtypeflags"}],"output":{"name":"gsteventtypeflags"}}],[11,"bitor_assign","","Adds the set of flags.",96,{"inputs":[{"name":"self"},{"name":"gsteventtypeflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",96,{"inputs":[{"name":"self"},{"name":"gsteventtypeflags"}],"output":{"name":"gsteventtypeflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",96,{"inputs":[{"name":"self"},{"name":"gsteventtypeflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",96,{"inputs":[{"name":"self"},{"name":"gsteventtypeflags"}],"output":{"name":"gsteventtypeflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",96,{"inputs":[{"name":"self"},{"name":"gsteventtypeflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",96,{"inputs":[{"name":"self"},{"name":"gsteventtypeflags"}],"output":{"name":"gsteventtypeflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",96,{"inputs":[{"name":"self"},{"name":"gsteventtypeflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",96,{"inputs":[{"name":"self"}],"output":{"name":"gsteventtypeflags"}}],[11,"extend","","",96,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",96,{"inputs":[{"name":"t"}],"output":{"name":"gsteventtypeflags"}}],[11,"eq","","",97,{"inputs":[{"name":"self"},{"name":"gstlockflags"}],"output":{"name":"bool"}}],[11,"ne","","",97,{"inputs":[{"name":"self"},{"name":"gstlockflags"}],"output":{"name":"bool"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"gstlockflags"}}],[11,"partial_cmp","","",97,{"inputs":[{"name":"self"},{"name":"gstlockflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",97,{"inputs":[{"name":"self"},{"name":"gstlockflags"}],"output":{"name":"bool"}}],[11,"le","","",97,{"inputs":[{"name":"self"},{"name":"gstlockflags"}],"output":{"name":"bool"}}],[11,"gt","","",97,{"inputs":[{"name":"self"},{"name":"gstlockflags"}],"output":{"name":"bool"}}],[11,"ge","","",97,{"inputs":[{"name":"self"},{"name":"gstlockflags"}],"output":{"name":"bool"}}],[11,"cmp","","",97,{"inputs":[{"name":"self"},{"name":"gstlockflags"}],"output":{"name":"ordering"}}],[11,"hash","","",97,null],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"READ","","",97,null],[18,"WRITE","","",97,null],[18,"EXCLUSIVE","","",97,null],[18,"LAST","","",97,null],[11,"empty","","Returns an empty set of flags.",97,{"inputs":[],"output":{"name":"gstlockflags"}}],[11,"all","","Returns the set containing all flags.",97,{"inputs":[],"output":{"name":"gstlockflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",97,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",97,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gstlockflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",97,{"inputs":[{"name":"c_uint"}],"output":{"name":"gstlockflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",97,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",97,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",97,{"inputs":[{"name":"self"},{"name":"gstlockflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",97,{"inputs":[{"name":"self"},{"name":"gstlockflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",97,{"inputs":[{"name":"self"},{"name":"gstlockflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",97,{"inputs":[{"name":"self"},{"name":"gstlockflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",97,{"inputs":[{"name":"self"},{"name":"gstlockflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",97,{"inputs":[{"name":"self"},{"name":"gstlockflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",97,{"inputs":[{"name":"self"},{"name":"gstlockflags"}],"output":{"name":"gstlockflags"}}],[11,"bitor_assign","","Adds the set of flags.",97,{"inputs":[{"name":"self"},{"name":"gstlockflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",97,{"inputs":[{"name":"self"},{"name":"gstlockflags"}],"output":{"name":"gstlockflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",97,{"inputs":[{"name":"self"},{"name":"gstlockflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",97,{"inputs":[{"name":"self"},{"name":"gstlockflags"}],"output":{"name":"gstlockflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",97,{"inputs":[{"name":"self"},{"name":"gstlockflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",97,{"inputs":[{"name":"self"},{"name":"gstlockflags"}],"output":{"name":"gstlockflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",97,{"inputs":[{"name":"self"},{"name":"gstlockflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",97,{"inputs":[{"name":"self"}],"output":{"name":"gstlockflags"}}],[11,"extend","","",97,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",97,{"inputs":[{"name":"t"}],"output":{"name":"gstlockflags"}}],[11,"eq","","",98,{"inputs":[{"name":"self"},{"name":"gstmapflags"}],"output":{"name":"bool"}}],[11,"ne","","",98,{"inputs":[{"name":"self"},{"name":"gstmapflags"}],"output":{"name":"bool"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"gstmapflags"}}],[11,"partial_cmp","","",98,{"inputs":[{"name":"self"},{"name":"gstmapflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",98,{"inputs":[{"name":"self"},{"name":"gstmapflags"}],"output":{"name":"bool"}}],[11,"le","","",98,{"inputs":[{"name":"self"},{"name":"gstmapflags"}],"output":{"name":"bool"}}],[11,"gt","","",98,{"inputs":[{"name":"self"},{"name":"gstmapflags"}],"output":{"name":"bool"}}],[11,"ge","","",98,{"inputs":[{"name":"self"},{"name":"gstmapflags"}],"output":{"name":"bool"}}],[11,"cmp","","",98,{"inputs":[{"name":"self"},{"name":"gstmapflags"}],"output":{"name":"ordering"}}],[11,"hash","","",98,null],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"READ","","",98,null],[18,"WRITE","","",98,null],[18,"FLAG_LAST","","",98,null],[11,"empty","","Returns an empty set of flags.",98,{"inputs":[],"output":{"name":"gstmapflags"}}],[11,"all","","Returns the set containing all flags.",98,{"inputs":[],"output":{"name":"gstmapflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",98,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",98,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gstmapflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",98,{"inputs":[{"name":"c_uint"}],"output":{"name":"gstmapflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",98,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",98,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",98,{"inputs":[{"name":"self"},{"name":"gstmapflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",98,{"inputs":[{"name":"self"},{"name":"gstmapflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",98,{"inputs":[{"name":"self"},{"name":"gstmapflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",98,{"inputs":[{"name":"self"},{"name":"gstmapflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",98,{"inputs":[{"name":"self"},{"name":"gstmapflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",98,{"inputs":[{"name":"self"},{"name":"gstmapflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",98,{"inputs":[{"name":"self"},{"name":"gstmapflags"}],"output":{"name":"gstmapflags"}}],[11,"bitor_assign","","Adds the set of flags.",98,{"inputs":[{"name":"self"},{"name":"gstmapflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",98,{"inputs":[{"name":"self"},{"name":"gstmapflags"}],"output":{"name":"gstmapflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",98,{"inputs":[{"name":"self"},{"name":"gstmapflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",98,{"inputs":[{"name":"self"},{"name":"gstmapflags"}],"output":{"name":"gstmapflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",98,{"inputs":[{"name":"self"},{"name":"gstmapflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",98,{"inputs":[{"name":"self"},{"name":"gstmapflags"}],"output":{"name":"gstmapflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",98,{"inputs":[{"name":"self"},{"name":"gstmapflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",98,{"inputs":[{"name":"self"}],"output":{"name":"gstmapflags"}}],[11,"extend","","",98,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",98,{"inputs":[{"name":"t"}],"output":{"name":"gstmapflags"}}],[11,"eq","","",99,{"inputs":[{"name":"self"},{"name":"gstmemoryflags"}],"output":{"name":"bool"}}],[11,"ne","","",99,{"inputs":[{"name":"self"},{"name":"gstmemoryflags"}],"output":{"name":"bool"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"gstmemoryflags"}}],[11,"partial_cmp","","",99,{"inputs":[{"name":"self"},{"name":"gstmemoryflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",99,{"inputs":[{"name":"self"},{"name":"gstmemoryflags"}],"output":{"name":"bool"}}],[11,"le","","",99,{"inputs":[{"name":"self"},{"name":"gstmemoryflags"}],"output":{"name":"bool"}}],[11,"gt","","",99,{"inputs":[{"name":"self"},{"name":"gstmemoryflags"}],"output":{"name":"bool"}}],[11,"ge","","",99,{"inputs":[{"name":"self"},{"name":"gstmemoryflags"}],"output":{"name":"bool"}}],[11,"cmp","","",99,{"inputs":[{"name":"self"},{"name":"gstmemoryflags"}],"output":{"name":"ordering"}}],[11,"hash","","",99,null],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"READONLY","","",99,null],[18,"NO_SHARE","","",99,null],[18,"ZERO_PREFIXED","","",99,null],[18,"ZERO_PADDED","","",99,null],[18,"PHYSICALLY_CONTIGUOUS","","",99,null],[18,"NOT_MAPPABLE","","",99,null],[18,"LAST","","",99,null],[11,"empty","","Returns an empty set of flags.",99,{"inputs":[],"output":{"name":"gstmemoryflags"}}],[11,"all","","Returns the set containing all flags.",99,{"inputs":[],"output":{"name":"gstmemoryflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",99,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",99,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gstmemoryflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",99,{"inputs":[{"name":"c_uint"}],"output":{"name":"gstmemoryflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",99,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",99,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",99,{"inputs":[{"name":"self"},{"name":"gstmemoryflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",99,{"inputs":[{"name":"self"},{"name":"gstmemoryflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",99,{"inputs":[{"name":"self"},{"name":"gstmemoryflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",99,{"inputs":[{"name":"self"},{"name":"gstmemoryflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",99,{"inputs":[{"name":"self"},{"name":"gstmemoryflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",99,{"inputs":[{"name":"self"},{"name":"gstmemoryflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",99,{"inputs":[{"name":"self"},{"name":"gstmemoryflags"}],"output":{"name":"gstmemoryflags"}}],[11,"bitor_assign","","Adds the set of flags.",99,{"inputs":[{"name":"self"},{"name":"gstmemoryflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",99,{"inputs":[{"name":"self"},{"name":"gstmemoryflags"}],"output":{"name":"gstmemoryflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",99,{"inputs":[{"name":"self"},{"name":"gstmemoryflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",99,{"inputs":[{"name":"self"},{"name":"gstmemoryflags"}],"output":{"name":"gstmemoryflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",99,{"inputs":[{"name":"self"},{"name":"gstmemoryflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",99,{"inputs":[{"name":"self"},{"name":"gstmemoryflags"}],"output":{"name":"gstmemoryflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",99,{"inputs":[{"name":"self"},{"name":"gstmemoryflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",99,{"inputs":[{"name":"self"}],"output":{"name":"gstmemoryflags"}}],[11,"extend","","",99,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",99,{"inputs":[{"name":"t"}],"output":{"name":"gstmemoryflags"}}],[11,"eq","","",100,{"inputs":[{"name":"self"},{"name":"gstmessagetype"}],"output":{"name":"bool"}}],[11,"ne","","",100,{"inputs":[{"name":"self"},{"name":"gstmessagetype"}],"output":{"name":"bool"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"gstmessagetype"}}],[11,"partial_cmp","","",100,{"inputs":[{"name":"self"},{"name":"gstmessagetype"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",100,{"inputs":[{"name":"self"},{"name":"gstmessagetype"}],"output":{"name":"bool"}}],[11,"le","","",100,{"inputs":[{"name":"self"},{"name":"gstmessagetype"}],"output":{"name":"bool"}}],[11,"gt","","",100,{"inputs":[{"name":"self"},{"name":"gstmessagetype"}],"output":{"name":"bool"}}],[11,"ge","","",100,{"inputs":[{"name":"self"},{"name":"gstmessagetype"}],"output":{"name":"bool"}}],[11,"cmp","","",100,{"inputs":[{"name":"self"},{"name":"gstmessagetype"}],"output":{"name":"ordering"}}],[11,"hash","","",100,null],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"UNKNOWN","","",100,null],[18,"EOS","","",100,null],[18,"ERROR","","",100,null],[18,"WARNING","","",100,null],[18,"INFO","","",100,null],[18,"TAG","","",100,null],[18,"BUFFERING","","",100,null],[18,"STATE_CHANGED","","",100,null],[18,"STATE_DIRTY","","",100,null],[18,"STEP_DONE","","",100,null],[18,"CLOCK_PROVIDE","","",100,null],[18,"CLOCK_LOST","","",100,null],[18,"NEW_CLOCK","","",100,null],[18,"STRUCTURE_CHANGE","","",100,null],[18,"STREAM_STATUS","","",100,null],[18,"APPLICATION","","",100,null],[18,"ELEMENT","","",100,null],[18,"SEGMENT_START","","",100,null],[18,"SEGMENT_DONE","","",100,null],[18,"DURATION_CHANGED","","",100,null],[18,"LATENCY","","",100,null],[18,"ASYNC_START","","",100,null],[18,"ASYNC_DONE","","",100,null],[18,"REQUEST_STATE","","",100,null],[18,"STEP_START","","",100,null],[18,"QOS","","",100,null],[18,"PROGRESS","","",100,null],[18,"TOC","","",100,null],[18,"RESET_TIME","","",100,null],[18,"STREAM_START","","",100,null],[18,"NEED_CONTEXT","","",100,null],[18,"HAVE_CONTEXT","","",100,null],[18,"EXTENDED","","",100,null],[18,"DEVICE_ADDED","","",100,null],[18,"DEVICE_REMOVED","","",100,null],[18,"PROPERTY_NOTIFY","","",100,null],[18,"STREAM_COLLECTION","","",100,null],[18,"STREAMS_SELECTED","","",100,null],[18,"REDIRECT","","",100,null],[18,"ANY","","",100,null],[11,"empty","","Returns an empty set of flags.",100,{"inputs":[],"output":{"name":"gstmessagetype"}}],[11,"all","","Returns the set containing all flags.",100,{"inputs":[],"output":{"name":"gstmessagetype"}}],[11,"bits","","Returns the raw value of the flags currently stored.",100,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",100,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gstmessagetype"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",100,{"inputs":[{"name":"c_uint"}],"output":{"name":"gstmessagetype"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",100,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",100,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",100,{"inputs":[{"name":"self"},{"name":"gstmessagetype"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",100,{"inputs":[{"name":"self"},{"name":"gstmessagetype"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",100,{"inputs":[{"name":"self"},{"name":"gstmessagetype"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",100,{"inputs":[{"name":"self"},{"name":"gstmessagetype"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",100,{"inputs":[{"name":"self"},{"name":"gstmessagetype"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",100,{"inputs":[{"name":"self"},{"name":"gstmessagetype"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",100,{"inputs":[{"name":"self"},{"name":"gstmessagetype"}],"output":{"name":"gstmessagetype"}}],[11,"bitor_assign","","Adds the set of flags.",100,{"inputs":[{"name":"self"},{"name":"gstmessagetype"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",100,{"inputs":[{"name":"self"},{"name":"gstmessagetype"}],"output":{"name":"gstmessagetype"}}],[11,"bitxor_assign","","Toggles the set of flags.",100,{"inputs":[{"name":"self"},{"name":"gstmessagetype"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",100,{"inputs":[{"name":"self"},{"name":"gstmessagetype"}],"output":{"name":"gstmessagetype"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",100,{"inputs":[{"name":"self"},{"name":"gstmessagetype"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",100,{"inputs":[{"name":"self"},{"name":"gstmessagetype"}],"output":{"name":"gstmessagetype"}}],[11,"sub_assign","","Disables all flags enabled in the set.",100,{"inputs":[{"name":"self"},{"name":"gstmessagetype"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",100,{"inputs":[{"name":"self"}],"output":{"name":"gstmessagetype"}}],[11,"extend","","",100,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",100,{"inputs":[{"name":"t"}],"output":{"name":"gstmessagetype"}}],[11,"eq","","",101,{"inputs":[{"name":"self"},{"name":"gstmetaflags"}],"output":{"name":"bool"}}],[11,"ne","","",101,{"inputs":[{"name":"self"},{"name":"gstmetaflags"}],"output":{"name":"bool"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"gstmetaflags"}}],[11,"partial_cmp","","",101,{"inputs":[{"name":"self"},{"name":"gstmetaflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",101,{"inputs":[{"name":"self"},{"name":"gstmetaflags"}],"output":{"name":"bool"}}],[11,"le","","",101,{"inputs":[{"name":"self"},{"name":"gstmetaflags"}],"output":{"name":"bool"}}],[11,"gt","","",101,{"inputs":[{"name":"self"},{"name":"gstmetaflags"}],"output":{"name":"bool"}}],[11,"ge","","",101,{"inputs":[{"name":"self"},{"name":"gstmetaflags"}],"output":{"name":"bool"}}],[11,"cmp","","",101,{"inputs":[{"name":"self"},{"name":"gstmetaflags"}],"output":{"name":"ordering"}}],[11,"hash","","",101,null],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",101,null],[18,"READONLY","","",101,null],[18,"POOLED","","",101,null],[18,"LOCKED","","",101,null],[18,"LAST","","",101,null],[11,"empty","","Returns an empty set of flags.",101,{"inputs":[],"output":{"name":"gstmetaflags"}}],[11,"all","","Returns the set containing all flags.",101,{"inputs":[],"output":{"name":"gstmetaflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",101,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",101,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gstmetaflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",101,{"inputs":[{"name":"c_uint"}],"output":{"name":"gstmetaflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",101,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",101,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",101,{"inputs":[{"name":"self"},{"name":"gstmetaflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",101,{"inputs":[{"name":"self"},{"name":"gstmetaflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",101,{"inputs":[{"name":"self"},{"name":"gstmetaflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",101,{"inputs":[{"name":"self"},{"name":"gstmetaflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",101,{"inputs":[{"name":"self"},{"name":"gstmetaflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",101,{"inputs":[{"name":"self"},{"name":"gstmetaflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",101,{"inputs":[{"name":"self"},{"name":"gstmetaflags"}],"output":{"name":"gstmetaflags"}}],[11,"bitor_assign","","Adds the set of flags.",101,{"inputs":[{"name":"self"},{"name":"gstmetaflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",101,{"inputs":[{"name":"self"},{"name":"gstmetaflags"}],"output":{"name":"gstmetaflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",101,{"inputs":[{"name":"self"},{"name":"gstmetaflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",101,{"inputs":[{"name":"self"},{"name":"gstmetaflags"}],"output":{"name":"gstmetaflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",101,{"inputs":[{"name":"self"},{"name":"gstmetaflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",101,{"inputs":[{"name":"self"},{"name":"gstmetaflags"}],"output":{"name":"gstmetaflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",101,{"inputs":[{"name":"self"},{"name":"gstmetaflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",101,{"inputs":[{"name":"self"}],"output":{"name":"gstmetaflags"}}],[11,"extend","","",101,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",101,{"inputs":[{"name":"t"}],"output":{"name":"gstmetaflags"}}],[11,"eq","","",102,{"inputs":[{"name":"self"},{"name":"gstminiobjectflags"}],"output":{"name":"bool"}}],[11,"ne","","",102,{"inputs":[{"name":"self"},{"name":"gstminiobjectflags"}],"output":{"name":"bool"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"gstminiobjectflags"}}],[11,"partial_cmp","","",102,{"inputs":[{"name":"self"},{"name":"gstminiobjectflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",102,{"inputs":[{"name":"self"},{"name":"gstminiobjectflags"}],"output":{"name":"bool"}}],[11,"le","","",102,{"inputs":[{"name":"self"},{"name":"gstminiobjectflags"}],"output":{"name":"bool"}}],[11,"gt","","",102,{"inputs":[{"name":"self"},{"name":"gstminiobjectflags"}],"output":{"name":"bool"}}],[11,"ge","","",102,{"inputs":[{"name":"self"},{"name":"gstminiobjectflags"}],"output":{"name":"bool"}}],[11,"cmp","","",102,{"inputs":[{"name":"self"},{"name":"gstminiobjectflags"}],"output":{"name":"ordering"}}],[11,"hash","","",102,null],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"LOCKABLE","","",102,null],[18,"LOCK_READONLY","","",102,null],[18,"MAY_BE_LEAKED","","",102,null],[18,"LAST","","",102,null],[11,"empty","","Returns an empty set of flags.",102,{"inputs":[],"output":{"name":"gstminiobjectflags"}}],[11,"all","","Returns the set containing all flags.",102,{"inputs":[],"output":{"name":"gstminiobjectflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",102,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",102,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gstminiobjectflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",102,{"inputs":[{"name":"c_uint"}],"output":{"name":"gstminiobjectflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",102,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",102,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",102,{"inputs":[{"name":"self"},{"name":"gstminiobjectflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",102,{"inputs":[{"name":"self"},{"name":"gstminiobjectflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",102,{"inputs":[{"name":"self"},{"name":"gstminiobjectflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",102,{"inputs":[{"name":"self"},{"name":"gstminiobjectflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",102,{"inputs":[{"name":"self"},{"name":"gstminiobjectflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",102,{"inputs":[{"name":"self"},{"name":"gstminiobjectflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",102,{"inputs":[{"name":"self"},{"name":"gstminiobjectflags"}],"output":{"name":"gstminiobjectflags"}}],[11,"bitor_assign","","Adds the set of flags.",102,{"inputs":[{"name":"self"},{"name":"gstminiobjectflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",102,{"inputs":[{"name":"self"},{"name":"gstminiobjectflags"}],"output":{"name":"gstminiobjectflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",102,{"inputs":[{"name":"self"},{"name":"gstminiobjectflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",102,{"inputs":[{"name":"self"},{"name":"gstminiobjectflags"}],"output":{"name":"gstminiobjectflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",102,{"inputs":[{"name":"self"},{"name":"gstminiobjectflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",102,{"inputs":[{"name":"self"},{"name":"gstminiobjectflags"}],"output":{"name":"gstminiobjectflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",102,{"inputs":[{"name":"self"},{"name":"gstminiobjectflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",102,{"inputs":[{"name":"self"}],"output":{"name":"gstminiobjectflags"}}],[11,"extend","","",102,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",102,{"inputs":[{"name":"t"}],"output":{"name":"gstminiobjectflags"}}],[11,"eq","","",103,{"inputs":[{"name":"self"},{"name":"gstobjectflags"}],"output":{"name":"bool"}}],[11,"ne","","",103,{"inputs":[{"name":"self"},{"name":"gstobjectflags"}],"output":{"name":"bool"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"gstobjectflags"}}],[11,"partial_cmp","","",103,{"inputs":[{"name":"self"},{"name":"gstobjectflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",103,{"inputs":[{"name":"self"},{"name":"gstobjectflags"}],"output":{"name":"bool"}}],[11,"le","","",103,{"inputs":[{"name":"self"},{"name":"gstobjectflags"}],"output":{"name":"bool"}}],[11,"gt","","",103,{"inputs":[{"name":"self"},{"name":"gstobjectflags"}],"output":{"name":"bool"}}],[11,"ge","","",103,{"inputs":[{"name":"self"},{"name":"gstobjectflags"}],"output":{"name":"bool"}}],[11,"cmp","","",103,{"inputs":[{"name":"self"},{"name":"gstobjectflags"}],"output":{"name":"ordering"}}],[11,"hash","","",103,null],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"MAY_BE_LEAKED","","",103,null],[18,"LAST","","",103,null],[11,"empty","","Returns an empty set of flags.",103,{"inputs":[],"output":{"name":"gstobjectflags"}}],[11,"all","","Returns the set containing all flags.",103,{"inputs":[],"output":{"name":"gstobjectflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",103,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",103,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gstobjectflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",103,{"inputs":[{"name":"c_uint"}],"output":{"name":"gstobjectflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",103,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",103,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",103,{"inputs":[{"name":"self"},{"name":"gstobjectflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",103,{"inputs":[{"name":"self"},{"name":"gstobjectflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",103,{"inputs":[{"name":"self"},{"name":"gstobjectflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",103,{"inputs":[{"name":"self"},{"name":"gstobjectflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",103,{"inputs":[{"name":"self"},{"name":"gstobjectflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",103,{"inputs":[{"name":"self"},{"name":"gstobjectflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",103,{"inputs":[{"name":"self"},{"name":"gstobjectflags"}],"output":{"name":"gstobjectflags"}}],[11,"bitor_assign","","Adds the set of flags.",103,{"inputs":[{"name":"self"},{"name":"gstobjectflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",103,{"inputs":[{"name":"self"},{"name":"gstobjectflags"}],"output":{"name":"gstobjectflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",103,{"inputs":[{"name":"self"},{"name":"gstobjectflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",103,{"inputs":[{"name":"self"},{"name":"gstobjectflags"}],"output":{"name":"gstobjectflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",103,{"inputs":[{"name":"self"},{"name":"gstobjectflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",103,{"inputs":[{"name":"self"},{"name":"gstobjectflags"}],"output":{"name":"gstobjectflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",103,{"inputs":[{"name":"self"},{"name":"gstobjectflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",103,{"inputs":[{"name":"self"}],"output":{"name":"gstobjectflags"}}],[11,"extend","","",103,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",103,{"inputs":[{"name":"t"}],"output":{"name":"gstobjectflags"}}],[11,"eq","","",104,{"inputs":[{"name":"self"},{"name":"gstpadflags"}],"output":{"name":"bool"}}],[11,"ne","","",104,{"inputs":[{"name":"self"},{"name":"gstpadflags"}],"output":{"name":"bool"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"gstpadflags"}}],[11,"partial_cmp","","",104,{"inputs":[{"name":"self"},{"name":"gstpadflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",104,{"inputs":[{"name":"self"},{"name":"gstpadflags"}],"output":{"name":"bool"}}],[11,"le","","",104,{"inputs":[{"name":"self"},{"name":"gstpadflags"}],"output":{"name":"bool"}}],[11,"gt","","",104,{"inputs":[{"name":"self"},{"name":"gstpadflags"}],"output":{"name":"bool"}}],[11,"ge","","",104,{"inputs":[{"name":"self"},{"name":"gstpadflags"}],"output":{"name":"bool"}}],[11,"cmp","","",104,{"inputs":[{"name":"self"},{"name":"gstpadflags"}],"output":{"name":"ordering"}}],[11,"hash","","",104,null],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"BLOCKED","","",104,null],[18,"FLUSHING","","",104,null],[18,"EOS","","",104,null],[18,"BLOCKING","","",104,null],[18,"NEED_PARENT","","",104,null],[18,"NEED_RECONFIGURE","","",104,null],[18,"PENDING_EVENTS","","",104,null],[18,"FIXED_CAPS","","",104,null],[18,"PROXY_CAPS","","",104,null],[18,"PROXY_ALLOCATION","","",104,null],[18,"PROXY_SCHEDULING","","",104,null],[18,"ACCEPT_INTERSECT","","",104,null],[18,"ACCEPT_TEMPLATE","","",104,null],[18,"LAST","","",104,null],[11,"empty","","Returns an empty set of flags.",104,{"inputs":[],"output":{"name":"gstpadflags"}}],[11,"all","","Returns the set containing all flags.",104,{"inputs":[],"output":{"name":"gstpadflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",104,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",104,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gstpadflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",104,{"inputs":[{"name":"c_uint"}],"output":{"name":"gstpadflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",104,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",104,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",104,{"inputs":[{"name":"self"},{"name":"gstpadflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",104,{"inputs":[{"name":"self"},{"name":"gstpadflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",104,{"inputs":[{"name":"self"},{"name":"gstpadflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",104,{"inputs":[{"name":"self"},{"name":"gstpadflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",104,{"inputs":[{"name":"self"},{"name":"gstpadflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",104,{"inputs":[{"name":"self"},{"name":"gstpadflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",104,{"inputs":[{"name":"self"},{"name":"gstpadflags"}],"output":{"name":"gstpadflags"}}],[11,"bitor_assign","","Adds the set of flags.",104,{"inputs":[{"name":"self"},{"name":"gstpadflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",104,{"inputs":[{"name":"self"},{"name":"gstpadflags"}],"output":{"name":"gstpadflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",104,{"inputs":[{"name":"self"},{"name":"gstpadflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",104,{"inputs":[{"name":"self"},{"name":"gstpadflags"}],"output":{"name":"gstpadflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",104,{"inputs":[{"name":"self"},{"name":"gstpadflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",104,{"inputs":[{"name":"self"},{"name":"gstpadflags"}],"output":{"name":"gstpadflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",104,{"inputs":[{"name":"self"},{"name":"gstpadflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",104,{"inputs":[{"name":"self"}],"output":{"name":"gstpadflags"}}],[11,"extend","","",104,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",104,{"inputs":[{"name":"t"}],"output":{"name":"gstpadflags"}}],[11,"eq","","",105,{"inputs":[{"name":"self"},{"name":"gstpadlinkcheck"}],"output":{"name":"bool"}}],[11,"ne","","",105,{"inputs":[{"name":"self"},{"name":"gstpadlinkcheck"}],"output":{"name":"bool"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"gstpadlinkcheck"}}],[11,"partial_cmp","","",105,{"inputs":[{"name":"self"},{"name":"gstpadlinkcheck"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",105,{"inputs":[{"name":"self"},{"name":"gstpadlinkcheck"}],"output":{"name":"bool"}}],[11,"le","","",105,{"inputs":[{"name":"self"},{"name":"gstpadlinkcheck"}],"output":{"name":"bool"}}],[11,"gt","","",105,{"inputs":[{"name":"self"},{"name":"gstpadlinkcheck"}],"output":{"name":"bool"}}],[11,"ge","","",105,{"inputs":[{"name":"self"},{"name":"gstpadlinkcheck"}],"output":{"name":"bool"}}],[11,"cmp","","",105,{"inputs":[{"name":"self"},{"name":"gstpadlinkcheck"}],"output":{"name":"ordering"}}],[11,"hash","","",105,null],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NOTHING","","",105,null],[18,"HIERARCHY","","",105,null],[18,"TEMPLATE_CAPS","","",105,null],[18,"CAPS","","",105,null],[18,"NO_RECONFIGURE","","",105,null],[18,"DEFAULT","","",105,null],[11,"empty","","Returns an empty set of flags.",105,{"inputs":[],"output":{"name":"gstpadlinkcheck"}}],[11,"all","","Returns the set containing all flags.",105,{"inputs":[],"output":{"name":"gstpadlinkcheck"}}],[11,"bits","","Returns the raw value of the flags currently stored.",105,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",105,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gstpadlinkcheck"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",105,{"inputs":[{"name":"c_uint"}],"output":{"name":"gstpadlinkcheck"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",105,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",105,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",105,{"inputs":[{"name":"self"},{"name":"gstpadlinkcheck"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",105,{"inputs":[{"name":"self"},{"name":"gstpadlinkcheck"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",105,{"inputs":[{"name":"self"},{"name":"gstpadlinkcheck"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",105,{"inputs":[{"name":"self"},{"name":"gstpadlinkcheck"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",105,{"inputs":[{"name":"self"},{"name":"gstpadlinkcheck"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",105,{"inputs":[{"name":"self"},{"name":"gstpadlinkcheck"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",105,{"inputs":[{"name":"self"},{"name":"gstpadlinkcheck"}],"output":{"name":"gstpadlinkcheck"}}],[11,"bitor_assign","","Adds the set of flags.",105,{"inputs":[{"name":"self"},{"name":"gstpadlinkcheck"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",105,{"inputs":[{"name":"self"},{"name":"gstpadlinkcheck"}],"output":{"name":"gstpadlinkcheck"}}],[11,"bitxor_assign","","Toggles the set of flags.",105,{"inputs":[{"name":"self"},{"name":"gstpadlinkcheck"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",105,{"inputs":[{"name":"self"},{"name":"gstpadlinkcheck"}],"output":{"name":"gstpadlinkcheck"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",105,{"inputs":[{"name":"self"},{"name":"gstpadlinkcheck"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",105,{"inputs":[{"name":"self"},{"name":"gstpadlinkcheck"}],"output":{"name":"gstpadlinkcheck"}}],[11,"sub_assign","","Disables all flags enabled in the set.",105,{"inputs":[{"name":"self"},{"name":"gstpadlinkcheck"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",105,{"inputs":[{"name":"self"}],"output":{"name":"gstpadlinkcheck"}}],[11,"extend","","",105,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",105,{"inputs":[{"name":"t"}],"output":{"name":"gstpadlinkcheck"}}],[11,"eq","","",106,{"inputs":[{"name":"self"},{"name":"gstpadprobetype"}],"output":{"name":"bool"}}],[11,"ne","","",106,{"inputs":[{"name":"self"},{"name":"gstpadprobetype"}],"output":{"name":"bool"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"gstpadprobetype"}}],[11,"partial_cmp","","",106,{"inputs":[{"name":"self"},{"name":"gstpadprobetype"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",106,{"inputs":[{"name":"self"},{"name":"gstpadprobetype"}],"output":{"name":"bool"}}],[11,"le","","",106,{"inputs":[{"name":"self"},{"name":"gstpadprobetype"}],"output":{"name":"bool"}}],[11,"gt","","",106,{"inputs":[{"name":"self"},{"name":"gstpadprobetype"}],"output":{"name":"bool"}}],[11,"ge","","",106,{"inputs":[{"name":"self"},{"name":"gstpadprobetype"}],"output":{"name":"bool"}}],[11,"cmp","","",106,{"inputs":[{"name":"self"},{"name":"gstpadprobetype"}],"output":{"name":"ordering"}}],[11,"hash","","",106,null],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"INVALID","","",106,null],[18,"IDLE","","",106,null],[18,"BLOCK","","",106,null],[18,"BUFFER","","",106,null],[18,"BUFFER_LIST","","",106,null],[18,"EVENT_DOWNSTREAM","","",106,null],[18,"EVENT_UPSTREAM","","",106,null],[18,"EVENT_FLUSH","","",106,null],[18,"QUERY_DOWNSTREAM","","",106,null],[18,"QUERY_UPSTREAM","","",106,null],[18,"PUSH","","",106,null],[18,"PULL","","",106,null],[18,"BLOCKING","","",106,null],[18,"DATA_DOWNSTREAM","","",106,null],[18,"DATA_UPSTREAM","","",106,null],[18,"DATA_BOTH","","",106,null],[18,"BLOCK_DOWNSTREAM","","",106,null],[18,"BLOCK_UPSTREAM","","",106,null],[18,"EVENT_BOTH","","",106,null],[18,"QUERY_BOTH","","",106,null],[18,"ALL_BOTH","","",106,null],[18,"SCHEDULING","","",106,null],[11,"empty","","Returns an empty set of flags.",106,{"inputs":[],"output":{"name":"gstpadprobetype"}}],[11,"all","","Returns the set containing all flags.",106,{"inputs":[],"output":{"name":"gstpadprobetype"}}],[11,"bits","","Returns the raw value of the flags currently stored.",106,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",106,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gstpadprobetype"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",106,{"inputs":[{"name":"c_uint"}],"output":{"name":"gstpadprobetype"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",106,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",106,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",106,{"inputs":[{"name":"self"},{"name":"gstpadprobetype"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",106,{"inputs":[{"name":"self"},{"name":"gstpadprobetype"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",106,{"inputs":[{"name":"self"},{"name":"gstpadprobetype"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",106,{"inputs":[{"name":"self"},{"name":"gstpadprobetype"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",106,{"inputs":[{"name":"self"},{"name":"gstpadprobetype"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",106,{"inputs":[{"name":"self"},{"name":"gstpadprobetype"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",106,{"inputs":[{"name":"self"},{"name":"gstpadprobetype"}],"output":{"name":"gstpadprobetype"}}],[11,"bitor_assign","","Adds the set of flags.",106,{"inputs":[{"name":"self"},{"name":"gstpadprobetype"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",106,{"inputs":[{"name":"self"},{"name":"gstpadprobetype"}],"output":{"name":"gstpadprobetype"}}],[11,"bitxor_assign","","Toggles the set of flags.",106,{"inputs":[{"name":"self"},{"name":"gstpadprobetype"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",106,{"inputs":[{"name":"self"},{"name":"gstpadprobetype"}],"output":{"name":"gstpadprobetype"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",106,{"inputs":[{"name":"self"},{"name":"gstpadprobetype"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",106,{"inputs":[{"name":"self"},{"name":"gstpadprobetype"}],"output":{"name":"gstpadprobetype"}}],[11,"sub_assign","","Disables all flags enabled in the set.",106,{"inputs":[{"name":"self"},{"name":"gstpadprobetype"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",106,{"inputs":[{"name":"self"}],"output":{"name":"gstpadprobetype"}}],[11,"extend","","",106,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",106,{"inputs":[{"name":"t"}],"output":{"name":"gstpadprobetype"}}],[11,"eq","","",107,{"inputs":[{"name":"self"},{"name":"gstpadtemplateflags"}],"output":{"name":"bool"}}],[11,"ne","","",107,{"inputs":[{"name":"self"},{"name":"gstpadtemplateflags"}],"output":{"name":"bool"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"gstpadtemplateflags"}}],[11,"partial_cmp","","",107,{"inputs":[{"name":"self"},{"name":"gstpadtemplateflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",107,{"inputs":[{"name":"self"},{"name":"gstpadtemplateflags"}],"output":{"name":"bool"}}],[11,"le","","",107,{"inputs":[{"name":"self"},{"name":"gstpadtemplateflags"}],"output":{"name":"bool"}}],[11,"gt","","",107,{"inputs":[{"name":"self"},{"name":"gstpadtemplateflags"}],"output":{"name":"bool"}}],[11,"ge","","",107,{"inputs":[{"name":"self"},{"name":"gstpadtemplateflags"}],"output":{"name":"bool"}}],[11,"cmp","","",107,{"inputs":[{"name":"self"},{"name":"gstpadtemplateflags"}],"output":{"name":"ordering"}}],[11,"hash","","",107,null],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"LAST","","",107,null],[11,"empty","","Returns an empty set of flags.",107,{"inputs":[],"output":{"name":"gstpadtemplateflags"}}],[11,"all","","Returns the set containing all flags.",107,{"inputs":[],"output":{"name":"gstpadtemplateflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",107,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",107,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gstpadtemplateflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",107,{"inputs":[{"name":"c_uint"}],"output":{"name":"gstpadtemplateflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",107,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",107,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",107,{"inputs":[{"name":"self"},{"name":"gstpadtemplateflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",107,{"inputs":[{"name":"self"},{"name":"gstpadtemplateflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",107,{"inputs":[{"name":"self"},{"name":"gstpadtemplateflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",107,{"inputs":[{"name":"self"},{"name":"gstpadtemplateflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",107,{"inputs":[{"name":"self"},{"name":"gstpadtemplateflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",107,{"inputs":[{"name":"self"},{"name":"gstpadtemplateflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",107,{"inputs":[{"name":"self"},{"name":"gstpadtemplateflags"}],"output":{"name":"gstpadtemplateflags"}}],[11,"bitor_assign","","Adds the set of flags.",107,{"inputs":[{"name":"self"},{"name":"gstpadtemplateflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",107,{"inputs":[{"name":"self"},{"name":"gstpadtemplateflags"}],"output":{"name":"gstpadtemplateflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",107,{"inputs":[{"name":"self"},{"name":"gstpadtemplateflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",107,{"inputs":[{"name":"self"},{"name":"gstpadtemplateflags"}],"output":{"name":"gstpadtemplateflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",107,{"inputs":[{"name":"self"},{"name":"gstpadtemplateflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",107,{"inputs":[{"name":"self"},{"name":"gstpadtemplateflags"}],"output":{"name":"gstpadtemplateflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",107,{"inputs":[{"name":"self"},{"name":"gstpadtemplateflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",107,{"inputs":[{"name":"self"}],"output":{"name":"gstpadtemplateflags"}}],[11,"extend","","",107,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",107,{"inputs":[{"name":"t"}],"output":{"name":"gstpadtemplateflags"}}],[11,"eq","","",108,{"inputs":[{"name":"self"},{"name":"gstparseflags"}],"output":{"name":"bool"}}],[11,"ne","","",108,{"inputs":[{"name":"self"},{"name":"gstparseflags"}],"output":{"name":"bool"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"gstparseflags"}}],[11,"partial_cmp","","",108,{"inputs":[{"name":"self"},{"name":"gstparseflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",108,{"inputs":[{"name":"self"},{"name":"gstparseflags"}],"output":{"name":"bool"}}],[11,"le","","",108,{"inputs":[{"name":"self"},{"name":"gstparseflags"}],"output":{"name":"bool"}}],[11,"gt","","",108,{"inputs":[{"name":"self"},{"name":"gstparseflags"}],"output":{"name":"bool"}}],[11,"ge","","",108,{"inputs":[{"name":"self"},{"name":"gstparseflags"}],"output":{"name":"bool"}}],[11,"cmp","","",108,{"inputs":[{"name":"self"},{"name":"gstparseflags"}],"output":{"name":"ordering"}}],[11,"hash","","",108,null],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",108,null],[18,"FATAL_ERRORS","","",108,null],[18,"NO_SINGLE_ELEMENT_BINS","","",108,null],[18,"PLACE_IN_BIN","","",108,null],[11,"empty","","Returns an empty set of flags.",108,{"inputs":[],"output":{"name":"gstparseflags"}}],[11,"all","","Returns the set containing all flags.",108,{"inputs":[],"output":{"name":"gstparseflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",108,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",108,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gstparseflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",108,{"inputs":[{"name":"c_uint"}],"output":{"name":"gstparseflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",108,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",108,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",108,{"inputs":[{"name":"self"},{"name":"gstparseflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",108,{"inputs":[{"name":"self"},{"name":"gstparseflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",108,{"inputs":[{"name":"self"},{"name":"gstparseflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",108,{"inputs":[{"name":"self"},{"name":"gstparseflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",108,{"inputs":[{"name":"self"},{"name":"gstparseflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",108,{"inputs":[{"name":"self"},{"name":"gstparseflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",108,{"inputs":[{"name":"self"},{"name":"gstparseflags"}],"output":{"name":"gstparseflags"}}],[11,"bitor_assign","","Adds the set of flags.",108,{"inputs":[{"name":"self"},{"name":"gstparseflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",108,{"inputs":[{"name":"self"},{"name":"gstparseflags"}],"output":{"name":"gstparseflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",108,{"inputs":[{"name":"self"},{"name":"gstparseflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",108,{"inputs":[{"name":"self"},{"name":"gstparseflags"}],"output":{"name":"gstparseflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",108,{"inputs":[{"name":"self"},{"name":"gstparseflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",108,{"inputs":[{"name":"self"},{"name":"gstparseflags"}],"output":{"name":"gstparseflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",108,{"inputs":[{"name":"self"},{"name":"gstparseflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",108,{"inputs":[{"name":"self"}],"output":{"name":"gstparseflags"}}],[11,"extend","","",108,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",108,{"inputs":[{"name":"t"}],"output":{"name":"gstparseflags"}}],[11,"eq","","",109,{"inputs":[{"name":"self"},{"name":"gstpipelineflags"}],"output":{"name":"bool"}}],[11,"ne","","",109,{"inputs":[{"name":"self"},{"name":"gstpipelineflags"}],"output":{"name":"bool"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"gstpipelineflags"}}],[11,"partial_cmp","","",109,{"inputs":[{"name":"self"},{"name":"gstpipelineflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",109,{"inputs":[{"name":"self"},{"name":"gstpipelineflags"}],"output":{"name":"bool"}}],[11,"le","","",109,{"inputs":[{"name":"self"},{"name":"gstpipelineflags"}],"output":{"name":"bool"}}],[11,"gt","","",109,{"inputs":[{"name":"self"},{"name":"gstpipelineflags"}],"output":{"name":"bool"}}],[11,"ge","","",109,{"inputs":[{"name":"self"},{"name":"gstpipelineflags"}],"output":{"name":"bool"}}],[11,"cmp","","",109,{"inputs":[{"name":"self"},{"name":"gstpipelineflags"}],"output":{"name":"ordering"}}],[11,"hash","","",109,null],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"FIXED_CLOCK","","",109,null],[18,"LAST","","",109,null],[11,"empty","","Returns an empty set of flags.",109,{"inputs":[],"output":{"name":"gstpipelineflags"}}],[11,"all","","Returns the set containing all flags.",109,{"inputs":[],"output":{"name":"gstpipelineflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",109,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",109,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gstpipelineflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",109,{"inputs":[{"name":"c_uint"}],"output":{"name":"gstpipelineflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",109,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",109,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",109,{"inputs":[{"name":"self"},{"name":"gstpipelineflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",109,{"inputs":[{"name":"self"},{"name":"gstpipelineflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",109,{"inputs":[{"name":"self"},{"name":"gstpipelineflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",109,{"inputs":[{"name":"self"},{"name":"gstpipelineflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",109,{"inputs":[{"name":"self"},{"name":"gstpipelineflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",109,{"inputs":[{"name":"self"},{"name":"gstpipelineflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",109,{"inputs":[{"name":"self"},{"name":"gstpipelineflags"}],"output":{"name":"gstpipelineflags"}}],[11,"bitor_assign","","Adds the set of flags.",109,{"inputs":[{"name":"self"},{"name":"gstpipelineflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",109,{"inputs":[{"name":"self"},{"name":"gstpipelineflags"}],"output":{"name":"gstpipelineflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",109,{"inputs":[{"name":"self"},{"name":"gstpipelineflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",109,{"inputs":[{"name":"self"},{"name":"gstpipelineflags"}],"output":{"name":"gstpipelineflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",109,{"inputs":[{"name":"self"},{"name":"gstpipelineflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",109,{"inputs":[{"name":"self"},{"name":"gstpipelineflags"}],"output":{"name":"gstpipelineflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",109,{"inputs":[{"name":"self"},{"name":"gstpipelineflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",109,{"inputs":[{"name":"self"}],"output":{"name":"gstpipelineflags"}}],[11,"extend","","",109,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",109,{"inputs":[{"name":"t"}],"output":{"name":"gstpipelineflags"}}],[11,"eq","","",110,{"inputs":[{"name":"self"},{"name":"gstplugindependencyflags"}],"output":{"name":"bool"}}],[11,"ne","","",110,{"inputs":[{"name":"self"},{"name":"gstplugindependencyflags"}],"output":{"name":"bool"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"gstplugindependencyflags"}}],[11,"partial_cmp","","",110,{"inputs":[{"name":"self"},{"name":"gstplugindependencyflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",110,{"inputs":[{"name":"self"},{"name":"gstplugindependencyflags"}],"output":{"name":"bool"}}],[11,"le","","",110,{"inputs":[{"name":"self"},{"name":"gstplugindependencyflags"}],"output":{"name":"bool"}}],[11,"gt","","",110,{"inputs":[{"name":"self"},{"name":"gstplugindependencyflags"}],"output":{"name":"bool"}}],[11,"ge","","",110,{"inputs":[{"name":"self"},{"name":"gstplugindependencyflags"}],"output":{"name":"bool"}}],[11,"cmp","","",110,{"inputs":[{"name":"self"},{"name":"gstplugindependencyflags"}],"output":{"name":"ordering"}}],[11,"hash","","",110,null],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",110,null],[18,"RECURSE","","",110,null],[18,"PATHS_ARE_DEFAULT_ONLY","","",110,null],[18,"FILE_NAME_IS_SUFFIX","","",110,null],[18,"FILE_NAME_IS_PREFIX","","",110,null],[11,"empty","","Returns an empty set of flags.",110,{"inputs":[],"output":{"name":"gstplugindependencyflags"}}],[11,"all","","Returns the set containing all flags.",110,{"inputs":[],"output":{"name":"gstplugindependencyflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",110,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",110,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gstplugindependencyflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",110,{"inputs":[{"name":"c_uint"}],"output":{"name":"gstplugindependencyflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",110,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",110,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",110,{"inputs":[{"name":"self"},{"name":"gstplugindependencyflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",110,{"inputs":[{"name":"self"},{"name":"gstplugindependencyflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",110,{"inputs":[{"name":"self"},{"name":"gstplugindependencyflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",110,{"inputs":[{"name":"self"},{"name":"gstplugindependencyflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",110,{"inputs":[{"name":"self"},{"name":"gstplugindependencyflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",110,{"inputs":[{"name":"self"},{"name":"gstplugindependencyflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",110,{"inputs":[{"name":"self"},{"name":"gstplugindependencyflags"}],"output":{"name":"gstplugindependencyflags"}}],[11,"bitor_assign","","Adds the set of flags.",110,{"inputs":[{"name":"self"},{"name":"gstplugindependencyflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",110,{"inputs":[{"name":"self"},{"name":"gstplugindependencyflags"}],"output":{"name":"gstplugindependencyflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",110,{"inputs":[{"name":"self"},{"name":"gstplugindependencyflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",110,{"inputs":[{"name":"self"},{"name":"gstplugindependencyflags"}],"output":{"name":"gstplugindependencyflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",110,{"inputs":[{"name":"self"},{"name":"gstplugindependencyflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",110,{"inputs":[{"name":"self"},{"name":"gstplugindependencyflags"}],"output":{"name":"gstplugindependencyflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",110,{"inputs":[{"name":"self"},{"name":"gstplugindependencyflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",110,{"inputs":[{"name":"self"}],"output":{"name":"gstplugindependencyflags"}}],[11,"extend","","",110,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",110,{"inputs":[{"name":"t"}],"output":{"name":"gstplugindependencyflags"}}],[11,"eq","","",111,{"inputs":[{"name":"self"},{"name":"gstpluginflags"}],"output":{"name":"bool"}}],[11,"ne","","",111,{"inputs":[{"name":"self"},{"name":"gstpluginflags"}],"output":{"name":"bool"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"gstpluginflags"}}],[11,"partial_cmp","","",111,{"inputs":[{"name":"self"},{"name":"gstpluginflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",111,{"inputs":[{"name":"self"},{"name":"gstpluginflags"}],"output":{"name":"bool"}}],[11,"le","","",111,{"inputs":[{"name":"self"},{"name":"gstpluginflags"}],"output":{"name":"bool"}}],[11,"gt","","",111,{"inputs":[{"name":"self"},{"name":"gstpluginflags"}],"output":{"name":"bool"}}],[11,"ge","","",111,{"inputs":[{"name":"self"},{"name":"gstpluginflags"}],"output":{"name":"bool"}}],[11,"cmp","","",111,{"inputs":[{"name":"self"},{"name":"gstpluginflags"}],"output":{"name":"ordering"}}],[11,"hash","","",111,null],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"CACHED","","",111,null],[18,"BLACKLISTED","","",111,null],[11,"empty","","Returns an empty set of flags.",111,{"inputs":[],"output":{"name":"gstpluginflags"}}],[11,"all","","Returns the set containing all flags.",111,{"inputs":[],"output":{"name":"gstpluginflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",111,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",111,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gstpluginflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",111,{"inputs":[{"name":"c_uint"}],"output":{"name":"gstpluginflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",111,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",111,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",111,{"inputs":[{"name":"self"},{"name":"gstpluginflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",111,{"inputs":[{"name":"self"},{"name":"gstpluginflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",111,{"inputs":[{"name":"self"},{"name":"gstpluginflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",111,{"inputs":[{"name":"self"},{"name":"gstpluginflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",111,{"inputs":[{"name":"self"},{"name":"gstpluginflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",111,{"inputs":[{"name":"self"},{"name":"gstpluginflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",111,{"inputs":[{"name":"self"},{"name":"gstpluginflags"}],"output":{"name":"gstpluginflags"}}],[11,"bitor_assign","","Adds the set of flags.",111,{"inputs":[{"name":"self"},{"name":"gstpluginflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",111,{"inputs":[{"name":"self"},{"name":"gstpluginflags"}],"output":{"name":"gstpluginflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",111,{"inputs":[{"name":"self"},{"name":"gstpluginflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",111,{"inputs":[{"name":"self"},{"name":"gstpluginflags"}],"output":{"name":"gstpluginflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",111,{"inputs":[{"name":"self"},{"name":"gstpluginflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",111,{"inputs":[{"name":"self"},{"name":"gstpluginflags"}],"output":{"name":"gstpluginflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",111,{"inputs":[{"name":"self"},{"name":"gstpluginflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",111,{"inputs":[{"name":"self"}],"output":{"name":"gstpluginflags"}}],[11,"extend","","",111,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",111,{"inputs":[{"name":"t"}],"output":{"name":"gstpluginflags"}}],[11,"eq","","",112,{"inputs":[{"name":"self"},{"name":"gstquerytypeflags"}],"output":{"name":"bool"}}],[11,"ne","","",112,{"inputs":[{"name":"self"},{"name":"gstquerytypeflags"}],"output":{"name":"bool"}}],[11,"clone","","",112,{"inputs":[{"name":"self"}],"output":{"name":"gstquerytypeflags"}}],[11,"partial_cmp","","",112,{"inputs":[{"name":"self"},{"name":"gstquerytypeflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",112,{"inputs":[{"name":"self"},{"name":"gstquerytypeflags"}],"output":{"name":"bool"}}],[11,"le","","",112,{"inputs":[{"name":"self"},{"name":"gstquerytypeflags"}],"output":{"name":"bool"}}],[11,"gt","","",112,{"inputs":[{"name":"self"},{"name":"gstquerytypeflags"}],"output":{"name":"bool"}}],[11,"ge","","",112,{"inputs":[{"name":"self"},{"name":"gstquerytypeflags"}],"output":{"name":"bool"}}],[11,"cmp","","",112,{"inputs":[{"name":"self"},{"name":"gstquerytypeflags"}],"output":{"name":"ordering"}}],[11,"hash","","",112,null],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"UPSTREAM","","",112,null],[18,"DOWNSTREAM","","",112,null],[18,"SERIALIZED","","",112,null],[11,"empty","","Returns an empty set of flags.",112,{"inputs":[],"output":{"name":"gstquerytypeflags"}}],[11,"all","","Returns the set containing all flags.",112,{"inputs":[],"output":{"name":"gstquerytypeflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",112,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",112,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gstquerytypeflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",112,{"inputs":[{"name":"c_uint"}],"output":{"name":"gstquerytypeflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",112,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",112,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",112,{"inputs":[{"name":"self"},{"name":"gstquerytypeflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",112,{"inputs":[{"name":"self"},{"name":"gstquerytypeflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",112,{"inputs":[{"name":"self"},{"name":"gstquerytypeflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",112,{"inputs":[{"name":"self"},{"name":"gstquerytypeflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",112,{"inputs":[{"name":"self"},{"name":"gstquerytypeflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",112,{"inputs":[{"name":"self"},{"name":"gstquerytypeflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",112,{"inputs":[{"name":"self"},{"name":"gstquerytypeflags"}],"output":{"name":"gstquerytypeflags"}}],[11,"bitor_assign","","Adds the set of flags.",112,{"inputs":[{"name":"self"},{"name":"gstquerytypeflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",112,{"inputs":[{"name":"self"},{"name":"gstquerytypeflags"}],"output":{"name":"gstquerytypeflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",112,{"inputs":[{"name":"self"},{"name":"gstquerytypeflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",112,{"inputs":[{"name":"self"},{"name":"gstquerytypeflags"}],"output":{"name":"gstquerytypeflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",112,{"inputs":[{"name":"self"},{"name":"gstquerytypeflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",112,{"inputs":[{"name":"self"},{"name":"gstquerytypeflags"}],"output":{"name":"gstquerytypeflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",112,{"inputs":[{"name":"self"},{"name":"gstquerytypeflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",112,{"inputs":[{"name":"self"}],"output":{"name":"gstquerytypeflags"}}],[11,"extend","","",112,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",112,{"inputs":[{"name":"t"}],"output":{"name":"gstquerytypeflags"}}],[11,"eq","","",113,{"inputs":[{"name":"self"},{"name":"gstschedulingflags"}],"output":{"name":"bool"}}],[11,"ne","","",113,{"inputs":[{"name":"self"},{"name":"gstschedulingflags"}],"output":{"name":"bool"}}],[11,"clone","","",113,{"inputs":[{"name":"self"}],"output":{"name":"gstschedulingflags"}}],[11,"partial_cmp","","",113,{"inputs":[{"name":"self"},{"name":"gstschedulingflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",113,{"inputs":[{"name":"self"},{"name":"gstschedulingflags"}],"output":{"name":"bool"}}],[11,"le","","",113,{"inputs":[{"name":"self"},{"name":"gstschedulingflags"}],"output":{"name":"bool"}}],[11,"gt","","",113,{"inputs":[{"name":"self"},{"name":"gstschedulingflags"}],"output":{"name":"bool"}}],[11,"ge","","",113,{"inputs":[{"name":"self"},{"name":"gstschedulingflags"}],"output":{"name":"bool"}}],[11,"cmp","","",113,{"inputs":[{"name":"self"},{"name":"gstschedulingflags"}],"output":{"name":"ordering"}}],[11,"hash","","",113,null],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"SEEKABLE","","",113,null],[18,"SEQUENTIAL","","",113,null],[18,"BANDWIDTH_LIMITED","","",113,null],[11,"empty","","Returns an empty set of flags.",113,{"inputs":[],"output":{"name":"gstschedulingflags"}}],[11,"all","","Returns the set containing all flags.",113,{"inputs":[],"output":{"name":"gstschedulingflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",113,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",113,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gstschedulingflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",113,{"inputs":[{"name":"c_uint"}],"output":{"name":"gstschedulingflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",113,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",113,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",113,{"inputs":[{"name":"self"},{"name":"gstschedulingflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",113,{"inputs":[{"name":"self"},{"name":"gstschedulingflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",113,{"inputs":[{"name":"self"},{"name":"gstschedulingflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",113,{"inputs":[{"name":"self"},{"name":"gstschedulingflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",113,{"inputs":[{"name":"self"},{"name":"gstschedulingflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",113,{"inputs":[{"name":"self"},{"name":"gstschedulingflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",113,{"inputs":[{"name":"self"},{"name":"gstschedulingflags"}],"output":{"name":"gstschedulingflags"}}],[11,"bitor_assign","","Adds the set of flags.",113,{"inputs":[{"name":"self"},{"name":"gstschedulingflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",113,{"inputs":[{"name":"self"},{"name":"gstschedulingflags"}],"output":{"name":"gstschedulingflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",113,{"inputs":[{"name":"self"},{"name":"gstschedulingflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",113,{"inputs":[{"name":"self"},{"name":"gstschedulingflags"}],"output":{"name":"gstschedulingflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",113,{"inputs":[{"name":"self"},{"name":"gstschedulingflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",113,{"inputs":[{"name":"self"},{"name":"gstschedulingflags"}],"output":{"name":"gstschedulingflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",113,{"inputs":[{"name":"self"},{"name":"gstschedulingflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",113,{"inputs":[{"name":"self"}],"output":{"name":"gstschedulingflags"}}],[11,"extend","","",113,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",113,{"inputs":[{"name":"t"}],"output":{"name":"gstschedulingflags"}}],[11,"eq","","",114,{"inputs":[{"name":"self"},{"name":"gstseekflags"}],"output":{"name":"bool"}}],[11,"ne","","",114,{"inputs":[{"name":"self"},{"name":"gstseekflags"}],"output":{"name":"bool"}}],[11,"clone","","",114,{"inputs":[{"name":"self"}],"output":{"name":"gstseekflags"}}],[11,"partial_cmp","","",114,{"inputs":[{"name":"self"},{"name":"gstseekflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",114,{"inputs":[{"name":"self"},{"name":"gstseekflags"}],"output":{"name":"bool"}}],[11,"le","","",114,{"inputs":[{"name":"self"},{"name":"gstseekflags"}],"output":{"name":"bool"}}],[11,"gt","","",114,{"inputs":[{"name":"self"},{"name":"gstseekflags"}],"output":{"name":"bool"}}],[11,"ge","","",114,{"inputs":[{"name":"self"},{"name":"gstseekflags"}],"output":{"name":"bool"}}],[11,"cmp","","",114,{"inputs":[{"name":"self"},{"name":"gstseekflags"}],"output":{"name":"ordering"}}],[11,"hash","","",114,null],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",114,null],[18,"FLUSH","","",114,null],[18,"ACCURATE","","",114,null],[18,"KEY_UNIT","","",114,null],[18,"SEGMENT","","",114,null],[18,"TRICKMODE","","",114,null],[18,"SKIP","","",114,null],[18,"SNAP_BEFORE","","",114,null],[18,"SNAP_AFTER","","",114,null],[18,"SNAP_NEAREST","","",114,null],[18,"TRICKMODE_KEY_UNITS","","",114,null],[18,"TRICKMODE_NO_AUDIO","","",114,null],[11,"empty","","Returns an empty set of flags.",114,{"inputs":[],"output":{"name":"gstseekflags"}}],[11,"all","","Returns the set containing all flags.",114,{"inputs":[],"output":{"name":"gstseekflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",114,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",114,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gstseekflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",114,{"inputs":[{"name":"c_uint"}],"output":{"name":"gstseekflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",114,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",114,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",114,{"inputs":[{"name":"self"},{"name":"gstseekflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",114,{"inputs":[{"name":"self"},{"name":"gstseekflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",114,{"inputs":[{"name":"self"},{"name":"gstseekflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",114,{"inputs":[{"name":"self"},{"name":"gstseekflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",114,{"inputs":[{"name":"self"},{"name":"gstseekflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",114,{"inputs":[{"name":"self"},{"name":"gstseekflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",114,{"inputs":[{"name":"self"},{"name":"gstseekflags"}],"output":{"name":"gstseekflags"}}],[11,"bitor_assign","","Adds the set of flags.",114,{"inputs":[{"name":"self"},{"name":"gstseekflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",114,{"inputs":[{"name":"self"},{"name":"gstseekflags"}],"output":{"name":"gstseekflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",114,{"inputs":[{"name":"self"},{"name":"gstseekflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",114,{"inputs":[{"name":"self"},{"name":"gstseekflags"}],"output":{"name":"gstseekflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",114,{"inputs":[{"name":"self"},{"name":"gstseekflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",114,{"inputs":[{"name":"self"},{"name":"gstseekflags"}],"output":{"name":"gstseekflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",114,{"inputs":[{"name":"self"},{"name":"gstseekflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",114,{"inputs":[{"name":"self"}],"output":{"name":"gstseekflags"}}],[11,"extend","","",114,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",114,{"inputs":[{"name":"t"}],"output":{"name":"gstseekflags"}}],[11,"eq","","",115,{"inputs":[{"name":"self"},{"name":"gstsegmentflags"}],"output":{"name":"bool"}}],[11,"ne","","",115,{"inputs":[{"name":"self"},{"name":"gstsegmentflags"}],"output":{"name":"bool"}}],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"gstsegmentflags"}}],[11,"partial_cmp","","",115,{"inputs":[{"name":"self"},{"name":"gstsegmentflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",115,{"inputs":[{"name":"self"},{"name":"gstsegmentflags"}],"output":{"name":"bool"}}],[11,"le","","",115,{"inputs":[{"name":"self"},{"name":"gstsegmentflags"}],"output":{"name":"bool"}}],[11,"gt","","",115,{"inputs":[{"name":"self"},{"name":"gstsegmentflags"}],"output":{"name":"bool"}}],[11,"ge","","",115,{"inputs":[{"name":"self"},{"name":"gstsegmentflags"}],"output":{"name":"bool"}}],[11,"cmp","","",115,{"inputs":[{"name":"self"},{"name":"gstsegmentflags"}],"output":{"name":"ordering"}}],[11,"hash","","",115,null],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",115,null],[18,"RESET","","",115,null],[18,"TRICKMODE","","",115,null],[18,"SKIP","","",115,null],[18,"SEGMENT","","",115,null],[18,"TRICKMODE_KEY_UNITS","","",115,null],[18,"TRICKMODE_NO_AUDIO","","",115,null],[11,"empty","","Returns an empty set of flags.",115,{"inputs":[],"output":{"name":"gstsegmentflags"}}],[11,"all","","Returns the set containing all flags.",115,{"inputs":[],"output":{"name":"gstsegmentflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",115,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",115,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gstsegmentflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",115,{"inputs":[{"name":"c_uint"}],"output":{"name":"gstsegmentflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",115,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",115,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",115,{"inputs":[{"name":"self"},{"name":"gstsegmentflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",115,{"inputs":[{"name":"self"},{"name":"gstsegmentflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",115,{"inputs":[{"name":"self"},{"name":"gstsegmentflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",115,{"inputs":[{"name":"self"},{"name":"gstsegmentflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",115,{"inputs":[{"name":"self"},{"name":"gstsegmentflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",115,{"inputs":[{"name":"self"},{"name":"gstsegmentflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",115,{"inputs":[{"name":"self"},{"name":"gstsegmentflags"}],"output":{"name":"gstsegmentflags"}}],[11,"bitor_assign","","Adds the set of flags.",115,{"inputs":[{"name":"self"},{"name":"gstsegmentflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",115,{"inputs":[{"name":"self"},{"name":"gstsegmentflags"}],"output":{"name":"gstsegmentflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",115,{"inputs":[{"name":"self"},{"name":"gstsegmentflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",115,{"inputs":[{"name":"self"},{"name":"gstsegmentflags"}],"output":{"name":"gstsegmentflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",115,{"inputs":[{"name":"self"},{"name":"gstsegmentflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",115,{"inputs":[{"name":"self"},{"name":"gstsegmentflags"}],"output":{"name":"gstsegmentflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",115,{"inputs":[{"name":"self"},{"name":"gstsegmentflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",115,{"inputs":[{"name":"self"}],"output":{"name":"gstsegmentflags"}}],[11,"extend","","",115,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",115,{"inputs":[{"name":"t"}],"output":{"name":"gstsegmentflags"}}],[11,"eq","","",116,{"inputs":[{"name":"self"},{"name":"gststacktraceflags"}],"output":{"name":"bool"}}],[11,"ne","","",116,{"inputs":[{"name":"self"},{"name":"gststacktraceflags"}],"output":{"name":"bool"}}],[11,"clone","","",116,{"inputs":[{"name":"self"}],"output":{"name":"gststacktraceflags"}}],[11,"partial_cmp","","",116,{"inputs":[{"name":"self"},{"name":"gststacktraceflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",116,{"inputs":[{"name":"self"},{"name":"gststacktraceflags"}],"output":{"name":"bool"}}],[11,"le","","",116,{"inputs":[{"name":"self"},{"name":"gststacktraceflags"}],"output":{"name":"bool"}}],[11,"gt","","",116,{"inputs":[{"name":"self"},{"name":"gststacktraceflags"}],"output":{"name":"bool"}}],[11,"ge","","",116,{"inputs":[{"name":"self"},{"name":"gststacktraceflags"}],"output":{"name":"bool"}}],[11,"cmp","","",116,{"inputs":[{"name":"self"},{"name":"gststacktraceflags"}],"output":{"name":"ordering"}}],[11,"hash","","",116,null],[11,"fmt","","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"FULL","","",116,null],[11,"empty","","Returns an empty set of flags.",116,{"inputs":[],"output":{"name":"gststacktraceflags"}}],[11,"all","","Returns the set containing all flags.",116,{"inputs":[],"output":{"name":"gststacktraceflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",116,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",116,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gststacktraceflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",116,{"inputs":[{"name":"c_uint"}],"output":{"name":"gststacktraceflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",116,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",116,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",116,{"inputs":[{"name":"self"},{"name":"gststacktraceflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",116,{"inputs":[{"name":"self"},{"name":"gststacktraceflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",116,{"inputs":[{"name":"self"},{"name":"gststacktraceflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",116,{"inputs":[{"name":"self"},{"name":"gststacktraceflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",116,{"inputs":[{"name":"self"},{"name":"gststacktraceflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",116,{"inputs":[{"name":"self"},{"name":"gststacktraceflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",116,{"inputs":[{"name":"self"},{"name":"gststacktraceflags"}],"output":{"name":"gststacktraceflags"}}],[11,"bitor_assign","","Adds the set of flags.",116,{"inputs":[{"name":"self"},{"name":"gststacktraceflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",116,{"inputs":[{"name":"self"},{"name":"gststacktraceflags"}],"output":{"name":"gststacktraceflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",116,{"inputs":[{"name":"self"},{"name":"gststacktraceflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",116,{"inputs":[{"name":"self"},{"name":"gststacktraceflags"}],"output":{"name":"gststacktraceflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",116,{"inputs":[{"name":"self"},{"name":"gststacktraceflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",116,{"inputs":[{"name":"self"},{"name":"gststacktraceflags"}],"output":{"name":"gststacktraceflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",116,{"inputs":[{"name":"self"},{"name":"gststacktraceflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",116,{"inputs":[{"name":"self"}],"output":{"name":"gststacktraceflags"}}],[11,"extend","","",116,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",116,{"inputs":[{"name":"t"}],"output":{"name":"gststacktraceflags"}}],[11,"eq","","",117,{"inputs":[{"name":"self"},{"name":"gststreamflags"}],"output":{"name":"bool"}}],[11,"ne","","",117,{"inputs":[{"name":"self"},{"name":"gststreamflags"}],"output":{"name":"bool"}}],[11,"clone","","",117,{"inputs":[{"name":"self"}],"output":{"name":"gststreamflags"}}],[11,"partial_cmp","","",117,{"inputs":[{"name":"self"},{"name":"gststreamflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",117,{"inputs":[{"name":"self"},{"name":"gststreamflags"}],"output":{"name":"bool"}}],[11,"le","","",117,{"inputs":[{"name":"self"},{"name":"gststreamflags"}],"output":{"name":"bool"}}],[11,"gt","","",117,{"inputs":[{"name":"self"},{"name":"gststreamflags"}],"output":{"name":"bool"}}],[11,"ge","","",117,{"inputs":[{"name":"self"},{"name":"gststreamflags"}],"output":{"name":"bool"}}],[11,"cmp","","",117,{"inputs":[{"name":"self"},{"name":"gststreamflags"}],"output":{"name":"ordering"}}],[11,"hash","","",117,null],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",117,null],[18,"SPARSE","","",117,null],[18,"SELECT","","",117,null],[18,"UNSELECT","","",117,null],[11,"empty","","Returns an empty set of flags.",117,{"inputs":[],"output":{"name":"gststreamflags"}}],[11,"all","","Returns the set containing all flags.",117,{"inputs":[],"output":{"name":"gststreamflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",117,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",117,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gststreamflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",117,{"inputs":[{"name":"c_uint"}],"output":{"name":"gststreamflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",117,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",117,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",117,{"inputs":[{"name":"self"},{"name":"gststreamflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",117,{"inputs":[{"name":"self"},{"name":"gststreamflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",117,{"inputs":[{"name":"self"},{"name":"gststreamflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",117,{"inputs":[{"name":"self"},{"name":"gststreamflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",117,{"inputs":[{"name":"self"},{"name":"gststreamflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",117,{"inputs":[{"name":"self"},{"name":"gststreamflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",117,{"inputs":[{"name":"self"},{"name":"gststreamflags"}],"output":{"name":"gststreamflags"}}],[11,"bitor_assign","","Adds the set of flags.",117,{"inputs":[{"name":"self"},{"name":"gststreamflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",117,{"inputs":[{"name":"self"},{"name":"gststreamflags"}],"output":{"name":"gststreamflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",117,{"inputs":[{"name":"self"},{"name":"gststreamflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",117,{"inputs":[{"name":"self"},{"name":"gststreamflags"}],"output":{"name":"gststreamflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",117,{"inputs":[{"name":"self"},{"name":"gststreamflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",117,{"inputs":[{"name":"self"},{"name":"gststreamflags"}],"output":{"name":"gststreamflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",117,{"inputs":[{"name":"self"},{"name":"gststreamflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",117,{"inputs":[{"name":"self"}],"output":{"name":"gststreamflags"}}],[11,"extend","","",117,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",117,{"inputs":[{"name":"t"}],"output":{"name":"gststreamflags"}}],[11,"eq","","",118,{"inputs":[{"name":"self"},{"name":"gststreamtype"}],"output":{"name":"bool"}}],[11,"ne","","",118,{"inputs":[{"name":"self"},{"name":"gststreamtype"}],"output":{"name":"bool"}}],[11,"clone","","",118,{"inputs":[{"name":"self"}],"output":{"name":"gststreamtype"}}],[11,"partial_cmp","","",118,{"inputs":[{"name":"self"},{"name":"gststreamtype"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",118,{"inputs":[{"name":"self"},{"name":"gststreamtype"}],"output":{"name":"bool"}}],[11,"le","","",118,{"inputs":[{"name":"self"},{"name":"gststreamtype"}],"output":{"name":"bool"}}],[11,"gt","","",118,{"inputs":[{"name":"self"},{"name":"gststreamtype"}],"output":{"name":"bool"}}],[11,"ge","","",118,{"inputs":[{"name":"self"},{"name":"gststreamtype"}],"output":{"name":"bool"}}],[11,"cmp","","",118,{"inputs":[{"name":"self"},{"name":"gststreamtype"}],"output":{"name":"ordering"}}],[11,"hash","","",118,null],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"UNKNOWN","","",118,null],[18,"AUDIO","","",118,null],[18,"VIDEO","","",118,null],[18,"CONTAINER","","",118,null],[18,"TEXT","","",118,null],[11,"empty","","Returns an empty set of flags.",118,{"inputs":[],"output":{"name":"gststreamtype"}}],[11,"all","","Returns the set containing all flags.",118,{"inputs":[],"output":{"name":"gststreamtype"}}],[11,"bits","","Returns the raw value of the flags currently stored.",118,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",118,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gststreamtype"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",118,{"inputs":[{"name":"c_uint"}],"output":{"name":"gststreamtype"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",118,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",118,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",118,{"inputs":[{"name":"self"},{"name":"gststreamtype"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",118,{"inputs":[{"name":"self"},{"name":"gststreamtype"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",118,{"inputs":[{"name":"self"},{"name":"gststreamtype"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",118,{"inputs":[{"name":"self"},{"name":"gststreamtype"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",118,{"inputs":[{"name":"self"},{"name":"gststreamtype"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",118,{"inputs":[{"name":"self"},{"name":"gststreamtype"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",118,{"inputs":[{"name":"self"},{"name":"gststreamtype"}],"output":{"name":"gststreamtype"}}],[11,"bitor_assign","","Adds the set of flags.",118,{"inputs":[{"name":"self"},{"name":"gststreamtype"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",118,{"inputs":[{"name":"self"},{"name":"gststreamtype"}],"output":{"name":"gststreamtype"}}],[11,"bitxor_assign","","Toggles the set of flags.",118,{"inputs":[{"name":"self"},{"name":"gststreamtype"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",118,{"inputs":[{"name":"self"},{"name":"gststreamtype"}],"output":{"name":"gststreamtype"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",118,{"inputs":[{"name":"self"},{"name":"gststreamtype"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",118,{"inputs":[{"name":"self"},{"name":"gststreamtype"}],"output":{"name":"gststreamtype"}}],[11,"sub_assign","","Disables all flags enabled in the set.",118,{"inputs":[{"name":"self"},{"name":"gststreamtype"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",118,{"inputs":[{"name":"self"}],"output":{"name":"gststreamtype"}}],[11,"extend","","",118,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",118,{"inputs":[{"name":"t"}],"output":{"name":"gststreamtype"}}],[11,"eq","","",119,{"inputs":[{"name":"self"},{"name":"gsttracervalueflags"}],"output":{"name":"bool"}}],[11,"ne","","",119,{"inputs":[{"name":"self"},{"name":"gsttracervalueflags"}],"output":{"name":"bool"}}],[11,"clone","","",119,{"inputs":[{"name":"self"}],"output":{"name":"gsttracervalueflags"}}],[11,"partial_cmp","","",119,{"inputs":[{"name":"self"},{"name":"gsttracervalueflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",119,{"inputs":[{"name":"self"},{"name":"gsttracervalueflags"}],"output":{"name":"bool"}}],[11,"le","","",119,{"inputs":[{"name":"self"},{"name":"gsttracervalueflags"}],"output":{"name":"bool"}}],[11,"gt","","",119,{"inputs":[{"name":"self"},{"name":"gsttracervalueflags"}],"output":{"name":"bool"}}],[11,"ge","","",119,{"inputs":[{"name":"self"},{"name":"gsttracervalueflags"}],"output":{"name":"bool"}}],[11,"cmp","","",119,{"inputs":[{"name":"self"},{"name":"gsttracervalueflags"}],"output":{"name":"ordering"}}],[11,"hash","","",119,null],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",119,null],[18,"OPTIONAL","","",119,null],[18,"AGGREGATED","","",119,null],[11,"empty","","Returns an empty set of flags.",119,{"inputs":[],"output":{"name":"gsttracervalueflags"}}],[11,"all","","Returns the set containing all flags.",119,{"inputs":[],"output":{"name":"gsttracervalueflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",119,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",119,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gsttracervalueflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",119,{"inputs":[{"name":"c_uint"}],"output":{"name":"gsttracervalueflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",119,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",119,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",119,{"inputs":[{"name":"self"},{"name":"gsttracervalueflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",119,{"inputs":[{"name":"self"},{"name":"gsttracervalueflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",119,{"inputs":[{"name":"self"},{"name":"gsttracervalueflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",119,{"inputs":[{"name":"self"},{"name":"gsttracervalueflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",119,{"inputs":[{"name":"self"},{"name":"gsttracervalueflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",119,{"inputs":[{"name":"self"},{"name":"gsttracervalueflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",119,{"inputs":[{"name":"self"},{"name":"gsttracervalueflags"}],"output":{"name":"gsttracervalueflags"}}],[11,"bitor_assign","","Adds the set of flags.",119,{"inputs":[{"name":"self"},{"name":"gsttracervalueflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",119,{"inputs":[{"name":"self"},{"name":"gsttracervalueflags"}],"output":{"name":"gsttracervalueflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",119,{"inputs":[{"name":"self"},{"name":"gsttracervalueflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",119,{"inputs":[{"name":"self"},{"name":"gsttracervalueflags"}],"output":{"name":"gsttracervalueflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",119,{"inputs":[{"name":"self"},{"name":"gsttracervalueflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",119,{"inputs":[{"name":"self"},{"name":"gsttracervalueflags"}],"output":{"name":"gsttracervalueflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",119,{"inputs":[{"name":"self"},{"name":"gsttracervalueflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",119,{"inputs":[{"name":"self"}],"output":{"name":"gsttracervalueflags"}}],[11,"extend","","",119,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",119,{"inputs":[{"name":"t"}],"output":{"name":"gsttracervalueflags"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",123,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",130,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",131,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",137,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",138,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",139,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",140,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",141,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",142,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",143,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",144,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",145,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",146,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",147,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",148,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",149,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",150,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",151,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",152,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",153,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",154,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",155,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",156,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",157,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",158,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",159,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",160,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",161,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",162,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",163,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",164,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",165,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",166,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",167,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",168,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",169,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",170,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",171,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",172,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",173,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",174,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",175,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",176,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",177,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",178,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",179,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",180,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",181,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",182,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"GstAllocationParams"],[3,"GstAllocatorClass"],[3,"GstBinClass"],[3,"GstBuffer"],[3,"GstBufferPoolAcquireParams"],[3,"GstBufferPoolClass"],[3,"GstBusClass"],[3,"GstCaps"],[3,"GstChildProxyInterface"],[3,"GstClockClass"],[3,"GstClockEntry"],[3,"GstControlBindingClass"],[3,"GstControlSourceClass"],[3,"GstDebugCategory"],[3,"GstDeviceClass"],[3,"GstDeviceMonitorClass"],[3,"GstDeviceProviderClass"],[3,"GstElementClass"],[3,"GstEvent"],[3,"GstFormatDefinition"],[3,"GstGhostPadClass"],[3,"GstIterator"],[3,"GstMapInfo"],[3,"GstMemory"],[3,"GstMessage"],[3,"GstMeta"],[3,"GstMetaInfo"],[3,"GstMetaTransformCopy"],[3,"GstMiniObject"],[3,"GstObjectClass"],[3,"GstPadClass"],[3,"GstPadProbeInfo"],[3,"GstPadTemplateClass"],[3,"GstParamSpecArray"],[3,"GstParamSpecFraction"],[3,"GstParentBufferMeta"],[3,"GstPipelineClass"],[3,"GstPluginDesc"],[3,"GstPollFD"],[3,"GstPresetInterface"],[3,"GstProtectionMeta"],[3,"GstProxyPadClass"],[3,"GstQuery"],[3,"GstRegistryClass"],[3,"GstSegment"],[3,"GstStaticCaps"],[3,"GstStaticPadTemplate"],[3,"GstStreamClass"],[3,"GstStreamCollectionClass"],[3,"GstStructure"],[3,"GstSystemClockClass"],[3,"GstTagList"],[3,"GstTagSetterInterface"],[3,"GstTaskClass"],[3,"GstTaskPoolClass"],[3,"GstTimedValue"],[3,"GstTocSetterInterface"],[3,"GstTracerClass"],[3,"GstTypeFind"],[3,"GstURIHandlerInterface"],[3,"GstValueTable"],[3,"GstAllocator"],[3,"GstBin"],[3,"GstBufferPool"],[3,"GstBus"],[3,"GstClock"],[3,"GstControlBinding"],[3,"GstControlSource"],[3,"GstDevice"],[3,"GstDeviceMonitor"],[3,"GstDeviceProvider"],[3,"GstElement"],[3,"GstGhostPad"],[3,"GstObject"],[3,"GstPad"],[3,"GstPadTemplate"],[3,"GstPipeline"],[3,"GstProxyPad"],[3,"GstRegistry"],[3,"GstStream"],[3,"GstStreamCollection"],[3,"GstSystemClock"],[3,"GstTask"],[3,"GstTaskPool"],[3,"GstTracer"],[3,"GstAllocatorFlags"],[3,"GstBinFlags"],[3,"GstBufferCopyFlags"],[3,"GstBufferFlags"],[3,"GstBufferPoolAcquireFlags"],[3,"GstBusFlags"],[3,"GstCapsFlags"],[3,"GstClockFlags"],[3,"GstDebugColorFlags"],[3,"GstDebugGraphDetails"],[3,"GstElementFlags"],[3,"GstEventTypeFlags"],[3,"GstLockFlags"],[3,"GstMapFlags"],[3,"GstMemoryFlags"],[3,"GstMessageType"],[3,"GstMetaFlags"],[3,"GstMiniObjectFlags"],[3,"GstObjectFlags"],[3,"GstPadFlags"],[3,"GstPadLinkCheck"],[3,"GstPadProbeType"],[3,"GstPadTemplateFlags"],[3,"GstParseFlags"],[3,"GstPipelineFlags"],[3,"GstPluginDependencyFlags"],[3,"GstPluginFlags"],[3,"GstQueryTypeFlags"],[3,"GstSchedulingFlags"],[3,"GstSeekFlags"],[3,"GstSegmentFlags"],[3,"GstStackTraceFlags"],[3,"GstStreamFlags"],[3,"GstStreamType"],[3,"GstTracerValueFlags"],[3,"GstAllocatorPrivate"],[3,"GstAtomicQueue"],[3,"GstBinPrivate"],[3,"GstBufferList"],[3,"GstBufferPoolPrivate"],[3,"GstBusPrivate"],[3,"GstCapsFeatures"],[3,"GstClockPrivate"],[3,"GstContext"],[3,"GstControlBindingPrivate"],[3,"GstDateTime"],[3,"GstDebugMessage"],[3,"GstDeviceMonitorPrivate"],[3,"GstDevicePrivate"],[3,"GstDeviceProviderFactoryClass"],[3,"GstDeviceProviderPrivate"],[3,"GstDynamicTypeFactoryClass"],[3,"GstElementFactoryClass"],[3,"GstGhostPadPrivate"],[3,"GstPadPrivate"],[3,"GstParseContext"],[3,"GstPipelinePrivate"],[3,"GstPluginClass"],[3,"GstPluginFeatureClass"],[3,"GstPoll"],[3,"GstProxyPadPrivate"],[3,"GstRegistryPrivate"],[3,"GstSample"],[3,"GstStreamCollectionPrivate"],[3,"GstStreamPrivate"],[3,"GstSystemClockPrivate"],[3,"GstTaskPrivate"],[3,"GstToc"],[3,"GstTocEntry"],[3,"GstTracerFactoryClass"],[3,"GstTracerPrivate"],[3,"GstTracerRecordClass"],[3,"GstTypeFindFactoryClass"],[3,"GstUri"],[3,"GstBitmask"],[3,"GstDeviceProviderFactory"],[3,"GstDoubleRange"],[3,"GstDynamicTypeFactory"],[3,"GstElementFactory"],[3,"GstFlagSet"],[3,"GstFraction"],[3,"GstFractionRange"],[3,"GstInt64Range"],[3,"GstIntRange"],[3,"GstParamArray"],[3,"GstParamFraction"],[3,"GstPlugin"],[3,"GstPluginFeature"],[3,"GstTracerFactory"],[3,"GstTracerRecord"],[3,"GstTypeFindFactory"],[3,"GstValueArray"],[3,"GstValueList"],[3,"GstChildProxy"],[3,"GstPreset"],[3,"GstTagSetter"],[3,"GstTocSetter"],[3,"GstURIHandler"]]};
searchIndex["gstreamer_video"] = {"doc":"","items":[[8,"Cast","gstreamer_video","Upcasting and downcasting support.",null,null],[11,"upcast","","Upcasts an object to a superclass or interface `T`.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"downcast","","Tries to downcast to a subclass or interface implementor `T`.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"is","","Returns `true` if the object is an instance of (can be cast to) `T`.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"dynamic_cast","","Tries to cast to an object of type `T`. This handles upcasting, downcasting and casting between interface and interface implementors. All checks are performed at runtime, while `downcast` and `upcast` will do many checks at compile-time already.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[3,"Continue","","Continue calling the closure in the future iterations or drop it.",null,null],[12,"0","","",1,null],[3,"Error","","A generic error capable of representing various error domains (types).",null,null],[8,"IsA","","Declares the \"is a\" relationship.",null,null],[8,"StaticType","","Types that are supported by GLib dynamic typing.",null,null],[10,"static_type","","Returns the type identifier of `Self`.",2,{"inputs":[],"output":{"name":"type"}}],[8,"ToValue","","Converts to `Value`.",null,null],[10,"to_value","","Returns a `Value` clone of `self`.",3,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[10,"to_value_type","","Returns the type identifer of `self`.",3,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[4,"Type","","A GLib or GLib-based library type",null,null],[13,"Invalid","","An invalid `Type` used as error return value in some functions",4,null],[13,"Unit","","The fundamental type corresponding to the unit type `()`",4,null],[13,"I8","","The fundamental type corresponding to `i8`",4,null],[13,"U8","","The fundamental type corresponding to `u8`",4,null],[13,"Bool","","The fundamental type corresponding to `bool`",4,null],[13,"I32","","The fundamental type corresponding to `i32`",4,null],[13,"U32","","The fundamental type corresponding to `u32`",4,null],[13,"ILong","","The fundamental type corresponding to C `long`",4,null],[13,"ULong","","The fundamental type corresponding to C `unsigned long`",4,null],[13,"I64","","The fundamental type corresponding to `i64`",4,null],[13,"U64","","The fundamental type corresponding to `u64`",4,null],[13,"F32","","The fundamental type corresponding to `f32`",4,null],[13,"F64","","The fundamental type corresponding to `f64`",4,null],[13,"String","","The fundamental type corresponding to `String`",4,null],[13,"Pointer","","The fundamental type corresponding to a pointer",4,null],[13,"Variant","","The fundamental type of GVariant",4,null],[13,"BaseInterface","","The fundamental type from which all interfaces are derived",4,null],[13,"BaseEnum","","The fundamental type from which all enumeration types are derived",4,null],[13,"BaseFlags","","The fundamental type from which all flags types are derived",4,null],[13,"BaseBoxed","","The fundamental type from which all boxed types are derived",4,null],[13,"BaseParamSpec","","The fundamental type from which all `GParamSpec` types are derived",4,null],[13,"BaseObject","","The fundamental type from which all objects are derived",4,null],[13,"Other","","A non-fundamental type identified by value of type `usize`",4,null],[3,"TypedValue","","A statically typed `Value`.",null,null],[3,"Value","","A generic value capable of carrying various types.",null,null],[3,"VideoFilter","","",null,null],[3,"VideoOverlay","","The `VideoOverlay` interface is used for 2 main purposes :",null,null],[3,"VideoChromaSite","","",null,null],[3,"VideoFlags","","",null,null],[3,"VideoFormatFlags","","",null,null],[3,"VideoFrameFlags","","",null,null],[3,"VideoMultiviewFlags","","",null,null],[3,"VideoFormatInfo","","Information for a video format.",null,null],[3,"VideoColorimetry","","Structure describing the color info.",null,null],[3,"VideoInfo","","Information describing image properties. This information can be filled in from GstCaps with `VideoInfo::from_caps`. The information is also used to store the specific video info when mapping a video frame with `VideoFrame::map`.",null,null],[3,"VideoInfoBuilder","","",null,null],[3,"DownstreamForceKeyUnitEventBuilder","","",null,null],[3,"DownstreamForceKeyUnitEvent","","",null,null],[12,"timestamp","","",5,null],[12,"stream_time","","",5,null],[12,"running_time","","",5,null],[12,"all_headers","","",5,null],[12,"count","","",5,null],[3,"UpstreamForceKeyUnitEventBuilder","","",null,null],[3,"UpstreamForceKeyUnitEvent","","",null,null],[12,"running_time","","",6,null],[12,"all_headers","","",6,null],[12,"count","","",6,null],[3,"StillFrameEventBuilder","","",null,null],[3,"StillFrameEvent","","",null,null],[12,"in_still","","",7,null],[3,"VideoRectangle","","",null,null],[12,"x","","",8,null],[12,"y","","",8,null],[12,"w","","",8,null],[12,"h","","",8,null],[4,"VideoColorMatrix","","The color matrix is used to convert between Y'PbPr and non-linear RGB (R'G'B')",null,null],[13,"Unknown","","",9,null],[13,"Rgb","","",9,null],[13,"Fcc","","",9,null],[13,"Bt709","","",9,null],[13,"Bt601","","",9,null],[13,"Smpte240m","","",9,null],[13,"Bt2020","","",9,null],[4,"VideoColorPrimaries","","The color primaries define the how to transform linear RGB values to and from the CIE XYZ colorspace.",null,null],[13,"Unknown","","",10,null],[13,"Bt709","","",10,null],[13,"Bt470m","","",10,null],[13,"Bt470bg","","",10,null],[13,"Smpte170m","","",10,null],[13,"Smpte240m","","",10,null],[13,"Film","","",10,null],[13,"Bt2020","","",10,null],[13,"Adobergb","","",10,null],[4,"VideoFieldOrder","","Field order of interlaced content. This is only valid for interlace-mode=interleaved and not interlace-mode=mixed. In the case of mixed or GST_VIDEO_FIELD_ORDER_UNKOWN, the field order is signalled via buffer flags.",null,null],[13,"Unknown","","",11,null],[13,"TopFieldFirst","","",11,null],[13,"BottomFieldFirst","","",11,null],[4,"VideoFormat","","Enum value describing the most common video formats.",null,null],[13,"Unknown","","",12,null],[13,"Encoded","","",12,null],[13,"I420","","",12,null],[13,"Yv12","","",12,null],[13,"Yuy2","","",12,null],[13,"Uyvy","","",12,null],[13,"Ayuv","","",12,null],[13,"Rgbx","","",12,null],[13,"Bgrx","","",12,null],[13,"Xrgb","","",12,null],[13,"Xbgr","","",12,null],[13,"Rgba","","",12,null],[13,"Bgra","","",12,null],[13,"Argb","","",12,null],[13,"Abgr","","",12,null],[13,"Rgb","","",12,null],[13,"Bgr","","",12,null],[13,"Y41b","","",12,null],[13,"Y42b","","",12,null],[13,"Yvyu","","",12,null],[13,"Y444","","",12,null],[13,"V210","","",12,null],[13,"V216","","",12,null],[13,"Nv12","","",12,null],[13,"Nv21","","",12,null],[13,"Gray8","","",12,null],[13,"Gray16Be","","",12,null],[13,"Gray16Le","","",12,null],[13,"V308","","",12,null],[13,"Rgb16","","",12,null],[13,"Bgr16","","",12,null],[13,"Rgb15","","",12,null],[13,"Bgr15","","",12,null],[13,"Uyvp","","",12,null],[13,"A420","","",12,null],[13,"Rgb8p","","",12,null],[13,"Yuv9","","",12,null],[13,"Yvu9","","",12,null],[13,"Iyu1","","",12,null],[13,"Argb64","","",12,null],[13,"Ayuv64","","",12,null],[13,"R210","","",12,null],[13,"I42010be","","",12,null],[13,"I42010le","","",12,null],[13,"I42210be","","",12,null],[13,"I42210le","","",12,null],[13,"Y44410be","","",12,null],[13,"Y44410le","","",12,null],[13,"Gbr","","",12,null],[13,"Gbr10be","","",12,null],[13,"Gbr10le","","",12,null],[13,"Nv16","","",12,null],[13,"Nv24","","",12,null],[13,"Nv1264z32","","",12,null],[13,"A42010be","","",12,null],[13,"A42010le","","",12,null],[13,"A42210be","","",12,null],[13,"A42210le","","",12,null],[13,"A44410be","","",12,null],[13,"A44410le","","",12,null],[13,"Nv61","","",12,null],[13,"P01010be","","",12,null],[13,"P01010le","","",12,null],[13,"Iyu2","","",12,null],[13,"Vyuy","","",12,null],[13,"Gbra","","",12,null],[13,"Gbra10be","","",12,null],[13,"Gbra10le","","",12,null],[13,"Gbr12be","","",12,null],[13,"Gbr12le","","",12,null],[13,"Gbra12be","","",12,null],[13,"Gbra12le","","",12,null],[13,"I42012be","","",12,null],[13,"I42012le","","",12,null],[13,"I42212be","","",12,null],[13,"I42212le","","",12,null],[13,"Y44412be","","",12,null],[13,"Y44412le","","",12,null],[4,"VideoInterlaceMode","","The possible values of the `VideoInterlaceMode` describing the interlace mode of the stream.",null,null],[13,"Progressive","","",13,null],[13,"Interleaved","","",13,null],[13,"Mixed","","",13,null],[13,"Fields","","",13,null],[4,"VideoMultiviewFramePacking","","`VideoMultiviewFramePacking` represents the subset of `VideoMultiviewMode` values that can be applied to any video frame without needing extra metadata. It can be used by elements that provide a property to override the multiview interpretation of a video stream when the video doesn't contain any markers.",null,null],[13,"None","","",14,null],[13,"Mono","","",14,null],[13,"Left","","",14,null],[13,"Right","","",14,null],[13,"SideBySide","","",14,null],[13,"SideBySideQuincunx","","",14,null],[13,"ColumnInterleaved","","",14,null],[13,"RowInterleaved","","",14,null],[13,"TopBottom","","",14,null],[13,"Checkerboard","","",14,null],[4,"VideoMultiviewMode","","All possible stereoscopic 3D and multiview representations. In conjunction with `VideoMultiviewFlags`, describes how multiview content is being transported in the stream.",null,null],[13,"None","","",15,null],[13,"Mono","","",15,null],[13,"Left","","",15,null],[13,"Right","","",15,null],[13,"SideBySide","","",15,null],[13,"SideBySideQuincunx","","",15,null],[13,"ColumnInterleaved","","",15,null],[13,"RowInterleaved","","",15,null],[13,"TopBottom","","",15,null],[13,"Checkerboard","","",15,null],[13,"FrameByFrame","","",15,null],[13,"MultiviewFrameByFrame","","",15,null],[13,"Separated","","",15,null],[4,"VideoTileMode","","Enum value describing the available tiling modes.",null,null],[13,"Unknown","","",16,null],[13,"Zflipz2x2","","",16,null],[4,"VideoTransferFunction","","The video transfer function defines the formula for converting between non-linear RGB (R'G'B') and linear RGB",null,null],[13,"Unknown","","",17,null],[13,"Gamma10","","",17,null],[13,"Gamma18","","",17,null],[13,"Gamma20","","",17,null],[13,"Gamma22","","",17,null],[13,"Bt709","","",17,null],[13,"Smpte240m","","",17,null],[13,"Srgb","","",17,null],[13,"Gamma28","","",17,null],[13,"Log100","","",17,null],[13,"Log316","","",17,null],[13,"Bt202012","","",17,null],[13,"Adobergb","","",17,null],[4,"VideoEndianness","","",null,null],[13,"Unknown","","",18,null],[13,"LittleEndian","","",18,null],[13,"BigEndian","","",18,null],[4,"VideoColorRange","","Possible color range values. These constants are defined for 8 bit color values and can be scaled for other bit depths.",null,null],[13,"Unknown","","",19,null],[13,"Range0255","","",19,null],[13,"Range16235","","",19,null],[4,"ForceKeyUnitEvent","","",null,null],[13,"Downstream","","",20,null],[13,"Upstream","","",20,null],[5,"is_force_key_unit_event","","",null,{"inputs":[{"name":"eventref"}],"output":{"name":"bool"}}],[5,"new_downstream_force_key_unit_event","","",null,{"inputs":[],"output":{"name":"downstreamforcekeyuniteventbuilder"}}],[5,"parse_downstream_force_key_unit_event","","",null,{"inputs":[{"name":"eventref"}],"output":{"generics":["downstreamforcekeyunitevent"],"name":"option"}}],[5,"new_upstream_force_key_unit_event","","",null,{"inputs":[],"output":{"name":"upstreamforcekeyuniteventbuilder"}}],[5,"parse_upstream_force_key_unit_event","","",null,{"inputs":[{"name":"eventref"}],"output":{"generics":["upstreamforcekeyunitevent"],"name":"option"}}],[5,"parse_force_key_unit_event","","",null,{"inputs":[{"name":"eventref"}],"output":{"generics":["forcekeyunitevent"],"name":"option"}}],[5,"new_still_frame_event","","",null,{"inputs":[{"name":"bool"}],"output":{"name":"stillframeeventbuilder"}}],[5,"parse_still_frame_event","","",null,{"inputs":[{"name":"eventref"}],"output":{"generics":["stillframeevent"],"name":"option"}}],[5,"convert_sample","","",null,{"inputs":[{"name":"sample"},{"name":"caps"},{"name":"clocktime"}],"output":{"generics":["sample","error"],"name":"result"}}],[5,"convert_sample_async","","",null,{"inputs":[{"name":"sample"},{"name":"caps"},{"name":"clocktime"},{"name":"f"}],"output":null}],[5,"center_video_rectangle","","",null,{"inputs":[{"name":"videorectangle"},{"name":"videorectangle"},{"name":"bool"}],"output":{"name":"videorectangle"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"videofilter"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",21,null],[11,"static_type","","",21,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"videooverlay"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",22,null],[11,"static_type","","",22,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"videocolormatrix"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"videocolormatrix"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"videocolormatrix"}],"output":{"name":"bool"}}],[11,"hash","","",9,null],[11,"static_type","","",9,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",9,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",9,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",9,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"videocolorprimaries"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"videocolorprimaries"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"videocolorprimaries"}],"output":{"name":"bool"}}],[11,"hash","","",10,null],[11,"static_type","","",10,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",10,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",10,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",10,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"videofieldorder"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"videofieldorder"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"videofieldorder"}],"output":{"name":"bool"}}],[11,"hash","","",11,null],[11,"static_type","","",11,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",11,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",11,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",11,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"videoformat"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"videoformat"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"videoformat"}],"output":{"name":"bool"}}],[11,"hash","","",12,null],[11,"static_type","","",12,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",12,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",12,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",12,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"videointerlacemode"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"videointerlacemode"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"videointerlacemode"}],"output":{"name":"bool"}}],[11,"hash","","",13,null],[11,"static_type","","",13,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",13,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",13,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",13,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"videomultiviewframepacking"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"videomultiviewframepacking"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"videomultiviewframepacking"}],"output":{"name":"bool"}}],[11,"hash","","",14,null],[11,"static_type","","",14,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",14,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",14,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",14,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"videomultiviewmode"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"videomultiviewmode"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"videomultiviewmode"}],"output":{"name":"bool"}}],[11,"hash","","",15,null],[11,"static_type","","",15,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",15,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",15,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",15,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"videotilemode"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"videotilemode"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"videotilemode"}],"output":{"name":"bool"}}],[11,"hash","","",16,null],[11,"static_type","","",16,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",16,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",16,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",16,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"videotransferfunction"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"videotransferfunction"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"videotransferfunction"}],"output":{"name":"bool"}}],[11,"hash","","",17,null],[11,"static_type","","",17,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",17,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",17,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",17,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"videochromasite"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"videochromasite"}],"output":{"name":"bool"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"videochromasite"}}],[11,"partial_cmp","","",23,{"inputs":[{"name":"self"},{"name":"videochromasite"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",23,{"inputs":[{"name":"self"},{"name":"videochromasite"}],"output":{"name":"bool"}}],[11,"le","","",23,{"inputs":[{"name":"self"},{"name":"videochromasite"}],"output":{"name":"bool"}}],[11,"gt","","",23,{"inputs":[{"name":"self"},{"name":"videochromasite"}],"output":{"name":"bool"}}],[11,"ge","","",23,{"inputs":[{"name":"self"},{"name":"videochromasite"}],"output":{"name":"bool"}}],[11,"cmp","","",23,{"inputs":[{"name":"self"},{"name":"videochromasite"}],"output":{"name":"ordering"}}],[11,"hash","","",23,null],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"UNKNOWN","","",23,null],[18,"NONE","","",23,null],[18,"H_COSITED","","",23,null],[18,"V_COSITED","","",23,null],[18,"ALT_LINE","","",23,null],[18,"COSITED","","",23,null],[18,"JPEG","","",23,null],[18,"MPEG2","","",23,null],[18,"DV","","",23,null],[11,"empty","","Returns an empty set of flags.",23,{"inputs":[],"output":{"name":"videochromasite"}}],[11,"all","","Returns the set containing all flags.",23,{"inputs":[],"output":{"name":"videochromasite"}}],[11,"bits","","Returns the raw value of the flags currently stored.",23,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",23,{"inputs":[{"name":"u32"}],"output":{"generics":["videochromasite"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",23,{"inputs":[{"name":"u32"}],"output":{"name":"videochromasite"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",23,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",23,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",23,{"inputs":[{"name":"self"},{"name":"videochromasite"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",23,{"inputs":[{"name":"self"},{"name":"videochromasite"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",23,{"inputs":[{"name":"self"},{"name":"videochromasite"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",23,{"inputs":[{"name":"self"},{"name":"videochromasite"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",23,{"inputs":[{"name":"self"},{"name":"videochromasite"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",23,{"inputs":[{"name":"self"},{"name":"videochromasite"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",23,{"inputs":[{"name":"self"},{"name":"videochromasite"}],"output":{"name":"videochromasite"}}],[11,"bitor_assign","","Adds the set of flags.",23,{"inputs":[{"name":"self"},{"name":"videochromasite"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",23,{"inputs":[{"name":"self"},{"name":"videochromasite"}],"output":{"name":"videochromasite"}}],[11,"bitxor_assign","","Toggles the set of flags.",23,{"inputs":[{"name":"self"},{"name":"videochromasite"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",23,{"inputs":[{"name":"self"},{"name":"videochromasite"}],"output":{"name":"videochromasite"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",23,{"inputs":[{"name":"self"},{"name":"videochromasite"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",23,{"inputs":[{"name":"self"},{"name":"videochromasite"}],"output":{"name":"videochromasite"}}],[11,"sub_assign","","Disables all flags enabled in the set.",23,{"inputs":[{"name":"self"},{"name":"videochromasite"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",23,{"inputs":[{"name":"self"}],"output":{"name":"videochromasite"}}],[11,"extend","","",23,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",23,{"inputs":[{"name":"t"}],"output":{"name":"videochromasite"}}],[11,"static_type","","",23,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",23,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",23,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",23,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"videoflags"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"videoflags"}],"output":{"name":"bool"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"videoflags"}}],[11,"partial_cmp","","",24,{"inputs":[{"name":"self"},{"name":"videoflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",24,{"inputs":[{"name":"self"},{"name":"videoflags"}],"output":{"name":"bool"}}],[11,"le","","",24,{"inputs":[{"name":"self"},{"name":"videoflags"}],"output":{"name":"bool"}}],[11,"gt","","",24,{"inputs":[{"name":"self"},{"name":"videoflags"}],"output":{"name":"bool"}}],[11,"ge","","",24,{"inputs":[{"name":"self"},{"name":"videoflags"}],"output":{"name":"bool"}}],[11,"cmp","","",24,{"inputs":[{"name":"self"},{"name":"videoflags"}],"output":{"name":"ordering"}}],[11,"hash","","",24,null],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",24,null],[18,"VARIABLE_FPS","","",24,null],[18,"PREMULTIPLIED_ALPHA","","",24,null],[11,"empty","","Returns an empty set of flags.",24,{"inputs":[],"output":{"name":"videoflags"}}],[11,"all","","Returns the set containing all flags.",24,{"inputs":[],"output":{"name":"videoflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",24,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",24,{"inputs":[{"name":"u32"}],"output":{"generics":["videoflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",24,{"inputs":[{"name":"u32"}],"output":{"name":"videoflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",24,{"inputs":[{"name":"self"},{"name":"videoflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",24,{"inputs":[{"name":"self"},{"name":"videoflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",24,{"inputs":[{"name":"self"},{"name":"videoflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",24,{"inputs":[{"name":"self"},{"name":"videoflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",24,{"inputs":[{"name":"self"},{"name":"videoflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",24,{"inputs":[{"name":"self"},{"name":"videoflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",24,{"inputs":[{"name":"self"},{"name":"videoflags"}],"output":{"name":"videoflags"}}],[11,"bitor_assign","","Adds the set of flags.",24,{"inputs":[{"name":"self"},{"name":"videoflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",24,{"inputs":[{"name":"self"},{"name":"videoflags"}],"output":{"name":"videoflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",24,{"inputs":[{"name":"self"},{"name":"videoflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",24,{"inputs":[{"name":"self"},{"name":"videoflags"}],"output":{"name":"videoflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",24,{"inputs":[{"name":"self"},{"name":"videoflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",24,{"inputs":[{"name":"self"},{"name":"videoflags"}],"output":{"name":"videoflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",24,{"inputs":[{"name":"self"},{"name":"videoflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",24,{"inputs":[{"name":"self"}],"output":{"name":"videoflags"}}],[11,"extend","","",24,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",24,{"inputs":[{"name":"t"}],"output":{"name":"videoflags"}}],[11,"static_type","","",24,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",24,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",24,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",24,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"videoformatflags"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"videoformatflags"}],"output":{"name":"bool"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"videoformatflags"}}],[11,"partial_cmp","","",25,{"inputs":[{"name":"self"},{"name":"videoformatflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",25,{"inputs":[{"name":"self"},{"name":"videoformatflags"}],"output":{"name":"bool"}}],[11,"le","","",25,{"inputs":[{"name":"self"},{"name":"videoformatflags"}],"output":{"name":"bool"}}],[11,"gt","","",25,{"inputs":[{"name":"self"},{"name":"videoformatflags"}],"output":{"name":"bool"}}],[11,"ge","","",25,{"inputs":[{"name":"self"},{"name":"videoformatflags"}],"output":{"name":"bool"}}],[11,"cmp","","",25,{"inputs":[{"name":"self"},{"name":"videoformatflags"}],"output":{"name":"ordering"}}],[11,"hash","","",25,null],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"YUV","","",25,null],[18,"RGB","","",25,null],[18,"GRAY","","",25,null],[18,"ALPHA","","",25,null],[18,"LE","","",25,null],[18,"PALETTE","","",25,null],[18,"COMPLEX","","",25,null],[18,"UNPACK","","",25,null],[18,"TILED","","",25,null],[11,"empty","","Returns an empty set of flags.",25,{"inputs":[],"output":{"name":"videoformatflags"}}],[11,"all","","Returns the set containing all flags.",25,{"inputs":[],"output":{"name":"videoformatflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",25,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",25,{"inputs":[{"name":"u32"}],"output":{"generics":["videoformatflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",25,{"inputs":[{"name":"u32"}],"output":{"name":"videoformatflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",25,{"inputs":[{"name":"self"},{"name":"videoformatflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",25,{"inputs":[{"name":"self"},{"name":"videoformatflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",25,{"inputs":[{"name":"self"},{"name":"videoformatflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",25,{"inputs":[{"name":"self"},{"name":"videoformatflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",25,{"inputs":[{"name":"self"},{"name":"videoformatflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",25,{"inputs":[{"name":"self"},{"name":"videoformatflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",25,{"inputs":[{"name":"self"},{"name":"videoformatflags"}],"output":{"name":"videoformatflags"}}],[11,"bitor_assign","","Adds the set of flags.",25,{"inputs":[{"name":"self"},{"name":"videoformatflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",25,{"inputs":[{"name":"self"},{"name":"videoformatflags"}],"output":{"name":"videoformatflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",25,{"inputs":[{"name":"self"},{"name":"videoformatflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",25,{"inputs":[{"name":"self"},{"name":"videoformatflags"}],"output":{"name":"videoformatflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",25,{"inputs":[{"name":"self"},{"name":"videoformatflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",25,{"inputs":[{"name":"self"},{"name":"videoformatflags"}],"output":{"name":"videoformatflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",25,{"inputs":[{"name":"self"},{"name":"videoformatflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",25,{"inputs":[{"name":"self"}],"output":{"name":"videoformatflags"}}],[11,"extend","","",25,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",25,{"inputs":[{"name":"t"}],"output":{"name":"videoformatflags"}}],[11,"static_type","","",25,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",25,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",25,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",25,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"videoframeflags"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"videoframeflags"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"videoframeflags"}}],[11,"partial_cmp","","",26,{"inputs":[{"name":"self"},{"name":"videoframeflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",26,{"inputs":[{"name":"self"},{"name":"videoframeflags"}],"output":{"name":"bool"}}],[11,"le","","",26,{"inputs":[{"name":"self"},{"name":"videoframeflags"}],"output":{"name":"bool"}}],[11,"gt","","",26,{"inputs":[{"name":"self"},{"name":"videoframeflags"}],"output":{"name":"bool"}}],[11,"ge","","",26,{"inputs":[{"name":"self"},{"name":"videoframeflags"}],"output":{"name":"bool"}}],[11,"cmp","","",26,{"inputs":[{"name":"self"},{"name":"videoframeflags"}],"output":{"name":"ordering"}}],[11,"hash","","",26,null],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",26,null],[18,"INTERLACED","","",26,null],[18,"TFF","","",26,null],[18,"RFF","","",26,null],[18,"ONEFIELD","","",26,null],[18,"MULTIPLE_VIEW","","",26,null],[18,"FIRST_IN_BUNDLE","","",26,null],[11,"empty","","Returns an empty set of flags.",26,{"inputs":[],"output":{"name":"videoframeflags"}}],[11,"all","","Returns the set containing all flags.",26,{"inputs":[],"output":{"name":"videoframeflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",26,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",26,{"inputs":[{"name":"u32"}],"output":{"generics":["videoframeflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",26,{"inputs":[{"name":"u32"}],"output":{"name":"videoframeflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",26,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",26,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",26,{"inputs":[{"name":"self"},{"name":"videoframeflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",26,{"inputs":[{"name":"self"},{"name":"videoframeflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",26,{"inputs":[{"name":"self"},{"name":"videoframeflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",26,{"inputs":[{"name":"self"},{"name":"videoframeflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",26,{"inputs":[{"name":"self"},{"name":"videoframeflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",26,{"inputs":[{"name":"self"},{"name":"videoframeflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",26,{"inputs":[{"name":"self"},{"name":"videoframeflags"}],"output":{"name":"videoframeflags"}}],[11,"bitor_assign","","Adds the set of flags.",26,{"inputs":[{"name":"self"},{"name":"videoframeflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",26,{"inputs":[{"name":"self"},{"name":"videoframeflags"}],"output":{"name":"videoframeflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",26,{"inputs":[{"name":"self"},{"name":"videoframeflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",26,{"inputs":[{"name":"self"},{"name":"videoframeflags"}],"output":{"name":"videoframeflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",26,{"inputs":[{"name":"self"},{"name":"videoframeflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",26,{"inputs":[{"name":"self"},{"name":"videoframeflags"}],"output":{"name":"videoframeflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",26,{"inputs":[{"name":"self"},{"name":"videoframeflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",26,{"inputs":[{"name":"self"}],"output":{"name":"videoframeflags"}}],[11,"extend","","",26,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",26,{"inputs":[{"name":"t"}],"output":{"name":"videoframeflags"}}],[11,"static_type","","",26,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",26,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",26,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",26,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"videomultiviewflags"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"videomultiviewflags"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"videomultiviewflags"}}],[11,"partial_cmp","","",27,{"inputs":[{"name":"self"},{"name":"videomultiviewflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",27,{"inputs":[{"name":"self"},{"name":"videomultiviewflags"}],"output":{"name":"bool"}}],[11,"le","","",27,{"inputs":[{"name":"self"},{"name":"videomultiviewflags"}],"output":{"name":"bool"}}],[11,"gt","","",27,{"inputs":[{"name":"self"},{"name":"videomultiviewflags"}],"output":{"name":"bool"}}],[11,"ge","","",27,{"inputs":[{"name":"self"},{"name":"videomultiviewflags"}],"output":{"name":"bool"}}],[11,"cmp","","",27,{"inputs":[{"name":"self"},{"name":"videomultiviewflags"}],"output":{"name":"ordering"}}],[11,"hash","","",27,null],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",27,null],[18,"RIGHT_VIEW_FIRST","","",27,null],[18,"LEFT_FLIPPED","","",27,null],[18,"LEFT_FLOPPED","","",27,null],[18,"RIGHT_FLIPPED","","",27,null],[18,"RIGHT_FLOPPED","","",27,null],[18,"HALF_ASPECT","","",27,null],[18,"MIXED_MONO","","",27,null],[11,"empty","","Returns an empty set of flags.",27,{"inputs":[],"output":{"name":"videomultiviewflags"}}],[11,"all","","Returns the set containing all flags.",27,{"inputs":[],"output":{"name":"videomultiviewflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",27,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",27,{"inputs":[{"name":"u32"}],"output":{"generics":["videomultiviewflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",27,{"inputs":[{"name":"u32"}],"output":{"name":"videomultiviewflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",27,{"inputs":[{"name":"self"},{"name":"videomultiviewflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",27,{"inputs":[{"name":"self"},{"name":"videomultiviewflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",27,{"inputs":[{"name":"self"},{"name":"videomultiviewflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",27,{"inputs":[{"name":"self"},{"name":"videomultiviewflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",27,{"inputs":[{"name":"self"},{"name":"videomultiviewflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",27,{"inputs":[{"name":"self"},{"name":"videomultiviewflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",27,{"inputs":[{"name":"self"},{"name":"videomultiviewflags"}],"output":{"name":"videomultiviewflags"}}],[11,"bitor_assign","","Adds the set of flags.",27,{"inputs":[{"name":"self"},{"name":"videomultiviewflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",27,{"inputs":[{"name":"self"},{"name":"videomultiviewflags"}],"output":{"name":"videomultiviewflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",27,{"inputs":[{"name":"self"},{"name":"videomultiviewflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",27,{"inputs":[{"name":"self"},{"name":"videomultiviewflags"}],"output":{"name":"videomultiviewflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",27,{"inputs":[{"name":"self"},{"name":"videomultiviewflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",27,{"inputs":[{"name":"self"},{"name":"videomultiviewflags"}],"output":{"name":"videomultiviewflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",27,{"inputs":[{"name":"self"},{"name":"videomultiviewflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",27,{"inputs":[{"name":"self"}],"output":{"name":"videomultiviewflags"}}],[11,"extend","","",27,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",27,{"inputs":[{"name":"t"}],"output":{"name":"videomultiviewflags"}}],[11,"static_type","","",27,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",27,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",27,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",27,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"videoendianness"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"videoendianness"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",18,null],[11,"from_glib","","",18,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"to_glib","","",18,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_string","","",12,{"inputs":[{"name":"str"}],"output":{"name":"videoformat"}}],[11,"from_fourcc","","",12,{"inputs":[{"name":"u32"}],"output":{"name":"videoformat"}}],[11,"from_masks","","",12,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"videoendianness"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"videoformat"}}],[11,"to_string","","",12,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from_str","","",12,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from_format","","",28,{"inputs":[{"name":"videoformat"}],"output":{"name":"videoformatinfo"}}],[11,"format","","",28,{"inputs":[{"name":"self"}],"output":{"name":"videoformat"}}],[11,"name","","",28,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",28,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"flags","","",28,{"inputs":[{"name":"self"}],"output":{"name":"videoformatflags"}}],[11,"bits","","",28,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"n_components","","",28,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"shift","","",28,null],[11,"depth","","",28,null],[11,"pixel_stride","","",28,null],[11,"n_planes","","",28,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"plane","","",28,null],[11,"poffset","","",28,null],[11,"w_sub","","",28,null],[11,"h_sub","","",28,null],[11,"tile_mode","","",28,{"inputs":[{"name":"self"}],"output":{"name":"videotilemode"}}],[11,"tile_ws","","",28,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"tile_hs","","",28,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"unpack_format","","",28,{"inputs":[{"name":"self"}],"output":{"name":"videoformat"}}],[11,"pack_lines","","",28,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"has_alpha","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_palette","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_complex","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_gray","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_le","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_rgb","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_tiled","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_yuv","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"scale_width","","",28,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"scale_height","","",28,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from_str","","",28,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from","","",28,{"inputs":[{"name":"videoformat"}],"output":{"name":"self"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"videocolorrange"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"videocolorrange"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"videocolorrange"}],"output":{"name":"bool"}}],[11,"hash","","",19,null],[11,"static_type","","",19,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",19,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",19,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",19,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"new","","",29,{"inputs":[{"name":"videocolorrange"},{"name":"videocolormatrix"},{"name":"videotransferfunction"},{"name":"videocolorprimaries"}],"output":{"name":"self"}}],[11,"to_string","","Make a string representation of `self`.",29,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"from_string","","Parse the colorimetry string and update `self` with the parsed values. ## `color` a colorimetry string",29,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"from_str","","",29,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from","","",15,{"inputs":[{"name":"videomultiviewframepacking"}],"output":{"name":"self"}}],[11,"try_from","","",14,{"inputs":[{"name":"videomultiviewmode"}],"output":{"generics":["videomultiviewframepacking","videomultiviewmode"],"name":"result"}}],[11,"build","","",30,{"inputs":[{"name":"self"}],"output":{"generics":["videoinfo"],"name":"option"}}],[11,"interlace_mode","","",30,{"inputs":[{"name":"self"},{"name":"videointerlacemode"}],"output":{"name":"videoinfobuilder"}}],[11,"flags","","",30,{"inputs":[{"name":"self"},{"name":"videoflags"}],"output":{"name":"self"}}],[11,"size","","",30,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"views","","",30,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"chroma_site","","",30,{"inputs":[{"name":"self"},{"name":"videochromasite"}],"output":{"name":"self"}}],[11,"colorimetry","","",30,{"inputs":[{"name":"self"},{"name":"videocolorimetry"}],"output":{"name":"videoinfobuilder"}}],[11,"par","","",30,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"fps","","",30,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"offset","","",30,null],[11,"stride","","",30,null],[11,"multiview_mode","","",30,{"inputs":[{"name":"self"},{"name":"videomultiviewmode"}],"output":{"name":"self"}}],[11,"multiview_flags","","",30,{"inputs":[{"name":"self"},{"name":"videomultiviewflags"}],"output":{"name":"self"}}],[11,"field_order","","",30,{"inputs":[{"name":"self"},{"name":"videofieldorder"}],"output":{"name":"self"}}],[11,"new","","Allocate a new `VideoInfo` that is also initialized with `VideoInfo::init`.",31,{"inputs":[{"name":"videoformat"},{"name":"u32"},{"name":"u32"}],"output":{"name":"videoinfobuilder"}}],[11,"from_caps","","",31,{"inputs":[{"name":"capsref"}],"output":{"name":"option"}}],[11,"to_caps","","",31,{"inputs":[{"name":"self"}],"output":{"generics":["caps"],"name":"option"}}],[11,"format","","",31,{"inputs":[{"name":"self"}],"output":{"name":"videoformat"}}],[11,"format_info","","",31,{"inputs":[{"name":"self"}],"output":{"name":"videoformatinfo"}}],[11,"width","","",31,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","",31,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"interlace_mode","","",31,{"inputs":[{"name":"self"}],"output":{"name":"videointerlacemode"}}],[11,"flags","","",31,{"inputs":[{"name":"self"}],"output":{"name":"videoflags"}}],[11,"size","","",31,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"views","","",31,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"chroma_site","","",31,{"inputs":[{"name":"self"}],"output":{"name":"videochromasite"}}],[11,"colorimetry","","",31,{"inputs":[{"name":"self"}],"output":{"name":"videocolorimetry"}}],[11,"par","","",31,{"inputs":[{"name":"self"}],"output":{"name":"fraction"}}],[11,"fps","","",31,{"inputs":[{"name":"self"}],"output":{"name":"fraction"}}],[11,"offset","","",31,null],[11,"stride","","",31,null],[11,"multiview_mode","","",31,{"inputs":[{"name":"self"}],"output":{"name":"videomultiviewmode"}}],[11,"multiview_flags","","",31,{"inputs":[{"name":"self"}],"output":{"name":"videomultiviewflags"}}],[11,"field_order","","",31,{"inputs":[{"name":"self"}],"output":{"name":"videofieldorder"}}],[11,"has_alpha","","",31,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_gray","","",31,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_rgb","","",31,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_yuv","","",31,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_interlaced","","",31,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"n_planes","","",31,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"n_components","","",31,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"convert","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"option"}}],[11,"convert_generic","","",31,{"inputs":[{"name":"self"},{"name":"v"},{"name":"format"}],"output":{"generics":["genericformattedvalue"],"name":"option"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"static_type","","",31,{"inputs":[],"output":{"name":"type"}}],[11,"to_string","","",11,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"from_string","","",11,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from_str","","",11,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"to_string","","",13,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"from_string","","",13,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from_str","","",13,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[0,"video_frame","","",null,null],[3,"Readable","gstreamer_video::video_frame","",null,null],[3,"Writable","","",null,null],[3,"VideoFrame","","A video frame obtained from `VideoFrame::map`",null,null],[3,"VideoFrameRef","","",null,null],[11,"info","","",32,{"inputs":[{"name":"self"}],"output":{"name":"videoinfo"}}],[11,"flags","","",32,{"inputs":[{"name":"self"}],"output":{"name":"videoframeflags"}}],[11,"id","","",32,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"into_buffer","","",32,{"inputs":[{"name":"self"}],"output":{"name":"buffer"}}],[11,"copy","","",32,{"inputs":[{"name":"self"},{"name":"videoframe"}],"output":{"generics":["boolerror"],"name":"result"}}],[11,"copy_plane","","",32,{"inputs":[{"name":"self"},{"name":"videoframe"},{"name":"u32"}],"output":{"generics":["boolerror"],"name":"result"}}],[11,"format","","",32,{"inputs":[{"name":"self"}],"output":{"name":"videoformat"}}],[11,"format_info","","",32,{"inputs":[{"name":"self"}],"output":{"name":"videoformatinfo"}}],[11,"width","","",32,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","",32,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"size","","",32,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_interlaced","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_tff","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_rff","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_onefield","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"n_planes","","",32,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"n_components","","",32,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"plane_stride","","",32,null],[11,"plane_offset","","",32,null],[11,"buffer","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bufferref"}}],[11,"plane_data","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"drop","","",32,{"inputs":[{"name":"self"}],"output":null}],[11,"from_buffer_readable","","",32,{"inputs":[{"name":"buffer"},{"name":"videoinfo"}],"output":{"generics":["videoframe","buffer"],"name":"result"}}],[11,"from_buffer_id_readable","","",32,{"inputs":[{"name":"buffer"},{"name":"i32"},{"name":"videoinfo"}],"output":{"generics":["videoframe","buffer"],"name":"result"}}],[11,"as_video_frame_ref","","",32,{"inputs":[{"name":"self"}],"output":{"generics":["bufferref"],"name":"videoframeref"}}],[11,"from_buffer_writable","","",32,{"inputs":[{"name":"buffer"},{"name":"videoinfo"}],"output":{"generics":["videoframe","buffer"],"name":"result"}}],[11,"from_buffer_id_writable","","",32,{"inputs":[{"name":"buffer"},{"name":"i32"},{"name":"videoinfo"}],"output":{"generics":["videoframe","buffer"],"name":"result"}}],[11,"buffer_mut","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bufferref"}}],[11,"plane_data_mut","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"as_mut_video_frame_ref","","",32,{"inputs":[{"name":"self"}],"output":{"generics":["bufferref"],"name":"videoframeref"}}],[11,"from_buffer_ref_readable","","",33,{"inputs":[{"name":"bufferref"},{"name":"videoinfo"}],"output":{"generics":["videoframeref"],"name":"option"}}],[11,"from_buffer_ref_id_readable","","",33,{"inputs":[{"name":"bufferref"},{"name":"i32"},{"name":"videoinfo"}],"output":{"generics":["videoframeref"],"name":"option"}}],[11,"info","","",33,{"inputs":[{"name":"self"}],"output":{"name":"videoinfo"}}],[11,"flags","","",33,{"inputs":[{"name":"self"}],"output":{"name":"videoframeflags"}}],[11,"id","","",33,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"copy","","",33,{"inputs":[{"name":"self"},{"name":"videoframe"}],"output":{"generics":["boolerror"],"name":"result"}}],[11,"copy_plane","","",33,{"inputs":[{"name":"self"},{"name":"videoframe"},{"name":"u32"}],"output":{"generics":["boolerror"],"name":"result"}}],[11,"format","","",33,{"inputs":[{"name":"self"}],"output":{"name":"videoformat"}}],[11,"format_info","","",33,{"inputs":[{"name":"self"}],"output":{"name":"videoformatinfo"}}],[11,"width","","",33,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","",33,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"size","","",33,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_interlaced","","",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_tff","","",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_rff","","",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_onefield","","",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"n_planes","","",33,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"n_components","","",33,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"plane_stride","","",33,null],[11,"plane_offset","","",33,null],[11,"buffer","","",33,{"inputs":[{"name":"self"}],"output":{"name":"bufferref"}}],[11,"plane_data","","",33,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_buffer_ref_writable","","",33,{"inputs":[{"name":"bufferref"},{"name":"videoinfo"}],"output":{"generics":["videoframeref"],"name":"option"}}],[11,"from_buffer_ref_id_writable","","",33,{"inputs":[{"name":"bufferref"},{"name":"i32"},{"name":"videoinfo"}],"output":{"generics":["videoframeref"],"name":"option"}}],[11,"buffer_mut","","",33,{"inputs":[{"name":"self"}],"output":{"name":"bufferref"}}],[11,"plane_data_mut","","",33,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"deref","","",33,null],[11,"drop","","",33,{"inputs":[{"name":"self"}],"output":null}],[11,"timestamp","gstreamer_video","",34,{"inputs":[{"name":"self"},{"name":"clocktime"}],"output":{"name":"self"}}],[11,"stream_time","","",34,{"inputs":[{"name":"self"},{"name":"clocktime"}],"output":{"name":"self"}}],[11,"running_time","","",34,{"inputs":[{"name":"self"},{"name":"clocktime"}],"output":{"name":"self"}}],[11,"all_headers","","",34,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"count","","",34,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"seqnum","","",34,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"self"}}],[11,"running_time_offset","","",34,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"self"}}],[11,"other_fields","","",34,null],[11,"build","","",34,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"downstreamforcekeyunitevent"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"downstreamforcekeyunitevent"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"downstreamforcekeyunitevent"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"running_time","","",35,{"inputs":[{"name":"self"},{"name":"clocktime"}],"output":{"name":"self"}}],[11,"all_headers","","",35,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"count","","",35,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"seqnum","","",35,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"self"}}],[11,"running_time_offset","","",35,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"self"}}],[11,"other_fields","","",35,null],[11,"build","","",35,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"upstreamforcekeyunitevent"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"upstreamforcekeyunitevent"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"upstreamforcekeyunitevent"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"forcekeyunitevent"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"forcekeyunitevent"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"forcekeyunitevent"}],"output":{"name":"bool"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"seqnum","","",36,{"inputs":[{"name":"self"},{"name":"seqnum"}],"output":{"name":"self"}}],[11,"running_time_offset","","",36,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"self"}}],[11,"other_fields","","",36,null],[11,"build","","",36,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"stillframeevent"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"stillframeevent"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"stillframeevent"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"videorectangle"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"videorectangle"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"videorectangle"}],"output":{"name":"bool"}}],[11,"hash","","",8,null],[11,"new","","",8,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"self"}}],[0,"prelude","","",null,null],[8,"VideoOverlayExt","gstreamer_video::prelude","Trait containing all `VideoOverlay` methods.",null,null],[10,"expose","","Tell an overlay that it has been exposed. This will redraw the current frame in the drawable even if the pipeline is PAUSED.",37,{"inputs":[{"name":"self"}],"output":null}],[10,"handle_events","","Tell an overlay that it should handle events from the window system. These events are forwarded upstream as navigation events. In some window system, events are not propagated in the window hierarchy if a client is listening for them. This method allows you to disable events handling completely from the `VideoOverlay`. ## `handle_events` a `gboolean` indicating if events should be handled or not.",37,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_render_rectangle","","Configure a subregion as a video target within the window set by `VideoOverlay::set_window_handle`. If this is not used or not supported the video will fill the area of the window set as the overlay to 100%. By specifying the rectangle, the video can be overlayed to a specific region of that window only. After setting the new rectangle one should call `VideoOverlay::expose` to force a redraw. To unset the region pass -1 for the `width` and `height` parameters.",37,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"generics":["boolerror"],"name":"result"}}],[8,"VideoOverlayExtManual","","",null,null],[10,"set_window_handle","","",38,{"inputs":[{"name":"self"},{"name":"uintptr_t"}],"output":null}],[8,"VideoOverlayExt","gstreamer_video","Trait containing all `VideoOverlay` methods.",null,null],[10,"expose","","Tell an overlay that it has been exposed. This will redraw the current frame in the drawable even if the pipeline is PAUSED.",37,{"inputs":[{"name":"self"}],"output":null}],[10,"handle_events","","Tell an overlay that it should handle events from the window system. These events are forwarded upstream as navigation events. In some window system, events are not propagated in the window hierarchy if a client is listening for them. This method allows you to disable events handling completely from the `VideoOverlay`. ## `handle_events` a `gboolean` indicating if events should be handled or not.",37,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_render_rectangle","","Configure a subregion as a video target within the window set by `VideoOverlay::set_window_handle`. If this is not used or not supported the video will fill the area of the window set as the overlay to 100%. By specifying the rectangle, the video can be overlayed to a specific region of that window only. After setting the new rectangle one should call `VideoOverlay::expose` to force a redraw. To unset the region pass -1 for the `width` and `height` parameters.",37,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"generics":["boolerror"],"name":"result"}}],[8,"VideoOverlayExtManual","","",null,null],[10,"set_window_handle","","",38,{"inputs":[{"name":"self"},{"name":"uintptr_t"}],"output":null}],[11,"from_glib_none","","",39,null],[11,"from_glib_none","","",39,null],[11,"from_glib","","",4,{"inputs":[{"name":"usize"}],"output":{"name":"type"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"typedvalue"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"downcast","","Tries to downcast to a `TypedValue`.",39,{"inputs":[{"name":"self"}],"output":{"generics":["typedvalue","value"],"name":"result"}}],[11,"get","","Tries to get a value of type `T`.",39,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is","","Returns `true` if the type of the value corresponds to `T`.",39,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"type_","","Returns the type of the value.",39,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"type_transformable","","Returns whether `Value`s of type `src` can be transformed to type `dst`.",39,{"inputs":[{"name":"type"},{"name":"type"}],"output":{"name":"bool"}}],[11,"try_into_send_value","","",39,{"inputs":[{"name":"self"}],"output":{"generics":["sendvalue","value"],"name":"result"}}],[11,"deref","","",40,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"description","","",41,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"to_glib_none_mut","","",40,{"inputs":[{"name":"self"}],"output":{"generics":["typedvalue"],"name":"stashmut"}}],[11,"to_glib_none_mut","","",39,{"inputs":[{"name":"self"}],"output":{"generics":["value"],"name":"stashmut"}}],[11,"from_glib_full","","",39,null],[11,"from_glib_none_as_vec","","",39,null],[11,"from_glib_container_as_vec","","",39,null],[11,"from_glib_full_as_vec","","",39,null],[11,"from_glib_none_as_vec","","",39,null],[11,"from_glib_container_as_vec","","",39,null],[11,"from_glib_full_as_vec","","",39,null],[11,"to_glib_none","","",39,{"inputs":[{"name":"self"}],"output":{"generics":["value"],"name":"stash"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from","","",40,{"inputs":[{"generics":["str"],"name":"option"}],"output":{"generics":["string"],"name":"typedvalue"}}],[11,"from","","",39,{"inputs":[{"name":"typedvalue"}],"output":{"name":"value"}}],[11,"from","","",40,{"inputs":[{"name":"t"}],"output":{"name":"typedvalue"}}],[11,"from","","",40,{"inputs":[{"generics":["string"],"name":"typedvalue"}],"output":{"generics":["str"],"name":"typedvalue"}}],[11,"from","","",39,{"inputs":[{"name":"t"}],"output":{"name":"value"}}],[11,"from","","",40,{"inputs":[{"name":"option"}],"output":{"name":"typedvalue"}}],[11,"from","","",39,{"inputs":[{"name":"option"}],"output":{"name":"value"}}],[11,"from","","",39,{"inputs":[{"name":"sendvalue"}],"output":{"name":"value"}}],[11,"from","","",40,{"inputs":[{"generics":["str"],"name":"typedvalue"}],"output":{"generics":["string"],"name":"typedvalue"}}],[11,"from","","",40,{"inputs":[{"name":"str"}],"output":{"generics":["string"],"name":"typedvalue"}}],[11,"static_type","","",41,{"inputs":[],"output":{"name":"type"}}],[11,"from_glib_none_num_as_vec","","",39,null],[11,"from_glib_container_num_as_vec","","",39,null],[11,"from_glib_full_num_as_vec","","",39,null],[11,"from_glib_none_num_as_vec","","",4,null],[11,"from_glib_container_num_as_vec","","",4,null],[11,"from_glib_full_num_as_vec","","",4,null],[11,"from_glib_none_num_as_vec","","",4,null],[11,"from_glib_container_num_as_vec","","",4,null],[11,"from_glib_full_num_as_vec","","",4,null],[11,"from_glib_none_num_as_vec","","",39,null],[11,"from_glib_container_num_as_vec","","",39,null],[11,"from_glib_full_num_as_vec","","",39,null],[11,"drop","","",39,null],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"to_glib_none_from_slice","","",4,null],[11,"to_glib_container_from_slice","","",4,null],[11,"to_glib_full_from_slice","","",4,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"to_glib","","",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_glib","","",1,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"uninitialized","","",39,{"inputs":[],"output":{"name":"value"}}],[11,"to_value","","",39,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"to_value_type","","",39,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"can_compare","","",39,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"compare","","",39,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"valueorder"}}],[11,"can_intersect","","",39,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"intersect","","",39,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"generics":["value"],"name":"option"}}],[11,"can_subtract","","",39,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"subtract","","",39,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"generics":["value"],"name":"option"}}],[11,"can_union","","",39,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"union","","",39,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"generics":["value"],"name":"option"}}],[11,"fixate","","",39,{"inputs":[{"name":"self"}],"output":{"generics":["value"],"name":"option"}}],[11,"is_fixed","","",39,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_subset","","",39,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"serialize","","",39,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"deserialize","","",39,{"inputs":[{"name":"t"}],"output":{"generics":["value"],"name":"option"}}],[11,"new","","Creates an error with supplied error enum variant and message.",41,{"inputs":[{"name":"t"},{"name":"str"}],"output":{"name":"error"}}],[11,"is","","Checks if the error domain matches `T`.",41,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"kind","","Tries to convert to a specific error enum.",41,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"wrap","","",41,null],[11,"name","","",4,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"is_a","","",4,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"parent","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["type"],"name":"option"}}],[11,"children","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["type"],"name":"vec"}}],[11,"interfaces","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["type"],"name":"vec"}}],[11,"interface_prerequisites","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["type"],"name":"vec"}}],[11,"from_name","","",4,{"inputs":[{"name":"p"}],"output":{"generics":["type"],"name":"option"}}],[11,"get","","Returns the value.",40,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_some","","Returns the value.",40,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set","","Sets the value.",40,null],[11,"set_none","","Sets the value to `None`.",40,null],[11,"set_some","","Sets the value.",40,null],[11,"into_send_value","","",40,{"inputs":[{"name":"self"}],"output":{"name":"sendvalue"}}]],"paths":[[8,"Cast"],[3,"Continue"],[8,"StaticType"],[8,"ToValue"],[4,"Type"],[3,"DownstreamForceKeyUnitEvent"],[3,"UpstreamForceKeyUnitEvent"],[3,"StillFrameEvent"],[3,"VideoRectangle"],[4,"VideoColorMatrix"],[4,"VideoColorPrimaries"],[4,"VideoFieldOrder"],[4,"VideoFormat"],[4,"VideoInterlaceMode"],[4,"VideoMultiviewFramePacking"],[4,"VideoMultiviewMode"],[4,"VideoTileMode"],[4,"VideoTransferFunction"],[4,"VideoEndianness"],[4,"VideoColorRange"],[4,"ForceKeyUnitEvent"],[3,"VideoFilter"],[3,"VideoOverlay"],[3,"VideoChromaSite"],[3,"VideoFlags"],[3,"VideoFormatFlags"],[3,"VideoFrameFlags"],[3,"VideoMultiviewFlags"],[3,"VideoFormatInfo"],[3,"VideoColorimetry"],[3,"VideoInfoBuilder"],[3,"VideoInfo"],[3,"VideoFrame"],[3,"VideoFrameRef"],[3,"DownstreamForceKeyUnitEventBuilder"],[3,"UpstreamForceKeyUnitEventBuilder"],[3,"StillFrameEventBuilder"],[8,"VideoOverlayExt"],[8,"VideoOverlayExtManual"],[3,"Value"],[3,"TypedValue"],[3,"Error"]]};
searchIndex["gstreamer_video_sys"] = {"doc":"","items":[[3,"GstVideoBufferFlags","gstreamer_video_sys","",null,null],[3,"GstVideoChromaFlags","","",null,null],[3,"GstVideoChromaSite","","",null,null],[3,"GstVideoCodecFrameFlags","","",null,null],[3,"GstVideoDitherFlags","","",null,null],[3,"GstVideoFlags","","",null,null],[3,"GstVideoFormatFlags","","",null,null],[3,"GstVideoFrameFlags","","",null,null],[3,"GstVideoFrameMapFlags","","",null,null],[3,"GstVideoMultiviewFlags","","",null,null],[3,"GstVideoPackFlags","","",null,null],[3,"GstVideoResamplerFlags","","",null,null],[3,"GstVideoScalerFlags","","",null,null],[3,"GstVideoTimeCodeFlags","","",null,null],[3,"GstColorBalanceChannelClass","","",null,null],[12,"parent","","",0,null],[12,"value_changed","","",0,null],[12,"_gst_reserved","","",0,null],[3,"GstColorBalanceInterface","","",null,null],[12,"iface","","",1,null],[12,"list_channels","","",1,null],[12,"set_value","","",1,null],[12,"get_value","","",1,null],[12,"get_balance_type","","",1,null],[12,"value_changed","","",1,null],[12,"_gst_reserved","","",1,null],[3,"GstNavigationInterface","","",null,null],[12,"iface","","",2,null],[12,"send_event","","",2,null],[3,"GstVideoAffineTransformationMeta","","",null,null],[12,"meta","","",3,null],[12,"matrix","","",3,null],[3,"GstVideoAlignment","","",null,null],[12,"padding_top","","",4,null],[12,"padding_bottom","","",4,null],[12,"padding_left","","",4,null],[12,"padding_right","","",4,null],[12,"stride_align","","",4,null],[3,"GstVideoBufferPoolClass","","",null,null],[12,"parent_class","","",5,null],[3,"GstVideoBufferPoolPrivate","","",null,null],[3,"GstVideoChromaResample","","",null,null],[3,"GstVideoCodecFrame","","",null,null],[12,"ref_count","","",6,null],[12,"flags","","",6,null],[12,"system_frame_number","","",6,null],[12,"decode_frame_number","","",6,null],[12,"presentation_frame_number","","",6,null],[12,"dts","","",6,null],[12,"pts","","",6,null],[12,"duration","","",6,null],[12,"distance_from_sync","","",6,null],[12,"input_buffer","","",6,null],[12,"output_buffer","","",6,null],[12,"deadline","","",6,null],[12,"events","","",6,null],[12,"user_data","","",6,null],[12,"user_data_destroy_notify","","",6,null],[12,"padding","","",6,null],[3,"GstVideoCodecState","","",null,null],[12,"ref_count","","",7,null],[12,"info","","",7,null],[12,"caps","","",7,null],[12,"codec_data","","",7,null],[12,"allocation_caps","","",7,null],[12,"padding","","",7,null],[3,"GstVideoColorPrimariesInfo","","",null,null],[12,"primaries","","",8,null],[12,"Wx","","",8,null],[12,"Wy","","",8,null],[12,"Rx","","",8,null],[12,"Ry","","",8,null],[12,"Gx","","",8,null],[12,"Gy","","",8,null],[12,"Bx","","",8,null],[12,"By","","",8,null],[3,"GstVideoColorimetry","","",null,null],[12,"range","","",9,null],[12,"matrix","","",9,null],[12,"transfer","","",9,null],[12,"primaries","","",9,null],[3,"GstVideoConverter","","",null,null],[3,"GstVideoCropMeta","","",null,null],[12,"meta","","",10,null],[12,"x","","",10,null],[12,"y","","",10,null],[12,"width","","",10,null],[12,"height","","",10,null],[3,"GstVideoDecoderClass","","",null,null],[12,"element_class","","",11,null],[12,"open","","",11,null],[12,"close","","",11,null],[12,"start","","",11,null],[12,"stop","","",11,null],[12,"parse","","",11,null],[12,"set_format","","",11,null],[12,"reset","","",11,null],[12,"finish","","",11,null],[12,"handle_frame","","",11,null],[12,"sink_event","","",11,null],[12,"src_event","","",11,null],[12,"negotiate","","",11,null],[12,"decide_allocation","","",11,null],[12,"propose_allocation","","",11,null],[12,"flush","","",11,null],[12,"sink_query","","",11,null],[12,"src_query","","",11,null],[12,"getcaps","","",11,null],[12,"drain","","",11,null],[12,"transform_meta","","",11,null],[12,"padding","","",11,null],[3,"GstVideoDecoderPrivate","","",null,null],[3,"GstVideoDirectionInterface","","",null,null],[12,"iface","","",12,null],[3,"GstVideoDither","","",null,null],[3,"GstVideoEncoderClass","","",null,null],[12,"element_class","","",13,null],[12,"open","","",13,null],[12,"close","","",13,null],[12,"start","","",13,null],[12,"stop","","",13,null],[12,"set_format","","",13,null],[12,"handle_frame","","",13,null],[12,"reset","","",13,null],[12,"finish","","",13,null],[12,"pre_push","","",13,null],[12,"getcaps","","",13,null],[12,"sink_event","","",13,null],[12,"src_event","","",13,null],[12,"negotiate","","",13,null],[12,"decide_allocation","","",13,null],[12,"propose_allocation","","",13,null],[12,"flush","","",13,null],[12,"sink_query","","",13,null],[12,"src_query","","",13,null],[12,"transform_meta","","",13,null],[12,"_gst_reserved","","",13,null],[3,"GstVideoEncoderPrivate","","",null,null],[3,"GstVideoFilterClass","","",null,null],[12,"parent_class","","",14,null],[12,"set_info","","",14,null],[12,"transform_frame","","",14,null],[12,"transform_frame_ip","","",14,null],[12,"_gst_reserved","","",14,null],[3,"GstVideoFormatInfo","","",null,null],[12,"format","","",15,null],[12,"name","","",15,null],[12,"description","","",15,null],[12,"flags","","",15,null],[12,"bits","","",15,null],[12,"n_components","","",15,null],[12,"shift","","",15,null],[12,"depth","","",15,null],[12,"pixel_stride","","",15,null],[12,"n_planes","","",15,null],[12,"plane","","",15,null],[12,"poffset","","",15,null],[12,"w_sub","","",15,null],[12,"h_sub","","",15,null],[12,"unpack_format","","",15,null],[12,"unpack_func","","",15,null],[12,"pack_lines","","",15,null],[12,"pack_func","","",15,null],[12,"tile_mode","","",15,null],[12,"tile_ws","","",15,null],[12,"tile_hs","","",15,null],[12,"_gst_reserved","","",15,null],[3,"GstVideoFrame","","",null,null],[12,"info","","",16,null],[12,"flags","","",16,null],[12,"buffer","","",16,null],[12,"meta","","",16,null],[12,"id","","",16,null],[12,"data","","",16,null],[12,"map","","",16,null],[12,"_gst_reserved","","",16,null],[3,"GstVideoGLTextureUploadMeta","","",null,null],[12,"meta","","",17,null],[12,"texture_orientation","","",17,null],[12,"n_textures","","",17,null],[12,"texture_type","","",17,null],[12,"buffer","","",17,null],[12,"upload","","",17,null],[12,"user_data","","",17,null],[12,"user_data_copy","","",17,null],[12,"user_data_free","","",17,null],[3,"GstVideoInfo","","",null,null],[12,"finfo","","",18,null],[12,"interlace_mode","","",18,null],[12,"flags","","",18,null],[12,"width","","",18,null],[12,"height","","",18,null],[12,"size","","",18,null],[12,"views","","",18,null],[12,"chroma_site","","",18,null],[12,"colorimetry","","",18,null],[12,"par_n","","",18,null],[12,"par_d","","",18,null],[12,"fps_n","","",18,null],[12,"fps_d","","",18,null],[12,"offset","","",18,null],[12,"stride","","",18,null],[12,"_gst_reserved","","",18,null],[3,"GstVideoMeta","","",null,null],[12,"meta","","",19,null],[12,"buffer","","",19,null],[12,"flags","","",19,null],[12,"format","","",19,null],[12,"id","","",19,null],[12,"width","","",19,null],[12,"height","","",19,null],[12,"n_planes","","",19,null],[12,"offset","","",19,null],[12,"stride","","",19,null],[12,"map","","",19,null],[12,"unmap","","",19,null],[3,"GstVideoMetaTransform","","",null,null],[12,"in_info","","",20,null],[12,"out_info","","",20,null],[3,"GstVideoOrientationInterface","","",null,null],[12,"iface","","",21,null],[12,"get_hflip","","",21,null],[12,"get_vflip","","",21,null],[12,"get_hcenter","","",21,null],[12,"get_vcenter","","",21,null],[12,"set_hflip","","",21,null],[12,"set_vflip","","",21,null],[12,"set_hcenter","","",21,null],[12,"set_vcenter","","",21,null],[3,"GstVideoOverlayComposition","","",null,null],[3,"GstVideoOverlayCompositionMeta","","",null,null],[12,"meta","","",22,null],[12,"overlay","","",22,null],[3,"GstVideoOverlayInterface","","",null,null],[12,"iface","","",23,null],[12,"expose","","",23,null],[12,"handle_events","","",23,null],[12,"set_render_rectangle","","",23,null],[12,"set_window_handle","","",23,null],[3,"GstVideoOverlayRectangle","","",null,null],[3,"GstVideoRectangle","","",null,null],[12,"x","","",24,null],[12,"y","","",24,null],[12,"w","","",24,null],[12,"h","","",24,null],[3,"GstVideoRegionOfInterestMeta","","",null,null],[12,"meta","","",25,null],[12,"roi_type","","",25,null],[12,"id","","",25,null],[12,"parent_id","","",25,null],[12,"x","","",25,null],[12,"y","","",25,null],[12,"w","","",25,null],[12,"h","","",25,null],[3,"GstVideoResampler","","",null,null],[12,"in_size","","",26,null],[12,"out_size","","",26,null],[12,"max_taps","","",26,null],[12,"n_phases","","",26,null],[12,"offset","","",26,null],[12,"phase","","",26,null],[12,"n_taps","","",26,null],[12,"taps","","",26,null],[12,"_gst_reserved","","",26,null],[3,"GstVideoScaler","","",null,null],[3,"GstVideoSinkClass","","",null,null],[12,"parent_class","","",27,null],[12,"show_frame","","",27,null],[12,"_gst_reserved","","",27,null],[3,"GstVideoSinkPrivate","","",null,null],[3,"GstVideoTimeCode","","",null,null],[12,"config","","",28,null],[12,"hours","","",28,null],[12,"minutes","","",28,null],[12,"seconds","","",28,null],[12,"frames","","",28,null],[12,"field_count","","",28,null],[3,"GstVideoTimeCodeConfig","","",null,null],[12,"fps_n","","",29,null],[12,"fps_d","","",29,null],[12,"flags","","",29,null],[12,"latest_daily_jam","","",29,null],[3,"GstVideoTimeCodeInterval","","",null,null],[12,"hours","","",30,null],[12,"minutes","","",30,null],[12,"seconds","","",30,null],[12,"frames","","",30,null],[3,"GstVideoTimeCodeMeta","","",null,null],[12,"meta","","",31,null],[12,"tc","","",31,null],[3,"GstColorBalanceChannel","","",null,null],[12,"parent","","",32,null],[12,"label","","",32,null],[12,"min_value","","",32,null],[12,"max_value","","",32,null],[12,"_gst_reserved","","",32,null],[3,"GstVideoBufferPool","","",null,null],[12,"bufferpool","","",33,null],[12,"priv_","","",33,null],[3,"GstVideoDecoder","","",null,null],[12,"element","","",34,null],[12,"sinkpad","","",34,null],[12,"srcpad","","",34,null],[12,"stream_lock","","",34,null],[12,"input_segment","","",34,null],[12,"output_segment","","",34,null],[12,"priv_","","",34,null],[12,"padding","","",34,null],[3,"GstVideoEncoder","","",null,null],[12,"element","","",35,null],[12,"sinkpad","","",35,null],[12,"srcpad","","",35,null],[12,"stream_lock","","",35,null],[12,"input_segment","","",35,null],[12,"output_segment","","",35,null],[12,"priv_","","",35,null],[12,"padding","","",35,null],[3,"GstVideoFilter","","",null,null],[12,"element","","",36,null],[12,"negotiated","","",36,null],[12,"in_info","","",36,null],[12,"out_info","","",36,null],[12,"_gst_reserved","","",36,null],[3,"GstVideoMultiviewFlagsSet","","",null,null],[3,"GstVideoSink","","",null,null],[12,"element","","",37,null],[12,"width","","",37,null],[12,"height","","",37,null],[12,"priv_","","",37,null],[12,"_gst_reserved","","",37,null],[3,"GstColorBalance","","",null,null],[3,"GstNavigation","","",null,null],[3,"GstVideoDirection","","",null,null],[3,"GstVideoOrientation","","",null,null],[3,"GstVideoOverlay","","",null,null],[5,"gst_color_balance_type_get_type","","",null,null],[5,"gst_navigation_command_get_type","","",null,null],[5,"gst_navigation_event_type_get_type","","",null,null],[5,"gst_navigation_message_type_get_type","","",null,null],[5,"gst_navigation_query_type_get_type","","",null,null],[5,"gst_video_alpha_mode_get_type","","",null,null],[5,"gst_video_chroma_method_get_type","","",null,null],[5,"gst_video_chroma_mode_get_type","","",null,null],[5,"gst_video_color_matrix_get_type","","",null,null],[5,"gst_video_color_matrix_get_Kr_Kb","","",null,null],[5,"gst_video_color_primaries_get_type","","",null,null],[5,"gst_video_color_primaries_get_info","","",null,null],[5,"gst_video_color_range_get_type","","",null,null],[5,"gst_video_color_range_offsets","","",null,null],[5,"gst_video_dither_method_get_type","","",null,null],[5,"gst_video_field_order_get_type","","",null,null],[5,"gst_video_field_order_from_string","","",null,null],[5,"gst_video_field_order_to_string","","",null,null],[5,"gst_video_format_get_type","","",null,null],[5,"gst_video_format_from_fourcc","","",null,null],[5,"gst_video_format_from_masks","","",null,null],[5,"gst_video_format_from_string","","",null,null],[5,"gst_video_format_get_info","","",null,null],[5,"gst_video_format_get_palette","","",null,null],[5,"gst_video_format_to_fourcc","","",null,null],[5,"gst_video_format_to_string","","",null,null],[5,"gst_video_gamma_mode_get_type","","",null,null],[5,"gst_video_interlace_mode_get_type","","",null,null],[5,"gst_video_interlace_mode_from_string","","",null,null],[5,"gst_video_interlace_mode_to_string","","",null,null],[5,"gst_video_matrix_mode_get_type","","",null,null],[5,"gst_video_multiview_frame_packing_get_type","","",null,null],[5,"gst_video_multiview_mode_get_type","","",null,null],[5,"gst_video_multiview_mode_from_caps_string","","",null,null],[5,"gst_video_multiview_mode_to_caps_string","","",null,null],[5,"gst_video_orientation_method_get_type","","",null,null],[5,"gst_video_primaries_mode_get_type","","",null,null],[5,"gst_video_resampler_method_get_type","","",null,null],[5,"gst_video_tile_mode_get_type","","",null,null],[5,"gst_video_tile_type_get_type","","",null,null],[5,"gst_video_transfer_function_get_type","","",null,null],[5,"gst_video_buffer_flags_get_type","","",null,null],[5,"gst_video_chroma_flags_get_type","","",null,null],[5,"gst_video_chroma_site_get_type","","",null,null],[5,"gst_video_dither_flags_get_type","","",null,null],[5,"gst_video_flags_get_type","","",null,null],[5,"gst_video_format_flags_get_type","","",null,null],[5,"gst_video_frame_flags_get_type","","",null,null],[5,"gst_video_frame_map_flags_get_type","","",null,null],[5,"gst_video_multiview_flags_get_type","","",null,null],[5,"gst_video_pack_flags_get_type","","",null,null],[5,"gst_video_resampler_flags_get_type","","",null,null],[5,"gst_video_scaler_flags_get_type","","",null,null],[5,"gst_video_affine_transformation_meta_apply_matrix","","",null,null],[5,"gst_video_affine_transformation_meta_get_info","","",null,null],[5,"gst_video_alignment_reset","","",null,null],[5,"gst_video_chroma_resample_free","","",null,null],[5,"gst_video_chroma_resample_get_info","","",null,null],[5,"gst_video_chroma_resample_new","","",null,null],[5,"gst_video_codec_frame_get_type","","",null,null],[5,"gst_video_codec_frame_get_user_data","","",null,null],[5,"gst_video_codec_frame_ref","","",null,null],[5,"gst_video_codec_frame_set_user_data","","",null,null],[5,"gst_video_codec_frame_unref","","",null,null],[5,"gst_video_codec_state_get_type","","",null,null],[5,"gst_video_codec_state_ref","","",null,null],[5,"gst_video_codec_state_unref","","",null,null],[5,"gst_video_colorimetry_from_string","","",null,null],[5,"gst_video_colorimetry_is_equal","","",null,null],[5,"gst_video_colorimetry_matches","","",null,null],[5,"gst_video_colorimetry_to_string","","",null,null],[5,"gst_video_converter_frame","","",null,null],[5,"gst_video_converter_free","","",null,null],[5,"gst_video_converter_get_config","","",null,null],[5,"gst_video_converter_set_config","","",null,null],[5,"gst_video_converter_new","","",null,null],[5,"gst_video_crop_meta_get_info","","",null,null],[5,"gst_video_dither_free","","",null,null],[5,"gst_video_dither_line","","",null,null],[5,"gst_video_dither_new","","",null,null],[5,"gst_video_frame_copy","","",null,null],[5,"gst_video_frame_copy_plane","","",null,null],[5,"gst_video_frame_map","","",null,null],[5,"gst_video_frame_map_id","","",null,null],[5,"gst_video_frame_unmap","","",null,null],[5,"gst_video_gl_texture_upload_meta_upload","","",null,null],[5,"gst_video_gl_texture_upload_meta_get_info","","",null,null],[5,"gst_video_info_get_type","","",null,null],[5,"gst_video_info_new","","",null,null],[5,"gst_video_info_align","","",null,null],[5,"gst_video_info_convert","","",null,null],[5,"gst_video_info_copy","","",null,null],[5,"gst_video_info_free","","",null,null],[5,"gst_video_info_from_caps","","",null,null],[5,"gst_video_info_init","","",null,null],[5,"gst_video_info_is_equal","","",null,null],[5,"gst_video_info_set_format","","",null,null],[5,"gst_video_info_to_caps","","",null,null],[5,"gst_video_meta_map","","",null,null],[5,"gst_video_meta_unmap","","",null,null],[5,"gst_video_meta_get_info","","",null,null],[5,"gst_video_meta_transform_scale_get_quark","","",null,null],[5,"gst_video_overlay_composition_get_type","","",null,null],[5,"gst_video_overlay_composition_new","","",null,null],[5,"gst_video_overlay_composition_add_rectangle","","",null,null],[5,"gst_video_overlay_composition_blend","","",null,null],[5,"gst_video_overlay_composition_copy","","",null,null],[5,"gst_video_overlay_composition_get_rectangle","","",null,null],[5,"gst_video_overlay_composition_get_seqnum","","",null,null],[5,"gst_video_overlay_composition_make_writable","","",null,null],[5,"gst_video_overlay_composition_n_rectangles","","",null,null],[5,"gst_video_overlay_composition_meta_get_info","","",null,null],[5,"gst_video_overlay_rectangle_get_type","","",null,null],[5,"gst_video_overlay_rectangle_new_raw","","",null,null],[5,"gst_video_overlay_rectangle_copy","","",null,null],[5,"gst_video_overlay_rectangle_get_flags","","",null,null],[5,"gst_video_overlay_rectangle_get_global_alpha","","",null,null],[5,"gst_video_overlay_rectangle_get_pixels_argb","","",null,null],[5,"gst_video_overlay_rectangle_get_pixels_ayuv","","",null,null],[5,"gst_video_overlay_rectangle_get_pixels_raw","","",null,null],[5,"gst_video_overlay_rectangle_get_pixels_unscaled_argb","","",null,null],[5,"gst_video_overlay_rectangle_get_pixels_unscaled_ayuv","","",null,null],[5,"gst_video_overlay_rectangle_get_pixels_unscaled_raw","","",null,null],[5,"gst_video_overlay_rectangle_get_render_rectangle","","",null,null],[5,"gst_video_overlay_rectangle_get_seqnum","","",null,null],[5,"gst_video_overlay_rectangle_set_global_alpha","","",null,null],[5,"gst_video_overlay_rectangle_set_render_rectangle","","",null,null],[5,"gst_video_region_of_interest_meta_get_info","","",null,null],[5,"gst_video_resampler_clear","","",null,null],[5,"gst_video_resampler_init","","",null,null],[5,"gst_video_scaler_2d","","",null,null],[5,"gst_video_scaler_combine_packed_YUV","","",null,null],[5,"gst_video_scaler_free","","",null,null],[5,"gst_video_scaler_get_coeff","","",null,null],[5,"gst_video_scaler_get_max_taps","","",null,null],[5,"gst_video_scaler_horizontal","","",null,null],[5,"gst_video_scaler_vertical","","",null,null],[5,"gst_video_scaler_new","","",null,null],[5,"gst_video_time_code_get_type","","",null,null],[5,"gst_video_time_code_new","","",null,null],[5,"gst_video_time_code_new_empty","","",null,null],[5,"gst_video_time_code_new_from_date_time","","",null,null],[5,"gst_video_time_code_new_from_string","","",null,null],[5,"gst_video_time_code_add_frames","","",null,null],[5,"gst_video_time_code_add_interval","","",null,null],[5,"gst_video_time_code_clear","","",null,null],[5,"gst_video_time_code_compare","","",null,null],[5,"gst_video_time_code_copy","","",null,null],[5,"gst_video_time_code_frames_since_daily_jam","","",null,null],[5,"gst_video_time_code_free","","",null,null],[5,"gst_video_time_code_increment_frame","","",null,null],[5,"gst_video_time_code_init","","",null,null],[5,"gst_video_time_code_init_from_date_time","","",null,null],[5,"gst_video_time_code_is_valid","","",null,null],[5,"gst_video_time_code_nsec_since_daily_jam","","",null,null],[5,"gst_video_time_code_to_date_time","","",null,null],[5,"gst_video_time_code_to_string","","",null,null],[5,"gst_video_time_code_interval_get_type","","",null,null],[5,"gst_video_time_code_interval_new","","",null,null],[5,"gst_video_time_code_interval_new_from_string","","",null,null],[5,"gst_video_time_code_interval_clear","","",null,null],[5,"gst_video_time_code_interval_copy","","",null,null],[5,"gst_video_time_code_interval_free","","",null,null],[5,"gst_video_time_code_interval_init","","",null,null],[5,"gst_video_time_code_meta_get_info","","",null,null],[5,"gst_color_balance_channel_get_type","","",null,null],[5,"gst_video_buffer_pool_get_type","","",null,null],[5,"gst_video_buffer_pool_new","","",null,null],[5,"gst_video_decoder_get_type","","",null,null],[5,"gst_video_decoder_add_to_frame","","",null,null],[5,"gst_video_decoder_allocate_output_buffer","","",null,null],[5,"gst_video_decoder_allocate_output_frame","","",null,null],[5,"gst_video_decoder_allocate_output_frame_with_params","","",null,null],[5,"gst_video_decoder_drop_frame","","",null,null],[5,"gst_video_decoder_finish_frame","","",null,null],[5,"gst_video_decoder_get_allocator","","",null,null],[5,"gst_video_decoder_get_buffer_pool","","",null,null],[5,"gst_video_decoder_get_estimate_rate","","",null,null],[5,"gst_video_decoder_get_frame","","",null,null],[5,"gst_video_decoder_get_frames","","",null,null],[5,"gst_video_decoder_get_latency","","",null,null],[5,"gst_video_decoder_get_max_decode_time","","",null,null],[5,"gst_video_decoder_get_max_errors","","",null,null],[5,"gst_video_decoder_get_needs_format","","",null,null],[5,"gst_video_decoder_get_oldest_frame","","",null,null],[5,"gst_video_decoder_get_output_state","","",null,null],[5,"gst_video_decoder_get_packetized","","",null,null],[5,"gst_video_decoder_get_pending_frame_size","","",null,null],[5,"gst_video_decoder_get_qos_proportion","","",null,null],[5,"gst_video_decoder_have_frame","","",null,null],[5,"gst_video_decoder_merge_tags","","",null,null],[5,"gst_video_decoder_negotiate","","",null,null],[5,"gst_video_decoder_proxy_getcaps","","",null,null],[5,"gst_video_decoder_release_frame","","",null,null],[5,"gst_video_decoder_set_estimate_rate","","",null,null],[5,"gst_video_decoder_set_latency","","",null,null],[5,"gst_video_decoder_set_max_errors","","",null,null],[5,"gst_video_decoder_set_needs_format","","",null,null],[5,"gst_video_decoder_set_output_state","","",null,null],[5,"gst_video_decoder_set_packetized","","",null,null],[5,"gst_video_decoder_set_use_default_pad_acceptcaps","","",null,null],[5,"gst_video_encoder_get_type","","",null,null],[5,"gst_video_encoder_allocate_output_buffer","","",null,null],[5,"gst_video_encoder_allocate_output_frame","","",null,null],[5,"gst_video_encoder_finish_frame","","",null,null],[5,"gst_video_encoder_get_allocator","","",null,null],[5,"gst_video_encoder_get_frame","","",null,null],[5,"gst_video_encoder_get_frames","","",null,null],[5,"gst_video_encoder_get_latency","","",null,null],[5,"gst_video_encoder_get_oldest_frame","","",null,null],[5,"gst_video_encoder_get_output_state","","",null,null],[5,"gst_video_encoder_merge_tags","","",null,null],[5,"gst_video_encoder_negotiate","","",null,null],[5,"gst_video_encoder_proxy_getcaps","","",null,null],[5,"gst_video_encoder_set_headers","","",null,null],[5,"gst_video_encoder_set_latency","","",null,null],[5,"gst_video_encoder_set_min_pts","","",null,null],[5,"gst_video_encoder_set_output_state","","",null,null],[5,"gst_video_filter_get_type","","",null,null],[5,"gst_video_multiview_flagset_get_type","","",null,null],[5,"gst_video_sink_get_type","","",null,null],[5,"gst_video_sink_center_rect","","",null,null],[5,"gst_color_balance_get_type","","",null,null],[5,"gst_color_balance_get_balance_type","","",null,null],[5,"gst_color_balance_get_value","","",null,null],[5,"gst_color_balance_list_channels","","",null,null],[5,"gst_color_balance_set_value","","",null,null],[5,"gst_color_balance_value_changed","","",null,null],[5,"gst_navigation_get_type","","",null,null],[5,"gst_navigation_event_get_type","","",null,null],[5,"gst_navigation_event_parse_command","","",null,null],[5,"gst_navigation_event_parse_key_event","","",null,null],[5,"gst_navigation_event_parse_mouse_button_event","","",null,null],[5,"gst_navigation_event_parse_mouse_move_event","","",null,null],[5,"gst_navigation_message_get_type","","",null,null],[5,"gst_navigation_message_new_angles_changed","","",null,null],[5,"gst_navigation_message_new_commands_changed","","",null,null],[5,"gst_navigation_message_new_event","","",null,null],[5,"gst_navigation_message_new_mouse_over","","",null,null],[5,"gst_navigation_message_parse_angles_changed","","",null,null],[5,"gst_navigation_message_parse_event","","",null,null],[5,"gst_navigation_message_parse_mouse_over","","",null,null],[5,"gst_navigation_query_get_type","","",null,null],[5,"gst_navigation_query_new_angles","","",null,null],[5,"gst_navigation_query_new_commands","","",null,null],[5,"gst_navigation_query_parse_angles","","",null,null],[5,"gst_navigation_query_parse_commands_length","","",null,null],[5,"gst_navigation_query_parse_commands_nth","","",null,null],[5,"gst_navigation_query_set_angles","","",null,null],[5,"gst_navigation_query_set_commands","","",null,null],[5,"gst_navigation_query_set_commandsv","","",null,null],[5,"gst_navigation_send_command","","",null,null],[5,"gst_navigation_send_event","","",null,null],[5,"gst_navigation_send_key_event","","",null,null],[5,"gst_navigation_send_mouse_event","","",null,null],[5,"gst_video_direction_get_type","","",null,null],[5,"gst_video_orientation_get_type","","",null,null],[5,"gst_video_orientation_get_hcenter","","",null,null],[5,"gst_video_orientation_get_hflip","","",null,null],[5,"gst_video_orientation_get_vcenter","","",null,null],[5,"gst_video_orientation_get_vflip","","",null,null],[5,"gst_video_orientation_set_hcenter","","",null,null],[5,"gst_video_orientation_set_hflip","","",null,null],[5,"gst_video_orientation_set_vcenter","","",null,null],[5,"gst_video_orientation_set_vflip","","",null,null],[5,"gst_video_overlay_get_type","","",null,null],[5,"gst_video_overlay_expose","","",null,null],[5,"gst_video_overlay_got_window_handle","","",null,null],[5,"gst_video_overlay_handle_events","","",null,null],[5,"gst_video_overlay_prepare_window_handle","","",null,null],[5,"gst_video_overlay_set_render_rectangle","","",null,null],[5,"gst_video_overlay_set_window_handle","","",null,null],[5,"gst_buffer_add_video_affine_transformation_meta","","",null,null],[5,"gst_buffer_add_video_gl_texture_upload_meta","","",null,null],[5,"gst_buffer_add_video_meta","","",null,null],[5,"gst_buffer_add_video_meta_full","","",null,null],[5,"gst_buffer_add_video_overlay_composition_meta","","",null,null],[5,"gst_buffer_add_video_region_of_interest_meta","","",null,null],[5,"gst_buffer_add_video_region_of_interest_meta_id","","",null,null],[5,"gst_buffer_add_video_time_code_meta","","",null,null],[5,"gst_buffer_add_video_time_code_meta_full","","",null,null],[5,"gst_buffer_get_video_meta","","",null,null],[5,"gst_buffer_get_video_meta_id","","",null,null],[5,"gst_buffer_get_video_region_of_interest_meta_id","","",null,null],[5,"gst_buffer_pool_config_get_video_alignment","","",null,null],[5,"gst_buffer_pool_config_set_video_alignment","","",null,null],[5,"gst_is_video_overlay_prepare_window_handle_message","","",null,null],[5,"gst_video_affine_transformation_meta_api_get_type","","",null,null],[5,"gst_video_blend","","",null,null],[5,"gst_video_blend_scale_linear_RGBA","","",null,null],[5,"gst_video_calculate_display_ratio","","",null,null],[5,"gst_video_chroma_from_string","","",null,null],[5,"gst_video_chroma_resample","","",null,null],[5,"gst_video_chroma_to_string","","",null,null],[5,"gst_video_color_transfer_decode","","",null,null],[5,"gst_video_color_transfer_encode","","",null,null],[5,"gst_video_convert_sample","","",null,null],[5,"gst_video_convert_sample_async","","",null,null],[5,"gst_video_crop_meta_api_get_type","","",null,null],[5,"gst_video_event_is_force_key_unit","","",null,null],[5,"gst_video_event_new_downstream_force_key_unit","","",null,null],[5,"gst_video_event_new_still_frame","","",null,null],[5,"gst_video_event_new_upstream_force_key_unit","","",null,null],[5,"gst_video_event_parse_downstream_force_key_unit","","",null,null],[5,"gst_video_event_parse_still_frame","","",null,null],[5,"gst_video_event_parse_upstream_force_key_unit","","",null,null],[5,"gst_video_gl_texture_upload_meta_api_get_type","","",null,null],[5,"gst_video_guess_framerate","","",null,null],[5,"gst_video_meta_api_get_type","","",null,null],[5,"gst_video_multiview_get_doubled_height_modes","","",null,null],[5,"gst_video_multiview_get_doubled_size_modes","","",null,null],[5,"gst_video_multiview_get_doubled_width_modes","","",null,null],[5,"gst_video_multiview_get_mono_modes","","",null,null],[5,"gst_video_multiview_get_unpacked_modes","","",null,null],[5,"gst_video_multiview_guess_half_aspect","","",null,null],[5,"gst_video_multiview_video_info_change_mode","","",null,null],[5,"gst_video_overlay_composition_meta_api_get_type","","",null,null],[5,"gst_video_region_of_interest_meta_api_get_type","","",null,null],[5,"gst_video_tile_get_index","","",null,null],[5,"gst_video_time_code_meta_api_get_type","","",null,null],[6,"GstColorBalanceType","","",null,null],[6,"GstNavigationCommand","","",null,null],[6,"GstNavigationEventType","","",null,null],[6,"GstNavigationMessageType","","",null,null],[6,"GstNavigationQueryType","","",null,null],[6,"GstVideoAlphaMode","","",null,null],[6,"GstVideoChromaMethod","","",null,null],[6,"GstVideoChromaMode","","",null,null],[6,"GstVideoColorMatrix","","",null,null],[6,"GstVideoColorPrimaries","","",null,null],[6,"GstVideoColorRange","","",null,null],[6,"GstVideoDitherMethod","","",null,null],[6,"GstVideoFieldOrder","","",null,null],[6,"GstVideoFormat","","",null,null],[6,"GstVideoGLTextureOrientation","","",null,null],[6,"GstVideoGLTextureType","","",null,null],[6,"GstVideoGammaMode","","",null,null],[6,"GstVideoInterlaceMode","","",null,null],[6,"GstVideoMatrixMode","","",null,null],[6,"GstVideoMultiviewFramePacking","","",null,null],[6,"GstVideoMultiviewMode","","",null,null],[6,"GstVideoOrientationMethod","","",null,null],[6,"GstVideoOverlayFormatFlags","","",null,null],[6,"GstVideoPrimariesMode","","",null,null],[6,"GstVideoResamplerMethod","","",null,null],[6,"GstVideoTileMode","","",null,null],[6,"VideoTileType","","",null,null],[6,"GstVideoTileType","","",null,null],[6,"GstVideoTransferFunction","","",null,null],[6,"GstVideoAffineTransformationGetMatrix","","",null,null],[6,"GstVideoConvertSampleCallback","","",null,null],[6,"GstVideoFormatPack","","",null,null],[6,"GstVideoFormatUnpack","","",null,null],[6,"GstVideoGLTextureUpload","","",null,null],[17,"GST_COLOR_BALANCE_HARDWARE","","",null,null],[17,"GST_COLOR_BALANCE_SOFTWARE","","",null,null],[17,"GST_NAVIGATION_COMMAND_INVALID","","",null,null],[17,"GST_NAVIGATION_COMMAND_MENU1","","",null,null],[17,"GST_NAVIGATION_COMMAND_MENU2","","",null,null],[17,"GST_NAVIGATION_COMMAND_MENU3","","",null,null],[17,"GST_NAVIGATION_COMMAND_MENU4","","",null,null],[17,"GST_NAVIGATION_COMMAND_MENU5","","",null,null],[17,"GST_NAVIGATION_COMMAND_MENU6","","",null,null],[17,"GST_NAVIGATION_COMMAND_MENU7","","",null,null],[17,"GST_NAVIGATION_COMMAND_LEFT","","",null,null],[17,"GST_NAVIGATION_COMMAND_RIGHT","","",null,null],[17,"GST_NAVIGATION_COMMAND_UP","","",null,null],[17,"GST_NAVIGATION_COMMAND_DOWN","","",null,null],[17,"GST_NAVIGATION_COMMAND_ACTIVATE","","",null,null],[17,"GST_NAVIGATION_COMMAND_PREV_ANGLE","","",null,null],[17,"GST_NAVIGATION_COMMAND_NEXT_ANGLE","","",null,null],[17,"GST_NAVIGATION_EVENT_INVALID","","",null,null],[17,"GST_NAVIGATION_EVENT_KEY_PRESS","","",null,null],[17,"GST_NAVIGATION_EVENT_KEY_RELEASE","","",null,null],[17,"GST_NAVIGATION_EVENT_MOUSE_BUTTON_PRESS","","",null,null],[17,"GST_NAVIGATION_EVENT_MOUSE_BUTTON_RELEASE","","",null,null],[17,"GST_NAVIGATION_EVENT_MOUSE_MOVE","","",null,null],[17,"GST_NAVIGATION_EVENT_COMMAND","","",null,null],[17,"GST_NAVIGATION_MESSAGE_INVALID","","",null,null],[17,"GST_NAVIGATION_MESSAGE_MOUSE_OVER","","",null,null],[17,"GST_NAVIGATION_MESSAGE_COMMANDS_CHANGED","","",null,null],[17,"GST_NAVIGATION_MESSAGE_ANGLES_CHANGED","","",null,null],[17,"GST_NAVIGATION_MESSAGE_EVENT","","",null,null],[17,"GST_NAVIGATION_QUERY_INVALID","","",null,null],[17,"GST_NAVIGATION_QUERY_COMMANDS","","",null,null],[17,"GST_NAVIGATION_QUERY_ANGLES","","",null,null],[17,"GST_VIDEO_ALPHA_MODE_COPY","","",null,null],[17,"GST_VIDEO_ALPHA_MODE_SET","","",null,null],[17,"GST_VIDEO_ALPHA_MODE_MULT","","",null,null],[17,"GST_VIDEO_CHROMA_METHOD_NEAREST","","",null,null],[17,"GST_VIDEO_CHROMA_METHOD_LINEAR","","",null,null],[17,"GST_VIDEO_CHROMA_MODE_FULL","","",null,null],[17,"GST_VIDEO_CHROMA_MODE_UPSAMPLE_ONLY","","",null,null],[17,"GST_VIDEO_CHROMA_MODE_DOWNSAMPLE_ONLY","","",null,null],[17,"GST_VIDEO_CHROMA_MODE_NONE","","",null,null],[17,"GST_VIDEO_COLOR_MATRIX_UNKNOWN","","",null,null],[17,"GST_VIDEO_COLOR_MATRIX_RGB","","",null,null],[17,"GST_VIDEO_COLOR_MATRIX_FCC","","",null,null],[17,"GST_VIDEO_COLOR_MATRIX_BT709","","",null,null],[17,"GST_VIDEO_COLOR_MATRIX_BT601","","",null,null],[17,"GST_VIDEO_COLOR_MATRIX_SMPTE240M","","",null,null],[17,"GST_VIDEO_COLOR_MATRIX_BT2020","","",null,null],[17,"GST_VIDEO_COLOR_PRIMARIES_UNKNOWN","","",null,null],[17,"GST_VIDEO_COLOR_PRIMARIES_BT709","","",null,null],[17,"GST_VIDEO_COLOR_PRIMARIES_BT470M","","",null,null],[17,"GST_VIDEO_COLOR_PRIMARIES_BT470BG","","",null,null],[17,"GST_VIDEO_COLOR_PRIMARIES_SMPTE170M","","",null,null],[17,"GST_VIDEO_COLOR_PRIMARIES_SMPTE240M","","",null,null],[17,"GST_VIDEO_COLOR_PRIMARIES_FILM","","",null,null],[17,"GST_VIDEO_COLOR_PRIMARIES_BT2020","","",null,null],[17,"GST_VIDEO_COLOR_PRIMARIES_ADOBERGB","","",null,null],[17,"GST_VIDEO_COLOR_RANGE_UNKNOWN","","",null,null],[17,"GST_VIDEO_COLOR_RANGE_0_255","","",null,null],[17,"GST_VIDEO_COLOR_RANGE_16_235","","",null,null],[17,"GST_VIDEO_DITHER_NONE","","",null,null],[17,"GST_VIDEO_DITHER_VERTERR","","",null,null],[17,"GST_VIDEO_DITHER_FLOYD_STEINBERG","","",null,null],[17,"GST_VIDEO_DITHER_SIERRA_LITE","","",null,null],[17,"GST_VIDEO_DITHER_BAYER","","",null,null],[17,"GST_VIDEO_FIELD_ORDER_UNKNOWN","","",null,null],[17,"GST_VIDEO_FIELD_ORDER_TOP_FIELD_FIRST","","",null,null],[17,"GST_VIDEO_FIELD_ORDER_BOTTOM_FIELD_FIRST","","",null,null],[17,"GST_VIDEO_FORMAT_UNKNOWN","","",null,null],[17,"GST_VIDEO_FORMAT_ENCODED","","",null,null],[17,"GST_VIDEO_FORMAT_I420","","",null,null],[17,"GST_VIDEO_FORMAT_YV12","","",null,null],[17,"GST_VIDEO_FORMAT_YUY2","","",null,null],[17,"GST_VIDEO_FORMAT_UYVY","","",null,null],[17,"GST_VIDEO_FORMAT_AYUV","","",null,null],[17,"GST_VIDEO_FORMAT_RGBx","","",null,null],[17,"GST_VIDEO_FORMAT_BGRx","","",null,null],[17,"GST_VIDEO_FORMAT_xRGB","","",null,null],[17,"GST_VIDEO_FORMAT_xBGR","","",null,null],[17,"GST_VIDEO_FORMAT_RGBA","","",null,null],[17,"GST_VIDEO_FORMAT_BGRA","","",null,null],[17,"GST_VIDEO_FORMAT_ARGB","","",null,null],[17,"GST_VIDEO_FORMAT_ABGR","","",null,null],[17,"GST_VIDEO_FORMAT_RGB","","",null,null],[17,"GST_VIDEO_FORMAT_BGR","","",null,null],[17,"GST_VIDEO_FORMAT_Y41B","","",null,null],[17,"GST_VIDEO_FORMAT_Y42B","","",null,null],[17,"GST_VIDEO_FORMAT_YVYU","","",null,null],[17,"GST_VIDEO_FORMAT_Y444","","",null,null],[17,"GST_VIDEO_FORMAT_v210","","",null,null],[17,"GST_VIDEO_FORMAT_v216","","",null,null],[17,"GST_VIDEO_FORMAT_NV12","","",null,null],[17,"GST_VIDEO_FORMAT_NV21","","",null,null],[17,"GST_VIDEO_FORMAT_GRAY8","","",null,null],[17,"GST_VIDEO_FORMAT_GRAY16_BE","","",null,null],[17,"GST_VIDEO_FORMAT_GRAY16_LE","","",null,null],[17,"GST_VIDEO_FORMAT_v308","","",null,null],[17,"GST_VIDEO_FORMAT_RGB16","","",null,null],[17,"GST_VIDEO_FORMAT_BGR16","","",null,null],[17,"GST_VIDEO_FORMAT_RGB15","","",null,null],[17,"GST_VIDEO_FORMAT_BGR15","","",null,null],[17,"GST_VIDEO_FORMAT_UYVP","","",null,null],[17,"GST_VIDEO_FORMAT_A420","","",null,null],[17,"GST_VIDEO_FORMAT_RGB8P","","",null,null],[17,"GST_VIDEO_FORMAT_YUV9","","",null,null],[17,"GST_VIDEO_FORMAT_YVU9","","",null,null],[17,"GST_VIDEO_FORMAT_IYU1","","",null,null],[17,"GST_VIDEO_FORMAT_ARGB64","","",null,null],[17,"GST_VIDEO_FORMAT_AYUV64","","",null,null],[17,"GST_VIDEO_FORMAT_r210","","",null,null],[17,"GST_VIDEO_FORMAT_I420_10BE","","",null,null],[17,"GST_VIDEO_FORMAT_I420_10LE","","",null,null],[17,"GST_VIDEO_FORMAT_I422_10BE","","",null,null],[17,"GST_VIDEO_FORMAT_I422_10LE","","",null,null],[17,"GST_VIDEO_FORMAT_Y444_10BE","","",null,null],[17,"GST_VIDEO_FORMAT_Y444_10LE","","",null,null],[17,"GST_VIDEO_FORMAT_GBR","","",null,null],[17,"GST_VIDEO_FORMAT_GBR_10BE","","",null,null],[17,"GST_VIDEO_FORMAT_GBR_10LE","","",null,null],[17,"GST_VIDEO_FORMAT_NV16","","",null,null],[17,"GST_VIDEO_FORMAT_NV24","","",null,null],[17,"GST_VIDEO_FORMAT_NV12_64Z32","","",null,null],[17,"GST_VIDEO_FORMAT_A420_10BE","","",null,null],[17,"GST_VIDEO_FORMAT_A420_10LE","","",null,null],[17,"GST_VIDEO_FORMAT_A422_10BE","","",null,null],[17,"GST_VIDEO_FORMAT_A422_10LE","","",null,null],[17,"GST_VIDEO_FORMAT_A444_10BE","","",null,null],[17,"GST_VIDEO_FORMAT_A444_10LE","","",null,null],[17,"GST_VIDEO_FORMAT_NV61","","",null,null],[17,"GST_VIDEO_FORMAT_P010_10BE","","",null,null],[17,"GST_VIDEO_FORMAT_P010_10LE","","",null,null],[17,"GST_VIDEO_FORMAT_IYU2","","",null,null],[17,"GST_VIDEO_FORMAT_VYUY","","",null,null],[17,"GST_VIDEO_FORMAT_GBRA","","",null,null],[17,"GST_VIDEO_FORMAT_GBRA_10BE","","",null,null],[17,"GST_VIDEO_FORMAT_GBRA_10LE","","",null,null],[17,"GST_VIDEO_FORMAT_GBR_12BE","","",null,null],[17,"GST_VIDEO_FORMAT_GBR_12LE","","",null,null],[17,"GST_VIDEO_FORMAT_GBRA_12BE","","",null,null],[17,"GST_VIDEO_FORMAT_GBRA_12LE","","",null,null],[17,"GST_VIDEO_FORMAT_I420_12BE","","",null,null],[17,"GST_VIDEO_FORMAT_I420_12LE","","",null,null],[17,"GST_VIDEO_FORMAT_I422_12BE","","",null,null],[17,"GST_VIDEO_FORMAT_I422_12LE","","",null,null],[17,"GST_VIDEO_FORMAT_Y444_12BE","","",null,null],[17,"GST_VIDEO_FORMAT_Y444_12LE","","",null,null],[17,"GST_VIDEO_GL_TEXTURE_ORIENTATION_X_NORMAL_Y_NORMAL","","",null,null],[17,"GST_VIDEO_GL_TEXTURE_ORIENTATION_X_NORMAL_Y_FLIP","","",null,null],[17,"GST_VIDEO_GL_TEXTURE_ORIENTATION_X_FLIP_Y_NORMAL","","",null,null],[17,"GST_VIDEO_GL_TEXTURE_ORIENTATION_X_FLIP_Y_FLIP","","",null,null],[17,"GST_VIDEO_GL_TEXTURE_TYPE_LUMINANCE","","",null,null],[17,"GST_VIDEO_GL_TEXTURE_TYPE_LUMINANCE_ALPHA","","",null,null],[17,"GST_VIDEO_GL_TEXTURE_TYPE_RGB16","","",null,null],[17,"GST_VIDEO_GL_TEXTURE_TYPE_RGB","","",null,null],[17,"GST_VIDEO_GL_TEXTURE_TYPE_RGBA","","",null,null],[17,"GST_VIDEO_GL_TEXTURE_TYPE_R","","",null,null],[17,"GST_VIDEO_GL_TEXTURE_TYPE_RG","","",null,null],[17,"GST_VIDEO_GAMMA_MODE_NONE","","",null,null],[17,"GST_VIDEO_GAMMA_MODE_REMAP","","",null,null],[17,"GST_VIDEO_INTERLACE_MODE_PROGRESSIVE","","",null,null],[17,"GST_VIDEO_INTERLACE_MODE_INTERLEAVED","","",null,null],[17,"GST_VIDEO_INTERLACE_MODE_MIXED","","",null,null],[17,"GST_VIDEO_INTERLACE_MODE_FIELDS","","",null,null],[17,"GST_VIDEO_MATRIX_MODE_FULL","","",null,null],[17,"GST_VIDEO_MATRIX_MODE_INPUT_ONLY","","",null,null],[17,"GST_VIDEO_MATRIX_MODE_OUTPUT_ONLY","","",null,null],[17,"GST_VIDEO_MATRIX_MODE_NONE","","",null,null],[17,"GST_VIDEO_MULTIVIEW_FRAME_PACKING_NONE","","",null,null],[17,"GST_VIDEO_MULTIVIEW_FRAME_PACKING_MONO","","",null,null],[17,"GST_VIDEO_MULTIVIEW_FRAME_PACKING_LEFT","","",null,null],[17,"GST_VIDEO_MULTIVIEW_FRAME_PACKING_RIGHT","","",null,null],[17,"GST_VIDEO_MULTIVIEW_FRAME_PACKING_SIDE_BY_SIDE","","",null,null],[17,"GST_VIDEO_MULTIVIEW_FRAME_PACKING_SIDE_BY_SIDE_QUINCUNX","","",null,null],[17,"GST_VIDEO_MULTIVIEW_FRAME_PACKING_COLUMN_INTERLEAVED","","",null,null],[17,"GST_VIDEO_MULTIVIEW_FRAME_PACKING_ROW_INTERLEAVED","","",null,null],[17,"GST_VIDEO_MULTIVIEW_FRAME_PACKING_TOP_BOTTOM","","",null,null],[17,"GST_VIDEO_MULTIVIEW_FRAME_PACKING_CHECKERBOARD","","",null,null],[17,"GST_VIDEO_MULTIVIEW_MODE_NONE","","",null,null],[17,"GST_VIDEO_MULTIVIEW_MODE_MONO","","",null,null],[17,"GST_VIDEO_MULTIVIEW_MODE_LEFT","","",null,null],[17,"GST_VIDEO_MULTIVIEW_MODE_RIGHT","","",null,null],[17,"GST_VIDEO_MULTIVIEW_MODE_SIDE_BY_SIDE","","",null,null],[17,"GST_VIDEO_MULTIVIEW_MODE_SIDE_BY_SIDE_QUINCUNX","","",null,null],[17,"GST_VIDEO_MULTIVIEW_MODE_COLUMN_INTERLEAVED","","",null,null],[17,"GST_VIDEO_MULTIVIEW_MODE_ROW_INTERLEAVED","","",null,null],[17,"GST_VIDEO_MULTIVIEW_MODE_TOP_BOTTOM","","",null,null],[17,"GST_VIDEO_MULTIVIEW_MODE_CHECKERBOARD","","",null,null],[17,"GST_VIDEO_MULTIVIEW_MODE_FRAME_BY_FRAME","","",null,null],[17,"GST_VIDEO_MULTIVIEW_MODE_MULTIVIEW_FRAME_BY_FRAME","","",null,null],[17,"GST_VIDEO_MULTIVIEW_MODE_SEPARATED","","",null,null],[17,"GST_VIDEO_ORIENTATION_IDENTITY","","",null,null],[17,"GST_VIDEO_ORIENTATION_90R","","",null,null],[17,"GST_VIDEO_ORIENTATION_180","","",null,null],[17,"GST_VIDEO_ORIENTATION_90L","","",null,null],[17,"GST_VIDEO_ORIENTATION_HORIZ","","",null,null],[17,"GST_VIDEO_ORIENTATION_VERT","","",null,null],[17,"GST_VIDEO_ORIENTATION_UL_LR","","",null,null],[17,"GST_VIDEO_ORIENTATION_UR_LL","","",null,null],[17,"GST_VIDEO_ORIENTATION_AUTO","","",null,null],[17,"GST_VIDEO_ORIENTATION_CUSTOM","","",null,null],[17,"GST_VIDEO_OVERLAY_FORMAT_FLAG_NONE","","",null,null],[17,"GST_VIDEO_OVERLAY_FORMAT_FLAG_PREMULTIPLIED_ALPHA","","",null,null],[17,"GST_VIDEO_OVERLAY_FORMAT_FLAG_GLOBAL_ALPHA","","",null,null],[17,"GST_VIDEO_PRIMARIES_MODE_NONE","","",null,null],[17,"GST_VIDEO_PRIMARIES_MODE_MERGE_ONLY","","",null,null],[17,"GST_VIDEO_PRIMARIES_MODE_FAST","","",null,null],[17,"GST_VIDEO_RESAMPLER_METHOD_NEAREST","","",null,null],[17,"GST_VIDEO_RESAMPLER_METHOD_LINEAR","","",null,null],[17,"GST_VIDEO_RESAMPLER_METHOD_CUBIC","","",null,null],[17,"GST_VIDEO_RESAMPLER_METHOD_SINC","","",null,null],[17,"GST_VIDEO_RESAMPLER_METHOD_LANCZOS","","",null,null],[17,"GST_VIDEO_TILE_MODE_UNKNOWN","","",null,null],[17,"GST_VIDEO_TILE_MODE_ZFLIPZ_2X2","","",null,null],[17,"GST_VIDEO_TILE_TYPE_INDEXED","","",null,null],[17,"GST_VIDEO_TRANSFER_UNKNOWN","","",null,null],[17,"GST_VIDEO_TRANSFER_GAMMA10","","",null,null],[17,"GST_VIDEO_TRANSFER_GAMMA18","","",null,null],[17,"GST_VIDEO_TRANSFER_GAMMA20","","",null,null],[17,"GST_VIDEO_TRANSFER_GAMMA22","","",null,null],[17,"GST_VIDEO_TRANSFER_BT709","","",null,null],[17,"GST_VIDEO_TRANSFER_SMPTE240M","","",null,null],[17,"GST_VIDEO_TRANSFER_SRGB","","",null,null],[17,"GST_VIDEO_TRANSFER_GAMMA28","","",null,null],[17,"GST_VIDEO_TRANSFER_LOG100","","",null,null],[17,"GST_VIDEO_TRANSFER_LOG316","","",null,null],[17,"GST_VIDEO_TRANSFER_BT2020_12","","",null,null],[17,"GST_VIDEO_TRANSFER_ADOBERGB","","",null,null],[17,"GST_BUFFER_POOL_OPTION_VIDEO_AFFINE_TRANSFORMATION_META","","",null,null],[17,"GST_BUFFER_POOL_OPTION_VIDEO_ALIGNMENT","","",null,null],[17,"GST_BUFFER_POOL_OPTION_VIDEO_GL_TEXTURE_UPLOAD_META","","",null,null],[17,"GST_BUFFER_POOL_OPTION_VIDEO_META","","",null,null],[17,"GST_CAPS_FEATURE_META_GST_VIDEO_AFFINE_TRANSFORMATION_META","","",null,null],[17,"GST_CAPS_FEATURE_META_GST_VIDEO_GL_TEXTURE_UPLOAD_META","","",null,null],[17,"GST_CAPS_FEATURE_META_GST_VIDEO_META","","",null,null],[17,"GST_CAPS_FEATURE_META_GST_VIDEO_OVERLAY_COMPOSITION","","",null,null],[17,"GST_META_TAG_VIDEO_COLORSPACE_STR","","",null,null],[17,"GST_META_TAG_VIDEO_ORIENTATION_STR","","",null,null],[17,"GST_META_TAG_VIDEO_SIZE_STR","","",null,null],[17,"GST_META_TAG_VIDEO_STR","","",null,null],[17,"GST_VIDEO_COLORIMETRY_BT2020","","",null,null],[17,"GST_VIDEO_COLORIMETRY_BT601","","",null,null],[17,"GST_VIDEO_COLORIMETRY_BT709","","",null,null],[17,"GST_VIDEO_COLORIMETRY_SMPTE240M","","",null,null],[17,"GST_VIDEO_COLORIMETRY_SRGB","","",null,null],[17,"GST_VIDEO_COMP_A","","",null,null],[17,"GST_VIDEO_COMP_B","","",null,null],[17,"GST_VIDEO_COMP_G","","",null,null],[17,"GST_VIDEO_COMP_INDEX","","",null,null],[17,"GST_VIDEO_COMP_PALETTE","","",null,null],[17,"GST_VIDEO_COMP_R","","",null,null],[17,"GST_VIDEO_COMP_U","","",null,null],[17,"GST_VIDEO_COMP_V","","",null,null],[17,"GST_VIDEO_COMP_Y","","",null,null],[17,"GST_VIDEO_CONVERTER_OPT_ALPHA_MODE","","",null,null],[17,"GST_VIDEO_CONVERTER_OPT_ALPHA_VALUE","","",null,null],[17,"GST_VIDEO_CONVERTER_OPT_BORDER_ARGB","","",null,null],[17,"GST_VIDEO_CONVERTER_OPT_CHROMA_MODE","","",null,null],[17,"GST_VIDEO_CONVERTER_OPT_CHROMA_RESAMPLER_METHOD","","",null,null],[17,"GST_VIDEO_CONVERTER_OPT_DEST_HEIGHT","","",null,null],[17,"GST_VIDEO_CONVERTER_OPT_DEST_WIDTH","","",null,null],[17,"GST_VIDEO_CONVERTER_OPT_DEST_X","","",null,null],[17,"GST_VIDEO_CONVERTER_OPT_DEST_Y","","",null,null],[17,"GST_VIDEO_CONVERTER_OPT_DITHER_METHOD","","",null,null],[17,"GST_VIDEO_CONVERTER_OPT_DITHER_QUANTIZATION","","",null,null],[17,"GST_VIDEO_CONVERTER_OPT_FILL_BORDER","","",null,null],[17,"GST_VIDEO_CONVERTER_OPT_GAMMA_MODE","","",null,null],[17,"GST_VIDEO_CONVERTER_OPT_MATRIX_MODE","","",null,null],[17,"GST_VIDEO_CONVERTER_OPT_PRIMARIES_MODE","","",null,null],[17,"GST_VIDEO_CONVERTER_OPT_RESAMPLER_METHOD","","",null,null],[17,"GST_VIDEO_CONVERTER_OPT_RESAMPLER_TAPS","","",null,null],[17,"GST_VIDEO_CONVERTER_OPT_SRC_HEIGHT","","",null,null],[17,"GST_VIDEO_CONVERTER_OPT_SRC_WIDTH","","",null,null],[17,"GST_VIDEO_CONVERTER_OPT_SRC_X","","",null,null],[17,"GST_VIDEO_CONVERTER_OPT_SRC_Y","","",null,null],[17,"GST_VIDEO_CONVERTER_OPT_THREADS","","",null,null],[17,"GST_VIDEO_DECODER_MAX_ERRORS","","",null,null],[17,"GST_VIDEO_DECODER_SINK_NAME","","",null,null],[17,"GST_VIDEO_DECODER_SRC_NAME","","",null,null],[17,"GST_VIDEO_ENCODER_SINK_NAME","","",null,null],[17,"GST_VIDEO_ENCODER_SRC_NAME","","",null,null],[17,"GST_VIDEO_FORMATS_ALL","","",null,null],[17,"GST_VIDEO_FPS_RANGE","","",null,null],[17,"GST_VIDEO_MAX_COMPONENTS","","",null,null],[17,"GST_VIDEO_MAX_PLANES","","",null,null],[17,"GST_VIDEO_OVERLAY_COMPOSITION_BLEND_FORMATS","","",null,null],[17,"GST_VIDEO_RESAMPLER_OPT_CUBIC_B","","",null,null],[17,"GST_VIDEO_RESAMPLER_OPT_CUBIC_C","","",null,null],[17,"GST_VIDEO_RESAMPLER_OPT_ENVELOPE","","",null,null],[17,"GST_VIDEO_RESAMPLER_OPT_MAX_TAPS","","",null,null],[17,"GST_VIDEO_RESAMPLER_OPT_SHARPEN","","",null,null],[17,"GST_VIDEO_RESAMPLER_OPT_SHARPNESS","","",null,null],[17,"GST_VIDEO_SCALER_OPT_DITHER_METHOD","","",null,null],[17,"GST_VIDEO_SIZE_RANGE","","",null,null],[17,"GST_VIDEO_TILE_TYPE_MASK","","",null,null],[17,"GST_VIDEO_TILE_TYPE_SHIFT","","",null,null],[17,"GST_VIDEO_TILE_X_TILES_MASK","","",null,null],[17,"GST_VIDEO_TILE_Y_TILES_SHIFT","","",null,null],[17,"GST_VIDEO_BUFFER_FLAG_INTERLACED","","",null,null],[17,"GST_VIDEO_BUFFER_FLAG_TFF","","",null,null],[17,"GST_VIDEO_BUFFER_FLAG_RFF","","",null,null],[17,"GST_VIDEO_BUFFER_FLAG_ONEFIELD","","",null,null],[17,"GST_VIDEO_BUFFER_FLAG_MULTIPLE_VIEW","","",null,null],[17,"GST_VIDEO_BUFFER_FLAG_FIRST_IN_BUNDLE","","",null,null],[17,"GST_VIDEO_BUFFER_FLAG_LAST","","",null,null],[17,"GST_VIDEO_CHROMA_FLAG_NONE","","",null,null],[17,"GST_VIDEO_CHROMA_FLAG_INTERLACED","","",null,null],[17,"GST_VIDEO_CHROMA_SITE_UNKNOWN","","",null,null],[17,"GST_VIDEO_CHROMA_SITE_NONE","","",null,null],[17,"GST_VIDEO_CHROMA_SITE_H_COSITED","","",null,null],[17,"GST_VIDEO_CHROMA_SITE_V_COSITED","","",null,null],[17,"GST_VIDEO_CHROMA_SITE_ALT_LINE","","",null,null],[17,"GST_VIDEO_CHROMA_SITE_COSITED","","",null,null],[17,"GST_VIDEO_CHROMA_SITE_JPEG","","",null,null],[17,"GST_VIDEO_CHROMA_SITE_MPEG2","","",null,null],[17,"GST_VIDEO_CHROMA_SITE_DV","","",null,null],[17,"GST_VIDEO_CODEC_FRAME_FLAG_DECODE_ONLY","","",null,null],[17,"GST_VIDEO_CODEC_FRAME_FLAG_SYNC_POINT","","",null,null],[17,"GST_VIDEO_CODEC_FRAME_FLAG_FORCE_KEYFRAME","","",null,null],[17,"GST_VIDEO_CODEC_FRAME_FLAG_FORCE_KEYFRAME_HEADERS","","",null,null],[17,"GST_VIDEO_DITHER_FLAG_NONE","","",null,null],[17,"GST_VIDEO_DITHER_FLAG_INTERLACED","","",null,null],[17,"GST_VIDEO_DITHER_FLAG_QUANTIZE","","",null,null],[17,"GST_VIDEO_FLAG_NONE","","",null,null],[17,"GST_VIDEO_FLAG_VARIABLE_FPS","","",null,null],[17,"GST_VIDEO_FLAG_PREMULTIPLIED_ALPHA","","",null,null],[17,"GST_VIDEO_FORMAT_FLAG_YUV","","",null,null],[17,"GST_VIDEO_FORMAT_FLAG_RGB","","",null,null],[17,"GST_VIDEO_FORMAT_FLAG_GRAY","","",null,null],[17,"GST_VIDEO_FORMAT_FLAG_ALPHA","","",null,null],[17,"GST_VIDEO_FORMAT_FLAG_LE","","",null,null],[17,"GST_VIDEO_FORMAT_FLAG_PALETTE","","",null,null],[17,"GST_VIDEO_FORMAT_FLAG_COMPLEX","","",null,null],[17,"GST_VIDEO_FORMAT_FLAG_UNPACK","","",null,null],[17,"GST_VIDEO_FORMAT_FLAG_TILED","","",null,null],[17,"GST_VIDEO_FRAME_FLAG_NONE","","",null,null],[17,"GST_VIDEO_FRAME_FLAG_INTERLACED","","",null,null],[17,"GST_VIDEO_FRAME_FLAG_TFF","","",null,null],[17,"GST_VIDEO_FRAME_FLAG_RFF","","",null,null],[17,"GST_VIDEO_FRAME_FLAG_ONEFIELD","","",null,null],[17,"GST_VIDEO_FRAME_FLAG_MULTIPLE_VIEW","","",null,null],[17,"GST_VIDEO_FRAME_FLAG_FIRST_IN_BUNDLE","","",null,null],[17,"GST_VIDEO_FRAME_MAP_FLAG_NO_REF","","",null,null],[17,"GST_VIDEO_FRAME_MAP_FLAG_LAST","","",null,null],[17,"GST_VIDEO_MULTIVIEW_FLAGS_NONE","","",null,null],[17,"GST_VIDEO_MULTIVIEW_FLAGS_RIGHT_VIEW_FIRST","","",null,null],[17,"GST_VIDEO_MULTIVIEW_FLAGS_LEFT_FLIPPED","","",null,null],[17,"GST_VIDEO_MULTIVIEW_FLAGS_LEFT_FLOPPED","","",null,null],[17,"GST_VIDEO_MULTIVIEW_FLAGS_RIGHT_FLIPPED","","",null,null],[17,"GST_VIDEO_MULTIVIEW_FLAGS_RIGHT_FLOPPED","","",null,null],[17,"GST_VIDEO_MULTIVIEW_FLAGS_HALF_ASPECT","","",null,null],[17,"GST_VIDEO_MULTIVIEW_FLAGS_MIXED_MONO","","",null,null],[17,"GST_VIDEO_PACK_FLAG_NONE","","",null,null],[17,"GST_VIDEO_PACK_FLAG_TRUNCATE_RANGE","","",null,null],[17,"GST_VIDEO_PACK_FLAG_INTERLACED","","",null,null],[17,"GST_VIDEO_RESAMPLER_FLAG_NONE","","",null,null],[17,"GST_VIDEO_RESAMPLER_FLAG_HALF_TAPS","","",null,null],[17,"GST_VIDEO_SCALER_FLAG_NONE","","",null,null],[17,"GST_VIDEO_SCALER_FLAG_INTERLACED","","",null,null],[17,"GST_VIDEO_TIME_CODE_FLAGS_NONE","","",null,null],[17,"GST_VIDEO_TIME_CODE_FLAGS_DROP_FRAME","","",null,null],[17,"GST_VIDEO_TIME_CODE_FLAGS_INTERLACED","","",null,null],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"gstvideobufferflags"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"gstvideobufferflags"}],"output":{"name":"bool"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"gstvideobufferflags"}}],[11,"partial_cmp","","",38,{"inputs":[{"name":"self"},{"name":"gstvideobufferflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",38,{"inputs":[{"name":"self"},{"name":"gstvideobufferflags"}],"output":{"name":"bool"}}],[11,"le","","",38,{"inputs":[{"name":"self"},{"name":"gstvideobufferflags"}],"output":{"name":"bool"}}],[11,"gt","","",38,{"inputs":[{"name":"self"},{"name":"gstvideobufferflags"}],"output":{"name":"bool"}}],[11,"ge","","",38,{"inputs":[{"name":"self"},{"name":"gstvideobufferflags"}],"output":{"name":"bool"}}],[11,"cmp","","",38,{"inputs":[{"name":"self"},{"name":"gstvideobufferflags"}],"output":{"name":"ordering"}}],[11,"hash","","",38,null],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"INTERLACED","","",38,null],[18,"TFF","","",38,null],[18,"RFF","","",38,null],[18,"ONEFIELD","","",38,null],[18,"MULTIPLE_VIEW","","",38,null],[18,"FIRST_IN_BUNDLE","","",38,null],[18,"LAST","","",38,null],[11,"empty","","Returns an empty set of flags.",38,{"inputs":[],"output":{"name":"gstvideobufferflags"}}],[11,"all","","Returns the set containing all flags.",38,{"inputs":[],"output":{"name":"gstvideobufferflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",38,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",38,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gstvideobufferflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",38,{"inputs":[{"name":"c_uint"}],"output":{"name":"gstvideobufferflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",38,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",38,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",38,{"inputs":[{"name":"self"},{"name":"gstvideobufferflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",38,{"inputs":[{"name":"self"},{"name":"gstvideobufferflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",38,{"inputs":[{"name":"self"},{"name":"gstvideobufferflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",38,{"inputs":[{"name":"self"},{"name":"gstvideobufferflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",38,{"inputs":[{"name":"self"},{"name":"gstvideobufferflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",38,{"inputs":[{"name":"self"},{"name":"gstvideobufferflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",38,{"inputs":[{"name":"self"},{"name":"gstvideobufferflags"}],"output":{"name":"gstvideobufferflags"}}],[11,"bitor_assign","","Adds the set of flags.",38,{"inputs":[{"name":"self"},{"name":"gstvideobufferflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",38,{"inputs":[{"name":"self"},{"name":"gstvideobufferflags"}],"output":{"name":"gstvideobufferflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",38,{"inputs":[{"name":"self"},{"name":"gstvideobufferflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",38,{"inputs":[{"name":"self"},{"name":"gstvideobufferflags"}],"output":{"name":"gstvideobufferflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",38,{"inputs":[{"name":"self"},{"name":"gstvideobufferflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",38,{"inputs":[{"name":"self"},{"name":"gstvideobufferflags"}],"output":{"name":"gstvideobufferflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",38,{"inputs":[{"name":"self"},{"name":"gstvideobufferflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",38,{"inputs":[{"name":"self"}],"output":{"name":"gstvideobufferflags"}}],[11,"extend","","",38,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",38,{"inputs":[{"name":"t"}],"output":{"name":"gstvideobufferflags"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"gstvideochromaflags"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"gstvideochromaflags"}],"output":{"name":"bool"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"gstvideochromaflags"}}],[11,"partial_cmp","","",39,{"inputs":[{"name":"self"},{"name":"gstvideochromaflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",39,{"inputs":[{"name":"self"},{"name":"gstvideochromaflags"}],"output":{"name":"bool"}}],[11,"le","","",39,{"inputs":[{"name":"self"},{"name":"gstvideochromaflags"}],"output":{"name":"bool"}}],[11,"gt","","",39,{"inputs":[{"name":"self"},{"name":"gstvideochromaflags"}],"output":{"name":"bool"}}],[11,"ge","","",39,{"inputs":[{"name":"self"},{"name":"gstvideochromaflags"}],"output":{"name":"bool"}}],[11,"cmp","","",39,{"inputs":[{"name":"self"},{"name":"gstvideochromaflags"}],"output":{"name":"ordering"}}],[11,"hash","","",39,null],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",39,null],[18,"INTERLACED","","",39,null],[11,"empty","","Returns an empty set of flags.",39,{"inputs":[],"output":{"name":"gstvideochromaflags"}}],[11,"all","","Returns the set containing all flags.",39,{"inputs":[],"output":{"name":"gstvideochromaflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",39,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",39,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gstvideochromaflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",39,{"inputs":[{"name":"c_uint"}],"output":{"name":"gstvideochromaflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",39,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",39,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",39,{"inputs":[{"name":"self"},{"name":"gstvideochromaflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",39,{"inputs":[{"name":"self"},{"name":"gstvideochromaflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",39,{"inputs":[{"name":"self"},{"name":"gstvideochromaflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",39,{"inputs":[{"name":"self"},{"name":"gstvideochromaflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",39,{"inputs":[{"name":"self"},{"name":"gstvideochromaflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",39,{"inputs":[{"name":"self"},{"name":"gstvideochromaflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",39,{"inputs":[{"name":"self"},{"name":"gstvideochromaflags"}],"output":{"name":"gstvideochromaflags"}}],[11,"bitor_assign","","Adds the set of flags.",39,{"inputs":[{"name":"self"},{"name":"gstvideochromaflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",39,{"inputs":[{"name":"self"},{"name":"gstvideochromaflags"}],"output":{"name":"gstvideochromaflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",39,{"inputs":[{"name":"self"},{"name":"gstvideochromaflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",39,{"inputs":[{"name":"self"},{"name":"gstvideochromaflags"}],"output":{"name":"gstvideochromaflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",39,{"inputs":[{"name":"self"},{"name":"gstvideochromaflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",39,{"inputs":[{"name":"self"},{"name":"gstvideochromaflags"}],"output":{"name":"gstvideochromaflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",39,{"inputs":[{"name":"self"},{"name":"gstvideochromaflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",39,{"inputs":[{"name":"self"}],"output":{"name":"gstvideochromaflags"}}],[11,"extend","","",39,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",39,{"inputs":[{"name":"t"}],"output":{"name":"gstvideochromaflags"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"gstvideochromasite"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"gstvideochromasite"}],"output":{"name":"bool"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"gstvideochromasite"}}],[11,"partial_cmp","","",40,{"inputs":[{"name":"self"},{"name":"gstvideochromasite"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",40,{"inputs":[{"name":"self"},{"name":"gstvideochromasite"}],"output":{"name":"bool"}}],[11,"le","","",40,{"inputs":[{"name":"self"},{"name":"gstvideochromasite"}],"output":{"name":"bool"}}],[11,"gt","","",40,{"inputs":[{"name":"self"},{"name":"gstvideochromasite"}],"output":{"name":"bool"}}],[11,"ge","","",40,{"inputs":[{"name":"self"},{"name":"gstvideochromasite"}],"output":{"name":"bool"}}],[11,"cmp","","",40,{"inputs":[{"name":"self"},{"name":"gstvideochromasite"}],"output":{"name":"ordering"}}],[11,"hash","","",40,null],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"UNKNOWN","","",40,null],[18,"NONE","","",40,null],[18,"H_COSITED","","",40,null],[18,"V_COSITED","","",40,null],[18,"ALT_LINE","","",40,null],[18,"COSITED","","",40,null],[18,"JPEG","","",40,null],[18,"MPEG2","","",40,null],[18,"DV","","",40,null],[11,"empty","","Returns an empty set of flags.",40,{"inputs":[],"output":{"name":"gstvideochromasite"}}],[11,"all","","Returns the set containing all flags.",40,{"inputs":[],"output":{"name":"gstvideochromasite"}}],[11,"bits","","Returns the raw value of the flags currently stored.",40,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",40,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gstvideochromasite"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",40,{"inputs":[{"name":"c_uint"}],"output":{"name":"gstvideochromasite"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",40,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",40,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",40,{"inputs":[{"name":"self"},{"name":"gstvideochromasite"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",40,{"inputs":[{"name":"self"},{"name":"gstvideochromasite"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",40,{"inputs":[{"name":"self"},{"name":"gstvideochromasite"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",40,{"inputs":[{"name":"self"},{"name":"gstvideochromasite"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",40,{"inputs":[{"name":"self"},{"name":"gstvideochromasite"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",40,{"inputs":[{"name":"self"},{"name":"gstvideochromasite"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",40,{"inputs":[{"name":"self"},{"name":"gstvideochromasite"}],"output":{"name":"gstvideochromasite"}}],[11,"bitor_assign","","Adds the set of flags.",40,{"inputs":[{"name":"self"},{"name":"gstvideochromasite"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",40,{"inputs":[{"name":"self"},{"name":"gstvideochromasite"}],"output":{"name":"gstvideochromasite"}}],[11,"bitxor_assign","","Toggles the set of flags.",40,{"inputs":[{"name":"self"},{"name":"gstvideochromasite"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",40,{"inputs":[{"name":"self"},{"name":"gstvideochromasite"}],"output":{"name":"gstvideochromasite"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",40,{"inputs":[{"name":"self"},{"name":"gstvideochromasite"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",40,{"inputs":[{"name":"self"},{"name":"gstvideochromasite"}],"output":{"name":"gstvideochromasite"}}],[11,"sub_assign","","Disables all flags enabled in the set.",40,{"inputs":[{"name":"self"},{"name":"gstvideochromasite"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",40,{"inputs":[{"name":"self"}],"output":{"name":"gstvideochromasite"}}],[11,"extend","","",40,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",40,{"inputs":[{"name":"t"}],"output":{"name":"gstvideochromasite"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"gstvideocodecframeflags"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"gstvideocodecframeflags"}],"output":{"name":"bool"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"gstvideocodecframeflags"}}],[11,"partial_cmp","","",41,{"inputs":[{"name":"self"},{"name":"gstvideocodecframeflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",41,{"inputs":[{"name":"self"},{"name":"gstvideocodecframeflags"}],"output":{"name":"bool"}}],[11,"le","","",41,{"inputs":[{"name":"self"},{"name":"gstvideocodecframeflags"}],"output":{"name":"bool"}}],[11,"gt","","",41,{"inputs":[{"name":"self"},{"name":"gstvideocodecframeflags"}],"output":{"name":"bool"}}],[11,"ge","","",41,{"inputs":[{"name":"self"},{"name":"gstvideocodecframeflags"}],"output":{"name":"bool"}}],[11,"cmp","","",41,{"inputs":[{"name":"self"},{"name":"gstvideocodecframeflags"}],"output":{"name":"ordering"}}],[11,"hash","","",41,null],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"DECODE_ONLY","","",41,null],[18,"SYNC_POINT","","",41,null],[18,"FORCE_KEYFRAME","","",41,null],[18,"FORCE_KEYFRAME_HEADERS","","",41,null],[11,"empty","","Returns an empty set of flags.",41,{"inputs":[],"output":{"name":"gstvideocodecframeflags"}}],[11,"all","","Returns the set containing all flags.",41,{"inputs":[],"output":{"name":"gstvideocodecframeflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",41,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",41,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gstvideocodecframeflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",41,{"inputs":[{"name":"c_uint"}],"output":{"name":"gstvideocodecframeflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",41,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",41,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",41,{"inputs":[{"name":"self"},{"name":"gstvideocodecframeflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",41,{"inputs":[{"name":"self"},{"name":"gstvideocodecframeflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",41,{"inputs":[{"name":"self"},{"name":"gstvideocodecframeflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",41,{"inputs":[{"name":"self"},{"name":"gstvideocodecframeflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",41,{"inputs":[{"name":"self"},{"name":"gstvideocodecframeflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",41,{"inputs":[{"name":"self"},{"name":"gstvideocodecframeflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",41,{"inputs":[{"name":"self"},{"name":"gstvideocodecframeflags"}],"output":{"name":"gstvideocodecframeflags"}}],[11,"bitor_assign","","Adds the set of flags.",41,{"inputs":[{"name":"self"},{"name":"gstvideocodecframeflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",41,{"inputs":[{"name":"self"},{"name":"gstvideocodecframeflags"}],"output":{"name":"gstvideocodecframeflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",41,{"inputs":[{"name":"self"},{"name":"gstvideocodecframeflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",41,{"inputs":[{"name":"self"},{"name":"gstvideocodecframeflags"}],"output":{"name":"gstvideocodecframeflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",41,{"inputs":[{"name":"self"},{"name":"gstvideocodecframeflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",41,{"inputs":[{"name":"self"},{"name":"gstvideocodecframeflags"}],"output":{"name":"gstvideocodecframeflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",41,{"inputs":[{"name":"self"},{"name":"gstvideocodecframeflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",41,{"inputs":[{"name":"self"}],"output":{"name":"gstvideocodecframeflags"}}],[11,"extend","","",41,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",41,{"inputs":[{"name":"t"}],"output":{"name":"gstvideocodecframeflags"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"gstvideoditherflags"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"self"},{"name":"gstvideoditherflags"}],"output":{"name":"bool"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"gstvideoditherflags"}}],[11,"partial_cmp","","",42,{"inputs":[{"name":"self"},{"name":"gstvideoditherflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",42,{"inputs":[{"name":"self"},{"name":"gstvideoditherflags"}],"output":{"name":"bool"}}],[11,"le","","",42,{"inputs":[{"name":"self"},{"name":"gstvideoditherflags"}],"output":{"name":"bool"}}],[11,"gt","","",42,{"inputs":[{"name":"self"},{"name":"gstvideoditherflags"}],"output":{"name":"bool"}}],[11,"ge","","",42,{"inputs":[{"name":"self"},{"name":"gstvideoditherflags"}],"output":{"name":"bool"}}],[11,"cmp","","",42,{"inputs":[{"name":"self"},{"name":"gstvideoditherflags"}],"output":{"name":"ordering"}}],[11,"hash","","",42,null],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",42,null],[18,"INTERLACED","","",42,null],[18,"QUANTIZE","","",42,null],[11,"empty","","Returns an empty set of flags.",42,{"inputs":[],"output":{"name":"gstvideoditherflags"}}],[11,"all","","Returns the set containing all flags.",42,{"inputs":[],"output":{"name":"gstvideoditherflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",42,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",42,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gstvideoditherflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",42,{"inputs":[{"name":"c_uint"}],"output":{"name":"gstvideoditherflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",42,{"inputs":[{"name":"self"},{"name":"gstvideoditherflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",42,{"inputs":[{"name":"self"},{"name":"gstvideoditherflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",42,{"inputs":[{"name":"self"},{"name":"gstvideoditherflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",42,{"inputs":[{"name":"self"},{"name":"gstvideoditherflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",42,{"inputs":[{"name":"self"},{"name":"gstvideoditherflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",42,{"inputs":[{"name":"self"},{"name":"gstvideoditherflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",42,{"inputs":[{"name":"self"},{"name":"gstvideoditherflags"}],"output":{"name":"gstvideoditherflags"}}],[11,"bitor_assign","","Adds the set of flags.",42,{"inputs":[{"name":"self"},{"name":"gstvideoditherflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",42,{"inputs":[{"name":"self"},{"name":"gstvideoditherflags"}],"output":{"name":"gstvideoditherflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",42,{"inputs":[{"name":"self"},{"name":"gstvideoditherflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",42,{"inputs":[{"name":"self"},{"name":"gstvideoditherflags"}],"output":{"name":"gstvideoditherflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",42,{"inputs":[{"name":"self"},{"name":"gstvideoditherflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",42,{"inputs":[{"name":"self"},{"name":"gstvideoditherflags"}],"output":{"name":"gstvideoditherflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",42,{"inputs":[{"name":"self"},{"name":"gstvideoditherflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",42,{"inputs":[{"name":"self"}],"output":{"name":"gstvideoditherflags"}}],[11,"extend","","",42,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",42,{"inputs":[{"name":"t"}],"output":{"name":"gstvideoditherflags"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"gstvideoflags"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"gstvideoflags"}],"output":{"name":"bool"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"gstvideoflags"}}],[11,"partial_cmp","","",43,{"inputs":[{"name":"self"},{"name":"gstvideoflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",43,{"inputs":[{"name":"self"},{"name":"gstvideoflags"}],"output":{"name":"bool"}}],[11,"le","","",43,{"inputs":[{"name":"self"},{"name":"gstvideoflags"}],"output":{"name":"bool"}}],[11,"gt","","",43,{"inputs":[{"name":"self"},{"name":"gstvideoflags"}],"output":{"name":"bool"}}],[11,"ge","","",43,{"inputs":[{"name":"self"},{"name":"gstvideoflags"}],"output":{"name":"bool"}}],[11,"cmp","","",43,{"inputs":[{"name":"self"},{"name":"gstvideoflags"}],"output":{"name":"ordering"}}],[11,"hash","","",43,null],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",43,null],[18,"VARIABLE_FPS","","",43,null],[18,"PREMULTIPLIED_ALPHA","","",43,null],[11,"empty","","Returns an empty set of flags.",43,{"inputs":[],"output":{"name":"gstvideoflags"}}],[11,"all","","Returns the set containing all flags.",43,{"inputs":[],"output":{"name":"gstvideoflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",43,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",43,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gstvideoflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",43,{"inputs":[{"name":"c_uint"}],"output":{"name":"gstvideoflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",43,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",43,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",43,{"inputs":[{"name":"self"},{"name":"gstvideoflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",43,{"inputs":[{"name":"self"},{"name":"gstvideoflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",43,{"inputs":[{"name":"self"},{"name":"gstvideoflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",43,{"inputs":[{"name":"self"},{"name":"gstvideoflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",43,{"inputs":[{"name":"self"},{"name":"gstvideoflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",43,{"inputs":[{"name":"self"},{"name":"gstvideoflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",43,{"inputs":[{"name":"self"},{"name":"gstvideoflags"}],"output":{"name":"gstvideoflags"}}],[11,"bitor_assign","","Adds the set of flags.",43,{"inputs":[{"name":"self"},{"name":"gstvideoflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",43,{"inputs":[{"name":"self"},{"name":"gstvideoflags"}],"output":{"name":"gstvideoflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",43,{"inputs":[{"name":"self"},{"name":"gstvideoflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",43,{"inputs":[{"name":"self"},{"name":"gstvideoflags"}],"output":{"name":"gstvideoflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",43,{"inputs":[{"name":"self"},{"name":"gstvideoflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",43,{"inputs":[{"name":"self"},{"name":"gstvideoflags"}],"output":{"name":"gstvideoflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",43,{"inputs":[{"name":"self"},{"name":"gstvideoflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",43,{"inputs":[{"name":"self"}],"output":{"name":"gstvideoflags"}}],[11,"extend","","",43,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",43,{"inputs":[{"name":"t"}],"output":{"name":"gstvideoflags"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"gstvideoformatflags"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"gstvideoformatflags"}],"output":{"name":"bool"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"gstvideoformatflags"}}],[11,"partial_cmp","","",44,{"inputs":[{"name":"self"},{"name":"gstvideoformatflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",44,{"inputs":[{"name":"self"},{"name":"gstvideoformatflags"}],"output":{"name":"bool"}}],[11,"le","","",44,{"inputs":[{"name":"self"},{"name":"gstvideoformatflags"}],"output":{"name":"bool"}}],[11,"gt","","",44,{"inputs":[{"name":"self"},{"name":"gstvideoformatflags"}],"output":{"name":"bool"}}],[11,"ge","","",44,{"inputs":[{"name":"self"},{"name":"gstvideoformatflags"}],"output":{"name":"bool"}}],[11,"cmp","","",44,{"inputs":[{"name":"self"},{"name":"gstvideoformatflags"}],"output":{"name":"ordering"}}],[11,"hash","","",44,null],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"YUV","","",44,null],[18,"RGB","","",44,null],[18,"GRAY","","",44,null],[18,"ALPHA","","",44,null],[18,"LE","","",44,null],[18,"PALETTE","","",44,null],[18,"COMPLEX","","",44,null],[18,"UNPACK","","",44,null],[18,"TILED","","",44,null],[11,"empty","","Returns an empty set of flags.",44,{"inputs":[],"output":{"name":"gstvideoformatflags"}}],[11,"all","","Returns the set containing all flags.",44,{"inputs":[],"output":{"name":"gstvideoformatflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",44,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",44,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gstvideoformatflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",44,{"inputs":[{"name":"c_uint"}],"output":{"name":"gstvideoformatflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",44,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",44,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",44,{"inputs":[{"name":"self"},{"name":"gstvideoformatflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",44,{"inputs":[{"name":"self"},{"name":"gstvideoformatflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",44,{"inputs":[{"name":"self"},{"name":"gstvideoformatflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",44,{"inputs":[{"name":"self"},{"name":"gstvideoformatflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",44,{"inputs":[{"name":"self"},{"name":"gstvideoformatflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",44,{"inputs":[{"name":"self"},{"name":"gstvideoformatflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",44,{"inputs":[{"name":"self"},{"name":"gstvideoformatflags"}],"output":{"name":"gstvideoformatflags"}}],[11,"bitor_assign","","Adds the set of flags.",44,{"inputs":[{"name":"self"},{"name":"gstvideoformatflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",44,{"inputs":[{"name":"self"},{"name":"gstvideoformatflags"}],"output":{"name":"gstvideoformatflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",44,{"inputs":[{"name":"self"},{"name":"gstvideoformatflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",44,{"inputs":[{"name":"self"},{"name":"gstvideoformatflags"}],"output":{"name":"gstvideoformatflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",44,{"inputs":[{"name":"self"},{"name":"gstvideoformatflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",44,{"inputs":[{"name":"self"},{"name":"gstvideoformatflags"}],"output":{"name":"gstvideoformatflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",44,{"inputs":[{"name":"self"},{"name":"gstvideoformatflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",44,{"inputs":[{"name":"self"}],"output":{"name":"gstvideoformatflags"}}],[11,"extend","","",44,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",44,{"inputs":[{"name":"t"}],"output":{"name":"gstvideoformatflags"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"gstvideoframeflags"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"gstvideoframeflags"}],"output":{"name":"bool"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"gstvideoframeflags"}}],[11,"partial_cmp","","",45,{"inputs":[{"name":"self"},{"name":"gstvideoframeflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",45,{"inputs":[{"name":"self"},{"name":"gstvideoframeflags"}],"output":{"name":"bool"}}],[11,"le","","",45,{"inputs":[{"name":"self"},{"name":"gstvideoframeflags"}],"output":{"name":"bool"}}],[11,"gt","","",45,{"inputs":[{"name":"self"},{"name":"gstvideoframeflags"}],"output":{"name":"bool"}}],[11,"ge","","",45,{"inputs":[{"name":"self"},{"name":"gstvideoframeflags"}],"output":{"name":"bool"}}],[11,"cmp","","",45,{"inputs":[{"name":"self"},{"name":"gstvideoframeflags"}],"output":{"name":"ordering"}}],[11,"hash","","",45,null],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",45,null],[18,"INTERLACED","","",45,null],[18,"TFF","","",45,null],[18,"RFF","","",45,null],[18,"ONEFIELD","","",45,null],[18,"MULTIPLE_VIEW","","",45,null],[18,"FIRST_IN_BUNDLE","","",45,null],[11,"empty","","Returns an empty set of flags.",45,{"inputs":[],"output":{"name":"gstvideoframeflags"}}],[11,"all","","Returns the set containing all flags.",45,{"inputs":[],"output":{"name":"gstvideoframeflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",45,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",45,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gstvideoframeflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",45,{"inputs":[{"name":"c_uint"}],"output":{"name":"gstvideoframeflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",45,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",45,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",45,{"inputs":[{"name":"self"},{"name":"gstvideoframeflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",45,{"inputs":[{"name":"self"},{"name":"gstvideoframeflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",45,{"inputs":[{"name":"self"},{"name":"gstvideoframeflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",45,{"inputs":[{"name":"self"},{"name":"gstvideoframeflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",45,{"inputs":[{"name":"self"},{"name":"gstvideoframeflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",45,{"inputs":[{"name":"self"},{"name":"gstvideoframeflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",45,{"inputs":[{"name":"self"},{"name":"gstvideoframeflags"}],"output":{"name":"gstvideoframeflags"}}],[11,"bitor_assign","","Adds the set of flags.",45,{"inputs":[{"name":"self"},{"name":"gstvideoframeflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",45,{"inputs":[{"name":"self"},{"name":"gstvideoframeflags"}],"output":{"name":"gstvideoframeflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",45,{"inputs":[{"name":"self"},{"name":"gstvideoframeflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",45,{"inputs":[{"name":"self"},{"name":"gstvideoframeflags"}],"output":{"name":"gstvideoframeflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",45,{"inputs":[{"name":"self"},{"name":"gstvideoframeflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",45,{"inputs":[{"name":"self"},{"name":"gstvideoframeflags"}],"output":{"name":"gstvideoframeflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",45,{"inputs":[{"name":"self"},{"name":"gstvideoframeflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",45,{"inputs":[{"name":"self"}],"output":{"name":"gstvideoframeflags"}}],[11,"extend","","",45,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",45,{"inputs":[{"name":"t"}],"output":{"name":"gstvideoframeflags"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"gstvideoframemapflags"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"gstvideoframemapflags"}],"output":{"name":"bool"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"gstvideoframemapflags"}}],[11,"partial_cmp","","",46,{"inputs":[{"name":"self"},{"name":"gstvideoframemapflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",46,{"inputs":[{"name":"self"},{"name":"gstvideoframemapflags"}],"output":{"name":"bool"}}],[11,"le","","",46,{"inputs":[{"name":"self"},{"name":"gstvideoframemapflags"}],"output":{"name":"bool"}}],[11,"gt","","",46,{"inputs":[{"name":"self"},{"name":"gstvideoframemapflags"}],"output":{"name":"bool"}}],[11,"ge","","",46,{"inputs":[{"name":"self"},{"name":"gstvideoframemapflags"}],"output":{"name":"bool"}}],[11,"cmp","","",46,{"inputs":[{"name":"self"},{"name":"gstvideoframemapflags"}],"output":{"name":"ordering"}}],[11,"hash","","",46,null],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NO_REF","","",46,null],[18,"LAST","","",46,null],[11,"empty","","Returns an empty set of flags.",46,{"inputs":[],"output":{"name":"gstvideoframemapflags"}}],[11,"all","","Returns the set containing all flags.",46,{"inputs":[],"output":{"name":"gstvideoframemapflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",46,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",46,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gstvideoframemapflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",46,{"inputs":[{"name":"c_uint"}],"output":{"name":"gstvideoframemapflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",46,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",46,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",46,{"inputs":[{"name":"self"},{"name":"gstvideoframemapflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",46,{"inputs":[{"name":"self"},{"name":"gstvideoframemapflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",46,{"inputs":[{"name":"self"},{"name":"gstvideoframemapflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",46,{"inputs":[{"name":"self"},{"name":"gstvideoframemapflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",46,{"inputs":[{"name":"self"},{"name":"gstvideoframemapflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",46,{"inputs":[{"name":"self"},{"name":"gstvideoframemapflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",46,{"inputs":[{"name":"self"},{"name":"gstvideoframemapflags"}],"output":{"name":"gstvideoframemapflags"}}],[11,"bitor_assign","","Adds the set of flags.",46,{"inputs":[{"name":"self"},{"name":"gstvideoframemapflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",46,{"inputs":[{"name":"self"},{"name":"gstvideoframemapflags"}],"output":{"name":"gstvideoframemapflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",46,{"inputs":[{"name":"self"},{"name":"gstvideoframemapflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",46,{"inputs":[{"name":"self"},{"name":"gstvideoframemapflags"}],"output":{"name":"gstvideoframemapflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",46,{"inputs":[{"name":"self"},{"name":"gstvideoframemapflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",46,{"inputs":[{"name":"self"},{"name":"gstvideoframemapflags"}],"output":{"name":"gstvideoframemapflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",46,{"inputs":[{"name":"self"},{"name":"gstvideoframemapflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",46,{"inputs":[{"name":"self"}],"output":{"name":"gstvideoframemapflags"}}],[11,"extend","","",46,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",46,{"inputs":[{"name":"t"}],"output":{"name":"gstvideoframemapflags"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"gstvideomultiviewflags"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"gstvideomultiviewflags"}],"output":{"name":"bool"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"gstvideomultiviewflags"}}],[11,"partial_cmp","","",47,{"inputs":[{"name":"self"},{"name":"gstvideomultiviewflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",47,{"inputs":[{"name":"self"},{"name":"gstvideomultiviewflags"}],"output":{"name":"bool"}}],[11,"le","","",47,{"inputs":[{"name":"self"},{"name":"gstvideomultiviewflags"}],"output":{"name":"bool"}}],[11,"gt","","",47,{"inputs":[{"name":"self"},{"name":"gstvideomultiviewflags"}],"output":{"name":"bool"}}],[11,"ge","","",47,{"inputs":[{"name":"self"},{"name":"gstvideomultiviewflags"}],"output":{"name":"bool"}}],[11,"cmp","","",47,{"inputs":[{"name":"self"},{"name":"gstvideomultiviewflags"}],"output":{"name":"ordering"}}],[11,"hash","","",47,null],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",47,null],[18,"RIGHT_VIEW_FIRST","","",47,null],[18,"LEFT_FLIPPED","","",47,null],[18,"LEFT_FLOPPED","","",47,null],[18,"RIGHT_FLIPPED","","",47,null],[18,"RIGHT_FLOPPED","","",47,null],[18,"HALF_ASPECT","","",47,null],[18,"MIXED_MONO","","",47,null],[11,"empty","","Returns an empty set of flags.",47,{"inputs":[],"output":{"name":"gstvideomultiviewflags"}}],[11,"all","","Returns the set containing all flags.",47,{"inputs":[],"output":{"name":"gstvideomultiviewflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",47,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",47,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gstvideomultiviewflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",47,{"inputs":[{"name":"c_uint"}],"output":{"name":"gstvideomultiviewflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",47,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",47,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",47,{"inputs":[{"name":"self"},{"name":"gstvideomultiviewflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",47,{"inputs":[{"name":"self"},{"name":"gstvideomultiviewflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",47,{"inputs":[{"name":"self"},{"name":"gstvideomultiviewflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",47,{"inputs":[{"name":"self"},{"name":"gstvideomultiviewflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",47,{"inputs":[{"name":"self"},{"name":"gstvideomultiviewflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",47,{"inputs":[{"name":"self"},{"name":"gstvideomultiviewflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",47,{"inputs":[{"name":"self"},{"name":"gstvideomultiviewflags"}],"output":{"name":"gstvideomultiviewflags"}}],[11,"bitor_assign","","Adds the set of flags.",47,{"inputs":[{"name":"self"},{"name":"gstvideomultiviewflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",47,{"inputs":[{"name":"self"},{"name":"gstvideomultiviewflags"}],"output":{"name":"gstvideomultiviewflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",47,{"inputs":[{"name":"self"},{"name":"gstvideomultiviewflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",47,{"inputs":[{"name":"self"},{"name":"gstvideomultiviewflags"}],"output":{"name":"gstvideomultiviewflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",47,{"inputs":[{"name":"self"},{"name":"gstvideomultiviewflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",47,{"inputs":[{"name":"self"},{"name":"gstvideomultiviewflags"}],"output":{"name":"gstvideomultiviewflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",47,{"inputs":[{"name":"self"},{"name":"gstvideomultiviewflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",47,{"inputs":[{"name":"self"}],"output":{"name":"gstvideomultiviewflags"}}],[11,"extend","","",47,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",47,{"inputs":[{"name":"t"}],"output":{"name":"gstvideomultiviewflags"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"gstvideopackflags"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"gstvideopackflags"}],"output":{"name":"bool"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"gstvideopackflags"}}],[11,"partial_cmp","","",48,{"inputs":[{"name":"self"},{"name":"gstvideopackflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",48,{"inputs":[{"name":"self"},{"name":"gstvideopackflags"}],"output":{"name":"bool"}}],[11,"le","","",48,{"inputs":[{"name":"self"},{"name":"gstvideopackflags"}],"output":{"name":"bool"}}],[11,"gt","","",48,{"inputs":[{"name":"self"},{"name":"gstvideopackflags"}],"output":{"name":"bool"}}],[11,"ge","","",48,{"inputs":[{"name":"self"},{"name":"gstvideopackflags"}],"output":{"name":"bool"}}],[11,"cmp","","",48,{"inputs":[{"name":"self"},{"name":"gstvideopackflags"}],"output":{"name":"ordering"}}],[11,"hash","","",48,null],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",48,null],[18,"TRUNCATE_RANGE","","",48,null],[18,"INTERLACED","","",48,null],[11,"empty","","Returns an empty set of flags.",48,{"inputs":[],"output":{"name":"gstvideopackflags"}}],[11,"all","","Returns the set containing all flags.",48,{"inputs":[],"output":{"name":"gstvideopackflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",48,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",48,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gstvideopackflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",48,{"inputs":[{"name":"c_uint"}],"output":{"name":"gstvideopackflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",48,{"inputs":[{"name":"self"},{"name":"gstvideopackflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",48,{"inputs":[{"name":"self"},{"name":"gstvideopackflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",48,{"inputs":[{"name":"self"},{"name":"gstvideopackflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",48,{"inputs":[{"name":"self"},{"name":"gstvideopackflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",48,{"inputs":[{"name":"self"},{"name":"gstvideopackflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",48,{"inputs":[{"name":"self"},{"name":"gstvideopackflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",48,{"inputs":[{"name":"self"},{"name":"gstvideopackflags"}],"output":{"name":"gstvideopackflags"}}],[11,"bitor_assign","","Adds the set of flags.",48,{"inputs":[{"name":"self"},{"name":"gstvideopackflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",48,{"inputs":[{"name":"self"},{"name":"gstvideopackflags"}],"output":{"name":"gstvideopackflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",48,{"inputs":[{"name":"self"},{"name":"gstvideopackflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",48,{"inputs":[{"name":"self"},{"name":"gstvideopackflags"}],"output":{"name":"gstvideopackflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",48,{"inputs":[{"name":"self"},{"name":"gstvideopackflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",48,{"inputs":[{"name":"self"},{"name":"gstvideopackflags"}],"output":{"name":"gstvideopackflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",48,{"inputs":[{"name":"self"},{"name":"gstvideopackflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",48,{"inputs":[{"name":"self"}],"output":{"name":"gstvideopackflags"}}],[11,"extend","","",48,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",48,{"inputs":[{"name":"t"}],"output":{"name":"gstvideopackflags"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"gstvideoresamplerflags"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"gstvideoresamplerflags"}],"output":{"name":"bool"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"gstvideoresamplerflags"}}],[11,"partial_cmp","","",49,{"inputs":[{"name":"self"},{"name":"gstvideoresamplerflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",49,{"inputs":[{"name":"self"},{"name":"gstvideoresamplerflags"}],"output":{"name":"bool"}}],[11,"le","","",49,{"inputs":[{"name":"self"},{"name":"gstvideoresamplerflags"}],"output":{"name":"bool"}}],[11,"gt","","",49,{"inputs":[{"name":"self"},{"name":"gstvideoresamplerflags"}],"output":{"name":"bool"}}],[11,"ge","","",49,{"inputs":[{"name":"self"},{"name":"gstvideoresamplerflags"}],"output":{"name":"bool"}}],[11,"cmp","","",49,{"inputs":[{"name":"self"},{"name":"gstvideoresamplerflags"}],"output":{"name":"ordering"}}],[11,"hash","","",49,null],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",49,null],[18,"HALF_TAPS","","",49,null],[11,"empty","","Returns an empty set of flags.",49,{"inputs":[],"output":{"name":"gstvideoresamplerflags"}}],[11,"all","","Returns the set containing all flags.",49,{"inputs":[],"output":{"name":"gstvideoresamplerflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",49,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",49,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gstvideoresamplerflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",49,{"inputs":[{"name":"c_uint"}],"output":{"name":"gstvideoresamplerflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",49,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",49,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",49,{"inputs":[{"name":"self"},{"name":"gstvideoresamplerflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",49,{"inputs":[{"name":"self"},{"name":"gstvideoresamplerflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",49,{"inputs":[{"name":"self"},{"name":"gstvideoresamplerflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",49,{"inputs":[{"name":"self"},{"name":"gstvideoresamplerflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",49,{"inputs":[{"name":"self"},{"name":"gstvideoresamplerflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",49,{"inputs":[{"name":"self"},{"name":"gstvideoresamplerflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",49,{"inputs":[{"name":"self"},{"name":"gstvideoresamplerflags"}],"output":{"name":"gstvideoresamplerflags"}}],[11,"bitor_assign","","Adds the set of flags.",49,{"inputs":[{"name":"self"},{"name":"gstvideoresamplerflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",49,{"inputs":[{"name":"self"},{"name":"gstvideoresamplerflags"}],"output":{"name":"gstvideoresamplerflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",49,{"inputs":[{"name":"self"},{"name":"gstvideoresamplerflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",49,{"inputs":[{"name":"self"},{"name":"gstvideoresamplerflags"}],"output":{"name":"gstvideoresamplerflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",49,{"inputs":[{"name":"self"},{"name":"gstvideoresamplerflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",49,{"inputs":[{"name":"self"},{"name":"gstvideoresamplerflags"}],"output":{"name":"gstvideoresamplerflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",49,{"inputs":[{"name":"self"},{"name":"gstvideoresamplerflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",49,{"inputs":[{"name":"self"}],"output":{"name":"gstvideoresamplerflags"}}],[11,"extend","","",49,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",49,{"inputs":[{"name":"t"}],"output":{"name":"gstvideoresamplerflags"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"gstvideoscalerflags"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"self"},{"name":"gstvideoscalerflags"}],"output":{"name":"bool"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"gstvideoscalerflags"}}],[11,"partial_cmp","","",50,{"inputs":[{"name":"self"},{"name":"gstvideoscalerflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",50,{"inputs":[{"name":"self"},{"name":"gstvideoscalerflags"}],"output":{"name":"bool"}}],[11,"le","","",50,{"inputs":[{"name":"self"},{"name":"gstvideoscalerflags"}],"output":{"name":"bool"}}],[11,"gt","","",50,{"inputs":[{"name":"self"},{"name":"gstvideoscalerflags"}],"output":{"name":"bool"}}],[11,"ge","","",50,{"inputs":[{"name":"self"},{"name":"gstvideoscalerflags"}],"output":{"name":"bool"}}],[11,"cmp","","",50,{"inputs":[{"name":"self"},{"name":"gstvideoscalerflags"}],"output":{"name":"ordering"}}],[11,"hash","","",50,null],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",50,null],[18,"INTERLACED","","",50,null],[11,"empty","","Returns an empty set of flags.",50,{"inputs":[],"output":{"name":"gstvideoscalerflags"}}],[11,"all","","Returns the set containing all flags.",50,{"inputs":[],"output":{"name":"gstvideoscalerflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",50,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",50,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gstvideoscalerflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",50,{"inputs":[{"name":"c_uint"}],"output":{"name":"gstvideoscalerflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",50,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",50,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",50,{"inputs":[{"name":"self"},{"name":"gstvideoscalerflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",50,{"inputs":[{"name":"self"},{"name":"gstvideoscalerflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",50,{"inputs":[{"name":"self"},{"name":"gstvideoscalerflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",50,{"inputs":[{"name":"self"},{"name":"gstvideoscalerflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",50,{"inputs":[{"name":"self"},{"name":"gstvideoscalerflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",50,{"inputs":[{"name":"self"},{"name":"gstvideoscalerflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",50,{"inputs":[{"name":"self"},{"name":"gstvideoscalerflags"}],"output":{"name":"gstvideoscalerflags"}}],[11,"bitor_assign","","Adds the set of flags.",50,{"inputs":[{"name":"self"},{"name":"gstvideoscalerflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",50,{"inputs":[{"name":"self"},{"name":"gstvideoscalerflags"}],"output":{"name":"gstvideoscalerflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",50,{"inputs":[{"name":"self"},{"name":"gstvideoscalerflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",50,{"inputs":[{"name":"self"},{"name":"gstvideoscalerflags"}],"output":{"name":"gstvideoscalerflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",50,{"inputs":[{"name":"self"},{"name":"gstvideoscalerflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",50,{"inputs":[{"name":"self"},{"name":"gstvideoscalerflags"}],"output":{"name":"gstvideoscalerflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",50,{"inputs":[{"name":"self"},{"name":"gstvideoscalerflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",50,{"inputs":[{"name":"self"}],"output":{"name":"gstvideoscalerflags"}}],[11,"extend","","",50,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",50,{"inputs":[{"name":"t"}],"output":{"name":"gstvideoscalerflags"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"gstvideotimecodeflags"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"gstvideotimecodeflags"}],"output":{"name":"bool"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"gstvideotimecodeflags"}}],[11,"partial_cmp","","",51,{"inputs":[{"name":"self"},{"name":"gstvideotimecodeflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",51,{"inputs":[{"name":"self"},{"name":"gstvideotimecodeflags"}],"output":{"name":"bool"}}],[11,"le","","",51,{"inputs":[{"name":"self"},{"name":"gstvideotimecodeflags"}],"output":{"name":"bool"}}],[11,"gt","","",51,{"inputs":[{"name":"self"},{"name":"gstvideotimecodeflags"}],"output":{"name":"bool"}}],[11,"ge","","",51,{"inputs":[{"name":"self"},{"name":"gstvideotimecodeflags"}],"output":{"name":"bool"}}],[11,"cmp","","",51,{"inputs":[{"name":"self"},{"name":"gstvideotimecodeflags"}],"output":{"name":"ordering"}}],[11,"hash","","",51,null],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",51,null],[18,"DROP_FRAME","","",51,null],[18,"INTERLACED","","",51,null],[11,"empty","","Returns an empty set of flags.",51,{"inputs":[],"output":{"name":"gstvideotimecodeflags"}}],[11,"all","","Returns the set containing all flags.",51,{"inputs":[],"output":{"name":"gstvideotimecodeflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",51,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",51,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gstvideotimecodeflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",51,{"inputs":[{"name":"c_uint"}],"output":{"name":"gstvideotimecodeflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",51,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",51,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",51,{"inputs":[{"name":"self"},{"name":"gstvideotimecodeflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",51,{"inputs":[{"name":"self"},{"name":"gstvideotimecodeflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",51,{"inputs":[{"name":"self"},{"name":"gstvideotimecodeflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",51,{"inputs":[{"name":"self"},{"name":"gstvideotimecodeflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",51,{"inputs":[{"name":"self"},{"name":"gstvideotimecodeflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",51,{"inputs":[{"name":"self"},{"name":"gstvideotimecodeflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",51,{"inputs":[{"name":"self"},{"name":"gstvideotimecodeflags"}],"output":{"name":"gstvideotimecodeflags"}}],[11,"bitor_assign","","Adds the set of flags.",51,{"inputs":[{"name":"self"},{"name":"gstvideotimecodeflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",51,{"inputs":[{"name":"self"},{"name":"gstvideotimecodeflags"}],"output":{"name":"gstvideotimecodeflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",51,{"inputs":[{"name":"self"},{"name":"gstvideotimecodeflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",51,{"inputs":[{"name":"self"},{"name":"gstvideotimecodeflags"}],"output":{"name":"gstvideotimecodeflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",51,{"inputs":[{"name":"self"},{"name":"gstvideotimecodeflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",51,{"inputs":[{"name":"self"},{"name":"gstvideotimecodeflags"}],"output":{"name":"gstvideotimecodeflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",51,{"inputs":[{"name":"self"},{"name":"gstvideotimecodeflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",51,{"inputs":[{"name":"self"}],"output":{"name":"gstvideotimecodeflags"}}],[11,"extend","","",51,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",51,{"inputs":[{"name":"t"}],"output":{"name":"gstvideotimecodeflags"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"GstColorBalanceChannelClass"],[3,"GstColorBalanceInterface"],[3,"GstNavigationInterface"],[3,"GstVideoAffineTransformationMeta"],[3,"GstVideoAlignment"],[3,"GstVideoBufferPoolClass"],[3,"GstVideoCodecFrame"],[3,"GstVideoCodecState"],[3,"GstVideoColorPrimariesInfo"],[3,"GstVideoColorimetry"],[3,"GstVideoCropMeta"],[3,"GstVideoDecoderClass"],[3,"GstVideoDirectionInterface"],[3,"GstVideoEncoderClass"],[3,"GstVideoFilterClass"],[3,"GstVideoFormatInfo"],[3,"GstVideoFrame"],[3,"GstVideoGLTextureUploadMeta"],[3,"GstVideoInfo"],[3,"GstVideoMeta"],[3,"GstVideoMetaTransform"],[3,"GstVideoOrientationInterface"],[3,"GstVideoOverlayCompositionMeta"],[3,"GstVideoOverlayInterface"],[3,"GstVideoRectangle"],[3,"GstVideoRegionOfInterestMeta"],[3,"GstVideoResampler"],[3,"GstVideoSinkClass"],[3,"GstVideoTimeCode"],[3,"GstVideoTimeCodeConfig"],[3,"GstVideoTimeCodeInterval"],[3,"GstVideoTimeCodeMeta"],[3,"GstColorBalanceChannel"],[3,"GstVideoBufferPool"],[3,"GstVideoDecoder"],[3,"GstVideoEncoder"],[3,"GstVideoFilter"],[3,"GstVideoSink"],[3,"GstVideoBufferFlags"],[3,"GstVideoChromaFlags"],[3,"GstVideoChromaSite"],[3,"GstVideoCodecFrameFlags"],[3,"GstVideoDitherFlags"],[3,"GstVideoFlags"],[3,"GstVideoFormatFlags"],[3,"GstVideoFrameFlags"],[3,"GstVideoFrameMapFlags"],[3,"GstVideoMultiviewFlags"],[3,"GstVideoPackFlags"],[3,"GstVideoResamplerFlags"],[3,"GstVideoScalerFlags"],[3,"GstVideoTimeCodeFlags"],[3,"GstVideoBufferPoolPrivate"],[3,"GstVideoChromaResample"],[3,"GstVideoConverter"],[3,"GstVideoDecoderPrivate"],[3,"GstVideoDither"],[3,"GstVideoEncoderPrivate"],[3,"GstVideoOverlayComposition"],[3,"GstVideoOverlayRectangle"],[3,"GstVideoScaler"],[3,"GstVideoSinkPrivate"],[3,"GstVideoMultiviewFlagsSet"],[3,"GstColorBalance"],[3,"GstNavigation"],[3,"GstVideoDirection"],[3,"GstVideoOrientation"],[3,"GstVideoOverlay"]]};
searchIndex["lazy_static"] = {"doc":"A macro for declaring lazily evaluated statics.","items":[[5,"initialize","lazy_static","Takes a shared reference to a lazy static and initializes it if it has not been already.",null,{"inputs":[{"name":"t"}],"output":null}],[8,"LazyStatic","","Support trait for enabling a few common operation on lazy static values.",null,null],[14,"__lazy_static_create","","",null,null],[14,"lazy_static","","",null,null]],"paths":[]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"group","libc","",null,null],[12,"gr_name","","",0,null],[12,"gr_passwd","","",0,null],[12,"gr_gid","","",0,null],[12,"gr_mem","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[3,"rusage","","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[3,"in_addr","","",null,null],[12,"s_addr","","",6,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",7,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",8,null],[12,"imr_interface","","",8,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",9,null],[12,"ipv6mr_interface","","",9,null],[3,"hostent","","",null,null],[12,"h_name","","",10,null],[12,"h_aliases","","",10,null],[12,"h_addrtype","","",10,null],[12,"h_length","","",10,null],[12,"h_addr_list","","",10,null],[3,"iovec","","",null,null],[12,"iov_base","","",11,null],[12,"iov_len","","",11,null],[3,"pollfd","","",null,null],[12,"fd","","",12,null],[12,"events","","",12,null],[12,"revents","","",12,null],[3,"winsize","","",null,null],[12,"ws_row","","",13,null],[12,"ws_col","","",13,null],[12,"ws_xpixel","","",13,null],[12,"ws_ypixel","","",13,null],[3,"linger","","",null,null],[12,"l_onoff","","",14,null],[12,"l_linger","","",14,null],[3,"sigval","","",null,null],[12,"sival_ptr","","",15,null],[3,"itimerval","","",null,null],[12,"it_interval","","",16,null],[12,"it_value","","",16,null],[3,"tms","","",null,null],[12,"tms_utime","","",17,null],[12,"tms_stime","","",17,null],[12,"tms_cutime","","",17,null],[12,"tms_cstime","","",17,null],[3,"servent","","",null,null],[12,"s_name","","",18,null],[12,"s_aliases","","",18,null],[12,"s_port","","",18,null],[12,"s_proto","","",18,null],[3,"protoent","","",null,null],[12,"p_name","","",19,null],[12,"p_aliases","","",19,null],[12,"p_proto","","",19,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",20,null],[12,"sa_data","","",20,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",21,null],[12,"sin_port","","",21,null],[12,"sin_addr","","",21,null],[12,"sin_zero","","",21,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",22,null],[12,"sin6_port","","",22,null],[12,"sin6_flowinfo","","",22,null],[12,"sin6_addr","","",22,null],[12,"sin6_scope_id","","",22,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",23,null],[12,"sun_path","","",23,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",24,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",25,null],[12,"ai_family","","",25,null],[12,"ai_socktype","","",25,null],[12,"ai_protocol","","",25,null],[12,"ai_addrlen","","",25,null],[12,"ai_addr","","",25,null],[12,"ai_canonname","","",25,null],[12,"ai_next","","",25,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",26,null],[12,"nl_pid","","",26,null],[12,"nl_groups","","",26,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",27,null],[12,"sll_protocol","","",27,null],[12,"sll_ifindex","","",27,null],[12,"sll_hatype","","",27,null],[12,"sll_pkttype","","",27,null],[12,"sll_halen","","",27,null],[12,"sll_addr","","",27,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",28,null],[12,"tm_min","","",28,null],[12,"tm_hour","","",28,null],[12,"tm_mday","","",28,null],[12,"tm_mon","","",28,null],[12,"tm_year","","",28,null],[12,"tm_wday","","",28,null],[12,"tm_yday","","",28,null],[12,"tm_isdst","","",28,null],[12,"tm_gmtoff","","",28,null],[12,"tm_zone","","",28,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",29,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",30,null],[12,"dli_fbase","","",30,null],[12,"dli_sname","","",30,null],[12,"dli_saddr","","",30,null],[3,"epoll_event","","",null,null],[12,"events","","",31,null],[12,"u64","","",31,null],[3,"utsname","","",null,null],[12,"sysname","","",32,null],[12,"nodename","","",32,null],[12,"release","","",32,null],[12,"version","","",32,null],[12,"machine","","",32,null],[12,"domainname","","",32,null],[3,"lconv","","",null,null],[12,"decimal_point","","",33,null],[12,"thousands_sep","","",33,null],[12,"grouping","","",33,null],[12,"int_curr_symbol","","",33,null],[12,"currency_symbol","","",33,null],[12,"mon_decimal_point","","",33,null],[12,"mon_thousands_sep","","",33,null],[12,"mon_grouping","","",33,null],[12,"positive_sign","","",33,null],[12,"negative_sign","","",33,null],[12,"int_frac_digits","","",33,null],[12,"frac_digits","","",33,null],[12,"p_cs_precedes","","",33,null],[12,"p_sep_by_space","","",33,null],[12,"n_cs_precedes","","",33,null],[12,"n_sep_by_space","","",33,null],[12,"p_sign_posn","","",33,null],[12,"n_sign_posn","","",33,null],[12,"int_p_cs_precedes","","",33,null],[12,"int_p_sep_by_space","","",33,null],[12,"int_n_cs_precedes","","",33,null],[12,"int_n_sep_by_space","","",33,null],[12,"int_p_sign_posn","","",33,null],[12,"int_n_sign_posn","","",33,null],[3,"sigevent","","",null,null],[12,"sigev_value","","",34,null],[12,"sigev_signo","","",34,null],[12,"sigev_notify","","",34,null],[12,"sigev_notify_thread_id","","",34,null],[3,"dirent","","",null,null],[12,"d_ino","","",35,null],[12,"d_off","","",35,null],[12,"d_reclen","","",35,null],[12,"d_type","","",35,null],[12,"d_name","","",35,null],[3,"dirent64","","",null,null],[12,"d_ino","","",36,null],[12,"d_off","","",36,null],[12,"d_reclen","","",36,null],[12,"d_type","","",36,null],[12,"d_name","","",36,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",37,null],[12,"rlim_max","","",37,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",38,null],[12,"gl_pathv","","",38,null],[12,"gl_offs","","",38,null],[12,"gl_flags","","",38,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",39,null],[12,"ifa_name","","",39,null],[12,"ifa_flags","","",39,null],[12,"ifa_addr","","",39,null],[12,"ifa_netmask","","",39,null],[12,"ifa_ifu","","",39,null],[12,"ifa_data","","",39,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_rwlockattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"pthread_condattr_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",40,null],[12,"pw_passwd","","",40,null],[12,"pw_uid","","",40,null],[12,"pw_gid","","",40,null],[12,"pw_gecos","","",40,null],[12,"pw_dir","","",40,null],[12,"pw_shell","","",40,null],[3,"spwd","","",null,null],[12,"sp_namp","","",41,null],[12,"sp_pwdp","","",41,null],[12,"sp_lstchg","","",41,null],[12,"sp_min","","",41,null],[12,"sp_max","","",41,null],[12,"sp_warn","","",41,null],[12,"sp_inact","","",41,null],[12,"sp_expire","","",41,null],[12,"sp_flag","","",41,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",42,null],[12,"f_frsize","","",42,null],[12,"f_blocks","","",42,null],[12,"f_bfree","","",42,null],[12,"f_bavail","","",42,null],[12,"f_files","","",42,null],[12,"f_ffree","","",42,null],[12,"f_favail","","",42,null],[12,"f_fsid","","",42,null],[12,"f_flag","","",42,null],[12,"f_namemax","","",42,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",43,null],[12,"dqb_bsoftlimit","","",43,null],[12,"dqb_curspace","","",43,null],[12,"dqb_ihardlimit","","",43,null],[12,"dqb_isoftlimit","","",43,null],[12,"dqb_curinodes","","",43,null],[12,"dqb_btime","","",43,null],[12,"dqb_itime","","",43,null],[12,"dqb_valid","","",43,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",44,null],[12,"ssi_errno","","",44,null],[12,"ssi_code","","",44,null],[12,"ssi_pid","","",44,null],[12,"ssi_uid","","",44,null],[12,"ssi_fd","","",44,null],[12,"ssi_tid","","",44,null],[12,"ssi_band","","",44,null],[12,"ssi_overrun","","",44,null],[12,"ssi_trapno","","",44,null],[12,"ssi_status","","",44,null],[12,"ssi_int","","",44,null],[12,"ssi_ptr","","",44,null],[12,"ssi_utime","","",44,null],[12,"ssi_stime","","",44,null],[12,"ssi_addr","","",44,null],[3,"itimerspec","","",null,null],[12,"it_interval","","",45,null],[12,"it_value","","",45,null],[3,"fsid_t","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",46,null],[12,"mq_maxmsg","","",46,null],[12,"mq_msgsize","","",46,null],[12,"mq_curmsgs","","",46,null],[3,"cpu_set_t","","",null,null],[3,"if_nameindex","","",null,null],[12,"if_index","","",47,null],[12,"if_name","","",47,null],[3,"msginfo","","",null,null],[12,"msgpool","","",48,null],[12,"msgmap","","",48,null],[12,"msgmax","","",48,null],[12,"msgmnb","","",48,null],[12,"msgmni","","",48,null],[12,"msgssz","","",48,null],[12,"msgtql","","",48,null],[12,"msgseg","","",48,null],[3,"mmsghdr","","",null,null],[12,"msg_hdr","","",49,null],[12,"msg_len","","",49,null],[3,"sembuf","","",null,null],[12,"sem_num","","",50,null],[12,"sem_op","","",50,null],[12,"sem_flg","","",50,null],[3,"input_event","","",null,null],[12,"time","","",51,null],[12,"type_","","",51,null],[12,"code","","",51,null],[12,"value","","",51,null],[3,"input_id","","",null,null],[12,"bustype","","",52,null],[12,"vendor","","",52,null],[12,"product","","",52,null],[12,"version","","",52,null],[3,"input_absinfo","","",null,null],[12,"value","","",53,null],[12,"minimum","","",53,null],[12,"maximum","","",53,null],[12,"fuzz","","",53,null],[12,"flat","","",53,null],[12,"resolution","","",53,null],[3,"input_keymap_entry","","",null,null],[12,"flags","","",54,null],[12,"len","","",54,null],[12,"index","","",54,null],[12,"keycode","","",54,null],[12,"scancode","","",54,null],[3,"input_mask","","",null,null],[12,"type_","","",55,null],[12,"codes_size","","",55,null],[12,"codes_ptr","","",55,null],[3,"ff_replay","","",null,null],[12,"length","","",56,null],[12,"delay","","",56,null],[3,"ff_trigger","","",null,null],[12,"button","","",57,null],[12,"interval","","",57,null],[3,"ff_envelope","","",null,null],[12,"attack_length","","",58,null],[12,"attack_level","","",58,null],[12,"fade_length","","",58,null],[12,"fade_level","","",58,null],[3,"ff_constant_effect","","",null,null],[12,"level","","",59,null],[12,"envelope","","",59,null],[3,"ff_ramp_effect","","",null,null],[12,"start_level","","",60,null],[12,"end_level","","",60,null],[12,"envelope","","",60,null],[3,"ff_condition_effect","","",null,null],[12,"right_saturation","","",61,null],[12,"left_saturation","","",61,null],[12,"right_coeff","","",61,null],[12,"left_coeff","","",61,null],[12,"deadband","","",61,null],[12,"center","","",61,null],[3,"ff_periodic_effect","","",null,null],[12,"waveform","","",62,null],[12,"period","","",62,null],[12,"magnitude","","",62,null],[12,"offset","","",62,null],[12,"phase","","",62,null],[12,"envelope","","",62,null],[12,"custom_len","","",62,null],[12,"custom_data","","",62,null],[3,"ff_rumble_effect","","",null,null],[12,"strong_magnitude","","",63,null],[12,"weak_magnitude","","",63,null],[3,"ff_effect","","",null,null],[12,"type_","","",64,null],[12,"id","","",64,null],[12,"direction","","",64,null],[12,"trigger","","",64,null],[12,"replay","","",64,null],[12,"u","","",64,null],[3,"dl_phdr_info","","",null,null],[12,"dlpi_addr","","",65,null],[12,"dlpi_name","","",65,null],[12,"dlpi_phdr","","",65,null],[12,"dlpi_phnum","","",65,null],[12,"dlpi_adds","","",65,null],[12,"dlpi_subs","","",65,null],[12,"dlpi_tls_modid","","",65,null],[12,"dlpi_tls_data","","",65,null],[3,"Elf32_Phdr","","",null,null],[12,"p_type","","",66,null],[12,"p_offset","","",66,null],[12,"p_vaddr","","",66,null],[12,"p_paddr","","",66,null],[12,"p_filesz","","",66,null],[12,"p_memsz","","",66,null],[12,"p_flags","","",66,null],[12,"p_align","","",66,null],[3,"Elf64_Phdr","","",null,null],[12,"p_type","","",67,null],[12,"p_flags","","",67,null],[12,"p_offset","","",67,null],[12,"p_vaddr","","",67,null],[12,"p_paddr","","",67,null],[12,"p_filesz","","",67,null],[12,"p_memsz","","",67,null],[12,"p_align","","",67,null],[3,"aiocb","","",null,null],[12,"aio_fildes","","",68,null],[12,"aio_lio_opcode","","",68,null],[12,"aio_reqprio","","",68,null],[12,"aio_buf","","",68,null],[12,"aio_nbytes","","",68,null],[12,"aio_sigevent","","",68,null],[12,"aio_offset","","",68,null],[3,"__exit_status","","",null,null],[12,"e_termination","","",69,null],[12,"e_exit","","",69,null],[3,"__timeval","","",null,null],[12,"tv_sec","","",70,null],[12,"tv_usec","","",70,null],[3,"utmpx","","",null,null],[12,"ut_type","","",71,null],[12,"ut_pid","","",71,null],[12,"ut_line","","",71,null],[12,"ut_id","","",71,null],[12,"ut_user","","",71,null],[12,"ut_host","","",71,null],[12,"ut_exit","","",71,null],[12,"ut_session","","",71,null],[12,"ut_tv","","",71,null],[12,"ut_addr_v6","","",71,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",72,null],[12,"sa_mask","","",72,null],[12,"sa_flags","","",72,null],[12,"sa_restorer","","",72,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",73,null],[12,"ss_flags","","",73,null],[12,"ss_size","","",73,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",74,null],[12,"si_errno","","",74,null],[12,"si_code","","",74,null],[12,"_pad","","",74,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",75,null],[12,"gl_pathv","","",75,null],[12,"gl_offs","","",75,null],[12,"gl_flags","","",75,null],[3,"ucred","","",null,null],[12,"pid","","",76,null],[12,"uid","","",76,null],[12,"gid","","",76,null],[3,"statfs","","",null,null],[12,"f_type","","",77,null],[12,"f_bsize","","",77,null],[12,"f_blocks","","",77,null],[12,"f_bfree","","",77,null],[12,"f_bavail","","",77,null],[12,"f_files","","",77,null],[12,"f_ffree","","",77,null],[12,"f_fsid","","",77,null],[12,"f_namelen","","",77,null],[12,"f_frsize","","",77,null],[3,"msghdr","","",null,null],[12,"msg_name","","",78,null],[12,"msg_namelen","","",78,null],[12,"msg_iov","","",78,null],[12,"msg_iovlen","","",78,null],[12,"msg_control","","",78,null],[12,"msg_controllen","","",78,null],[12,"msg_flags","","",78,null],[3,"cmsghdr","","",null,null],[12,"cmsg_len","","",79,null],[12,"cmsg_level","","",79,null],[12,"cmsg_type","","",79,null],[3,"termios","","",null,null],[12,"c_iflag","","",80,null],[12,"c_oflag","","",80,null],[12,"c_cflag","","",80,null],[12,"c_lflag","","",80,null],[12,"c_line","","",80,null],[12,"c_cc","","",80,null],[12,"c_ispeed","","",80,null],[12,"c_ospeed","","",80,null],[3,"flock","","",null,null],[12,"l_type","","",81,null],[12,"l_whence","","",81,null],[12,"l_start","","",81,null],[12,"l_len","","",81,null],[12,"l_pid","","",81,null],[3,"sem_t","","",null,null],[3,"sigset_t","","",null,null],[3,"sysinfo","","",null,null],[12,"uptime","","",82,null],[12,"loads","","",82,null],[12,"totalram","","",82,null],[12,"freeram","","",82,null],[12,"sharedram","","",82,null],[12,"bufferram","","",82,null],[12,"totalswap","","",82,null],[12,"freeswap","","",82,null],[12,"procs","","",82,null],[12,"pad","","",82,null],[12,"totalhigh","","",82,null],[12,"freehigh","","",82,null],[12,"mem_unit","","",82,null],[12,"_f","","",82,null],[3,"msqid_ds","","",null,null],[12,"msg_perm","","",83,null],[12,"msg_stime","","",83,null],[12,"msg_rtime","","",83,null],[12,"msg_ctime","","",83,null],[12,"msg_qnum","","",83,null],[12,"msg_qbytes","","",83,null],[12,"msg_lspid","","",83,null],[12,"msg_lrpid","","",83,null],[3,"stat","","",null,null],[12,"st_dev","","",84,null],[12,"st_ino","","",84,null],[12,"st_nlink","","",84,null],[12,"st_mode","","",84,null],[12,"st_uid","","",84,null],[12,"st_gid","","",84,null],[12,"st_rdev","","",84,null],[12,"st_size","","",84,null],[12,"st_blksize","","",84,null],[12,"st_blocks","","",84,null],[12,"st_atime","","",84,null],[12,"st_atime_nsec","","",84,null],[12,"st_mtime","","",84,null],[12,"st_mtime_nsec","","",84,null],[12,"st_ctime","","",84,null],[12,"st_ctime_nsec","","",84,null],[3,"stat64","","",null,null],[12,"st_dev","","",85,null],[12,"st_ino","","",85,null],[12,"st_nlink","","",85,null],[12,"st_mode","","",85,null],[12,"st_uid","","",85,null],[12,"st_gid","","",85,null],[12,"st_rdev","","",85,null],[12,"st_size","","",85,null],[12,"st_blksize","","",85,null],[12,"st_blocks","","",85,null],[12,"st_atime","","",85,null],[12,"st_atime_nsec","","",85,null],[12,"st_mtime","","",85,null],[12,"st_mtime_nsec","","",85,null],[12,"st_ctime","","",85,null],[12,"st_ctime_nsec","","",85,null],[3,"statfs64","","",null,null],[12,"f_type","","",86,null],[12,"f_bsize","","",86,null],[12,"f_blocks","","",86,null],[12,"f_bfree","","",86,null],[12,"f_bavail","","",86,null],[12,"f_files","","",86,null],[12,"f_ffree","","",86,null],[12,"f_fsid","","",86,null],[12,"f_namelen","","",86,null],[12,"f_frsize","","",86,null],[12,"f_flags","","",86,null],[12,"f_spare","","",86,null],[3,"statvfs64","","",null,null],[12,"f_bsize","","",87,null],[12,"f_frsize","","",87,null],[12,"f_blocks","","",87,null],[12,"f_bfree","","",87,null],[12,"f_bavail","","",87,null],[12,"f_files","","",87,null],[12,"f_ffree","","",87,null],[12,"f_favail","","",87,null],[12,"f_fsid","","",87,null],[12,"f_flag","","",87,null],[12,"f_namemax","","",87,null],[3,"pthread_attr_t","","",null,null],[3,"_libc_fpxreg","","",null,null],[12,"significand","","",88,null],[12,"exponent","","",88,null],[3,"_libc_xmmreg","","",null,null],[12,"element","","",89,null],[3,"_libc_fpstate","","",null,null],[12,"cwd","","",90,null],[12,"swd","","",90,null],[12,"ftw","","",90,null],[12,"fop","","",90,null],[12,"rip","","",90,null],[12,"rdp","","",90,null],[12,"mxcsr","","",90,null],[12,"mxcr_mask","","",90,null],[12,"_st","","",90,null],[12,"_xmm","","",90,null],[3,"user_fpregs_struct","","",null,null],[12,"cwd","","",91,null],[12,"swd","","",91,null],[12,"ftw","","",91,null],[12,"fop","","",91,null],[12,"rip","","",91,null],[12,"rdp","","",91,null],[12,"mxcsr","","",91,null],[12,"mxcr_mask","","",91,null],[12,"st_space","","",91,null],[12,"xmm_space","","",91,null],[3,"user_regs_struct","","",null,null],[12,"r15","","",92,null],[12,"r14","","",92,null],[12,"r13","","",92,null],[12,"r12","","",92,null],[12,"rbp","","",92,null],[12,"rbx","","",92,null],[12,"r11","","",92,null],[12,"r10","","",92,null],[12,"r9","","",92,null],[12,"r8","","",92,null],[12,"rax","","",92,null],[12,"rcx","","",92,null],[12,"rdx","","",92,null],[12,"rsi","","",92,null],[12,"rdi","","",92,null],[12,"orig_rax","","",92,null],[12,"rip","","",92,null],[12,"cs","","",92,null],[12,"eflags","","",92,null],[12,"rsp","","",92,null],[12,"ss","","",92,null],[12,"fs_base","","",92,null],[12,"gs_base","","",92,null],[12,"ds","","",92,null],[12,"es","","",92,null],[12,"fs","","",92,null],[12,"gs","","",92,null],[3,"user","","",null,null],[12,"regs","","",93,null],[12,"u_fpvalid","","",93,null],[12,"i387","","",93,null],[12,"u_tsize","","",93,null],[12,"u_dsize","","",93,null],[12,"u_ssize","","",93,null],[12,"start_code","","",93,null],[12,"start_stack","","",93,null],[12,"signal","","",93,null],[12,"u_ar0","","",93,null],[12,"u_fpstate","","",93,null],[12,"magic","","",93,null],[12,"u_comm","","",93,null],[12,"u_debugreg","","",93,null],[3,"mcontext_t","","",null,null],[12,"gregs","","",94,null],[12,"fpregs","","",94,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",95,null],[12,"uc_link","","",95,null],[12,"uc_stack","","",95,null],[12,"uc_mcontext","","",95,null],[12,"uc_sigmask","","",95,null],[3,"ipc_perm","","",null,null],[12,"__key","","",96,null],[12,"uid","","",96,null],[12,"gid","","",96,null],[12,"cuid","","",96,null],[12,"cgid","","",96,null],[12,"mode","","",96,null],[12,"__seq","","",96,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",97,null],[12,"shm_segsz","","",97,null],[12,"shm_atime","","",97,null],[12,"shm_dtime","","",97,null],[12,"shm_ctime","","",97,null],[12,"shm_cpid","","",97,null],[12,"shm_lpid","","",97,null],[12,"shm_nattch","","",97,null],[3,"termios2","","",null,null],[12,"c_iflag","","",98,null],[12,"c_oflag","","",98,null],[12,"c_cflag","","",98,null],[12,"c_lflag","","",98,null],[12,"c_line","","",98,null],[12,"c_cc","","",98,null],[12,"c_ispeed","","",98,null],[12,"c_ospeed","","",98,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFSTOPPED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WSTOPSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFCONTINUED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WIFSIGNALED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WCOREDUMP","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"QCMD","","",null,{"inputs":[{"name":"c_int"},{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_CLR","","",null,null],[5,"CPU_ISSET","","",null,{"inputs":[{"name":"usize"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"CPU_EQUAL","","",null,{"inputs":[{"name":"cpu_set_t"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"major","","",null,{"inputs":[{"name":"dev_t"}],"output":{"name":"c_uint"}}],[5,"minor","","",null,{"inputs":[{"name":"dev_t"}],"output":{"name":"c_uint"}}],[5,"makedev","","",null,{"inputs":[{"name":"c_uint"},{"name":"c_uint"}],"output":{"name":"dev_t"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"getchar","","",null,null],[5,"putchar","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"wcstombs","","",null,null],[5,"memchr","","",null,null],[5,"memcmp","","",null,null],[5,"memcpy","","",null,null],[5,"memmove","","",null,null],[5,"memset","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"getpwnam","","",null,null],[5,"getpwuid","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"getchar_unlocked","","",null,null],[5,"putchar_unlocked","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"openat","","",null,null],[5,"fchmodat","","",null,null],[5,"fchown","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"mkdirat","","",null,null],[5,"readlinkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"fchdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execl","","",null,null],[5,"execle","","",null,null],[5,"execlp","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgid","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"seteuid","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"tcsetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"times","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_exit","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_init","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_condattr_init","","",null,null],[5,"pthread_condattr_destroy","","",null,null],[5,"pthread_rwlock_init","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_rwlockattr_init","","",null,null],[5,"pthread_rwlockattr_destroy","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"res_init","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"time","","",null,null],[5,"gmtime","","",null,null],[5,"localtime","","",null,null],[5,"mknod","","",null,null],[5,"uname","","",null,null],[5,"gethostname","","",null,null],[5,"getservbyname","","",null,null],[5,"getprotobyname","","",null,null],[5,"getprotobynumber","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"sem_init","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"readlink","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"sigprocmask","","",null,null],[5,"sigpending","","",null,null],[5,"timegm","","",null,null],[5,"getsid","","",null,null],[5,"sysconf","","",null,null],[5,"mkfifo","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfmakeraw","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"cfsetspeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcgetsid","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkdtemp","","",null,null],[5,"tmpnam","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"grantpt","","",null,null],[5,"posix_openpt","","",null,null],[5,"ptsname","","",null,null],[5,"unlockpt","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"clock_settime","","",null,null],[5,"dirfd","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"pipe2","","",null,null],[5,"statfs","","",null,null],[5,"statfs64","","",null,null],[5,"fstatfs","","",null,null],[5,"fstatfs64","","",null,null],[5,"statvfs64","","",null,null],[5,"fstatvfs64","","",null,null],[5,"memrchr","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"creat64","","",null,null],[5,"fstat64","","",null,null],[5,"fstatat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"getrlimit64","","",null,null],[5,"lseek64","","",null,null],[5,"lstat64","","",null,null],[5,"mmap64","","",null,null],[5,"open64","","",null,null],[5,"openat64","","",null,null],[5,"pread64","","",null,null],[5,"preadv64","","",null,null],[5,"pwrite64","","",null,null],[5,"pwritev64","","",null,null],[5,"readdir64","","",null,null],[5,"readdir64_r","","",null,null],[5,"setrlimit64","","",null,null],[5,"stat64","","",null,null],[5,"truncate64","","",null,null],[5,"fdopendir","","",null,null],[5,"mknodat","","",null,null],[5,"pthread_condattr_getclock","","",null,null],[5,"pthread_condattr_setclock","","",null,null],[5,"pthread_condattr_setpshared","","",null,null],[5,"accept4","","",null,null],[5,"pthread_mutexattr_setpshared","","",null,null],[5,"pthread_rwlockattr_getpshared","","",null,null],[5,"pthread_rwlockattr_setpshared","","",null,null],[5,"ptsname_r","","",null,null],[5,"clearenv","","",null,null],[5,"waitid","","",null,null],[5,"setreuid","","",null,null],[5,"setregid","","",null,null],[5,"getresuid","","",null,null],[5,"getresgid","","",null,null],[5,"acct","","",null,null],[5,"brk","","",null,null],[5,"sbrk","","",null,null],[5,"vfork","","",null,null],[5,"setresgid","","",null,null],[5,"setresuid","","",null,null],[5,"wait4","","",null,null],[5,"openpty","","",null,null],[5,"execvpe","","",null,null],[5,"fexecve","","",null,null],[5,"aio_read","","",null,null],[5,"aio_write","","",null,null],[5,"aio_fsync","","",null,null],[5,"aio_error","","",null,null],[5,"aio_return","","",null,null],[5,"aio_suspend","","",null,null],[5,"aio_cancel","","",null,null],[5,"lio_listio","","",null,null],[5,"lutimes","","",null,null],[5,"setpwent","","",null,null],[5,"endpwent","","",null,null],[5,"getpwent","","",null,null],[5,"setspent","","",null,null],[5,"endspent","","",null,null],[5,"getspent","","",null,null],[5,"getspnam","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"ftok","","",null,null],[5,"semget","","",null,null],[5,"semop","","",null,null],[5,"semctl","","",null,null],[5,"msgctl","","",null,null],[5,"msgget","","",null,null],[5,"msgrcv","","",null,null],[5,"msgsnd","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"timerfd_create","","",null,null],[5,"timerfd_gettime","","",null,null],[5,"timerfd_settime","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"getnameinfo","","",null,null],[5,"pthread_setschedprio","","",null,null],[5,"prlimit","","",null,null],[5,"prlimit64","","",null,null],[5,"getloadavg","","",null,null],[5,"process_vm_readv","","",null,null],[5,"process_vm_writev","","",null,null],[5,"reboot","","",null,null],[5,"setfsgid","","",null,null],[5,"setfsuid","","",null,null],[5,"mkfifoat","","",null,null],[5,"if_nameindex","","",null,null],[5,"if_freenameindex","","",null,null],[5,"sync_file_range","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"mremap","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"madvise","","",null,null],[5,"msync","","",null,null],[5,"recvfrom","","",null,null],[5,"mkstemps","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"bind","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"getdomainname","","",null,null],[5,"setdomainname","","",null,null],[5,"vhangup","","",null,null],[5,"sendmmsg","","",null,null],[5,"recvmmsg","","",null,null],[5,"sync","","",null,null],[5,"syscall","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_create1","","",null,null],[5,"epoll_wait","","",null,null],[5,"epoll_ctl","","",null,null],[5,"pthread_getschedparam","","",null,null],[5,"unshare","","",null,null],[5,"umount","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"tee","","",null,null],[5,"settimeofday","","",null,null],[5,"splice","","",null,null],[5,"eventfd","","",null,null],[5,"sched_rr_get_interval","","",null,null],[5,"sem_timedwait","","",null,null],[5,"sched_setparam","","",null,null],[5,"setns","","",null,null],[5,"swapoff","","",null,null],[5,"vmsplice","","",null,null],[5,"mount","","",null,null],[5,"personality","","",null,null],[5,"prctl","","",null,null],[5,"sched_getparam","","",null,null],[5,"ppoll","","",null,null],[5,"pthread_mutex_timedlock","","",null,null],[5,"clone","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"clock_nanosleep","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"sethostname","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"pthread_condattr_getpshared","","",null,null],[5,"sysinfo","","",null,null],[5,"umount2","","",null,null],[5,"pthread_setschedparam","","",null,null],[5,"swapon","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sendfile","","",null,null],[5,"sigsuspend","","",null,null],[5,"getgrgid_r","","",null,null],[5,"sigaltstack","","",null,null],[5,"sem_close","","",null,null],[5,"getdtablesize","","",null,null],[5,"getgrnam_r","","",null,null],[5,"initgroups","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"sem_open","","",null,null],[5,"getgrnam","","",null,null],[5,"pthread_cancel","","",null,null],[5,"pthread_kill","","",null,null],[5,"sem_unlink","","",null,null],[5,"daemon","","",null,null],[5,"getpwnam_r","","",null,null],[5,"getpwuid_r","","",null,null],[5,"sigwait","","",null,null],[5,"pthread_atfork","","",null,null],[5,"getgrgid","","",null,null],[5,"getgrouplist","","",null,null],[5,"pthread_mutexattr_getpshared","","",null,null],[5,"popen","","",null,null],[5,"faccessat","","",null,null],[5,"pthread_create","","",null,null],[5,"dl_iterate_phdr","","",null,null],[5,"utmpxname","","",null,null],[5,"getutxent","","",null,null],[5,"getutxid","","",null,null],[5,"getutxline","","",null,null],[5,"pututxline","","",null,null],[5,"setutxent","","",null,null],[5,"endutxent","","",null,null],[5,"getpt","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"pthread_getaffinity_np","","",null,null],[5,"pthread_setaffinity_np","","",null,null],[5,"pthread_rwlockattr_getkind_np","","",null,null],[5,"pthread_rwlockattr_setkind_np","","",null,null],[5,"sched_getcpu","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[5,"iopl","","",null,null],[5,"ioperm","","",null,null],[5,"sysctl","","",null,null],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"stat"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"stat64"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"statfs64"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"statvfs64"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"_libc_fpxreg"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"_libc_xmmreg"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"_libc_fpstate"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"user_fpregs_struct"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"user_regs_struct"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"user"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"mcontext_t"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"ucontext_t"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"ipc_perm"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"shmid_ds"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"termios2"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"sigset_t"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"sysinfo"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"msqid_ds"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"aiocb"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"__exit_status"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"__timeval"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"utmpx"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"sigaction"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"stack_t"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"glob64_t"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"ucred"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"statfs"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"msghdr"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"cmsghdr"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"termios"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"flock"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"sem_t"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"dirent"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"dirent64"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"rlimit64"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"glob_t"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"pthread_rwlockattr_t"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"pthread_condattr_t"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"passwd"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"spwd"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"statvfs"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"dqblk"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"signalfd_siginfo"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"itimerspec"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"fsid_t"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"mq_attr"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"cpu_set_t"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"if_nameindex"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"msginfo"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"mmsghdr"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"sembuf"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"input_event"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"input_id"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"input_absinfo"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"input_keymap_entry"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"input_mask"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"ff_replay"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"ff_trigger"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"ff_envelope"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"ff_constant_effect"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"ff_ramp_effect"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"ff_condition_effect"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"ff_periodic_effect"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"ff_rumble_effect"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"ff_effect"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"dl_phdr_info"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"elf32_phdr"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"elf64_phdr"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"addrinfo"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_nl"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_ll"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"fd_set"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"sched_param"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"dl_info"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"epoll_event"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"utsname"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"lconv"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"sigevent"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"group"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"utimbuf"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"timeval"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"rlimit"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"rusage"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"in_addr"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"in6_addr"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"hostent"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"iovec"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"pollfd"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"winsize"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"linger"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"sigval"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"itimerval"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"tms"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"servent"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"protoent"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"clockid_t","","",null,null],[6,"key_t","","",null,null],[6,"id_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"mqd_t","","",null,null],[6,"nfds_t","","",null,null],[6,"nl_item","","",null,null],[6,"idtype_t","","",null,null],[6,"loff_t","","",null,null],[6,"__u8","","",null,null],[6,"__u16","","",null,null],[6,"__s16","","",null,null],[6,"__u32","","",null,null],[6,"__s32","","",null,null],[6,"Elf32_Half","","",null,null],[6,"Elf32_Word","","",null,null],[6,"Elf32_Off","","",null,null],[6,"Elf32_Addr","","",null,null],[6,"Elf64_Half","","",null,null],[6,"Elf64_Word","","",null,null],[6,"Elf64_Off","","",null,null],[6,"Elf64_Addr","","",null,null],[6,"Elf64_Xword","","",null,null],[6,"__priority_which_t","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"msgqnum_t","","",null,null],[6,"msglen_t","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"greg_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"__u64","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"IPPROTO_ICMP","","",null,null],[17,"IPPROTO_ICMPV6","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_UDP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"INADDR_LOOPBACK","","",null,null],[17,"INADDR_ANY","","",null,null],[17,"INADDR_BROADCAST","","",null,null],[17,"INADDR_NONE","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_CANCELLK","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"F_ADD_SEALS","","",null,null],[17,"F_GET_SEALS","","",null,null],[17,"F_SEAL_SEAL","","",null,null],[17,"F_SEAL_SHRINK","","",null,null],[17,"F_SEAL_GROW","","",null,null],[17,"F_SEAL_WRITE","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"TIMER_ABSTIME","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"SCM_RIGHTS","","",null,null],[17,"SCM_CREDENTIALS","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_FREE","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"MADV_SOFT_OFFLINE","","",null,null],[17,"IFF_UP","","",null,null],[17,"IFF_BROADCAST","","",null,null],[17,"IFF_DEBUG","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"IFF_POINTOPOINT","","",null,null],[17,"IFF_NOTRAILERS","","",null,null],[17,"IFF_RUNNING","","",null,null],[17,"IFF_NOARP","","",null,null],[17,"IFF_PROMISC","","",null,null],[17,"IFF_ALLMULTI","","",null,null],[17,"IFF_MASTER","","",null,null],[17,"IFF_SLAVE","","",null,null],[17,"IFF_MULTICAST","","",null,null],[17,"IFF_PORTSEL","","",null,null],[17,"IFF_AUTOMEDIA","","",null,null],[17,"IFF_DYNAMIC","","",null,null],[17,"SOL_IP","","",null,null],[17,"SOL_TCP","","",null,null],[17,"SOL_UDP","","",null,null],[17,"SOL_IPV6","","",null,null],[17,"SOL_ICMPV6","","",null,null],[17,"SOL_RAW","","",null,null],[17,"SOL_DECNET","","",null,null],[17,"SOL_X25","","",null,null],[17,"SOL_PACKET","","",null,null],[17,"SOL_ATM","","",null,null],[17,"SOL_AAL","","",null,null],[17,"SOL_IRDA","","",null,null],[17,"SOL_NETBEUI","","",null,null],[17,"SOL_LLC","","",null,null],[17,"SOL_DCCP","","",null,null],[17,"SOL_NETLINK","","",null,null],[17,"SOL_TIPC","","",null,null],[17,"AF_UNSPEC","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_LOCAL","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_AX25","","",null,null],[17,"AF_IPX","","",null,null],[17,"AF_APPLETALK","","",null,null],[17,"AF_NETROM","","",null,null],[17,"AF_BRIDGE","","",null,null],[17,"AF_ATMPVC","","",null,null],[17,"AF_X25","","",null,null],[17,"AF_INET6","","",null,null],[17,"AF_ROSE","","",null,null],[17,"AF_DECnet","","",null,null],[17,"AF_NETBEUI","","",null,null],[17,"AF_SECURITY","","",null,null],[17,"AF_KEY","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"AF_ROUTE","","",null,null],[17,"AF_PACKET","","",null,null],[17,"AF_ASH","","",null,null],[17,"AF_ECONET","","",null,null],[17,"AF_ATMSVC","","",null,null],[17,"AF_RDS","","",null,null],[17,"AF_SNA","","",null,null],[17,"AF_IRDA","","",null,null],[17,"AF_PPPOX","","",null,null],[17,"AF_WANPIPE","","",null,null],[17,"AF_LLC","","",null,null],[17,"AF_CAN","","",null,null],[17,"AF_TIPC","","",null,null],[17,"AF_BLUETOOTH","","",null,null],[17,"AF_IUCV","","",null,null],[17,"AF_RXRPC","","",null,null],[17,"AF_ISDN","","",null,null],[17,"AF_PHONET","","",null,null],[17,"AF_IEEE802154","","",null,null],[17,"AF_CAIF","","",null,null],[17,"AF_ALG","","",null,null],[17,"PF_UNSPEC","","",null,null],[17,"PF_UNIX","","",null,null],[17,"PF_LOCAL","","",null,null],[17,"PF_INET","","",null,null],[17,"PF_AX25","","",null,null],[17,"PF_IPX","","",null,null],[17,"PF_APPLETALK","","",null,null],[17,"PF_NETROM","","",null,null],[17,"PF_BRIDGE","","",null,null],[17,"PF_ATMPVC","","",null,null],[17,"PF_X25","","",null,null],[17,"PF_INET6","","",null,null],[17,"PF_ROSE","","",null,null],[17,"PF_DECnet","","",null,null],[17,"PF_NETBEUI","","",null,null],[17,"PF_SECURITY","","",null,null],[17,"PF_KEY","","",null,null],[17,"PF_NETLINK","","",null,null],[17,"PF_ROUTE","","",null,null],[17,"PF_PACKET","","",null,null],[17,"PF_ASH","","",null,null],[17,"PF_ECONET","","",null,null],[17,"PF_ATMSVC","","",null,null],[17,"PF_RDS","","",null,null],[17,"PF_SNA","","",null,null],[17,"PF_IRDA","","",null,null],[17,"PF_PPPOX","","",null,null],[17,"PF_WANPIPE","","",null,null],[17,"PF_LLC","","",null,null],[17,"PF_CAN","","",null,null],[17,"PF_TIPC","","",null,null],[17,"PF_BLUETOOTH","","",null,null],[17,"PF_IUCV","","",null,null],[17,"PF_RXRPC","","",null,null],[17,"PF_ISDN","","",null,null],[17,"PF_PHONET","","",null,null],[17,"PF_IEEE802154","","",null,null],[17,"PF_CAIF","","",null,null],[17,"PF_ALG","","",null,null],[17,"SOMAXCONN","","",null,null],[17,"MSG_OOB","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"MSG_DONTROUTE","","",null,null],[17,"MSG_CTRUNC","","",null,null],[17,"MSG_TRUNC","","",null,null],[17,"MSG_DONTWAIT","","",null,null],[17,"MSG_EOR","","",null,null],[17,"MSG_WAITALL","","",null,null],[17,"MSG_FIN","","",null,null],[17,"MSG_SYN","","",null,null],[17,"MSG_CONFIRM","","",null,null],[17,"MSG_RST","","",null,null],[17,"MSG_ERRQUEUE","","",null,null],[17,"MSG_NOSIGNAL","","",null,null],[17,"MSG_MORE","","",null,null],[17,"MSG_WAITFORONE","","",null,null],[17,"MSG_FASTOPEN","","",null,null],[17,"MSG_CMSG_CLOEXEC","","",null,null],[17,"SCM_TIMESTAMP","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"SOCK_RDM","","",null,null],[17,"IP_MULTICAST_IF","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"CR0","","",null,null],[17,"FF0","","",null,null],[17,"BS0","","",null,null],[17,"VT0","","",null,null],[17,"VERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VLNEXT","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"CS5","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHO","","",null,null],[17,"OCRNL","","",null,null],[17,"ONOCR","","",null,null],[17,"ONLRET","","",null,null],[17,"OFILL","","",null,null],[17,"OFDEL","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"CLONE_NEWCGROUP","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"WSTOPPED","","",null,null],[17,"WEXITED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"PTRACE_O_TRACESYSGOOD","","",null,null],[17,"PTRACE_O_TRACEFORK","","",null,null],[17,"PTRACE_O_TRACEVFORK","","",null,null],[17,"PTRACE_O_TRACECLONE","","",null,null],[17,"PTRACE_O_TRACEEXEC","","",null,null],[17,"PTRACE_O_TRACEVFORKDONE","","",null,null],[17,"PTRACE_O_TRACEEXIT","","",null,null],[17,"PTRACE_O_TRACESECCOMP","","",null,null],[17,"PTRACE_O_EXITKILL","","",null,null],[17,"PTRACE_O_SUSPEND_SECCOMP","","",null,null],[17,"PTRACE_O_MASK","","",null,null],[17,"PTRACE_EVENT_FORK","","",null,null],[17,"PTRACE_EVENT_VFORK","","",null,null],[17,"PTRACE_EVENT_CLONE","","",null,null],[17,"PTRACE_EVENT_EXEC","","",null,null],[17,"PTRACE_EVENT_VFORK_DONE","","",null,null],[17,"PTRACE_EVENT_EXIT","","",null,null],[17,"PTRACE_EVENT_SECCOMP","","",null,null],[17,"__WNOTHREAD","","",null,null],[17,"__WALL","","",null,null],[17,"__WCLONE","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"AT_REMOVEDIR","","",null,null],[17,"AT_SYMLINK_FOLLOW","","",null,null],[17,"AT_NO_AUTOMOUNT","","",null,null],[17,"AT_EMPTY_PATH","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"SI_LOAD_SHIFT","","",null,null],[17,"SIGEV_SIGNAL","","",null,null],[17,"SIGEV_NONE","","",null,null],[17,"SIGEV_THREAD","","",null,null],[17,"P_ALL","","",null,null],[17,"P_PID","","",null,null],[17,"P_PGID","","",null,null],[17,"UTIME_OMIT","","",null,null],[17,"UTIME_NOW","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"CODESET","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"_PC_SYNC_IO","","",null,null],[17,"_PC_ASYNC_IO","","",null,null],[17,"_PC_PRIO_IO","","",null,null],[17,"_PC_SOCK_MAXBUF","","",null,null],[17,"_PC_FILESIZEBITS","","",null,null],[17,"_PC_REC_INCR_XFER_SIZE","","",null,null],[17,"_PC_REC_MAX_XFER_SIZE","","",null,null],[17,"_PC_REC_MIN_XFER_SIZE","","",null,null],[17,"_PC_REC_XFER_ALIGN","","",null,null],[17,"_PC_ALLOC_SIZE_MIN","","",null,null],[17,"_PC_SYMLINK_MAX","","",null,null],[17,"_PC_2_SYMLINKS","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_UIO_MAXIOV","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_THREAD_PROCESS_SHARED","","",null,null],[17,"_SC_NPROCESSORS_CONF","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_PHYS_PAGES","","",null,null],[17,"_SC_AVPHYS_PAGES","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_PASS_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XOPEN_XPG2","","",null,null],[17,"_SC_XOPEN_XPG3","","",null,null],[17,"_SC_XOPEN_XPG4","","",null,null],[17,"_SC_NZERO","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LP64_OFF64","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_ADVISORY_INFO","","",null,null],[17,"_SC_BARRIERS","","",null,null],[17,"_SC_CLOCK_SELECTION","","",null,null],[17,"_SC_CPUTIME","","",null,null],[17,"_SC_THREAD_CPUTIME","","",null,null],[17,"_SC_MONOTONIC_CLOCK","","",null,null],[17,"_SC_READER_WRITER_LOCKS","","",null,null],[17,"_SC_SPIN_LOCKS","","",null,null],[17,"_SC_REGEXP","","",null,null],[17,"_SC_SHELL","","",null,null],[17,"_SC_SPAWN","","",null,null],[17,"_SC_SPORADIC_SERVER","","",null,null],[17,"_SC_THREAD_SPORADIC_SERVER","","",null,null],[17,"_SC_TIMEOUTS","","",null,null],[17,"_SC_TYPED_MEMORY_OBJECTS","","",null,null],[17,"_SC_2_PBS","","",null,null],[17,"_SC_2_PBS_ACCOUNTING","","",null,null],[17,"_SC_2_PBS_LOCATE","","",null,null],[17,"_SC_2_PBS_MESSAGE","","",null,null],[17,"_SC_2_PBS_TRACK","","",null,null],[17,"_SC_SYMLOOP_MAX","","",null,null],[17,"_SC_STREAMS","","",null,null],[17,"_SC_2_PBS_CHECKPOINT","","",null,null],[17,"_SC_V6_ILP32_OFF32","","",null,null],[17,"_SC_V6_ILP32_OFFBIG","","",null,null],[17,"_SC_V6_LP64_OFF64","","",null,null],[17,"_SC_V6_LPBIG_OFFBIG","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"_SC_TRACE","","",null,null],[17,"_SC_TRACE_EVENT_FILTER","","",null,null],[17,"_SC_TRACE_INHERIT","","",null,null],[17,"_SC_TRACE_LOG","","",null,null],[17,"_SC_IPV6","","",null,null],[17,"_SC_RAW_SOCKETS","","",null,null],[17,"_SC_V7_ILP32_OFF32","","",null,null],[17,"_SC_V7_ILP32_OFFBIG","","",null,null],[17,"_SC_V7_LP64_OFF64","","",null,null],[17,"_SC_V7_LPBIG_OFFBIG","","",null,null],[17,"_SC_SS_REPL_MAX","","",null,null],[17,"_SC_TRACE_EVENT_NAME_MAX","","",null,null],[17,"_SC_TRACE_NAME_MAX","","",null,null],[17,"_SC_TRACE_SYS_MAX","","",null,null],[17,"_SC_TRACE_USER_EVENT_MAX","","",null,null],[17,"_SC_XOPEN_STREAMS","","",null,null],[17,"_SC_THREAD_ROBUST_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_ROBUST_PRIO_PROTECT","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"IFF_LOWER_UP","","",null,null],[17,"IFF_DORMANT","","",null,null],[17,"IFF_ECHO","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"PTHREAD_PROCESS_PRIVATE","","",null,null],[17,"PTHREAD_PROCESS_SHARED","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"RENAME_NOREPLACE","","",null,null],[17,"RENAME_EXCHANGE","","",null,null],[17,"RENAME_WHITEOUT","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"IPPROTO_HOPOPTS","","Hop-by-hop option header",null,null],[17,"IPPROTO_IGMP","","group mgmt protocol",null,null],[17,"IPPROTO_IPIP","","for compatibility",null,null],[17,"IPPROTO_EGP","","exterior gateway protocol",null,null],[17,"IPPROTO_PUP","","pup",null,null],[17,"IPPROTO_IDP","","xns idp",null,null],[17,"IPPROTO_TP","","tp-4 w/ class negotiation",null,null],[17,"IPPROTO_DCCP","","DCCP",null,null],[17,"IPPROTO_ROUTING","","IP6 routing header",null,null],[17,"IPPROTO_FRAGMENT","","IP6 fragmentation header",null,null],[17,"IPPROTO_RSVP","","resource reservation",null,null],[17,"IPPROTO_GRE","","General Routing Encap.",null,null],[17,"IPPROTO_ESP","","IP6 Encap Sec. Payload",null,null],[17,"IPPROTO_AH","","IP6 Auth Header",null,null],[17,"IPPROTO_NONE","","IP6 no next header",null,null],[17,"IPPROTO_DSTOPTS","","IP6 destination option",null,null],[17,"IPPROTO_MTP","","",null,null],[17,"IPPROTO_BEETPH","","",null,null],[17,"IPPROTO_ENCAP","","encapsulation header",null,null],[17,"IPPROTO_PIM","","Protocol indep. multicast",null,null],[17,"IPPROTO_COMP","","IP Payload Comp. Protocol",null,null],[17,"IPPROTO_SCTP","","SCTP",null,null],[17,"IPPROTO_MH","","",null,null],[17,"IPPROTO_UDPLITE","","",null,null],[17,"IPPROTO_MPLS","","",null,null],[17,"IPPROTO_RAW","","raw IP packet",null,null],[17,"IPPROTO_MAX","","",null,null],[17,"AF_IB","","",null,null],[17,"AF_MPLS","","",null,null],[17,"AF_NFC","","",null,null],[17,"AF_VSOCK","","",null,null],[17,"PF_IB","","",null,null],[17,"PF_MPLS","","",null,null],[17,"PF_NFC","","",null,null],[17,"PF_VSOCK","","",null,null],[17,"IPC_PRIVATE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"MSG_STAT","","",null,null],[17,"MSG_INFO","","",null,null],[17,"MSG_NOERROR","","",null,null],[17,"MSG_EXCEPT","","",null,null],[17,"MSG_COPY","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLEXCLUSIVE","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"RB_AUTOBOOT","","",null,null],[17,"RB_HALT_SYSTEM","","",null,null],[17,"RB_ENABLE_CAD","","",null,null],[17,"RB_DISABLE_CAD","","",null,null],[17,"RB_POWER_OFF","","",null,null],[17,"RB_SW_SUSPEND","","",null,null],[17,"RB_KEXEC","","",null,null],[17,"AI_PASSIVE","","",null,null],[17,"AI_CANONNAME","","",null,null],[17,"AI_NUMERICHOST","","",null,null],[17,"AI_V4MAPPED","","",null,null],[17,"AI_ALL","","",null,null],[17,"AI_ADDRCONFIG","","",null,null],[17,"AI_NUMERICSERV","","",null,null],[17,"EAI_BADFLAGS","","",null,null],[17,"EAI_NONAME","","",null,null],[17,"EAI_AGAIN","","",null,null],[17,"EAI_FAIL","","",null,null],[17,"EAI_FAMILY","","",null,null],[17,"EAI_SOCKTYPE","","",null,null],[17,"EAI_SERVICE","","",null,null],[17,"EAI_MEMORY","","",null,null],[17,"EAI_OVERFLOW","","",null,null],[17,"NI_NUMERICHOST","","",null,null],[17,"NI_NUMERICSERV","","",null,null],[17,"NI_NOFQDN","","",null,null],[17,"NI_NAMEREQD","","",null,null],[17,"NI_DGRAM","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_BEFORE","","",null,null],[17,"SYNC_FILE_RANGE_WRITE","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_AFTER","","",null,null],[17,"EAI_SYSTEM","","",null,null],[17,"AIO_CANCELED","","",null,null],[17,"AIO_NOTCANCELED","","",null,null],[17,"AIO_ALLDONE","","",null,null],[17,"LIO_READ","","",null,null],[17,"LIO_WRITE","","",null,null],[17,"LIO_NOP","","",null,null],[17,"LIO_WAIT","","",null,null],[17,"LIO_NOWAIT","","",null,null],[17,"MREMAP_MAYMOVE","","",null,null],[17,"MREMAP_FIXED","","",null,null],[17,"PR_SET_PDEATHSIG","","",null,null],[17,"PR_GET_PDEATHSIG","","",null,null],[17,"PR_GET_DUMPABLE","","",null,null],[17,"PR_SET_DUMPABLE","","",null,null],[17,"PR_GET_UNALIGN","","",null,null],[17,"PR_SET_UNALIGN","","",null,null],[17,"PR_UNALIGN_NOPRINT","","",null,null],[17,"PR_UNALIGN_SIGBUS","","",null,null],[17,"PR_GET_KEEPCAPS","","",null,null],[17,"PR_SET_KEEPCAPS","","",null,null],[17,"PR_GET_FPEMU","","",null,null],[17,"PR_SET_FPEMU","","",null,null],[17,"PR_FPEMU_NOPRINT","","",null,null],[17,"PR_FPEMU_SIGFPE","","",null,null],[17,"PR_GET_FPEXC","","",null,null],[17,"PR_SET_FPEXC","","",null,null],[17,"PR_FP_EXC_SW_ENABLE","","",null,null],[17,"PR_FP_EXC_DIV","","",null,null],[17,"PR_FP_EXC_OVF","","",null,null],[17,"PR_FP_EXC_UND","","",null,null],[17,"PR_FP_EXC_RES","","",null,null],[17,"PR_FP_EXC_INV","","",null,null],[17,"PR_FP_EXC_DISABLED","","",null,null],[17,"PR_FP_EXC_NONRECOV","","",null,null],[17,"PR_FP_EXC_ASYNC","","",null,null],[17,"PR_FP_EXC_PRECISE","","",null,null],[17,"PR_GET_TIMING","","",null,null],[17,"PR_SET_TIMING","","",null,null],[17,"PR_TIMING_STATISTICAL","","",null,null],[17,"PR_TIMING_TIMESTAMP","","",null,null],[17,"PR_SET_NAME","","",null,null],[17,"PR_GET_NAME","","",null,null],[17,"PR_GET_ENDIAN","","",null,null],[17,"PR_SET_ENDIAN","","",null,null],[17,"PR_ENDIAN_BIG","","",null,null],[17,"PR_ENDIAN_LITTLE","","",null,null],[17,"PR_ENDIAN_PPC_LITTLE","","",null,null],[17,"PR_GET_SECCOMP","","",null,null],[17,"PR_SET_SECCOMP","","",null,null],[17,"PR_CAPBSET_READ","","",null,null],[17,"PR_CAPBSET_DROP","","",null,null],[17,"PR_GET_TSC","","",null,null],[17,"PR_SET_TSC","","",null,null],[17,"PR_TSC_ENABLE","","",null,null],[17,"PR_TSC_SIGSEGV","","",null,null],[17,"PR_GET_SECUREBITS","","",null,null],[17,"PR_SET_SECUREBITS","","",null,null],[17,"PR_SET_TIMERSLACK","","",null,null],[17,"PR_GET_TIMERSLACK","","",null,null],[17,"PR_TASK_PERF_EVENTS_DISABLE","","",null,null],[17,"PR_TASK_PERF_EVENTS_ENABLE","","",null,null],[17,"PR_MCE_KILL","","",null,null],[17,"PR_MCE_KILL_CLEAR","","",null,null],[17,"PR_MCE_KILL_SET","","",null,null],[17,"PR_MCE_KILL_LATE","","",null,null],[17,"PR_MCE_KILL_EARLY","","",null,null],[17,"PR_MCE_KILL_DEFAULT","","",null,null],[17,"PR_MCE_KILL_GET","","",null,null],[17,"PR_SET_MM","","",null,null],[17,"PR_SET_MM_START_CODE","","",null,null],[17,"PR_SET_MM_END_CODE","","",null,null],[17,"PR_SET_MM_START_DATA","","",null,null],[17,"PR_SET_MM_END_DATA","","",null,null],[17,"PR_SET_MM_START_STACK","","",null,null],[17,"PR_SET_MM_START_BRK","","",null,null],[17,"PR_SET_MM_BRK","","",null,null],[17,"PR_SET_MM_ARG_START","","",null,null],[17,"PR_SET_MM_ARG_END","","",null,null],[17,"PR_SET_MM_ENV_START","","",null,null],[17,"PR_SET_MM_ENV_END","","",null,null],[17,"PR_SET_MM_AUXV","","",null,null],[17,"PR_SET_MM_EXE_FILE","","",null,null],[17,"PR_SET_MM_MAP","","",null,null],[17,"PR_SET_MM_MAP_SIZE","","",null,null],[17,"PR_SET_PTRACER","","",null,null],[17,"PR_SET_CHILD_SUBREAPER","","",null,null],[17,"PR_GET_CHILD_SUBREAPER","","",null,null],[17,"PR_SET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_TID_ADDRESS","","",null,null],[17,"PR_SET_THP_DISABLE","","",null,null],[17,"PR_GET_THP_DISABLE","","",null,null],[17,"PR_MPX_ENABLE_MANAGEMENT","","",null,null],[17,"PR_MPX_DISABLE_MANAGEMENT","","",null,null],[17,"PR_SET_FP_MODE","","",null,null],[17,"PR_GET_FP_MODE","","",null,null],[17,"PR_FP_MODE_FR","","",null,null],[17,"PR_FP_MODE_FRE","","",null,null],[17,"PR_CAP_AMBIENT","","",null,null],[17,"PR_CAP_AMBIENT_IS_SET","","",null,null],[17,"PR_CAP_AMBIENT_RAISE","","",null,null],[17,"PR_CAP_AMBIENT_LOWER","","",null,null],[17,"PR_CAP_AMBIENT_CLEAR_ALL","","",null,null],[17,"GRND_NONBLOCK","","",null,null],[17,"GRND_RANDOM","","",null,null],[17,"ITIMER_REAL","","",null,null],[17,"ITIMER_VIRTUAL","","",null,null],[17,"ITIMER_PROF","","",null,null],[17,"TFD_CLOEXEC","","",null,null],[17,"TFD_NONBLOCK","","",null,null],[17,"TFD_TIMER_ABSTIME","","",null,null],[17,"XATTR_CREATE","","",null,null],[17,"XATTR_REPLACE","","",null,null],[17,"_POSIX_VDISABLE","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"FALLOC_FL_COLLAPSE_RANGE","","",null,null],[17,"FALLOC_FL_ZERO_RANGE","","",null,null],[17,"FALLOC_FL_INSERT_RANGE","","",null,null],[17,"FALLOC_FL_UNSHARE_RANGE","","",null,null],[17,"ENOATTR","","",null,null],[17,"SO_ORIGINAL_DST","","",null,null],[17,"IUTF8","","",null,null],[17,"CMSPAR","","",null,null],[17,"MFD_CLOEXEC","","",null,null],[17,"MFD_ALLOW_SEALING","","",null,null],[17,"PT_NULL","","",null,null],[17,"PT_LOAD","","",null,null],[17,"PT_DYNAMIC","","",null,null],[17,"PT_INTERP","","",null,null],[17,"PT_NOTE","","",null,null],[17,"PT_SHLIB","","",null,null],[17,"PT_PHDR","","",null,null],[17,"PT_TLS","","",null,null],[17,"PT_NUM","","",null,null],[17,"PT_LOOS","","",null,null],[17,"PT_GNU_EH_FRAME","","",null,null],[17,"PT_GNU_STACK","","",null,null],[17,"PT_GNU_RELRO","","",null,null],[17,"__UT_LINESIZE","","",null,null],[17,"__UT_NAMESIZE","","",null,null],[17,"__UT_HOSTSIZE","","",null,null],[17,"EMPTY","","",null,null],[17,"RUN_LVL","","",null,null],[17,"BOOT_TIME","","",null,null],[17,"NEW_TIME","","",null,null],[17,"OLD_TIME","","",null,null],[17,"INIT_PROCESS","","",null,null],[17,"LOGIN_PROCESS","","",null,null],[17,"USER_PROCESS","","",null,null],[17,"DEAD_PROCESS","","",null,null],[17,"ACCOUNTING","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"SOL_RXRPC","","",null,null],[17,"SOL_PPPOL2TP","","",null,null],[17,"SOL_BLUETOOTH","","",null,null],[17,"SOL_PNPIPE","","",null,null],[17,"SOL_RDS","","",null,null],[17,"SOL_IUCV","","",null,null],[17,"SOL_CAIF","","",null,null],[17,"SOL_ALG","","",null,null],[17,"SOL_NFC","","",null,null],[17,"MSG_TRYHARD","","",null,null],[17,"LC_PAPER","","",null,null],[17,"LC_NAME","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[17,"LC_IDENTIFICATION","","",null,null],[17,"LC_PAPER_MASK","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"ENOTSUP","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"SOCK_DCCP","","",null,null],[17,"SOCK_PACKET","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"DCCP_SOCKOPT_PACKET_SIZE","","",null,null],[17,"DCCP_SOCKOPT_SERVICE","","",null,null],[17,"DCCP_SOCKOPT_CHANGE_L","","",null,null],[17,"DCCP_SOCKOPT_CHANGE_R","","",null,null],[17,"DCCP_SOCKOPT_GET_CUR_MPS","","",null,null],[17,"DCCP_SOCKOPT_SERVER_TIMEWAIT","","",null,null],[17,"DCCP_SOCKOPT_SEND_CSCOV","","",null,null],[17,"DCCP_SOCKOPT_RECV_CSCOV","","",null,null],[17,"DCCP_SOCKOPT_AVAILABLE_CCIDS","","",null,null],[17,"DCCP_SOCKOPT_CCID","","",null,null],[17,"DCCP_SOCKOPT_TX_CCID","","",null,null],[17,"DCCP_SOCKOPT_RX_CCID","","",null,null],[17,"DCCP_SOCKOPT_QPOLICY_ID","","",null,null],[17,"DCCP_SOCKOPT_QPOLICY_TXQLEN","","",null,null],[17,"DCCP_SOCKOPT_CCID_RX_INFO","","",null,null],[17,"DCCP_SOCKOPT_CCID_TX_INFO","","",null,null],[17,"DCCP_SERVICE_LIST_MAX_LEN","","maximum number of services provided on the same listening port",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGEV_THREAD_ID","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_EQUIV_CLASS_MAX","","",null,null],[17,"_SC_CHARCLASS_NAME_MAX","","",null,null],[17,"_SC_PII","","",null,null],[17,"_SC_PII_XTI","","",null,null],[17,"_SC_PII_SOCKET","","",null,null],[17,"_SC_PII_INTERNET","","",null,null],[17,"_SC_PII_OSI","","",null,null],[17,"_SC_POLL","","",null,null],[17,"_SC_SELECT","","",null,null],[17,"_SC_PII_INTERNET_STREAM","","",null,null],[17,"_SC_PII_INTERNET_DGRAM","","",null,null],[17,"_SC_PII_OSI_COTS","","",null,null],[17,"_SC_PII_OSI_CLTS","","",null,null],[17,"_SC_PII_OSI_M","","",null,null],[17,"_SC_T_IOV_MAX","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"_SC_CHAR_BIT","","",null,null],[17,"_SC_CHAR_MAX","","",null,null],[17,"_SC_CHAR_MIN","","",null,null],[17,"_SC_INT_MAX","","",null,null],[17,"_SC_INT_MIN","","",null,null],[17,"_SC_LONG_BIT","","",null,null],[17,"_SC_WORD_BIT","","",null,null],[17,"_SC_MB_LEN_MAX","","",null,null],[17,"_SC_SSIZE_MAX","","",null,null],[17,"_SC_SCHAR_MAX","","",null,null],[17,"_SC_SCHAR_MIN","","",null,null],[17,"_SC_SHRT_MAX","","",null,null],[17,"_SC_SHRT_MIN","","",null,null],[17,"_SC_UCHAR_MAX","","",null,null],[17,"_SC_UINT_MAX","","",null,null],[17,"_SC_ULONG_MAX","","",null,null],[17,"_SC_USHRT_MAX","","",null,null],[17,"_SC_NL_ARGMAX","","",null,null],[17,"_SC_NL_LANGMAX","","",null,null],[17,"_SC_NL_MSGMAX","","",null,null],[17,"_SC_NL_NMAX","","",null,null],[17,"_SC_NL_SETMAX","","",null,null],[17,"_SC_NL_TEXTMAX","","",null,null],[17,"_SC_BASE","","",null,null],[17,"_SC_C_LANG_SUPPORT","","",null,null],[17,"_SC_C_LANG_SUPPORT_R","","",null,null],[17,"_SC_DEVICE_IO","","",null,null],[17,"_SC_DEVICE_SPECIFIC","","",null,null],[17,"_SC_DEVICE_SPECIFIC_R","","",null,null],[17,"_SC_FD_MGMT","","",null,null],[17,"_SC_FIFO","","",null,null],[17,"_SC_PIPE","","",null,null],[17,"_SC_FILE_ATTRIBUTES","","",null,null],[17,"_SC_FILE_LOCKING","","",null,null],[17,"_SC_FILE_SYSTEM","","",null,null],[17,"_SC_MULTI_PROCESS","","",null,null],[17,"_SC_SINGLE_PROCESS","","",null,null],[17,"_SC_NETWORKING","","",null,null],[17,"_SC_REGEX_VERSION","","",null,null],[17,"_SC_SIGNALS","","",null,null],[17,"_SC_SYSTEM_DATABASE","","",null,null],[17,"_SC_SYSTEM_DATABASE_R","","",null,null],[17,"_SC_USER_GROUPS","","",null,null],[17,"_SC_USER_GROUPS_R","","",null,null],[17,"_SC_LEVEL1_ICACHE_SIZE","","",null,null],[17,"_SC_LEVEL1_ICACHE_ASSOC","","",null,null],[17,"_SC_LEVEL1_ICACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL1_DCACHE_SIZE","","",null,null],[17,"_SC_LEVEL1_DCACHE_ASSOC","","",null,null],[17,"_SC_LEVEL1_DCACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL2_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL2_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL2_CACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL3_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL3_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL3_CACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL4_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL4_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL4_CACHE_LINESIZE","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"SEEK_DATA","","",null,null],[17,"SEEK_HOLE","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"LINUX_REBOOT_MAGIC1","","",null,null],[17,"LINUX_REBOOT_MAGIC2","","",null,null],[17,"LINUX_REBOOT_MAGIC2A","","",null,null],[17,"LINUX_REBOOT_MAGIC2B","","",null,null],[17,"LINUX_REBOOT_MAGIC2C","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART","","",null,null],[17,"LINUX_REBOOT_CMD_HALT","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_ON","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_POWER_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART2","","",null,null],[17,"LINUX_REBOOT_CMD_SW_SUSPEND","","",null,null],[17,"LINUX_REBOOT_CMD_KEXEC","","",null,null],[17,"NETLINK_ROUTE","","",null,null],[17,"NETLINK_UNUSED","","",null,null],[17,"NETLINK_USERSOCK","","",null,null],[17,"NETLINK_FIREWALL","","",null,null],[17,"NETLINK_SOCK_DIAG","","",null,null],[17,"NETLINK_NFLOG","","",null,null],[17,"NETLINK_XFRM","","",null,null],[17,"NETLINK_SELINUX","","",null,null],[17,"NETLINK_ISCSI","","",null,null],[17,"NETLINK_AUDIT","","",null,null],[17,"NETLINK_FIB_LOOKUP","","",null,null],[17,"NETLINK_CONNECTOR","","",null,null],[17,"NETLINK_NETFILTER","","",null,null],[17,"NETLINK_IP6_FW","","",null,null],[17,"NETLINK_DNRTMSG","","",null,null],[17,"NETLINK_KOBJECT_UEVENT","","",null,null],[17,"NETLINK_GENERIC","","",null,null],[17,"NETLINK_SCSITRANSPORT","","",null,null],[17,"NETLINK_ECRYPTFS","","",null,null],[17,"NETLINK_RDMA","","",null,null],[17,"NETLINK_CRYPTO","","",null,null],[17,"NETLINK_INET_DIAG","","",null,null],[17,"MAX_LINKS","","",null,null],[17,"NLM_F_REQUEST","","",null,null],[17,"NLM_F_MULTI","","",null,null],[17,"NLM_F_ACK","","",null,null],[17,"NLM_F_ECHO","","",null,null],[17,"NLM_F_DUMP_INTR","","",null,null],[17,"NLM_F_DUMP_FILTERED","","",null,null],[17,"NLM_F_ROOT","","",null,null],[17,"NLM_F_MATCH","","",null,null],[17,"NLM_F_ATOMIC","","",null,null],[17,"NLM_F_DUMP","","",null,null],[17,"NLM_F_REPLACE","","",null,null],[17,"NLM_F_EXCL","","",null,null],[17,"NLM_F_CREATE","","",null,null],[17,"NLM_F_APPEND","","",null,null],[17,"NLMSG_NOOP","","",null,null],[17,"NLMSG_ERROR","","",null,null],[17,"NLMSG_DONE","","",null,null],[17,"NLMSG_OVERRUN","","",null,null],[17,"NLMSG_MIN_TYPE","","",null,null],[17,"NETLINK_ADD_MEMBERSHIP","","",null,null],[17,"NETLINK_DROP_MEMBERSHIP","","",null,null],[17,"NETLINK_PKTINFO","","",null,null],[17,"NETLINK_BROADCAST_ERROR","","",null,null],[17,"NETLINK_NO_ENOBUFS","","",null,null],[17,"NETLINK_RX_RING","","",null,null],[17,"NETLINK_TX_RING","","",null,null],[17,"NETLINK_LISTEN_ALL_NSID","","",null,null],[17,"NETLINK_LIST_MEMBERSHIPS","","",null,null],[17,"NETLINK_CAP_ACK","","",null,null],[17,"NLA_F_NESTED","","",null,null],[17,"NLA_F_NET_BYTEORDER","","",null,null],[17,"NLA_TYPE_MASK","","",null,null],[17,"TIOCM_LE","","",null,null],[17,"TIOCM_DTR","","",null,null],[17,"TIOCM_RTS","","",null,null],[17,"TIOCM_ST","","",null,null],[17,"TIOCM_SR","","",null,null],[17,"TIOCM_CTS","","",null,null],[17,"TIOCM_CAR","","",null,null],[17,"TIOCM_RNG","","",null,null],[17,"TIOCM_DSR","","",null,null],[17,"TIOCM_CD","","",null,null],[17,"TIOCM_RI","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCKATTR_T","","",null,null],[17,"O_LARGEFILE","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"O_NOATIME","","",null,null],[17,"O_PATH","","",null,null],[17,"O_TMPFILE","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_SNDBUFFORCE","","",null,null],[17,"SO_RCVBUFFORCE","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_NO_CHECK","","",null,null],[17,"SO_PRIORITY","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_BSDCOMPAT","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_PASSCRED","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_SECURITY_AUTHENTICATION","","",null,null],[17,"SO_SECURITY_ENCRYPTION_TRANSPORT","","",null,null],[17,"SO_SECURITY_ENCRYPTION_NETWORK","","",null,null],[17,"SO_BINDTODEVICE","","",null,null],[17,"SO_ATTACH_FILTER","","",null,null],[17,"SO_DETACH_FILTER","","",null,null],[17,"SO_GET_FILTER","","",null,null],[17,"SO_PEERNAME","","",null,null],[17,"SO_TIMESTAMP","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_PEERSEC","","",null,null],[17,"SO_PASSSEC","","",null,null],[17,"SO_TIMESTAMPNS","","",null,null],[17,"SCM_TIMESTAMPNS","","",null,null],[17,"SO_MARK","","",null,null],[17,"SO_TIMESTAMPING","","",null,null],[17,"SCM_TIMESTAMPING","","",null,null],[17,"SO_PROTOCOL","","",null,null],[17,"SO_DOMAIN","","",null,null],[17,"SO_RXQ_OVFL","","",null,null],[17,"SO_WIFI_STATUS","","",null,null],[17,"SCM_WIFI_STATUS","","",null,null],[17,"SO_PEEK_OFF","","",null,null],[17,"SO_NOFCS","","",null,null],[17,"SO_LOCK_FILTER","","",null,null],[17,"SO_SELECT_ERR_QUEUE","","",null,null],[17,"SO_BUSY_POLL","","",null,null],[17,"SO_MAX_PACING_RATE","","",null,null],[17,"SO_BPF_EXTENSIONS","","",null,null],[17,"SO_INCOMING_CPU","","",null,null],[17,"SO_ATTACH_BPF","","",null,null],[17,"SO_DETACH_BPF","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"TIOCCONS","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"NCCS","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"EPOLL_CLOEXEC","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"__SIZEOF_PTHREAD_CONDATTR_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"PTRACE_PEEKSIGINFO_SHARED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"MINSIGSTKSZ","","",null,null],[17,"CBAUD","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF1","","",null,null],[17,"BS1","","",null,null],[17,"VT1","","",null,null],[17,"VWERASE","","",null,null],[17,"VREPRINT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"CIBAUD","","",null,null],[17,"CBAUDEX","","",null,null],[17,"VSWTC","","",null,null],[17,"OLCUC","","",null,null],[17,"NLDLY","","",null,null],[17,"CRDLY","","",null,null],[17,"TABDLY","","",null,null],[17,"BSDLY","","",null,null],[17,"FFDLY","","",null,null],[17,"VTDLY","","",null,null],[17,"XTABS","","",null,null],[17,"B0","","",null,null],[17,"B50","","",null,null],[17,"B75","","",null,null],[17,"B110","","",null,null],[17,"B134","","",null,null],[17,"B150","","",null,null],[17,"B200","","",null,null],[17,"B300","","",null,null],[17,"B600","","",null,null],[17,"B1200","","",null,null],[17,"B1800","","",null,null],[17,"B2400","","",null,null],[17,"B4800","","",null,null],[17,"B9600","","",null,null],[17,"B19200","","",null,null],[17,"B38400","","",null,null],[17,"EXTA","","",null,null],[17,"EXTB","","",null,null],[17,"BOTHER","","",null,null],[17,"B57600","","",null,null],[17,"B115200","","",null,null],[17,"B230400","","",null,null],[17,"B460800","","",null,null],[17,"B500000","","",null,null],[17,"B576000","","",null,null],[17,"B921600","","",null,null],[17,"B1000000","","",null,null],[17,"B1152000","","",null,null],[17,"B1500000","","",null,null],[17,"B2000000","","",null,null],[17,"B2500000","","",null,null],[17,"B3000000","","",null,null],[17,"B3500000","","",null,null],[17,"B4000000","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"EXTPROC","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"FIONREAD","","",null,null],[17,"R15","","",null,null],[17,"R14","","",null,null],[17,"R13","","",null,null],[17,"R12","","",null,null],[17,"RBP","","",null,null],[17,"RBX","","",null,null],[17,"R11","","",null,null],[17,"R10","","",null,null],[17,"R9","","",null,null],[17,"R8","","",null,null],[17,"RAX","","",null,null],[17,"RCX","","",null,null],[17,"RDX","","",null,null],[17,"RSI","","",null,null],[17,"RDI","","",null,null],[17,"ORIG_RAX","","",null,null],[17,"RIP","","",null,null],[17,"CS","","",null,null],[17,"EFLAGS","","",null,null],[17,"RSP","","",null,null],[17,"SS","","",null,null],[17,"FS_BASE","","",null,null],[17,"GS_BASE","","",null,null],[17,"DS","","",null,null],[17,"ES","","",null,null],[17,"FS","","",null,null],[17,"GS","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"SYS_read","","",null,null],[17,"SYS_write","","",null,null],[17,"SYS_open","","",null,null],[17,"SYS_close","","",null,null],[17,"SYS_stat","","",null,null],[17,"SYS_fstat","","",null,null],[17,"SYS_lstat","","",null,null],[17,"SYS_poll","","",null,null],[17,"SYS_lseek","","",null,null],[17,"SYS_mmap","","",null,null],[17,"SYS_mprotect","","",null,null],[17,"SYS_munmap","","",null,null],[17,"SYS_brk","","",null,null],[17,"SYS_rt_sigaction","","",null,null],[17,"SYS_rt_sigprocmask","","",null,null],[17,"SYS_rt_sigreturn","","",null,null],[17,"SYS_ioctl","","",null,null],[17,"SYS_pread64","","",null,null],[17,"SYS_pwrite64","","",null,null],[17,"SYS_readv","","",null,null],[17,"SYS_writev","","",null,null],[17,"SYS_access","","",null,null],[17,"SYS_pipe","","",null,null],[17,"SYS_select","","",null,null],[17,"SYS_sched_yield","","",null,null],[17,"SYS_mremap","","",null,null],[17,"SYS_msync","","",null,null],[17,"SYS_mincore","","",null,null],[17,"SYS_madvise","","",null,null],[17,"SYS_shmget","","",null,null],[17,"SYS_shmat","","",null,null],[17,"SYS_shmctl","","",null,null],[17,"SYS_dup","","",null,null],[17,"SYS_dup2","","",null,null],[17,"SYS_pause","","",null,null],[17,"SYS_nanosleep","","",null,null],[17,"SYS_getitimer","","",null,null],[17,"SYS_alarm","","",null,null],[17,"SYS_setitimer","","",null,null],[17,"SYS_getpid","","",null,null],[17,"SYS_sendfile","","",null,null],[17,"SYS_socket","","",null,null],[17,"SYS_connect","","",null,null],[17,"SYS_accept","","",null,null],[17,"SYS_sendto","","",null,null],[17,"SYS_recvfrom","","",null,null],[17,"SYS_sendmsg","","",null,null],[17,"SYS_recvmsg","","",null,null],[17,"SYS_shutdown","","",null,null],[17,"SYS_bind","","",null,null],[17,"SYS_listen","","",null,null],[17,"SYS_getsockname","","",null,null],[17,"SYS_getpeername","","",null,null],[17,"SYS_socketpair","","",null,null],[17,"SYS_setsockopt","","",null,null],[17,"SYS_getsockopt","","",null,null],[17,"SYS_clone","","",null,null],[17,"SYS_fork","","",null,null],[17,"SYS_vfork","","",null,null],[17,"SYS_execve","","",null,null],[17,"SYS_exit","","",null,null],[17,"SYS_wait4","","",null,null],[17,"SYS_kill","","",null,null],[17,"SYS_uname","","",null,null],[17,"SYS_semget","","",null,null],[17,"SYS_semop","","",null,null],[17,"SYS_semctl","","",null,null],[17,"SYS_shmdt","","",null,null],[17,"SYS_msgget","","",null,null],[17,"SYS_msgsnd","","",null,null],[17,"SYS_msgrcv","","",null,null],[17,"SYS_msgctl","","",null,null],[17,"SYS_fcntl","","",null,null],[17,"SYS_flock","","",null,null],[17,"SYS_fsync","","",null,null],[17,"SYS_fdatasync","","",null,null],[17,"SYS_truncate","","",null,null],[17,"SYS_ftruncate","","",null,null],[17,"SYS_getdents","","",null,null],[17,"SYS_getcwd","","",null,null],[17,"SYS_chdir","","",null,null],[17,"SYS_fchdir","","",null,null],[17,"SYS_rename","","",null,null],[17,"SYS_mkdir","","",null,null],[17,"SYS_rmdir","","",null,null],[17,"SYS_creat","","",null,null],[17,"SYS_link","","",null,null],[17,"SYS_unlink","","",null,null],[17,"SYS_symlink","","",null,null],[17,"SYS_readlink","","",null,null],[17,"SYS_chmod","","",null,null],[17,"SYS_fchmod","","",null,null],[17,"SYS_chown","","",null,null],[17,"SYS_fchown","","",null,null],[17,"SYS_lchown","","",null,null],[17,"SYS_umask","","",null,null],[17,"SYS_gettimeofday","","",null,null],[17,"SYS_getrlimit","","",null,null],[17,"SYS_getrusage","","",null,null],[17,"SYS_sysinfo","","",null,null],[17,"SYS_times","","",null,null],[17,"SYS_ptrace","","",null,null],[17,"SYS_getuid","","",null,null],[17,"SYS_syslog","","",null,null],[17,"SYS_getgid","","",null,null],[17,"SYS_setuid","","",null,null],[17,"SYS_setgid","","",null,null],[17,"SYS_geteuid","","",null,null],[17,"SYS_getegid","","",null,null],[17,"SYS_setpgid","","",null,null],[17,"SYS_getppid","","",null,null],[17,"SYS_getpgrp","","",null,null],[17,"SYS_setsid","","",null,null],[17,"SYS_setreuid","","",null,null],[17,"SYS_setregid","","",null,null],[17,"SYS_getgroups","","",null,null],[17,"SYS_setgroups","","",null,null],[17,"SYS_setresuid","","",null,null],[17,"SYS_getresuid","","",null,null],[17,"SYS_setresgid","","",null,null],[17,"SYS_getresgid","","",null,null],[17,"SYS_getpgid","","",null,null],[17,"SYS_setfsuid","","",null,null],[17,"SYS_setfsgid","","",null,null],[17,"SYS_getsid","","",null,null],[17,"SYS_capget","","",null,null],[17,"SYS_capset","","",null,null],[17,"SYS_rt_sigpending","","",null,null],[17,"SYS_rt_sigtimedwait","","",null,null],[17,"SYS_rt_sigqueueinfo","","",null,null],[17,"SYS_rt_sigsuspend","","",null,null],[17,"SYS_sigaltstack","","",null,null],[17,"SYS_utime","","",null,null],[17,"SYS_mknod","","",null,null],[17,"SYS_uselib","","",null,null],[17,"SYS_personality","","",null,null],[17,"SYS_ustat","","",null,null],[17,"SYS_statfs","","",null,null],[17,"SYS_fstatfs","","",null,null],[17,"SYS_sysfs","","",null,null],[17,"SYS_getpriority","","",null,null],[17,"SYS_setpriority","","",null,null],[17,"SYS_sched_setparam","","",null,null],[17,"SYS_sched_getparam","","",null,null],[17,"SYS_sched_setscheduler","","",null,null],[17,"SYS_sched_getscheduler","","",null,null],[17,"SYS_sched_get_priority_max","","",null,null],[17,"SYS_sched_get_priority_min","","",null,null],[17,"SYS_sched_rr_get_interval","","",null,null],[17,"SYS_mlock","","",null,null],[17,"SYS_munlock","","",null,null],[17,"SYS_mlockall","","",null,null],[17,"SYS_munlockall","","",null,null],[17,"SYS_vhangup","","",null,null],[17,"SYS_modify_ldt","","",null,null],[17,"SYS_pivot_root","","",null,null],[17,"SYS__sysctl","","",null,null],[17,"SYS_prctl","","",null,null],[17,"SYS_arch_prctl","","",null,null],[17,"SYS_adjtimex","","",null,null],[17,"SYS_setrlimit","","",null,null],[17,"SYS_chroot","","",null,null],[17,"SYS_sync","","",null,null],[17,"SYS_acct","","",null,null],[17,"SYS_settimeofday","","",null,null],[17,"SYS_mount","","",null,null],[17,"SYS_umount2","","",null,null],[17,"SYS_swapon","","",null,null],[17,"SYS_swapoff","","",null,null],[17,"SYS_reboot","","",null,null],[17,"SYS_sethostname","","",null,null],[17,"SYS_setdomainname","","",null,null],[17,"SYS_iopl","","",null,null],[17,"SYS_ioperm","","",null,null],[17,"SYS_create_module","","",null,null],[17,"SYS_init_module","","",null,null],[17,"SYS_delete_module","","",null,null],[17,"SYS_get_kernel_syms","","",null,null],[17,"SYS_query_module","","",null,null],[17,"SYS_quotactl","","",null,null],[17,"SYS_nfsservctl","","",null,null],[17,"SYS_getpmsg","","",null,null],[17,"SYS_putpmsg","","",null,null],[17,"SYS_afs_syscall","","",null,null],[17,"SYS_tuxcall","","",null,null],[17,"SYS_security","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_readahead","","",null,null],[17,"SYS_setxattr","","",null,null],[17,"SYS_lsetxattr","","",null,null],[17,"SYS_fsetxattr","","",null,null],[17,"SYS_getxattr","","",null,null],[17,"SYS_lgetxattr","","",null,null],[17,"SYS_fgetxattr","","",null,null],[17,"SYS_listxattr","","",null,null],[17,"SYS_llistxattr","","",null,null],[17,"SYS_flistxattr","","",null,null],[17,"SYS_removexattr","","",null,null],[17,"SYS_lremovexattr","","",null,null],[17,"SYS_fremovexattr","","",null,null],[17,"SYS_tkill","","",null,null],[17,"SYS_time","","",null,null],[17,"SYS_futex","","",null,null],[17,"SYS_sched_setaffinity","","",null,null],[17,"SYS_sched_getaffinity","","",null,null],[17,"SYS_set_thread_area","","",null,null],[17,"SYS_io_setup","","",null,null],[17,"SYS_io_destroy","","",null,null],[17,"SYS_io_getevents","","",null,null],[17,"SYS_io_submit","","",null,null],[17,"SYS_io_cancel","","",null,null],[17,"SYS_get_thread_area","","",null,null],[17,"SYS_lookup_dcookie","","",null,null],[17,"SYS_epoll_create","","",null,null],[17,"SYS_epoll_ctl_old","","",null,null],[17,"SYS_epoll_wait_old","","",null,null],[17,"SYS_remap_file_pages","","",null,null],[17,"SYS_getdents64","","",null,null],[17,"SYS_set_tid_address","","",null,null],[17,"SYS_restart_syscall","","",null,null],[17,"SYS_semtimedop","","",null,null],[17,"SYS_fadvise64","","",null,null],[17,"SYS_timer_create","","",null,null],[17,"SYS_timer_settime","","",null,null],[17,"SYS_timer_gettime","","",null,null],[17,"SYS_timer_getoverrun","","",null,null],[17,"SYS_timer_delete","","",null,null],[17,"SYS_clock_settime","","",null,null],[17,"SYS_clock_gettime","","",null,null],[17,"SYS_clock_getres","","",null,null],[17,"SYS_clock_nanosleep","","",null,null],[17,"SYS_exit_group","","",null,null],[17,"SYS_epoll_wait","","",null,null],[17,"SYS_epoll_ctl","","",null,null],[17,"SYS_tgkill","","",null,null],[17,"SYS_utimes","","",null,null],[17,"SYS_vserver","","",null,null],[17,"SYS_mbind","","",null,null],[17,"SYS_set_mempolicy","","",null,null],[17,"SYS_get_mempolicy","","",null,null],[17,"SYS_mq_open","","",null,null],[17,"SYS_mq_unlink","","",null,null],[17,"SYS_mq_timedsend","","",null,null],[17,"SYS_mq_timedreceive","","",null,null],[17,"SYS_mq_notify","","",null,null],[17,"SYS_mq_getsetattr","","",null,null],[17,"SYS_kexec_load","","",null,null],[17,"SYS_waitid","","",null,null],[17,"SYS_add_key","","",null,null],[17,"SYS_request_key","","",null,null],[17,"SYS_keyctl","","",null,null],[17,"SYS_ioprio_set","","",null,null],[17,"SYS_ioprio_get","","",null,null],[17,"SYS_inotify_init","","",null,null],[17,"SYS_inotify_add_watch","","",null,null],[17,"SYS_inotify_rm_watch","","",null,null],[17,"SYS_migrate_pages","","",null,null],[17,"SYS_openat","","",null,null],[17,"SYS_mkdirat","","",null,null],[17,"SYS_mknodat","","",null,null],[17,"SYS_fchownat","","",null,null],[17,"SYS_futimesat","","",null,null],[17,"SYS_newfstatat","","",null,null],[17,"SYS_unlinkat","","",null,null],[17,"SYS_renameat","","",null,null],[17,"SYS_linkat","","",null,null],[17,"SYS_symlinkat","","",null,null],[17,"SYS_readlinkat","","",null,null],[17,"SYS_fchmodat","","",null,null],[17,"SYS_faccessat","","",null,null],[17,"SYS_pselect6","","",null,null],[17,"SYS_ppoll","","",null,null],[17,"SYS_unshare","","",null,null],[17,"SYS_set_robust_list","","",null,null],[17,"SYS_get_robust_list","","",null,null],[17,"SYS_splice","","",null,null],[17,"SYS_tee","","",null,null],[17,"SYS_sync_file_range","","",null,null],[17,"SYS_vmsplice","","",null,null],[17,"SYS_move_pages","","",null,null],[17,"SYS_utimensat","","",null,null],[17,"SYS_epoll_pwait","","",null,null],[17,"SYS_signalfd","","",null,null],[17,"SYS_timerfd_create","","",null,null],[17,"SYS_eventfd","","",null,null],[17,"SYS_fallocate","","",null,null],[17,"SYS_timerfd_settime","","",null,null],[17,"SYS_timerfd_gettime","","",null,null],[17,"SYS_accept4","","",null,null],[17,"SYS_signalfd4","","",null,null],[17,"SYS_eventfd2","","",null,null],[17,"SYS_epoll_create1","","",null,null],[17,"SYS_dup3","","",null,null],[17,"SYS_pipe2","","",null,null],[17,"SYS_inotify_init1","","",null,null],[17,"SYS_preadv","","",null,null],[17,"SYS_pwritev","","",null,null],[17,"SYS_rt_tgsigqueueinfo","","",null,null],[17,"SYS_perf_event_open","","",null,null],[17,"SYS_recvmmsg","","",null,null],[17,"SYS_fanotify_init","","",null,null],[17,"SYS_fanotify_mark","","",null,null],[17,"SYS_prlimit64","","",null,null],[17,"SYS_name_to_handle_at","","",null,null],[17,"SYS_open_by_handle_at","","",null,null],[17,"SYS_clock_adjtime","","",null,null],[17,"SYS_syncfs","","",null,null],[17,"SYS_sendmmsg","","",null,null],[17,"SYS_setns","","",null,null],[17,"SYS_getcpu","","",null,null],[17,"SYS_process_vm_readv","","",null,null],[17,"SYS_process_vm_writev","","",null,null],[17,"SYS_kcmp","","",null,null],[17,"SYS_finit_module","","",null,null],[17,"SYS_sched_setattr","","",null,null],[17,"SYS_sched_getattr","","",null,null],[17,"SYS_renameat2","","",null,null],[17,"SYS_seccomp","","",null,null],[17,"SYS_getrandom","","",null,null],[17,"SYS_memfd_create","","",null,null],[17,"SYS_kexec_file_load","","",null,null],[17,"SYS_bpf","","",null,null],[17,"SYS_execveat","","",null,null],[17,"SYS_userfaultfd","","",null,null],[17,"SYS_membarrier","","",null,null],[17,"SYS_mlock2","","",null,null],[17,"SYS_copy_file_range","","",null,null],[17,"SYS_preadv2","","",null,null],[17,"SYS_pwritev2","","",null,null],[17,"SYS_pkey_mprotect","","",null,null],[17,"SYS_pkey_alloc","","",null,null],[17,"SYS_pkey_free","","",null,null]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"itimerval"],[3,"tms"],[3,"servent"],[3,"protoent"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"sigevent"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"passwd"],[3,"spwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"itimerspec"],[3,"mq_attr"],[3,"if_nameindex"],[3,"msginfo"],[3,"mmsghdr"],[3,"sembuf"],[3,"input_event"],[3,"input_id"],[3,"input_absinfo"],[3,"input_keymap_entry"],[3,"input_mask"],[3,"ff_replay"],[3,"ff_trigger"],[3,"ff_envelope"],[3,"ff_constant_effect"],[3,"ff_ramp_effect"],[3,"ff_condition_effect"],[3,"ff_periodic_effect"],[3,"ff_rumble_effect"],[3,"ff_effect"],[3,"dl_phdr_info"],[3,"Elf32_Phdr"],[3,"Elf64_Phdr"],[3,"aiocb"],[3,"__exit_status"],[3,"__timeval"],[3,"utmpx"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"cmsghdr"],[3,"termios"],[3,"flock"],[3,"sysinfo"],[3,"msqid_ds"],[3,"stat"],[3,"stat64"],[3,"statfs64"],[3,"statvfs64"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"user_fpregs_struct"],[3,"user_regs_struct"],[3,"user"],[3,"mcontext_t"],[3,"ucontext_t"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"termios2"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"sem_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_rwlockattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"fd_set"]]};
searchIndex["muldiv"] = {"doc":"Provides a trait for numeric types to perform combined multiplication and division with overflow protection.","items":[[8,"MulDiv","muldiv","Trait for calculating `val * num / denom` with different rounding modes and overflow protection.",null,null],[16,"Output","","",0,null],[10,"mul_div_floor","","Calculates `floor(val * num / denom)`, i.e. the next integer to the result of the division with the smaller absolute value.",0,{"inputs":[{"name":"self"},{"name":"rhs"},{"name":"rhs"}],"output":{"name":"option"}}],[10,"mul_div_round","","Calculates `round(val * num / denom)`, i.e. the closest integer to the result of the division. If both surrounding integers are the same distance, the one with the bigger absolute value is returned.",0,{"inputs":[{"name":"self"},{"name":"rhs"},{"name":"rhs"}],"output":{"name":"option"}}],[10,"mul_div_ceil","","Calculates `ceil(val * num / denom)`, i.e. the next integer to the result of the division with the bigger absolute value.",0,{"inputs":[{"name":"self"},{"name":"rhs"},{"name":"rhs"}],"output":{"name":"option"}}]],"paths":[[8,"MulDiv"]]};
searchIndex["nodrop"] = {"doc":"The nodrop crate has the following cargo feature flags:","items":[[3,"NoDrop","nodrop","A type holding T that will not call its destructor on drop",null,null],[11,"new","","Create a new NoDrop.",0,{"inputs":[{"name":"t"}],"output":{"name":"nodrop"}}],[11,"into_inner","","Extract the inner value.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}]],"paths":[[3,"NoDrop"]]};
searchIndex["num_integer"] = {"doc":"Integer trait and functions.","items":[[3,"IterBinomial","num_integer","An iterator over binomial coefficients.",null,null],[5,"div_rem","","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The result is always positive.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"binomial","","Calculate the binomial coefficient.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"multinomial","","Calculate the multinomial coefficient.",null,null],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus. Returns `(quotient, remainder)`.",0,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns `(quotient, remainder)`.",0,null],[11,"new","","For a given n, iterate over all binomial coefficients binomial(n, k), for k=0...n.",1,{"inputs":[{"name":"t"}],"output":{"name":"iterbinomial"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[8,"Integer"],[3,"IterBinomial"]]};
searchIndex["num_rational"] = {"doc":"Rational numbers","items":[[3,"Ratio","num_rational","Represents the ratio between 2 numbers.",null,null],[3,"ParseRatioError","","",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"Rational32","","",null,null],[6,"Rational64","","",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Ratio`. Fails if `denom` is zero.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"from_integer","","Creates a `Ratio` representing the integer `t`.",0,{"inputs":[{"name":"t"}],"output":{"name":"ratio"}}],[11,"new_raw","","Creates a `Ratio` without checking for `denom == 0` or reducing.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"to_integer","","Converts to an integer, rounding towards zero.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"numer","","Gets an immutable reference to the numerator.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"denom","","Gets an immutable reference to the denominator.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"is_integer","","Returns true if the rational number is an integer (denominator is 1).",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"reduced","","Returns a reduced copy of self.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"recip","","Returns the reciprocal.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"floor","","Rounds towards minus infinity.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"ceil","","Rounds towards plus infinity.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away from zero.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"trunc","","Rounds towards zero.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"fract","","Returns the fractional part of a number, with division rounded towards zero.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"pow","","Raises the `Ratio` to the power of an exponent.",0,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"ratio"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"ratio"}}],[11,"from","","",0,null],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"zero","","",0,{"inputs":[],"output":{"name":"ratio"}}],[11,"is_zero","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",0,{"inputs":[],"output":{"name":"ratio"}}],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",0,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"generics":["ratio","parseratioerror"],"name":"result"}}],[11,"abs","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"abs_sub","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"signum","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"is_positive","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_negative","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Parses `numer/denom` or just `numer`.",0,{"inputs":[{"name":"str"}],"output":{"generics":["ratio","parseratioerror"],"name":"result"}}],[11,"into","","",0,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"parseratioerror"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"approximate_float","","",0,{"inputs":[{"name":"f"}],"output":{"generics":["ratio"],"name":"option"}}]],"paths":[[3,"Ratio"],[3,"ParseRatioError"]]};
searchIndex["num_traits"] = {"doc":"Numeric traits for generic mathematics","items":[[3,"ParseFloatError","num_traits","",null,null],[12,"kind","","",0,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",1,null],[13,"Invalid","","",1,null],[5,"clamp","","A value bounded by a minimum and a maximum",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"identities","","",null,null],[5,"zero","num_traits::identities","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,{"inputs":[],"output":{"name":"self"}}],[0,"sign","num_traits","",null,null],[5,"abs","num_traits::sign","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"ops","num_traits","",null,null],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on overflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[0,"wrapping","num_traits::ops","",null,null],[8,"WrappingAdd","num_traits::ops::wrapping","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",10,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[0,"bounds","num_traits","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",13,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",13,{"inputs":[],"output":{"name":"self"}}],[0,"float","num_traits","",null,null],[8,"Float","num_traits::float","",null,null],[10,"nan","","Returns the `NaN` value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",14,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",14,{"inputs":[{"name":"self"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and with newer versions of Rust `f64::NAN`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and with newer versions of Rust `-f64::NAN`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This produces a more accurate result with better performance than a separate multiplication operation followed by an add.",14,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",14,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_degrees","","Converts radians to degrees.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_radians","","Converts degrees to radians.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",14,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`. The floating point encoding is documented in the [Reference][floating-point].",14,null],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_PI","","Return `1.0 / π`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_PI","","Return `2.0 / π`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_2","","Return `π / 2.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_3","","Return `π / 3.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_4","","Return `π / 4.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_6","","Return `π / 6.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_8","","Return `π / 8.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LN_10","","Return `ln(10.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LN_2","","Return `ln(2.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LOG10_E","","Return `log10(e)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LOG2_E","","Return `log2(e)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"PI","","Return Archimedes’ constant.",15,{"inputs":[],"output":{"name":"self"}}],[10,"SQRT_2","","Return `sqrt(2.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[0,"cast","num_traits","",null,null],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",16,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",16,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",16,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",16,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",16,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",16,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",16,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",16,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",16,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",16,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",16,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",16,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",18,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[0,"pow","num_traits","",null,null],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[8,"Num","num_traits","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion.",null,null],[16,"FromStrRadixErr","","",20,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",20,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"NumOps","","The trait for types implementing basic numeric operations",null,null],[8,"NumRef","","The trait for `Num` types which also implement numeric operations taking the second operand by reference.",null,null],[8,"RefNum","","The trait for references which implement numeric operations, taking the second operand either by value or by reference.",null,null],[8,"NumAssignOps","","The trait for types implementing numeric assignment operators (like `+=`).",null,null],[8,"NumAssign","","The trait for `Num` types which also implement assignment operators.",null,null],[8,"NumAssignRef","","The trait for `NumAssign` types which also implement assignment operations taking the second operand by reference.",null,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"WrappingAdd"],[8,"WrappingSub"],[8,"WrappingMul"],[8,"Bounded"],[8,"Float"],[8,"FloatConst"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"PrimInt"],[8,"Num"]]};
initSearch(searchIndex);
